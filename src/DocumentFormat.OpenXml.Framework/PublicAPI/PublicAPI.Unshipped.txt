#nullable enable
DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage>
DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage>.Build() -> DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage!>!
DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage>.Clone() -> DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>!
DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage>.Properties.get -> System.Collections.Generic.IDictionary<string!, object?>!
DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage>.Use(System.Func<DocumentFormat.OpenXml.Builder.PackageInitializerDelegate<TPackage!>!, DocumentFormat.OpenXml.Builder.PackageInitializerDelegate<TPackage!>!>! configure) -> DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>!
DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage>
DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage>.Create(DocumentFormat.OpenXml.Features.IPackageInitializer! initializer) -> TPackage
DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions
DocumentFormat.OpenXml.Builder.PackageInitializerDelegate<TPackage>
DocumentFormat.OpenXml.Builder.PackageOpenMode
DocumentFormat.OpenXml.Builder.PackageOpenMode.Create = 0 -> DocumentFormat.OpenXml.Builder.PackageOpenMode
DocumentFormat.OpenXml.Builder.PackageOpenMode.Read = 1 -> DocumentFormat.OpenXml.Builder.PackageOpenMode
DocumentFormat.OpenXml.Builder.PackageOpenMode.ReadWrite = 2 -> DocumentFormat.OpenXml.Builder.PackageOpenMode
DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions
DocumentFormat.OpenXml.Builder.TemplateBuilderExtensions
DocumentFormat.OpenXml.Features.IPackageInitializer
DocumentFormat.OpenXml.Features.IPackageInitializer.Initialize(DocumentFormat.OpenXml.Packaging.OpenXmlPackage! package) -> void
DocumentFormat.OpenXml.Features.ISchemaTrackingFeature
DocumentFormat.OpenXml.Features.ISchemaTrackingFeature.Relationships.get -> System.Collections.Generic.ICollection<string!>!
DocumentFormat.OpenXml.Features.ISchemaTrackingFeature.RootElements.get -> System.Collections.Generic.ICollection<DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName>!
DocumentFormat.OpenXml.Framework.OpenXmlNamespace
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.CompareTo(DocumentFormat.OpenXml.Framework.OpenXmlNamespace other) -> int
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Equals(DocumentFormat.OpenXml.Framework.OpenXmlNamespace other) -> bool
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.IsEmpty.get -> bool
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.OpenXmlNamespace() -> void
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.OpenXmlNamespace(string! nsUri) -> void
DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Uri.get -> string!
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.CompareTo(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName other) -> int
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Equals(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName other) -> bool
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Name.get -> string!
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Namespace.get -> DocumentFormat.OpenXml.Framework.OpenXmlNamespace
DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.OpenXmlQualifiedName() -> void
override DocumentFormat.OpenXml.Framework.OpenXmlNamespace.Equals(object? obj) -> bool
override DocumentFormat.OpenXml.Framework.OpenXmlNamespace.GetHashCode() -> int
override DocumentFormat.OpenXml.Framework.OpenXmlNamespace.ToString() -> string!
override DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.Equals(object? obj) -> bool
override DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.GetHashCode() -> int
override DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.ToString() -> string!
static DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open<TPackage>(this DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage!>! builder, string! file, DocumentFormat.OpenXml.Builder.PackageOpenMode mode) -> TPackage!
static DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open<TPackage>(this DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage!>! builder, System.IO.Packaging.Package! package) -> TPackage!
static DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Open<TPackage>(this DocumentFormat.OpenXml.Builder.IPackageFactory<TPackage!>! builder, System.IO.Stream! stream, DocumentFormat.OpenXml.Builder.PackageOpenMode mode) -> TPackage!
static DocumentFormat.OpenXml.Builder.OpenXmlPackageBuilderExtensions.Use<TPackage>(this DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>! builder, System.Action<TPackage!, DocumentFormat.OpenXml.Builder.PackageInitializerDelegate<TPackage!>!>! middleware) -> DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>!
static DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions.GetSchemaTracker<T>(this DocumentFormat.OpenXml.Builder.IPackageBuilder<T!>! builder) -> DocumentFormat.OpenXml.Features.ISchemaTrackingFeature!
static DocumentFormat.OpenXml.Builder.SchemaTrackingExtensions.UseSchemaTracker<T>(this DocumentFormat.OpenXml.Builder.IPackageBuilder<T!>! builder) -> DocumentFormat.OpenXml.Builder.IPackageBuilder<T!>!
static DocumentFormat.OpenXml.Builder.TemplateBuilderExtensions.UseTemplate<TPackage, TType>(this DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>! builder, string! path, TType type) -> DocumentFormat.OpenXml.Builder.IPackageBuilder<TPackage!>!
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.implicit operator DocumentFormat.OpenXml.Framework.OpenXmlNamespace(string! nsUri) -> DocumentFormat.OpenXml.Framework.OpenXmlNamespace
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator !=(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator <(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator <=(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator ==(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator >(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlNamespace.operator >=(DocumentFormat.OpenXml.Framework.OpenXmlNamespace left, DocumentFormat.OpenXml.Framework.OpenXmlNamespace right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator !=(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator <(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator <=(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator ==(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator >(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
static DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName.operator >=(DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName left, DocumentFormat.OpenXml.Framework.OpenXmlQualifiedName right) -> bool
virtual DocumentFormat.OpenXml.Builder.PackageInitializerDelegate<TPackage>.Invoke(TPackage package) -> void

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Office.Drawing;
using DocumentFormat.OpenXml.Office2010.Drawing;
using DocumentFormat.OpenXml.Office2010.Drawing.Diagram;
using DocumentFormat.OpenXml.Office2013.Drawing;
using DocumentFormat.OpenXml.Office2013.Theme;
using DocumentFormat.OpenXml.Office2013.Word.Drawing;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Validation.Semantic;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Drawing
{
    /// <summary>
    /// <para>Audio from CD.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:audioCd.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>StartTime &lt;a:st></description></item>
    ///   <item><description>EndTime &lt;a:end></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class AudioFromCD : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioFromCD class.
        /// </summary>
        public AudioFromCD() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromCD(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromCD(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AudioFromCD(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "audioCd");
            builder.AddChild<StartTime>();
            builder.AddChild<EndTime>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.StartTime), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EndTime), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Audio Start Time.</para>
        /// <para>Represents the following element tag in the schema: a:st.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public StartTime StartTime
        {
            get => GetElement<StartTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Audio End Time.</para>
        /// <para>Represents the following element tag in the schema: a:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EndTime EndTime
        {
            get => GetElement<EndTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromCD>(deep);
    }

    /// <summary>
    /// <para>Audio from WAV File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:wavAudioFile.</para>
    /// </summary>
    public partial class WaveAudioFile : EmbeddedWavAudioFileType
    {
        /// <summary>
        /// Initializes a new instance of the WaveAudioFile class.
        /// </summary>
        public WaveAudioFile() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "wavAudioFile");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WaveAudioFile>(deep);
    }

    /// <summary>
    /// <para>Hyperlink Sound.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:snd.</para>
    /// </summary>
    public partial class HyperlinkSound : EmbeddedWavAudioFileType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkSound class.
        /// </summary>
        public HyperlinkSound() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "snd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkSound>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbeddedWavAudioFileType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmbeddedWavAudioFileType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmbeddedWavAudioFileType class.
        /// </summary>
        protected EmbeddedWavAudioFileType() : base()
        {
        }

        /// <summary>
        /// <para>Embedded Audio File Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:embed</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Embed
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Sound Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Recognized Built-In Sound</para>
        /// <para>Represents the following attribute in the schema: builtIn</para>
        /// </summary>
        public BooleanValue BuiltIn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<EmbeddedWavAudioFileType>()
                           .AddAttribute(19, "embed", a => a.Embed, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           })
                           .AddAttribute(0, "name", a => a.Name)
                           .AddAttribute(0, "builtIn", a => a.BuiltIn);
        }
    }

    /// <summary>
    /// <para>Audio from File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:audioFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class AudioFromFile : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioFromFile class.
        /// </summary>
        public AudioFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AudioFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "audioFile");
            builder.AddChild<ExtensionList>();
            builder.AddElement<AudioFromFile>()
.AddAttribute(19, "link", a => a.Link, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromFile>(deep);
    }

    /// <summary>
    /// <para>Video from File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:videoFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class VideoFromFile : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the VideoFromFile class.
        /// </summary>
        public VideoFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VideoFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VideoFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public VideoFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "videoFile");
            builder.AddChild<ExtensionList>();
            builder.AddElement<VideoFromFile>()
.AddAttribute(19, "link", a => a.Link, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VideoFromFile>(deep);
    }

    /// <summary>
    /// <para>QuickTime from File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:quickTimeFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class QuickTimeFromFile : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class.
        /// </summary>
        public QuickTimeFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuickTimeFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuickTimeFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public QuickTimeFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "quickTimeFile");
            builder.AddChild<ExtensionList>();
            builder.AddElement<QuickTimeFromFile>()
.AddAttribute(19, "link", a => a.Link, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuickTimeFromFile>(deep);
    }

    /// <summary>
    /// <para>Tint.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tint.</para>
    /// </summary>
    public partial class Tint : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Tint class.
        /// </summary>
        public Tint() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tint");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tint>(deep);
    }

    /// <summary>
    /// <para>Shade.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:shade.</para>
    /// </summary>
    public partial class Shade : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Shade class.
        /// </summary>
        public Shade() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "shade");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shade>(deep);
    }

    /// <summary>
    /// <para>Alpha.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alpha.</para>
    /// </summary>
    public partial class Alpha : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Alpha class.
        /// </summary>
        public Alpha() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alpha");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Alpha>(deep);
    }

    /// <summary>
    /// <para>Defines the PositiveFixedPercentageType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositiveFixedPercentageType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositiveFixedPercentageType class.
        /// </summary>
        protected PositiveFixedPercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositiveFixedPercentageType>()
                           .AddAttribute(0, "val", a => a.Val, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                           });
        }
    }

    /// <summary>
    /// <para>Complement.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:comp.</para>
    /// </summary>
    public partial class Complement : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Complement class.
        /// </summary>
        public Complement() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "comp");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Complement>(deep);
    }

    /// <summary>
    /// <para>Inverse.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:inv.</para>
    /// </summary>
    public partial class Inverse : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Inverse class.
        /// </summary>
        public Inverse() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "inv");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inverse>(deep);
    }

    /// <summary>
    /// <para>Gray.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gray.</para>
    /// </summary>
    public partial class Gray : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gray class.
        /// </summary>
        public Gray() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gray");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gray>(deep);
    }

    /// <summary>
    /// <para>Alpha Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaOff.</para>
    /// </summary>
    public partial class AlphaOffset : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaOffset class.
        /// </summary>
        public AlphaOffset() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaOff");
            builder.AddElement<AlphaOffset>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOffset>(deep);
    }

    /// <summary>
    /// <para>Alpha Modulation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaMod.</para>
    /// </summary>
    public partial class AlphaModulation : PositivePercentageType
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulation class.
        /// </summary>
        public AlphaModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulation>(deep);
    }

    /// <summary>
    /// <para>Hue Modulate.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hueMod.</para>
    /// </summary>
    public partial class HueModulation : PositivePercentageType
    {
        /// <summary>
        /// Initializes a new instance of the HueModulation class.
        /// </summary>
        public HueModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hueMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueModulation>(deep);
    }

    /// <summary>
    /// <para>Defines the PositivePercentageType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositivePercentageType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositivePercentageType class.
        /// </summary>
        protected PositivePercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositivePercentageType>()
                           .AddAttribute(0, "val", a => a.Val, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                           });
        }
    }

    /// <summary>
    /// <para>Hue.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hue.</para>
    /// </summary>
    public partial class Hue : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Hue class.
        /// </summary>
        public Hue() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hue");
            builder.AddElement<Hue>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
   aBuilder.AddValidator(RequiredValidator.Instance);
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hue>(deep);
    }

    /// <summary>
    /// <para>Hue Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hueOff.</para>
    /// </summary>
    public partial class HueOffset : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HueOffset class.
        /// </summary>
        public HueOffset() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hueOff");
            builder.AddElement<HueOffset>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueOffset>(deep);
    }

    /// <summary>
    /// <para>Saturation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sat.</para>
    /// </summary>
    public partial class Saturation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Saturation class.
        /// </summary>
        public Saturation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sat");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Saturation>(deep);
    }

    /// <summary>
    /// <para>Saturation Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:satOff.</para>
    /// </summary>
    public partial class SaturationOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the SaturationOffset class.
        /// </summary>
        public SaturationOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "satOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationOffset>(deep);
    }

    /// <summary>
    /// <para>Saturation Modulation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:satMod.</para>
    /// </summary>
    public partial class SaturationModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the SaturationModulation class.
        /// </summary>
        public SaturationModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "satMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationModulation>(deep);
    }

    /// <summary>
    /// <para>Luminance.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lum.</para>
    /// </summary>
    public partial class Luminance : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Luminance class.
        /// </summary>
        public Luminance() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lum");
            builder.AddConstraint(new AttributeValueRangeConstraint(0 /*:val*/, true, 0, true, 100000, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Luminance>(deep);
    }

    /// <summary>
    /// <para>Luminance Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lumOff.</para>
    /// </summary>
    public partial class LuminanceOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceOffset class.
        /// </summary>
        public LuminanceOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lumOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceOffset>(deep);
    }

    /// <summary>
    /// <para>Luminance Modulation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lumMod.</para>
    /// </summary>
    public partial class LuminanceModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceModulation class.
        /// </summary>
        public LuminanceModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lumMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceModulation>(deep);
    }

    /// <summary>
    /// <para>Red.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:red.</para>
    /// </summary>
    public partial class Red : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Red class.
        /// </summary>
        public Red() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "red");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Red>(deep);
    }

    /// <summary>
    /// <para>Red Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:redOff.</para>
    /// </summary>
    public partial class RedOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the RedOffset class.
        /// </summary>
        public RedOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "redOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedOffset>(deep);
    }

    /// <summary>
    /// <para>Red Modulation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:redMod.</para>
    /// </summary>
    public partial class RedModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the RedModulation class.
        /// </summary>
        public RedModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "redMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedModulation>(deep);
    }

    /// <summary>
    /// <para>Green.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:green.</para>
    /// </summary>
    public partial class Green : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Green class.
        /// </summary>
        public Green() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "green");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Green>(deep);
    }

    /// <summary>
    /// <para>Green Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:greenOff.</para>
    /// </summary>
    public partial class GreenOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the GreenOffset class.
        /// </summary>
        public GreenOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "greenOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenOffset>(deep);
    }

    /// <summary>
    /// <para>Green Modification.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:greenMod.</para>
    /// </summary>
    public partial class GreenModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the GreenModulation class.
        /// </summary>
        public GreenModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "greenMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenModulation>(deep);
    }

    /// <summary>
    /// <para>Blue.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blue.</para>
    /// </summary>
    public partial class Blue : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Blue class.
        /// </summary>
        public Blue() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blue");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blue>(deep);
    }

    /// <summary>
    /// <para>Blue Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blueOff.</para>
    /// </summary>
    public partial class BlueOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the BlueOffset class.
        /// </summary>
        public BlueOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blueOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueOffset>(deep);
    }

    /// <summary>
    /// <para>Blue Modification.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blueMod.</para>
    /// </summary>
    public partial class BlueModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the BlueModulation class.
        /// </summary>
        public BlueModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blueMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueModulation>(deep);
    }

    /// <summary>
    /// <para>Defines the PercentageType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PercentageType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PercentageType class.
        /// </summary>
        protected PercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PercentageType>()
                           .AddAttribute(0, "val", a => a.Val, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           });
        }
    }

    /// <summary>
    /// <para>Gamma.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gamma.</para>
    /// </summary>
    public partial class Gamma : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gamma class.
        /// </summary>
        public Gamma() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gamma");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gamma>(deep);
    }

    /// <summary>
    /// <para>Inverse Gamma.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:invGamma.</para>
    /// </summary>
    public partial class InverseGamma : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the InverseGamma class.
        /// </summary>
        public InverseGamma() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "invGamma");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InverseGamma>(deep);
    }

    /// <summary>
    /// <para>Extension.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    public partial class Extension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        public Extension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Extension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Extension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Extension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddElement<Extension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
   aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extension>(deep);
    }

    /// <summary>
    /// <para>RGB Color Model - Percentage Variant.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:scrgbClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class RgbColorModelPercentage : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class.
        /// </summary>
        public RgbColorModelPercentage() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelPercentage(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelPercentage(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RgbColorModelPercentage(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Red</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public Int32Value RedPortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Green</para>
        /// <para>Represents the following attribute in the schema: g</para>
        /// </summary>
        public Int32Value GreenPortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Blue</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public Int32Value BluePortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "scrgbClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<RgbColorModelPercentage>()
.AddAttribute(0, "r", a => a.RedPortion, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "g", a => a.GreenPortion, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "b", a => a.BluePortion, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelPercentage>(deep);
    }

    /// <summary>
    /// <para>RGB Color Model - Hex Variant.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:srgbClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class RgbColorModelHex : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class.
        /// </summary>
        public RgbColorModelHex() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelHex(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelHex(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RgbColorModelHex(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public HexBinaryValue Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>legacySpreadsheetColorIndex, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: a14:legacySpreadsheetColorIndex</para>
        /// </summary>
        /// <remark>
        /// xmlns:a14=http://schemas.microsoft.com/office/drawing/2010/main
        /// </remark>
        public Int32Value LegacySpreadsheetColorIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "srgbClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<RgbColorModelHex>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { Length = (3L) });
})
.AddAttribute(48, "legacySpreadsheetColorIndex", a => a.LegacySpreadsheetColorIndex, aBuilder =>
{
aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (80L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelHex>(deep);
    }

    /// <summary>
    /// <para>Hue, Saturation, Luminance Color Model.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hslClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class HslColor : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HslColor class.
        /// </summary>
        public HslColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HslColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HslColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HslColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value HueValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Saturation</para>
        /// <para>Represents the following attribute in the schema: sat</para>
        /// </summary>
        public Int32Value SatValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Luminance</para>
        /// <para>Represents the following attribute in the schema: lum</para>
        /// </summary>
        public Int32Value LumValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hslClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<HslColor>()
.AddAttribute(0, "hue", a => a.HueValue, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "sat", a => a.SatValue, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "lum", a => a.LumValue, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HslColor>(deep);
    }

    /// <summary>
    /// <para>System Color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sysClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class SystemColor : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SystemColor class.
        /// </summary>
        public SystemColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SystemColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SystemColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SystemColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.SystemColorValues> Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.SystemColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Color</para>
        /// <para>Represents the following attribute in the schema: lastClr</para>
        /// </summary>
        public HexBinaryValue LastColor
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sysClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<SystemColor>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "lastClr", a => a.LastColor, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { Length = (3L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SystemColor>(deep);
    }

    /// <summary>
    /// <para>Scheme Color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:schemeClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class SchemeColor : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SchemeColor class.
        /// </summary>
        public SchemeColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SchemeColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SchemeColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SchemeColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.SchemeColorValues> Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.SchemeColorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "schemeClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<SchemeColor>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SchemeColor>(deep);
    }

    /// <summary>
    /// <para>Preset Color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Tint &lt;a:tint></description></item>
    ///   <item><description>Shade &lt;a:shade></description></item>
    ///   <item><description>Complement &lt;a:comp></description></item>
    ///   <item><description>Inverse &lt;a:inv></description></item>
    ///   <item><description>Gray &lt;a:gray></description></item>
    ///   <item><description>Alpha &lt;a:alpha></description></item>
    ///   <item><description>AlphaOffset &lt;a:alphaOff></description></item>
    ///   <item><description>AlphaModulation &lt;a:alphaMod></description></item>
    ///   <item><description>Hue &lt;a:hue></description></item>
    ///   <item><description>HueOffset &lt;a:hueOff></description></item>
    ///   <item><description>HueModulation &lt;a:hueMod></description></item>
    ///   <item><description>Saturation &lt;a:sat></description></item>
    ///   <item><description>SaturationOffset &lt;a:satOff></description></item>
    ///   <item><description>SaturationModulation &lt;a:satMod></description></item>
    ///   <item><description>Luminance &lt;a:lum></description></item>
    ///   <item><description>LuminanceOffset &lt;a:lumOff></description></item>
    ///   <item><description>LuminanceModulation &lt;a:lumMod></description></item>
    ///   <item><description>Red &lt;a:red></description></item>
    ///   <item><description>RedOffset &lt;a:redOff></description></item>
    ///   <item><description>RedModulation &lt;a:redMod></description></item>
    ///   <item><description>Green &lt;a:green></description></item>
    ///   <item><description>GreenOffset &lt;a:greenOff></description></item>
    ///   <item><description>GreenModulation &lt;a:greenMod></description></item>
    ///   <item><description>Blue &lt;a:blue></description></item>
    ///   <item><description>BlueOffset &lt;a:blueOff></description></item>
    ///   <item><description>BlueModulation &lt;a:blueMod></description></item>
    ///   <item><description>Gamma &lt;a:gamma></description></item>
    ///   <item><description>InverseGamma &lt;a:invGamma></description></item>
    /// </list>
    /// </remark>
    public partial class PresetColor : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetColor class.
        /// </summary>
        public PresetColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetColorValues> Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetColorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "prstClr");
            builder.AddChild<Tint>();
            builder.AddChild<Shade>();
            builder.AddChild<Complement>();
            builder.AddChild<Inverse>();
            builder.AddChild<Gray>();
            builder.AddChild<Alpha>();
            builder.AddChild<AlphaOffset>();
            builder.AddChild<AlphaModulation>();
            builder.AddChild<Hue>();
            builder.AddChild<HueOffset>();
            builder.AddChild<HueModulation>();
            builder.AddChild<Saturation>();
            builder.AddChild<SaturationOffset>();
            builder.AddChild<SaturationModulation>();
            builder.AddChild<Luminance>();
            builder.AddChild<LuminanceOffset>();
            builder.AddChild<LuminanceModulation>();
            builder.AddChild<Red>();
            builder.AddChild<RedOffset>();
            builder.AddChild<RedModulation>();
            builder.AddChild<Green>();
            builder.AddChild<GreenOffset>();
            builder.AddChild<GreenModulation>();
            builder.AddChild<Blue>();
            builder.AddChild<BlueOffset>();
            builder.AddChild<BlueModulation>();
            builder.AddChild<Gamma>();
            builder.AddChild<InverseGamma>();
            builder.AddElement<PresetColor>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetColor>(deep);
    }

    /// <summary>
    /// <para>Apply 3D shape properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sp3d.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>BevelTop &lt;a:bevelT></description></item>
    ///   <item><description>BevelBottom &lt;a:bevelB></description></item>
    ///   <item><description>ExtrusionColor &lt;a:extrusionClr></description></item>
    ///   <item><description>ContourColor &lt;a:contourClr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Shape3DType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Shape3DType class.
        /// </summary>
        public Shape3DType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape3DType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape3DType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Shape3DType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Shape Depth</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Extrusion Height</para>
        /// <para>Represents the following attribute in the schema: extrusionH</para>
        /// </summary>
        public Int64Value ExtrusionHeight
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Contour Width</para>
        /// <para>Represents the following attribute in the schema: contourW</para>
        /// </summary>
        public Int64Value ContourWidth
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Preset Material Type</para>
        /// <para>Represents the following attribute in the schema: prstMaterial</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues> PresetMaterial
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sp3d");
            builder.AddChild<BevelTop>();
            builder.AddChild<BevelBottom>();
            builder.AddChild<ExtrusionColor>();
            builder.AddChild<ContourColor>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<Shape3DType>()
.AddAttribute(0, "z", a => a.Z, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "extrusionH", a => a.ExtrusionHeight, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "contourW", a => a.ContourWidth, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "prstMaterial", a => a.PresetMaterial, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BevelTop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BevelBottom), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtrusionColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ContourColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Top Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevelT.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BevelTop BevelTop
        {
            get => GetElement<BevelTop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevelB.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BevelBottom BevelBottom
        {
            get => GetElement<BevelBottom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extrusion Color.</para>
        /// <para>Represents the following element tag in the schema: a:extrusionClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtrusionColor ExtrusionColor
        {
            get => GetElement<ExtrusionColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Contour Color.</para>
        /// <para>Represents the following element tag in the schema: a:contourClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ContourColor ContourColor
        {
            get => GetElement<ContourColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape3DType>(deep);
    }

    /// <summary>
    /// <para>No text in 3D scene.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:flatTx.</para>
    /// </summary>
    public partial class FlatText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FlatText class.
        /// </summary>
        public FlatText() : base()
        {
        }

        /// <summary>
        /// <para>Z Coordinate</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "flatTx");
            builder.AddElement<FlatText>()
.AddAttribute(0, "z", a => a.Z, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FlatText>(deep);
    }

    /// <summary>
    /// <para>Linear Gradient Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lin.</para>
    /// </summary>
    public partial class LinearGradientFill : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LinearGradientFill class.
        /// </summary>
        public LinearGradientFill() : base()
        {
        }

        /// <summary>
        /// <para>Angle</para>
        /// <para>Represents the following attribute in the schema: ang</para>
        /// </summary>
        public Int32Value Angle
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Scaled</para>
        /// <para>Represents the following attribute in the schema: scaled</para>
        /// </summary>
        public BooleanValue Scaled
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lin");
            builder.AddElement<LinearGradientFill>()
.AddAttribute(0, "ang", a => a.Angle, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "scaled", a => a.Scaled);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinearGradientFill>(deep);
    }

    /// <summary>
    /// <para>Path Gradient.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:path.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FillToRectangle &lt;a:fillToRect></description></item>
    /// </list>
    /// </remark>
    public partial class PathGradientFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PathGradientFill class.
        /// </summary>
        public PathGradientFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathGradientFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathGradientFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PathGradientFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Gradient Fill Path</para>
        /// <para>Represents the following attribute in the schema: path</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PathShadeValues> Path
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PathShadeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "path");
            builder.AddChild<FillToRectangle>();
            builder.AddElement<PathGradientFill>()
.AddAttribute(0, "path", a => a.Path, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillToRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Fill To Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:fillToRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FillToRectangle FillToRectangle
        {
            get => GetElement<FillToRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathGradientFill>(deep);
    }

    /// <summary>
    /// <para>Tile.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tile.</para>
    /// </summary>
    public partial class Tile : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Tile class.
        /// </summary>
        public Tile() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Offset</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int64Value HorizontalOffset
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Offset</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int64Value VerticalOffset
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tile Flipping</para>
        /// <para>Represents the following attribute in the schema: flip</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues> Flip
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tile");
            builder.AddElement<Tile>()
.AddAttribute(0, "tx", a => a.HorizontalOffset, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "ty", a => a.VerticalOffset, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "sx", a => a.HorizontalRatio)
.AddAttribute(0, "sy", a => a.VerticalRatio)
.AddAttribute(0, "flip", a => a.Flip, aBuilder =>
{
  aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
  aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tile>(deep);
    }

    /// <summary>
    /// <para>Stretch.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:stretch.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FillRectangle &lt;a:fillRect></description></item>
    /// </list>
    /// </remark>
    public partial class Stretch : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Stretch class.
        /// </summary>
        public Stretch() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Stretch(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Stretch(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Stretch(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "stretch");
            builder.AddChild<FillRectangle>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Fill Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:fillRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FillRectangle FillRectangle
        {
            get => GetElement<FillRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Stretch>(deep);
    }

    /// <summary>
    /// <para>Defines the NoFill Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:noFill.</para>
    /// </summary>
    public partial class NoFill : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoFill class.
        /// </summary>
        public NoFill() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "noFill");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoFill>(deep);
    }

    /// <summary>
    /// <para>Defines the SolidFill Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:solidFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class SolidFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SolidFill class.
        /// </summary>
        public SolidFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SolidFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SolidFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SolidFill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "solidFill");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SolidFill>(deep);
    }

    /// <summary>
    /// <para>Defines the GradientFill Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gradFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GradientStopList &lt;a:gsLst></description></item>
    ///   <item><description>LinearGradientFill &lt;a:lin></description></item>
    ///   <item><description>PathGradientFill &lt;a:path></description></item>
    ///   <item><description>TileRectangle &lt;a:tileRect></description></item>
    /// </list>
    /// </remark>
    public partial class GradientFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientFill class.
        /// </summary>
        public GradientFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Tile Flip</para>
        /// <para>Represents the following attribute in the schema: flip</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues> Flip
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gradFill");
            builder.AddChild<GradientStopList>();
            builder.AddChild<LinearGradientFill>();
            builder.AddChild<PathGradientFill>();
            builder.AddChild<TileRectangle>();
            builder.AddElement<GradientFill>()
.AddAttribute(0, "flip", a => a.Flip, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientStopList), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LinearGradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PathGradientFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TileRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Gradient Stop List.</para>
        /// <para>Represents the following element tag in the schema: a:gsLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GradientStopList GradientStopList
        {
            get => GetElement<GradientStopList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientFill>(deep);
    }

    /// <summary>
    /// <para>Defines the BlipFill Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blipFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Blip &lt;a:blip></description></item>
    ///   <item><description>SourceRectangle &lt;a:srcRect></description></item>
    ///   <item><description>Tile &lt;a:tile></description></item>
    ///   <item><description>Stretch &lt;a:stretch></description></item>
    /// </list>
    /// </remark>
    public partial class BlipFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipFill class.
        /// </summary>
        public BlipFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>DPI Setting</para>
        /// <para>Represents the following attribute in the schema: dpi</para>
        /// </summary>
        public UInt32Value Dpi
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blipFill");
            builder.AddChild<Blip>();
            builder.AddChild<SourceRectangle>();
            builder.AddChild<Tile>();
            builder.AddChild<Stretch>();
            builder.AddElement<BlipFill>()
.AddAttribute(0, "dpi", a => a.Dpi)
.AddAttribute(0, "rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blip), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SourceRectangle), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Tile), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Stretch), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Blip.</para>
        /// <para>Represents the following element tag in the schema: a:blip.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Blip Blip
        {
            get => GetElement<Blip>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Source Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:srcRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SourceRectangle SourceRectangle
        {
            get => GetElement<SourceRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipFill>(deep);
    }

    /// <summary>
    /// <para>Pattern Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pattFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ForegroundColor &lt;a:fgClr></description></item>
    ///   <item><description>BackgroundColor &lt;a:bgClr></description></item>
    /// </list>
    /// </remark>
    public partial class PatternFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PatternFill class.
        /// </summary>
        public PatternFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PatternFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PatternFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PatternFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Pattern</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetPatternValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetPatternValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pattFill");
            builder.AddChild<ForegroundColor>();
            builder.AddChild<BackgroundColor>();
            builder.AddElement<PatternFill>()
.AddAttribute(0, "prst", a => a.Preset, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ForegroundColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BackgroundColor), 0, 1)
            };
        }

        /// <summary>
        /// <para>Foreground color.</para>
        /// <para>Represents the following element tag in the schema: a:fgClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ForegroundColor ForegroundColor
        {
            get => GetElement<ForegroundColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Background color.</para>
        /// <para>Represents the following element tag in the schema: a:bgClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BackgroundColor BackgroundColor
        {
            get => GetElement<BackgroundColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatternFill>(deep);
    }

    /// <summary>
    /// <para>Group Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpFill.</para>
    /// </summary>
    public partial class GroupFill : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupFill class.
        /// </summary>
        public GroupFill() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "grpFill");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupFill>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectContainer &lt;a:cont></description></item>
    ///   <item><description>Effect &lt;a:effect></description></item>
    ///   <item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
    ///   <item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
    ///   <item><description>AlphaFloor &lt;a:alphaFloor></description></item>
    ///   <item><description>AlphaInverse &lt;a:alphaInv></description></item>
    ///   <item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
    ///   <item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
    ///   <item><description>AlphaOutset &lt;a:alphaOutset></description></item>
    ///   <item><description>AlphaReplace &lt;a:alphaRepl></description></item>
    ///   <item><description>BiLevel &lt;a:biLevel></description></item>
    ///   <item><description>Blend &lt;a:blend></description></item>
    ///   <item><description>Blur &lt;a:blur></description></item>
    ///   <item><description>ColorChange &lt;a:clrChange></description></item>
    ///   <item><description>ColorReplacement &lt;a:clrRepl></description></item>
    ///   <item><description>Duotone &lt;a:duotone></description></item>
    ///   <item><description>Fill &lt;a:fill></description></item>
    ///   <item><description>FillOverlay &lt;a:fillOverlay></description></item>
    ///   <item><description>Glow &lt;a:glow></description></item>
    ///   <item><description>Grayscale &lt;a:grayscl></description></item>
    ///   <item><description>Hsl &lt;a:hsl></description></item>
    ///   <item><description>InnerShadow &lt;a:innerShdw></description></item>
    ///   <item><description>LuminanceEffect &lt;a:lum></description></item>
    ///   <item><description>OuterShadow &lt;a:outerShdw></description></item>
    ///   <item><description>PresetShadow &lt;a:prstShdw></description></item>
    ///   <item><description>Reflection &lt;a:reflection></description></item>
    ///   <item><description>RelativeOffset &lt;a:relOff></description></item>
    ///   <item><description>SoftEdge &lt;a:softEdge></description></item>
    ///   <item><description>TintEffect &lt;a:tint></description></item>
    ///   <item><description>TransformEffect &lt;a:xfrm></description></item>
    /// </list>
    /// </remark>
    public partial class EffectContainer : EffectContainerType
    {
        /// <summary>
        /// Initializes a new instance of the EffectContainer class.
        /// </summary>
        public EffectContainer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectContainer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectContainer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectContainer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cont");
            builder.Particle = new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectContainer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Effect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOutset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blend), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Fill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Glow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InnerShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.OuterShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Reflection), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RelativeOffset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SoftEdge), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TintEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TransformEffect), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectContainer>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectDag.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectContainer &lt;a:cont></description></item>
    ///   <item><description>Effect &lt;a:effect></description></item>
    ///   <item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
    ///   <item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
    ///   <item><description>AlphaFloor &lt;a:alphaFloor></description></item>
    ///   <item><description>AlphaInverse &lt;a:alphaInv></description></item>
    ///   <item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
    ///   <item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
    ///   <item><description>AlphaOutset &lt;a:alphaOutset></description></item>
    ///   <item><description>AlphaReplace &lt;a:alphaRepl></description></item>
    ///   <item><description>BiLevel &lt;a:biLevel></description></item>
    ///   <item><description>Blend &lt;a:blend></description></item>
    ///   <item><description>Blur &lt;a:blur></description></item>
    ///   <item><description>ColorChange &lt;a:clrChange></description></item>
    ///   <item><description>ColorReplacement &lt;a:clrRepl></description></item>
    ///   <item><description>Duotone &lt;a:duotone></description></item>
    ///   <item><description>Fill &lt;a:fill></description></item>
    ///   <item><description>FillOverlay &lt;a:fillOverlay></description></item>
    ///   <item><description>Glow &lt;a:glow></description></item>
    ///   <item><description>Grayscale &lt;a:grayscl></description></item>
    ///   <item><description>Hsl &lt;a:hsl></description></item>
    ///   <item><description>InnerShadow &lt;a:innerShdw></description></item>
    ///   <item><description>LuminanceEffect &lt;a:lum></description></item>
    ///   <item><description>OuterShadow &lt;a:outerShdw></description></item>
    ///   <item><description>PresetShadow &lt;a:prstShdw></description></item>
    ///   <item><description>Reflection &lt;a:reflection></description></item>
    ///   <item><description>RelativeOffset &lt;a:relOff></description></item>
    ///   <item><description>SoftEdge &lt;a:softEdge></description></item>
    ///   <item><description>TintEffect &lt;a:tint></description></item>
    ///   <item><description>TransformEffect &lt;a:xfrm></description></item>
    /// </list>
    /// </remark>
    public partial class EffectDag : EffectContainerType
    {
        /// <summary>
        /// Initializes a new instance of the EffectDag class.
        /// </summary>
        public EffectDag() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectDag(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectDag(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectDag(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effectDag");
            builder.Particle = new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectContainer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Effect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaOutset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blend), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Fill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Glow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InnerShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.OuterShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Reflection), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RelativeOffset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SoftEdge), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TintEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TransformEffect), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectDag>(deep);
    }

    /// <summary>
    /// <para>Defines the EffectContainerType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectContainer &lt;a:cont></description></item>
    ///   <item><description>Effect &lt;a:effect></description></item>
    ///   <item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
    ///   <item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
    ///   <item><description>AlphaFloor &lt;a:alphaFloor></description></item>
    ///   <item><description>AlphaInverse &lt;a:alphaInv></description></item>
    ///   <item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
    ///   <item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
    ///   <item><description>AlphaOutset &lt;a:alphaOutset></description></item>
    ///   <item><description>AlphaReplace &lt;a:alphaRepl></description></item>
    ///   <item><description>BiLevel &lt;a:biLevel></description></item>
    ///   <item><description>Blend &lt;a:blend></description></item>
    ///   <item><description>Blur &lt;a:blur></description></item>
    ///   <item><description>ColorChange &lt;a:clrChange></description></item>
    ///   <item><description>ColorReplacement &lt;a:clrRepl></description></item>
    ///   <item><description>Duotone &lt;a:duotone></description></item>
    ///   <item><description>Fill &lt;a:fill></description></item>
    ///   <item><description>FillOverlay &lt;a:fillOverlay></description></item>
    ///   <item><description>Glow &lt;a:glow></description></item>
    ///   <item><description>Grayscale &lt;a:grayscl></description></item>
    ///   <item><description>Hsl &lt;a:hsl></description></item>
    ///   <item><description>InnerShadow &lt;a:innerShdw></description></item>
    ///   <item><description>LuminanceEffect &lt;a:lum></description></item>
    ///   <item><description>OuterShadow &lt;a:outerShdw></description></item>
    ///   <item><description>PresetShadow &lt;a:prstShdw></description></item>
    ///   <item><description>Reflection &lt;a:reflection></description></item>
    ///   <item><description>RelativeOffset &lt;a:relOff></description></item>
    ///   <item><description>SoftEdge &lt;a:softEdge></description></item>
    ///   <item><description>TintEffect &lt;a:tint></description></item>
    ///   <item><description>TransformEffect &lt;a:xfrm></description></item>
    /// </list>
    /// </remark>
    public abstract partial class EffectContainerType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectContainerType class.
        /// </summary>
        protected EffectContainerType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected EffectContainerType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected EffectContainerType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected EffectContainerType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Effect Container Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.EffectContainerValues> Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.EffectContainerValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<EffectContainer>();
            builder.AddChild<Effect>();
            builder.AddChild<AlphaBiLevel>();
            builder.AddChild<AlphaCeiling>();
            builder.AddChild<AlphaFloor>();
            builder.AddChild<AlphaInverse>();
            builder.AddChild<AlphaModulationEffect>();
            builder.AddChild<AlphaModulationFixed>();
            builder.AddChild<AlphaOutset>();
            builder.AddChild<AlphaReplace>();
            builder.AddChild<BiLevel>();
            builder.AddChild<Blend>();
            builder.AddChild<Blur>();
            builder.AddChild<ColorChange>();
            builder.AddChild<ColorReplacement>();
            builder.AddChild<Duotone>();
            builder.AddChild<Fill>();
            builder.AddChild<FillOverlay>();
            builder.AddChild<Glow>();
            builder.AddChild<Grayscale>();
            builder.AddChild<Hsl>();
            builder.AddChild<InnerShadow>();
            builder.AddChild<LuminanceEffect>();
            builder.AddChild<OuterShadow>();
            builder.AddChild<PresetShadow>();
            builder.AddChild<Reflection>();
            builder.AddChild<RelativeOffset>();
            builder.AddChild<SoftEdge>();
            builder.AddChild<TintEffect>();
            builder.AddChild<TransformEffect>();
            builder.AddElement<EffectContainerType>()
.AddAttribute(0, "type", a => a.Type, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "name", a => a.Name, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }
    }

    /// <summary>
    /// <para>Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effect.</para>
    /// </summary>
    public partial class Effect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Effect class.
        /// </summary>
        public Effect() : base()
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue Reference
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effect");
            builder.AddElement<Effect>()
.AddAttribute(0, "ref", a => a.Reference, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Effect>(deep);
    }

    /// <summary>
    /// <para>Defines the AlphaBiLevel Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaBiLevel.</para>
    /// </summary>
    public partial class AlphaBiLevel : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaBiLevel class.
        /// </summary>
        public AlphaBiLevel() : base()
        {
        }

        /// <summary>
        /// <para>Threshold</para>
        /// <para>Represents the following attribute in the schema: thresh</para>
        /// </summary>
        public Int32Value Threshold
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaBiLevel");
            builder.AddElement<AlphaBiLevel>()
.AddAttribute(0, "thresh", a => a.Threshold, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaBiLevel>(deep);
    }

    /// <summary>
    /// <para>Alpha Ceiling Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaCeiling.</para>
    /// </summary>
    public partial class AlphaCeiling : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaCeiling class.
        /// </summary>
        public AlphaCeiling() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaCeiling");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaCeiling>(deep);
    }

    /// <summary>
    /// <para>Alpha Floor Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaFloor.</para>
    /// </summary>
    public partial class AlphaFloor : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaFloor class.
        /// </summary>
        public AlphaFloor() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaFloor");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaFloor>(deep);
    }

    /// <summary>
    /// <para>Alpha Inverse Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaInv.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class AlphaInverse : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaInverse class.
        /// </summary>
        public AlphaInverse() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaInverse(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaInverse(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AlphaInverse(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaInv");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaInverse>(deep);
    }

    /// <summary>
    /// <para>Alpha Modulate Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaMod.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectContainer &lt;a:cont></description></item>
    /// </list>
    /// </remark>
    public partial class AlphaModulationEffect : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class.
        /// </summary>
        public AlphaModulationEffect() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaModulationEffect(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaModulationEffect(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AlphaModulationEffect(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaMod");
            builder.AddChild<EffectContainer>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectContainer), 1, 1)
            };
        }

        /// <summary>
        /// <para>EffectContainer.</para>
        /// <para>Represents the following element tag in the schema: a:cont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectContainer EffectContainer
        {
            get => GetElement<EffectContainer>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationEffect>(deep);
    }

    /// <summary>
    /// <para>Defines the AlphaModulationFixed Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaModFix.</para>
    /// </summary>
    public partial class AlphaModulationFixed : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulationFixed class.
        /// </summary>
        public AlphaModulationFixed() : base()
        {
        }

        /// <summary>
        /// <para>Amount</para>
        /// <para>Represents the following attribute in the schema: amt</para>
        /// </summary>
        public Int32Value Amount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaModFix");
            builder.AddElement<AlphaModulationFixed>()
.AddAttribute(0, "amt", a => a.Amount, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationFixed>(deep);
    }

    /// <summary>
    /// <para>Alpha Inset/Outset Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaOutset.</para>
    /// </summary>
    public partial class AlphaOutset : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaOutset class.
        /// </summary>
        public AlphaOutset() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaOutset");
            builder.AddElement<AlphaOutset>()
.AddAttribute(0, "rad", a => a.Radius, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOutset>(deep);
    }

    /// <summary>
    /// <para>Alpha Replace Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaRepl.</para>
    /// </summary>
    public partial class AlphaReplace : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaReplace class.
        /// </summary>
        public AlphaReplace() : base()
        {
        }

        /// <summary>
        /// <para>Alpha</para>
        /// <para>Represents the following attribute in the schema: a</para>
        /// </summary>
        public Int32Value Alpha
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "alphaRepl");
            builder.AddElement<AlphaReplace>()
.AddAttribute(0, "a", a => a.Alpha, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaReplace>(deep);
    }

    /// <summary>
    /// <para>Defines the BiLevel Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:biLevel.</para>
    /// </summary>
    public partial class BiLevel : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BiLevel class.
        /// </summary>
        public BiLevel() : base()
        {
        }

        /// <summary>
        /// <para>Threshold</para>
        /// <para>Represents the following attribute in the schema: thresh</para>
        /// </summary>
        public Int32Value Threshold
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "biLevel");
            builder.AddElement<BiLevel>()
.AddAttribute(0, "thresh", a => a.Threshold, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiLevel>(deep);
    }

    /// <summary>
    /// <para>Blend Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blend.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectContainer &lt;a:cont></description></item>
    /// </list>
    /// </remark>
    public partial class Blend : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Blend class.
        /// </summary>
        public Blend() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blend(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blend(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Blend(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blend Mode</para>
        /// <para>Represents the following attribute in the schema: blend</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues> BlendMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blend");
            builder.AddChild<EffectContainer>();
            builder.AddElement<Blend>()
.AddAttribute(0, "blend", a => a.BlendMode, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectContainer), 1, 1)
            };
        }

        /// <summary>
        /// <para>Effect to blend.</para>
        /// <para>Represents the following element tag in the schema: a:cont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectContainer EffectContainer
        {
            get => GetElement<EffectContainer>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blend>(deep);
    }

    /// <summary>
    /// <para>Defines the Blur Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blur.</para>
    /// </summary>
    public partial class Blur : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Blur class.
        /// </summary>
        public Blur() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grow Bounds</para>
        /// <para>Represents the following attribute in the schema: grow</para>
        /// </summary>
        public BooleanValue Grow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blur");
            builder.AddElement<Blur>()
.AddAttribute(0, "rad", a => a.Radius, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "grow", a => a.Grow);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blur>(deep);
    }

    /// <summary>
    /// <para>Color Change Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ColorFrom &lt;a:clrFrom></description></item>
    ///   <item><description>ColorTo &lt;a:clrTo></description></item>
    /// </list>
    /// </remark>
    public partial class ColorChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorChange class.
        /// </summary>
        public ColorChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Consider Alpha Values</para>
        /// <para>Represents the following attribute in the schema: useA</para>
        /// </summary>
        public BooleanValue UseAlpha
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrChange");
            builder.AddChild<ColorFrom>();
            builder.AddChild<ColorTo>();
            builder.AddElement<ColorChange>()
.AddAttribute(0, "useA", a => a.UseAlpha);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorFrom), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorTo), 1, 1)
            };
        }

        /// <summary>
        /// <para>Change Color From.</para>
        /// <para>Represents the following element tag in the schema: a:clrFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorFrom ColorFrom
        {
            get => GetElement<ColorFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Change Color To.</para>
        /// <para>Represents the following element tag in the schema: a:clrTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorTo ColorTo
        {
            get => GetElement<ColorTo>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorChange>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorReplacement Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrRepl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ColorReplacement : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorReplacement class.
        /// </summary>
        public ColorReplacement() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorReplacement(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorReplacement(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorReplacement(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrRepl");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorReplacement>(deep);
    }

    /// <summary>
    /// <para>Duotone Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:duotone.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Duotone : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Duotone class.
        /// </summary>
        public Duotone() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Duotone(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Duotone(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Duotone(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "duotone");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 2, 2)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Duotone>(deep);
    }

    /// <summary>
    /// <para>Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class Fill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Fill class.
        /// </summary>
        public Fill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fill");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NoFill NoFill
        {
            get => GetElement<NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SolidFill SolidFill
        {
            get => GetElement<SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GradientFill GradientFill
        {
            get => GetElement<GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BlipFill BlipFill
        {
            get => GetElement<BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PatternFill PatternFill
        {
            get => GetElement<PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GroupFill GroupFill
        {
            get => GetElement<GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fill>(deep);
    }

    /// <summary>
    /// <para>Fill Overlay Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillOverlay.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class FillOverlay : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillOverlay class.
        /// </summary>
        public FillOverlay() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillOverlay(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillOverlay(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillOverlay(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blend</para>
        /// <para>Represents the following attribute in the schema: blend</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues> Blend
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fillOverlay");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddElement<FillOverlay>()
.AddAttribute(0, "blend", a => a.Blend, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NoFill NoFill
        {
            get => GetElement<NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SolidFill SolidFill
        {
            get => GetElement<SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GradientFill GradientFill
        {
            get => GetElement<GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BlipFill BlipFill
        {
            get => GetElement<BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PatternFill PatternFill
        {
            get => GetElement<PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GroupFill GroupFill
        {
            get => GetElement<GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillOverlay>(deep);
    }

    /// <summary>
    /// <para>Glow Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:glow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Glow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Glow class.
        /// </summary>
        public Glow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Glow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Glow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Glow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "glow");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<Glow>()
.AddAttribute(0, "rad", a => a.Radius, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Glow>(deep);
    }

    /// <summary>
    /// <para>Gray Scale Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grayscl.</para>
    /// </summary>
    public partial class Grayscale : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Grayscale class.
        /// </summary>
        public Grayscale() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "grayscl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Grayscale>(deep);
    }

    /// <summary>
    /// <para>Hue Saturation Luminance Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hsl.</para>
    /// </summary>
    public partial class Hsl : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Hsl class.
        /// </summary>
        public Hsl() : base()
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value Hue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Saturation</para>
        /// <para>Represents the following attribute in the schema: sat</para>
        /// </summary>
        public Int32Value Saturation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Luminance</para>
        /// <para>Represents the following attribute in the schema: lum</para>
        /// </summary>
        public Int32Value Luminance
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hsl");
            builder.AddElement<Hsl>()
.AddAttribute(0, "hue", a => a.Hue, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "sat", a => a.Saturation, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "lum", a => a.Luminance, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hsl>(deep);
    }

    /// <summary>
    /// <para>Inner Shadow Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:innerShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class InnerShadow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the InnerShadow class.
        /// </summary>
        public InnerShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InnerShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InnerShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InnerShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "innerShdw");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<InnerShadow>()
.AddAttribute(0, "blurRad", a => a.BlurRadius, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dist", a => a.Distance, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dir", a => a.Direction, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InnerShadow>(deep);
    }

    /// <summary>
    /// <para>Luminance.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lum.</para>
    /// </summary>
    public partial class LuminanceEffect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceEffect class.
        /// </summary>
        public LuminanceEffect() : base()
        {
        }

        /// <summary>
        /// <para>Brightness</para>
        /// <para>Represents the following attribute in the schema: bright</para>
        /// </summary>
        public Int32Value Brightness
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Contrast</para>
        /// <para>Represents the following attribute in the schema: contrast</para>
        /// </summary>
        public Int32Value Contrast
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lum");
            builder.AddElement<LuminanceEffect>()
.AddAttribute(0, "bright", a => a.Brightness, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "contrast", a => a.Contrast, aBuilder =>
{
   aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceEffect>(deep);
    }

    /// <summary>
    /// <para>Outer Shadow Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:outerShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class OuterShadow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OuterShadow class.
        /// </summary>
        public OuterShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OuterShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OuterShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OuterShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Offset Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Scaling Factor</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Scaling Factor</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "outerShdw");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<OuterShadow>()
.AddAttribute(0, "blurRad", a => a.BlurRadius, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dist", a => a.Distance, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dir", a => a.Direction, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "sx", a => a.HorizontalRatio)
.AddAttribute(0, "sy", a => a.VerticalRatio)
.AddAttribute(0, "kx", a => a.HorizontalSkew, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "ky", a => a.VerticalSkew, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OuterShadow>(deep);
    }

    /// <summary>
    /// <para>Preset Shadow.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class PresetShadow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetShadow class.
        /// </summary>
        public PresetShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Shadow</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetShadowValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetShadowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "prstShdw");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<PresetShadow>()
.AddAttribute(0, "prst", a => a.Preset, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "dist", a => a.Distance, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dir", a => a.Direction, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetShadow>(deep);
    }

    /// <summary>
    /// <para>Reflection Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:reflection.</para>
    /// </summary>
    public partial class Reflection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Reflection class.
        /// </summary>
        public Reflection() : base()
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Opacity</para>
        /// <para>Represents the following attribute in the schema: stA</para>
        /// </summary>
        public Int32Value StartOpacity
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Position</para>
        /// <para>Represents the following attribute in the schema: stPos</para>
        /// </summary>
        public Int32Value StartPosition
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>End Alpha</para>
        /// <para>Represents the following attribute in the schema: endA</para>
        /// </summary>
        public Int32Value EndAlpha
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>End Position</para>
        /// <para>Represents the following attribute in the schema: endPos</para>
        /// </summary>
        public Int32Value EndPosition
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Fade Direction</para>
        /// <para>Represents the following attribute in the schema: fadeDir</para>
        /// </summary>
        public Int32Value FadeDirection
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "reflection");
            builder.AddElement<Reflection>()
.AddAttribute(0, "blurRad", a => a.BlurRadius, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "stA", a => a.StartOpacity, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "stPos", a => a.StartPosition, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "endA", a => a.EndAlpha, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "endPos", a => a.EndPosition, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "dist", a => a.Distance, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "dir", a => a.Direction, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "fadeDir", a => a.FadeDirection, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "sx", a => a.HorizontalRatio)
.AddAttribute(0, "sy", a => a.VerticalRatio)
.AddAttribute(0, "kx", a => a.HorizontalSkew, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "ky", a => a.VerticalSkew, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "rotWithShape", a => a.RotateWithShape);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reflection>(deep);
    }

    /// <summary>
    /// <para>Relative Offset Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:relOff.</para>
    /// </summary>
    public partial class RelativeOffset : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelativeOffset class.
        /// </summary>
        public RelativeOffset() : base()
        {
        }

        /// <summary>
        /// <para>Offset X</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int32Value OffsetX
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Offset Y</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int32Value OffsetY
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "relOff");
            builder.AddElement<RelativeOffset>()
.AddAttribute(0, "tx", a => a.OffsetX)
.AddAttribute(0, "ty", a => a.OffsetY);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelativeOffset>(deep);
    }

    /// <summary>
    /// <para>Soft Edge Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:softEdge.</para>
    /// </summary>
    public partial class SoftEdge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SoftEdge class.
        /// </summary>
        public SoftEdge() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "softEdge");
            builder.AddElement<SoftEdge>()
.AddAttribute(0, "rad", a => a.Radius, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoftEdge>(deep);
    }

    /// <summary>
    /// <para>Defines the TintEffect Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tint.</para>
    /// </summary>
    public partial class TintEffect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TintEffect class.
        /// </summary>
        public TintEffect() : base()
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value Hue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Amount</para>
        /// <para>Represents the following attribute in the schema: amt</para>
        /// </summary>
        public Int32Value Amount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tint");
            builder.AddElement<TintEffect>()
.AddAttribute(0, "hue", a => a.Hue, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "amt", a => a.Amount, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TintEffect>(deep);
    }

    /// <summary>
    /// <para>Transform Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    public partial class TransformEffect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TransformEffect class.
        /// </summary>
        public TransformEffect() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Shift</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int64Value HorizontalShift
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Shift</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int64Value VerticalShift
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "xfrm");
            builder.AddElement<TransformEffect>()
.AddAttribute(0, "sx", a => a.HorizontalRatio)
.AddAttribute(0, "sy", a => a.VerticalRatio)
.AddAttribute(0, "kx", a => a.HorizontalSkew, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "ky", a => a.VerticalSkew, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
})
.AddAttribute(0, "tx", a => a.HorizontalShift, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "ty", a => a.VerticalShift, aBuilder =>
{
  aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformEffect>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Blur &lt;a:blur></description></item>
    ///   <item><description>FillOverlay &lt;a:fillOverlay></description></item>
    ///   <item><description>Glow &lt;a:glow></description></item>
    ///   <item><description>InnerShadow &lt;a:innerShdw></description></item>
    ///   <item><description>OuterShadow &lt;a:outerShdw></description></item>
    ///   <item><description>PresetShadow &lt;a:prstShdw></description></item>
    ///   <item><description>Reflection &lt;a:reflection></description></item>
    ///   <item><description>SoftEdge &lt;a:softEdge></description></item>
    /// </list>
    /// </remark>
    public partial class EffectList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectList class.
        /// </summary>
        public EffectList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effectLst");
            builder.AddChild<Blur>();
            builder.AddChild<FillOverlay>();
            builder.AddChild<Glow>();
            builder.AddChild<InnerShadow>();
            builder.AddChild<OuterShadow>();
            builder.AddChild<PresetShadow>();
            builder.AddChild<Reflection>();
            builder.AddChild<SoftEdge>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blur), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillOverlay), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Glow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InnerShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.OuterShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Reflection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SoftEdge), 0, 1)
            };
        }

        /// <summary>
        /// <para>Blur Effect.</para>
        /// <para>Represents the following element tag in the schema: a:blur.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Blur Blur
        {
            get => GetElement<Blur>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillOverlay.</para>
        /// <para>Represents the following element tag in the schema: a:fillOverlay.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FillOverlay FillOverlay
        {
            get => GetElement<FillOverlay>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Glow.</para>
        /// <para>Represents the following element tag in the schema: a:glow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Glow Glow
        {
            get => GetElement<Glow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InnerShadow.</para>
        /// <para>Represents the following element tag in the schema: a:innerShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public InnerShadow InnerShadow
        {
            get => GetElement<InnerShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OuterShadow.</para>
        /// <para>Represents the following element tag in the schema: a:outerShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public OuterShadow OuterShadow
        {
            get => GetElement<OuterShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PresetShadow.</para>
        /// <para>Represents the following element tag in the schema: a:prstShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetShadow PresetShadow
        {
            get => GetElement<PresetShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reflection.</para>
        /// <para>Represents the following element tag in the schema: a:reflection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Reflection Reflection
        {
            get => GetElement<Reflection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SoftEdge.</para>
        /// <para>Represents the following element tag in the schema: a:softEdge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SoftEdge SoftEdge
        {
            get => GetElement<SoftEdge>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectList>(deep);
    }

    /// <summary>
    /// <para>Custom geometry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custGeom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AdjustValueList &lt;a:avLst></description></item>
    ///   <item><description>ShapeGuideList &lt;a:gdLst></description></item>
    ///   <item><description>AdjustHandleList &lt;a:ahLst></description></item>
    ///   <item><description>ConnectionSiteList &lt;a:cxnLst></description></item>
    ///   <item><description>Rectangle &lt;a:rect></description></item>
    ///   <item><description>PathList &lt;a:pathLst></description></item>
    /// </list>
    /// </remark>
    public partial class CustomGeometry : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomGeometry class.
        /// </summary>
        public CustomGeometry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomGeometry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomGeometry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomGeometry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "custGeom");
            builder.AddChild<AdjustValueList>();
            builder.AddChild<ShapeGuideList>();
            builder.AddChild<AdjustHandleList>();
            builder.AddChild<ConnectionSiteList>();
            builder.AddChild<Rectangle>();
            builder.AddChild<PathList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustValueList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeGuideList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustHandleList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectionSiteList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Rectangle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PathList), 1, 1)
            };
        }

        /// <summary>
        /// <para>Adjust Value List.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public AdjustValueList AdjustValueList
        {
            get => GetElement<AdjustValueList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Guides.</para>
        /// <para>Represents the following element tag in the schema: a:gdLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeGuideList ShapeGuideList
        {
            get => GetElement<ShapeGuideList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Adjust Handles.</para>
        /// <para>Represents the following element tag in the schema: a:ahLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public AdjustHandleList AdjustHandleList
        {
            get => GetElement<AdjustHandleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Connection Sites.</para>
        /// <para>Represents the following element tag in the schema: a:cxnLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ConnectionSiteList ConnectionSiteList
        {
            get => GetElement<ConnectionSiteList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Text Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:rect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Rectangle Rectangle
        {
            get => GetElement<Rectangle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Paths.</para>
        /// <para>Represents the following element tag in the schema: a:pathLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PathList PathList
        {
            get => GetElement<PathList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomGeometry>(deep);
    }

    /// <summary>
    /// <para>Preset geometry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstGeom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AdjustValueList &lt;a:avLst></description></item>
    /// </list>
    /// </remark>
    public partial class PresetGeometry : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetGeometry class.
        /// </summary>
        public PresetGeometry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetGeometry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetGeometry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetGeometry(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Shape</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ShapeTypeValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ShapeTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "prstGeom");
            builder.AddChild<AdjustValueList>();
            builder.AddElement<PresetGeometry>()
.AddAttribute(0, "prst", a => a.Preset, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustValueList), 0, 1)
            };
        }

        /// <summary>
        /// <para>List of Shape Adjust Values.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public AdjustValueList AdjustValueList
        {
            get => GetElement<AdjustValueList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetGeometry>(deep);
    }

    /// <summary>
    /// <para>Preset Text Warp.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstTxWarp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AdjustValueList &lt;a:avLst></description></item>
    /// </list>
    /// </remark>
    public partial class PresetTextWrap : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class.
        /// </summary>
        public PresetTextWrap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetTextWrap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetTextWrap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetTextWrap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Warp Shape</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextShapeValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextShapeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "prstTxWarp");
            builder.AddChild<AdjustValueList>();
            builder.AddElement<PresetTextWrap>()
.AddAttribute(0, "prst", a => a.Preset, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustValueList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Adjust Value List.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public AdjustValueList AdjustValueList
        {
            get => GetElement<AdjustValueList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetTextWrap>(deep);
    }

    /// <summary>
    /// <para>Round Line Join.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:round.</para>
    /// </summary>
    public partial class Round : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Round class.
        /// </summary>
        public Round() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "round");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Round>(deep);
    }

    /// <summary>
    /// <para>Line Join Bevel.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevel.</para>
    /// </summary>
    public partial class LineJoinBevel : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineJoinBevel class.
        /// </summary>
        public LineJoinBevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bevel");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineJoinBevel>(deep);
    }

    /// <summary>
    /// <para>Miter Line Join.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:miter.</para>
    /// </summary>
    public partial class Miter : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Miter class.
        /// </summary>
        public Miter() : base()
        {
        }

        /// <summary>
        /// <para>Miter Join Limit</para>
        /// <para>Represents the following attribute in the schema: lim</para>
        /// </summary>
        public Int32Value Limit
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "miter");
            builder.AddElement<Miter>()
.AddAttribute(0, "lim", a => a.Limit, aBuilder =>
{
 aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Miter>(deep);
    }

    /// <summary>
    /// <para>Preset Dash.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstDash.</para>
    /// </summary>
    public partial class PresetDash : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetDash class.
        /// </summary>
        public PresetDash() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetLineDashValues> Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetLineDashValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "prstDash");
            builder.AddElement<PresetDash>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetDash>(deep);
    }

    /// <summary>
    /// <para>Custom Dash.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custDash.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DashStop &lt;a:ds></description></item>
    /// </list>
    /// </remark>
    public partial class CustomDash : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomDash class.
        /// </summary>
        public CustomDash() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDash(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDash(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomDash(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "custDash");
            builder.AddChild<DashStop>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DashStop), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomDash>(deep);
    }

    /// <summary>
    /// <para>Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class FillProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillProperties class.
        /// </summary>
        public FillProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fill");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NoFill NoFill
        {
            get => GetElement<NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SolidFill SolidFill
        {
            get => GetElement<SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GradientFill GradientFill
        {
            get => GetElement<GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BlipFill BlipFill
        {
            get => GetElement<BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PatternFill PatternFill
        {
            get => GetElement<PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GroupFill GroupFill
        {
            get => GetElement<GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillProperties>(deep);
    }

    /// <summary>
    /// <para>Fill Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class FillReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FillReference class.
        /// </summary>
        public FillReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fillRef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillReference>(deep);
    }

    /// <summary>
    /// <para>Effect Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class EffectReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EffectReference class.
        /// </summary>
        public EffectReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effectRef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectReference>(deep);
    }

    /// <summary>
    /// <para>Defines the LineReference Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class LineReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the LineReference class.
        /// </summary>
        public LineReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnRef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineReference>(deep);
    }

    /// <summary>
    /// <para>Defines the StyleMatrixReferenceType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public abstract partial class StyleMatrixReferenceType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class.
        /// </summary>
        protected StyleMatrixReferenceType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StyleMatrixReferenceType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StyleMatrixReferenceType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected StyleMatrixReferenceType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style Matrix Index</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public UInt32Value Index
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<StyleMatrixReferenceType>()
.AddAttribute(0, "idx", a => a.Index, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Effect.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effect.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    /// </list>
    /// </remark>
    public partial class EffectPropertiesType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class.
        /// </summary>
        public EffectPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectPropertiesType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effect");
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Effect Container.</para>
        /// <para>Represents the following element tag in the schema: a:effectLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectList EffectList
        {
            get => GetElement<EffectList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Effect Container.</para>
        /// <para>Represents the following element tag in the schema: a:effectDag.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectDag EffectDag
        {
            get => GetElement<EffectDag>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectPropertiesType>(deep);
    }

    /// <summary>
    /// <para>Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:font.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SupplementalFont &lt;a:font></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Fonts : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the Fonts class.
        /// </summary>
        public Fonts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fonts(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "font");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);
    }

    /// <summary>
    /// <para>Major Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:majorFont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SupplementalFont &lt;a:font></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class MajorFont : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the MajorFont class.
        /// </summary>
        public MajorFont() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MajorFont(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MajorFont(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MajorFont(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "majorFont");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MajorFont>(deep);
    }

    /// <summary>
    /// <para>Minor fonts.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:minorFont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SupplementalFont &lt;a:font></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class MinorFont : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the MinorFont class.
        /// </summary>
        public MinorFont() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MinorFont(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MinorFont(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MinorFont(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "minorFont");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MinorFont>(deep);
    }

    /// <summary>
    /// <para>Defines the FontCollectionType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SupplementalFont &lt;a:font></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class FontCollectionType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontCollectionType class.
        /// </summary>
        protected FontCollectionType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FontCollectionType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FontCollectionType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected FontCollectionType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<LatinFont>();
            builder.AddChild<EastAsianFont>();
            builder.AddChild<ComplexScriptFont>();
            builder.AddChild<SupplementalFont>();
            builder.AddChild<ExtensionList>();
        }

        /// <summary>
        /// <para>Latin Font.</para>
        /// <para>Represents the following element tag in the schema: a:latin.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LatinFont LatinFont
        {
            get => GetElement<LatinFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>East Asian Font.</para>
        /// <para>Represents the following element tag in the schema: a:ea.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EastAsianFont EastAsianFont
        {
            get => GetElement<EastAsianFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Complex Script Font.</para>
        /// <para>Represents the following element tag in the schema: a:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ComplexScriptFont ComplexScriptFont
        {
            get => GetElement<ComplexScriptFont>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the FontReference Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fontRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class FontReference : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontReference class.
        /// </summary>
        public FontReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FontReference(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.FontCollectionIndexValues> Index
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.FontCollectionIndexValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fontRef");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<FontReference>()
.AddAttribute(0, "idx", a => a.Index, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontReference>(deep);
    }

    /// <summary>
    /// <para>No AutoFit.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:noAutofit.</para>
    /// </summary>
    public partial class NoAutoFit : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoAutoFit class.
        /// </summary>
        public NoAutoFit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "noAutofit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoAutoFit>(deep);
    }

    /// <summary>
    /// <para>Normal AutoFit.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:normAutofit.</para>
    /// </summary>
    public partial class NormalAutoFit : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NormalAutoFit class.
        /// </summary>
        public NormalAutoFit() : base()
        {
        }

        /// <summary>
        /// <para>Font Scale</para>
        /// <para>Represents the following attribute in the schema: fontScale</para>
        /// </summary>
        public Int32Value FontScale
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Line Space Reduction</para>
        /// <para>Represents the following attribute in the schema: lnSpcReduction</para>
        /// </summary>
        public Int32Value LineSpaceReduction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "normAutofit");
            builder.AddElement<NormalAutoFit>()
.AddAttribute(0, "fontScale", a => a.FontScale, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1000L), MaxInclusive = (100000L) });
})
.AddAttribute(0, "lnSpcReduction", a => a.LineSpaceReduction, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (13200000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NormalAutoFit>(deep);
    }

    /// <summary>
    /// <para>Shape AutoFit.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spAutoFit.</para>
    /// </summary>
    public partial class ShapeAutoFit : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeAutoFit class.
        /// </summary>
        public ShapeAutoFit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spAutoFit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeAutoFit>(deep);
    }

    /// <summary>
    /// <para>Follow Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buClrTx.</para>
    /// </summary>
    public partial class BulletColorText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletColorText class.
        /// </summary>
        public BulletColorText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buClrTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColorText>(deep);
    }

    /// <summary>
    /// <para>Color Specified.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class BulletColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the BulletColor class.
        /// </summary>
        public BulletColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BulletColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BulletColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BulletColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buClr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColor>(deep);
    }

    /// <summary>
    /// <para>Extrusion Color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extrusionClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ExtrusionColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class.
        /// </summary>
        public ExtrusionColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtrusionColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtrusionColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtrusionColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extrusionClr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtrusionColor>(deep);
    }

    /// <summary>
    /// <para>Contour Color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:contourClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ContourColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ContourColor class.
        /// </summary>
        public ContourColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ContourColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ContourColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ContourColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "contourClr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContourColor>(deep);
    }

    /// <summary>
    /// <para>Change Color From.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ColorFrom : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ColorFrom class.
        /// </summary>
        public ColorFrom() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorFrom(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorFrom(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorFrom(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrFrom");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorFrom>(deep);
    }

    /// <summary>
    /// <para>Change Color To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ColorTo : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ColorTo class.
        /// </summary>
        public ColorTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrTo");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorTo>(deep);
    }

    /// <summary>
    /// <para>Foreground color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fgClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class ForegroundColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ForegroundColor class.
        /// </summary>
        public ForegroundColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ForegroundColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ForegroundColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ForegroundColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fgClr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForegroundColor>(deep);
    }

    /// <summary>
    /// <para>Background color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bgClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class BackgroundColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the BackgroundColor class.
        /// </summary>
        public BackgroundColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BackgroundColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bgClr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundColor>(deep);
    }

    /// <summary>
    /// <para>Defines the Highlight Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:highlight.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Highlight : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the Highlight class.
        /// </summary>
        public Highlight() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Highlight(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Highlight(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Highlight(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "highlight");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Highlight>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ColorType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorType class.
        /// </summary>
        protected ColorType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ColorType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Bullet Size Follows Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzTx.</para>
    /// </summary>
    public partial class BulletSizeText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizeText class.
        /// </summary>
        public BulletSizeText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buSzTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizeText>(deep);
    }

    /// <summary>
    /// <para>Bullet Size Percentage.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzPct.</para>
    /// </summary>
    public partial class BulletSizePercentage : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizePercentage class.
        /// </summary>
        public BulletSizePercentage() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buSzPct");
            builder.AddElement<BulletSizePercentage>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (25000L), MaxInclusive = (400000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePercentage>(deep);
    }

    /// <summary>
    /// <para>Bullet Size Points.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzPts.</para>
    /// </summary>
    public partial class BulletSizePoints : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizePoints class.
        /// </summary>
        public BulletSizePoints() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buSzPts");
            builder.AddElement<BulletSizePoints>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (100L), MaxInclusive = (400000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePoints>(deep);
    }

    /// <summary>
    /// <para>Follow text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buFontTx.</para>
    /// </summary>
    public partial class BulletFontText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletFontText class.
        /// </summary>
        public BulletFontText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buFontTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFontText>(deep);
    }

    /// <summary>
    /// <para>Specified.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buFont.</para>
    /// </summary>
    public partial class BulletFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the BulletFont class.
        /// </summary>
        public BulletFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buFont");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFont>(deep);
    }

    /// <summary>
    /// <para>Latin Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:latin.</para>
    /// </summary>
    public partial class LatinFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the LatinFont class.
        /// </summary>
        public LatinFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "latin");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatinFont>(deep);
    }

    /// <summary>
    /// <para>East Asian Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ea.</para>
    /// </summary>
    public partial class EastAsianFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the EastAsianFont class.
        /// </summary>
        public EastAsianFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ea");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EastAsianFont>(deep);
    }

    /// <summary>
    /// <para>Complex Script Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cs.</para>
    /// </summary>
    public partial class ComplexScriptFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the ComplexScriptFont class.
        /// </summary>
        public ComplexScriptFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ComplexScriptFont>(deep);
    }

    /// <summary>
    /// <para>Defines the SymbolFont Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sym.</para>
    /// </summary>
    public partial class SymbolFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the SymbolFont class.
        /// </summary>
        public SymbolFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sym");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SymbolFont>(deep);
    }

    /// <summary>
    /// <para>Defines the TextFontType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TextFontType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextFontType class.
        /// </summary>
        protected TextFontType() : base()
        {
        }

        /// <summary>
        /// <para>Text Typeface</para>
        /// <para>Represents the following attribute in the schema: typeface</para>
        /// </summary>
        public StringValue Typeface
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Panose Setting</para>
        /// <para>Represents the following attribute in the schema: panose</para>
        /// </summary>
        public HexBinaryValue Panose
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Similar Font Family</para>
        /// <para>Represents the following attribute in the schema: pitchFamily</para>
        /// </summary>
        public SByteValue PitchFamily
        {
            get => GetAttribute<SByteValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Similar Character Set</para>
        /// <para>Represents the following attribute in the schema: charset</para>
        /// </summary>
        public SByteValue CharacterSet
        {
            get => GetAttribute<SByteValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TextFontType>()
                           .AddAttribute(0, "typeface", a => a.Typeface)
                           .AddAttribute(0, "panose", a => a.Panose, aBuilder =>
                           {
                               aBuilder.AddValidator(new StringValidator() { Length = (10L) });
                           })
                           .AddAttribute(0, "pitchFamily", a => a.PitchFamily)
                           .AddAttribute(0, "charset", a => a.CharacterSet);
        }
    }

    /// <summary>
    /// <para>No Bullet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buNone.</para>
    /// </summary>
    public partial class NoBullet : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoBullet class.
        /// </summary>
        public NoBullet() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buNone");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBullet>(deep);
    }

    /// <summary>
    /// <para>Auto-Numbered Bullet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buAutoNum.</para>
    /// </summary>
    public partial class AutoNumberedBullet : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoNumberedBullet class.
        /// </summary>
        public AutoNumberedBullet() : base()
        {
        }

        /// <summary>
        /// <para>Bullet Autonumbering Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextAutoNumberSchemeValues> Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextAutoNumberSchemeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Numbering At</para>
        /// <para>Represents the following attribute in the schema: startAt</para>
        /// </summary>
        public Int32Value StartAt
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buAutoNum");
            builder.AddElement<AutoNumberedBullet>()
.AddAttribute(0, "type", a => a.Type, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "startAt", a => a.StartAt, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (32767L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoNumberedBullet>(deep);
    }

    /// <summary>
    /// <para>Character Bullet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buChar.</para>
    /// </summary>
    public partial class CharacterBullet : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterBullet class.
        /// </summary>
        public CharacterBullet() : base()
        {
        }

        /// <summary>
        /// <para>Bullet Character</para>
        /// <para>Represents the following attribute in the schema: char</para>
        /// </summary>
        public StringValue Char
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buChar");
            builder.AddElement<CharacterBullet>()
.AddAttribute(0, "char", a => a.Char, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterBullet>(deep);
    }

    /// <summary>
    /// <para>Picture Bullet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buBlip.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Blip &lt;a:blip></description></item>
    /// </list>
    /// </remark>
    public partial class PictureBullet : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureBullet class.
        /// </summary>
        public PictureBullet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBullet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBullet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureBullet(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "buBlip");
            builder.AddChild<Blip>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blip), 1, 1)
            };
        }

        /// <summary>
        /// <para>Blip.</para>
        /// <para>Represents the following element tag in the schema: a:blip.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Blip Blip
        {
            get => GetElement<Blip>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureBullet>(deep);
    }

    /// <summary>
    /// <para>Underline Follows Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uLnTx.</para>
    /// </summary>
    public partial class UnderlineFollowsText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFollowsText class.
        /// </summary>
        public UnderlineFollowsText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "uLnTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFollowsText>(deep);
    }

    /// <summary>
    /// <para>Underline Stroke.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uLn.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Underline : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Underline class.
        /// </summary>
        public Underline() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Underline(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Underline(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Underline(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "uLn");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);
    }

    /// <summary>
    /// <para>Defines the Outline Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ln.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Outline : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Outline(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Outline(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Outline(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ln");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);
    }

    /// <summary>
    /// <para>Left Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnL.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class LeftBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class.
        /// </summary>
        public LeftBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LeftBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnL");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnR.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class RightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class.
        /// </summary>
        public RightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnR");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Top Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnT.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TopBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class.
        /// </summary>
        public TopBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnT");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Bottom Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnB.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class BottomBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class.
        /// </summary>
        public BottomBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnB");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Top-Left to Bottom-Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnTlToBr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TopLeftToBottomRightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class.
        /// </summary>
        public TopLeftToBottomRightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopLeftToBottomRightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnTlToBr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Bottom-Left to Top-Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnBlToTr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class BottomLeftToTopRightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class.
        /// </summary>
        public BottomLeftToTopRightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomLeftToTopRightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomLeftToTopRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomLeftToTopRightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnBlToTr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomLeftToTopRightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the LinePropertiesType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>PresetDash &lt;a:prstDash></description></item>
    ///   <item><description>CustomDash &lt;a:custDash></description></item>
    ///   <item><description>Round &lt;a:round></description></item>
    ///   <item><description>LineJoinBevel &lt;a:bevel></description></item>
    ///   <item><description>Miter &lt;a:miter></description></item>
    ///   <item><description>HeadEnd &lt;a:headEnd></description></item>
    ///   <item><description>TailEnd &lt;a:tailEnd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class LinePropertiesType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class.
        /// </summary>
        protected LinePropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected LinePropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected LinePropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected LinePropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Line Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int32Value Width
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Line Ending Cap Type</para>
        /// <para>Represents the following attribute in the schema: cap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LineCapValues> CapType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LineCapValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Compound Line Type</para>
        /// <para>Represents the following attribute in the schema: cmpd</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.CompoundLineValues> CompoundLineType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.CompoundLineValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Stroke Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PenAlignmentValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PenAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<PresetDash>();
            builder.AddChild<CustomDash>();
            builder.AddChild<Round>();
            builder.AddChild<LineJoinBevel>();
            builder.AddChild<Miter>();
            builder.AddChild<HeadEnd>();
            builder.AddChild<TailEnd>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<LinePropertiesType>()
.AddAttribute(0, "w", a => a.Width, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (20116800L) });
})
.AddAttribute(0, "cap", a => a.CapType, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "cmpd", a => a.CompoundLineType, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }
    }

    /// <summary>
    /// <para>Underline Fill Properties Follow Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uFillTx.</para>
    /// </summary>
    public partial class UnderlineFillText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFillText class.
        /// </summary>
        public UnderlineFillText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "uFillTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFillText>(deep);
    }

    /// <summary>
    /// <para>Underline Fill.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class UnderlineFill : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFill class.
        /// </summary>
        public UnderlineFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public UnderlineFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public UnderlineFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public UnderlineFill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "uFill");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.Particle = new CompositeParticle(ParticleType.Group, 1, 1)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NoFill NoFill
        {
            get => GetElement<NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SolidFill SolidFill
        {
            get => GetElement<SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GradientFill GradientFill
        {
            get => GetElement<GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BlipFill BlipFill
        {
            get => GetElement<BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PatternFill PatternFill
        {
            get => GetElement<PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GroupFill GroupFill
        {
            get => GetElement<GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFill>(deep);
    }

    /// <summary>
    /// <para>Text Run.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:r.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;a:rPr></description></item>
    ///   <item><description>Text &lt;a:t></description></item>
    /// </list>
    /// </remark>
    public partial class Run : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Run class.
        /// </summary>
        public Run() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Run(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "r");
            builder.AddChild<RunProperties>();
            builder.AddChild<Text>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Text), 1, 1)
            };
        }

        /// <summary>
        /// <para>Text Character Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RunProperties RunProperties
        {
            get => GetElement<RunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text String.</para>
        /// <para>Represents the following element tag in the schema: a:t.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Text Text
        {
            get => GetElement<Text>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);
    }

    /// <summary>
    /// <para>Text Line Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:br.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;a:rPr></description></item>
    /// </list>
    /// </remark>
    public partial class Break : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Break class.
        /// </summary>
        public Break() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Break(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Break(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Break(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "br");
            builder.AddChild<RunProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RunProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Run Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RunProperties RunProperties
        {
            get => GetElement<RunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);
    }

    /// <summary>
    /// <para>Text Field.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fld.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;a:rPr></description></item>
    ///   <item><description>ParagraphProperties &lt;a:pPr></description></item>
    ///   <item><description>Text &lt;a:t></description></item>
    /// </list>
    /// </remark>
    public partial class Field : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Field class.
        /// </summary>
        public Field() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Field(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Field(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Field(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field ID</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public StringValue Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public StringValue Type
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fld");
            builder.AddChild<RunProperties>();
            builder.AddChild<ParagraphProperties>();
            builder.AddChild<Text>();
            builder.AddElement<Field>()
.AddAttribute(0, "id", a => a.Id, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
})
.AddAttribute(0, "type", a => a.Type);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Text), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Character Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RunProperties RunProperties
        {
            get => GetElement<RunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: a:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ParagraphProperties ParagraphProperties
        {
            get => GetElement<ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text.</para>
        /// <para>Represents the following element tag in the schema: a:t.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Text Text
        {
            get => GetElement<Text>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Field>(deep);
    }

    /// <summary>
    /// <para>Graphic Object.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphic.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GraphicData &lt;a:graphicData></description></item>
    /// </list>
    /// </remark>
    public partial class Graphic : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Graphic class.
        /// </summary>
        public Graphic() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Graphic(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Graphic(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Graphic(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "graphic");
            builder.AddChild<GraphicData>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GraphicData), 1, 1)
            };
        }

        /// <summary>
        /// <para>Graphic Object Data.</para>
        /// <para>Represents the following element tag in the schema: a:graphicData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GraphicData GraphicData
        {
            get => GetElement<GraphicData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Graphic>(deep);
    }

    /// <summary>
    /// <para>Defines the Blip Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blip.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
    ///   <item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
    ///   <item><description>AlphaFloor &lt;a:alphaFloor></description></item>
    ///   <item><description>AlphaInverse &lt;a:alphaInv></description></item>
    ///   <item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
    ///   <item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
    ///   <item><description>AlphaReplace &lt;a:alphaRepl></description></item>
    ///   <item><description>BiLevel &lt;a:biLevel></description></item>
    ///   <item><description>Blur &lt;a:blur></description></item>
    ///   <item><description>ColorChange &lt;a:clrChange></description></item>
    ///   <item><description>ColorReplacement &lt;a:clrRepl></description></item>
    ///   <item><description>Duotone &lt;a:duotone></description></item>
    ///   <item><description>FillOverlay &lt;a:fillOverlay></description></item>
    ///   <item><description>Grayscale &lt;a:grayscl></description></item>
    ///   <item><description>Hsl &lt;a:hsl></description></item>
    ///   <item><description>LuminanceEffect &lt;a:lum></description></item>
    ///   <item><description>TintEffect &lt;a:tint></description></item>
    ///   <item><description>BlipExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Blip : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Blip class.
        /// </summary>
        public Blip() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blip(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blip(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Blip(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Embedded Picture Reference</para>
        /// <para>Represents the following attribute in the schema: r:embed</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Embed
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Linked Picture Reference</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>cstate</para>
        /// <para>Represents the following attribute in the schema: cstate</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BlipCompressionValues> CompressionState
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BlipCompressionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "blip");
            builder.AddChild<AlphaBiLevel>();
            builder.AddChild<AlphaCeiling>();
            builder.AddChild<AlphaFloor>();
            builder.AddChild<AlphaInverse>();
            builder.AddChild<AlphaModulationEffect>();
            builder.AddChild<AlphaModulationFixed>();
            builder.AddChild<AlphaReplace>();
            builder.AddChild<BiLevel>();
            builder.AddChild<Blur>();
            builder.AddChild<ColorChange>();
            builder.AddChild<ColorReplacement>();
            builder.AddChild<Duotone>();
            builder.AddChild<FillOverlay>();
            builder.AddChild<Grayscale>();
            builder.AddChild<Hsl>();
            builder.AddChild<LuminanceEffect>();
            builder.AddChild<TintEffect>();
            builder.AddChild<BlipExtensionList>();
            builder.AddElement<Blip>()
.AddAttribute(19, "embed", a => a.Embed)
.AddAttribute(19, "link", a => a.Link)
.AddAttribute(0, "cstate", a => a.CompressionState, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TintEffect), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipExtensionList), 0, 1)
            };
            builder.AddConstraint(new RelationshipExistConstraint(0 /*r:embed*/));
            builder.AddConstraint(new RelationshipExistConstraint(1 /*r:link*/));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blip>(deep);
    }

    /// <summary>
    /// <para>Theme.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:theme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ThemeElements &lt;a:themeElements></description></item>
    ///   <item><description>ObjectDefaults &lt;a:objectDefaults></description></item>
    ///   <item><description>ExtraColorSchemeList &lt;a:extraClrSchemeLst></description></item>
    ///   <item><description>CustomColorList &lt;a:custClrLst></description></item>
    ///   <item><description>OfficeStyleSheetExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Theme : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Theme class.
        /// </summary>
        public Theme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Theme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Theme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Theme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>id, this property is only available in Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: thm15:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:thm15=http://schemas.microsoft.com/office/thememl/2012/main
        /// </remark>
        public StringValue ThemeId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "theme");
            builder.AddChild<ThemeElements>();
            builder.AddChild<ObjectDefaults>();
            builder.AddChild<ExtraColorSchemeList>();
            builder.AddChild<CustomColorList>();
            builder.AddChild<OfficeStyleSheetExtensionList>();
            builder.AddElement<Theme>()
.AddAttribute(0, "name", a => a.Name)
.AddAttribute(73, "id", a => a.ThemeId, aBuilder =>
{
aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2013));
aBuilder.AddValidator(new StringValidator() { Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ThemeElements), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ObjectDefaults), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtraColorSchemeList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomColorList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.OfficeStyleSheetExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ThemeElements.</para>
        /// <para>Represents the following element tag in the schema: a:themeElements.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ThemeElements ThemeElements
        {
            get => GetElement<ThemeElements>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ObjectDefaults.</para>
        /// <para>Represents the following element tag in the schema: a:objectDefaults.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ObjectDefaults ObjectDefaults
        {
            get => GetElement<ObjectDefaults>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtraColorSchemeList.</para>
        /// <para>Represents the following element tag in the schema: a:extraClrSchemeLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtraColorSchemeList ExtraColorSchemeList
        {
            get => GetElement<ExtraColorSchemeList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CustomColorList.</para>
        /// <para>Represents the following element tag in the schema: a:custClrLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public CustomColorList CustomColorList
        {
            get => GetElement<CustomColorList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OfficeStyleSheetExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public OfficeStyleSheetExtensionList OfficeStyleSheetExtensionList
        {
            get => GetElement<OfficeStyleSheetExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Theme>(deep);

        internal Theme(ThemePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the ThemePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(ThemePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the ThemePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(ThemePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the ThemePart associated with this element.
        /// </summary>
        public ThemePart ThemePart
        {
            get => OpenXmlPart as ThemePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Theme Override.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeOverride.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ColorScheme &lt;a:clrScheme></description></item>
    ///   <item><description>FontScheme &lt;a:fontScheme></description></item>
    ///   <item><description>FormatScheme &lt;a:fmtScheme></description></item>
    /// </list>
    /// </remark>
    public partial class ThemeOverride : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeOverride class.
        /// </summary>
        public ThemeOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ThemeOverride(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "themeOverride");
            builder.AddChild<ColorScheme>();
            builder.AddChild<FontScheme>();
            builder.AddChild<FormatScheme>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorScheme), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FontScheme), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FormatScheme), 0, 1)
            };
        }

        /// <summary>
        /// <para>Color Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorScheme ColorScheme
        {
            get => GetElement<ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontScheme.</para>
        /// <para>Represents the following element tag in the schema: a:fontScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FontScheme FontScheme
        {
            get => GetElement<FontScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FormatScheme.</para>
        /// <para>Represents the following element tag in the schema: a:fmtScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FormatScheme FormatScheme
        {
            get => GetElement<FormatScheme>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeOverride>(deep);

        internal ThemeOverride(ThemeOverridePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the ThemeOverridePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(ThemeOverridePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the ThemeOverridePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(ThemeOverridePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the ThemeOverridePart associated with this element.
        /// </summary>
        public ThemeOverridePart ThemeOverridePart
        {
            get => OpenXmlPart as ThemeOverridePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Theme Manager.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeManager.</para>
    /// </summary>
    public partial class ThemeManager : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ThemeManager class.
        /// </summary>
        public ThemeManager() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "themeManager");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeManager>(deep);
    }

    /// <summary>
    /// <para>Master Color Mapping.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:masterClrMapping.</para>
    /// </summary>
    public partial class MasterColorMapping : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MasterColorMapping class.
        /// </summary>
        public MasterColorMapping() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "masterClrMapping");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MasterColorMapping>(deep);
    }

    /// <summary>
    /// <para>Defines the EmptyType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmptyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmptyType class.
        /// </summary>
        protected EmptyType() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
        }
    }

    /// <summary>
    /// <para>Table.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableProperties &lt;a:tblPr></description></item>
    ///   <item><description>TableGrid &lt;a:tblGrid></description></item>
    ///   <item><description>TableRow &lt;a:tr></description></item>
    /// </list>
    /// </remark>
    public partial class Table : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Table(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tbl");
            builder.AddChild<TableProperties>();
            builder.AddChild<TableGrid>();
            builder.AddChild<TableRow>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableGrid), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableRow), 1, 1000)
            };
        }

        /// <summary>
        /// <para>Table Properties.</para>
        /// <para>Represents the following element tag in the schema: a:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableProperties TableProperties
        {
            get => GetElement<TableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Grid.</para>
        /// <para>Represents the following element tag in the schema: a:tblGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableGrid TableGrid
        {
            get => GetElement<TableGrid>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);
    }

    /// <summary>
    /// <para>Table Style List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableStyleEntry &lt;a:tblStyle></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleList : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleList class.
        /// </summary>
        public TableStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleList(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Default</para>
        /// <para>Represents the following attribute in the schema: def</para>
        /// </summary>
        public StringValue Default
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tblStyleLst");
            builder.AddChild<TableStyleEntry>();
            builder.AddElement<TableStyleList>()
.AddAttribute(0, "def", a => a.Default, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableStyleEntry), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleList>(deep);

        internal TableStyleList(TableStylesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the TableStylesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(TableStylesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the TableStylesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(TableStylesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the TableStylesPart associated with this element.
        /// </summary>
        public TableStylesPart TableStylesPart
        {
            get => OpenXmlPart as TableStylesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the ExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Extension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class ExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionList class.
        /// </summary>
        public ExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<Extension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Extension), 0, 0)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtensionList>(deep);
    }

    /// <summary>
    /// <para>Audio Start Time.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:st.</para>
    /// </summary>
    public partial class StartTime : AudioCDTimeType
    {
        /// <summary>
        /// Initializes a new instance of the StartTime class.
        /// </summary>
        public StartTime() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "st");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartTime>(deep);
    }

    /// <summary>
    /// <para>Audio End Time.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:end.</para>
    /// </summary>
    public partial class EndTime : AudioCDTimeType
    {
        /// <summary>
        /// Initializes a new instance of the EndTime class.
        /// </summary>
        public EndTime() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "end");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndTime>(deep);
    }

    /// <summary>
    /// <para>Defines the AudioCDTimeType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class AudioCDTimeType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioCDTimeType class.
        /// </summary>
        protected AudioCDTimeType() : base()
        {
        }

        /// <summary>
        /// <para>Track</para>
        /// <para>Represents the following attribute in the schema: track</para>
        /// </summary>
        public ByteValue Track
        {
            get => GetAttribute<ByteValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Time</para>
        /// <para>Represents the following attribute in the schema: time</para>
        /// </summary>
        public UInt32Value Time
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<AudioCDTimeType>()
                           .AddAttribute(0, "track", a => a.Track, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           })
                           .AddAttribute(0, "time", a => a.Time);
        }
    }

    /// <summary>
    /// <para>Custom color.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class CustomColor : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomColor class.
        /// </summary>
        public CustomColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "custClr");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<CustomColor>()
.AddAttribute(0, "name", a => a.Name);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColor>(deep);
    }

    /// <summary>
    /// <para>Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:font.</para>
    /// </summary>
    public partial class SupplementalFont : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SupplementalFont class.
        /// </summary>
        public SupplementalFont() : base()
        {
        }

        /// <summary>
        /// <para>Script</para>
        /// <para>Represents the following attribute in the schema: script</para>
        /// </summary>
        public StringValue Script
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Typeface</para>
        /// <para>Represents the following attribute in the schema: typeface</para>
        /// </summary>
        public StringValue Typeface
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "font");
            builder.AddElement<SupplementalFont>()
.AddAttribute(0, "script", a => a.Script, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "typeface", a => a.Typeface, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SupplementalFont>(deep);
    }

    /// <summary>
    /// <para>3D Scene Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:scene3d.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Camera &lt;a:camera></description></item>
    ///   <item><description>LightRig &lt;a:lightRig></description></item>
    ///   <item><description>Backdrop &lt;a:backdrop></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Scene3DType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Scene3DType class.
        /// </summary>
        public Scene3DType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Scene3DType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Scene3DType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Scene3DType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "scene3d");
            builder.AddChild<Camera>();
            builder.AddChild<LightRig>();
            builder.AddChild<Backdrop>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Camera), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LightRig), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Backdrop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Camera.</para>
        /// <para>Represents the following element tag in the schema: a:camera.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Camera Camera
        {
            get => GetElement<Camera>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light Rig.</para>
        /// <para>Represents the following element tag in the schema: a:lightRig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LightRig LightRig
        {
            get => GetElement<LightRig>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Backdrop Plane.</para>
        /// <para>Represents the following element tag in the schema: a:backdrop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Backdrop Backdrop
        {
            get => GetElement<Backdrop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Scene3DType>(deep);
    }

    /// <summary>
    /// <para>Effect Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Scene3DType &lt;a:scene3d></description></item>
    ///   <item><description>Shape3DType &lt;a:sp3d></description></item>
    /// </list>
    /// </remark>
    public partial class EffectStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectStyle class.
        /// </summary>
        public EffectStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effectStyle");
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.AddChild<Scene3DType>();
            builder.AddChild<Shape3DType>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shape3DType), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyle>(deep);
    }

    /// <summary>
    /// <para>Fill Style List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class FillStyleList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillStyleList class.
        /// </summary>
        public FillStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fillStyleLst");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 3, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillStyleList>(deep);
    }

    /// <summary>
    /// <para>Line Style List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    /// </list>
    /// </remark>
    public partial class LineStyleList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LineStyleList class.
        /// </summary>
        public LineStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnStyleLst");
            builder.AddChild<Outline>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 3, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineStyleList>(deep);
    }

    /// <summary>
    /// <para>Effect Style List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EffectStyle &lt;a:effectStyle></description></item>
    /// </list>
    /// </remark>
    public partial class EffectStyleList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectStyleList class.
        /// </summary>
        public EffectStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "effectStyleLst");
            builder.AddChild<EffectStyle>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectStyle), 3, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyleList>(deep);
    }

    /// <summary>
    /// <para>Background Fill Style List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bgFillStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    /// </list>
    /// </remark>
    public partial class BackgroundFillStyleList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class.
        /// </summary>
        public BackgroundFillStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundFillStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundFillStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BackgroundFillStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bgFillStyleLst");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 3, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundFillStyleList>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorScheme Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Dark1Color &lt;a:dk1></description></item>
    ///   <item><description>Light1Color &lt;a:lt1></description></item>
    ///   <item><description>Dark2Color &lt;a:dk2></description></item>
    ///   <item><description>Light2Color &lt;a:lt2></description></item>
    ///   <item><description>Accent1Color &lt;a:accent1></description></item>
    ///   <item><description>Accent2Color &lt;a:accent2></description></item>
    ///   <item><description>Accent3Color &lt;a:accent3></description></item>
    ///   <item><description>Accent4Color &lt;a:accent4></description></item>
    ///   <item><description>Accent5Color &lt;a:accent5></description></item>
    ///   <item><description>Accent6Color &lt;a:accent6></description></item>
    ///   <item><description>Hyperlink &lt;a:hlink></description></item>
    ///   <item><description>FollowedHyperlinkColor &lt;a:folHlink></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ColorScheme : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorScheme class.
        /// </summary>
        public ColorScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrScheme");
            builder.AddChild<Dark1Color>();
            builder.AddChild<Light1Color>();
            builder.AddChild<Dark2Color>();
            builder.AddChild<Light2Color>();
            builder.AddChild<Accent1Color>();
            builder.AddChild<Accent2Color>();
            builder.AddChild<Accent3Color>();
            builder.AddChild<Accent4Color>();
            builder.AddChild<Accent5Color>();
            builder.AddChild<Accent6Color>();
            builder.AddChild<Hyperlink>();
            builder.AddChild<FollowedHyperlinkColor>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<ColorScheme>()
.AddAttribute(0, "name", a => a.Name, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Dark1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Light1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Dark2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Light2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent3Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent4Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent5Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Accent6Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Hyperlink), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FollowedHyperlinkColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Dark 1.</para>
        /// <para>Represents the following element tag in the schema: a:dk1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Dark1Color Dark1Color
        {
            get => GetElement<Dark1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light 1.</para>
        /// <para>Represents the following element tag in the schema: a:lt1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Light1Color Light1Color
        {
            get => GetElement<Light1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Dark 2.</para>
        /// <para>Represents the following element tag in the schema: a:dk2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Dark2Color Dark2Color
        {
            get => GetElement<Dark2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light 2.</para>
        /// <para>Represents the following element tag in the schema: a:lt2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Light2Color Light2Color
        {
            get => GetElement<Light2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 1.</para>
        /// <para>Represents the following element tag in the schema: a:accent1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent1Color Accent1Color
        {
            get => GetElement<Accent1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 2.</para>
        /// <para>Represents the following element tag in the schema: a:accent2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent2Color Accent2Color
        {
            get => GetElement<Accent2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 3.</para>
        /// <para>Represents the following element tag in the schema: a:accent3.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent3Color Accent3Color
        {
            get => GetElement<Accent3Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 4.</para>
        /// <para>Represents the following element tag in the schema: a:accent4.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent4Color Accent4Color
        {
            get => GetElement<Accent4Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 5.</para>
        /// <para>Represents the following element tag in the schema: a:accent5.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent5Color Accent5Color
        {
            get => GetElement<Accent5Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 6.</para>
        /// <para>Represents the following element tag in the schema: a:accent6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Accent6Color Accent6Color
        {
            get => GetElement<Accent6Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hyperlink.</para>
        /// <para>Represents the following element tag in the schema: a:hlink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Hyperlink Hyperlink
        {
            get => GetElement<Hyperlink>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Followed Hyperlink.</para>
        /// <para>Represents the following element tag in the schema: a:folHlink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FollowedHyperlinkColor FollowedHyperlinkColor
        {
            get => GetElement<FollowedHyperlinkColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorScheme>(deep);
    }

    /// <summary>
    /// <para>Font Scheme.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fontScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>MajorFont &lt;a:majorFont></description></item>
    ///   <item><description>MinorFont &lt;a:minorFont></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class FontScheme : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontScheme class.
        /// </summary>
        public FontScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FontScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fontScheme");
            builder.AddChild<MajorFont>();
            builder.AddChild<MinorFont>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<FontScheme>()
.AddAttribute(0, "name", a => a.Name, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.MajorFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.MinorFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Major Font.</para>
        /// <para>Represents the following element tag in the schema: a:majorFont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public MajorFont MajorFont
        {
            get => GetElement<MajorFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Minor fonts.</para>
        /// <para>Represents the following element tag in the schema: a:minorFont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public MinorFont MinorFont
        {
            get => GetElement<MinorFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontScheme>(deep);
    }

    /// <summary>
    /// <para>Format Scheme.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fmtScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FillStyleList &lt;a:fillStyleLst></description></item>
    ///   <item><description>LineStyleList &lt;a:lnStyleLst></description></item>
    ///   <item><description>EffectStyleList &lt;a:effectStyleLst></description></item>
    ///   <item><description>BackgroundFillStyleList &lt;a:bgFillStyleLst></description></item>
    /// </list>
    /// </remark>
    public partial class FormatScheme : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FormatScheme class.
        /// </summary>
        public FormatScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormatScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormatScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FormatScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fmtScheme");
            builder.AddChild<FillStyleList>();
            builder.AddChild<LineStyleList>();
            builder.AddChild<EffectStyleList>();
            builder.AddChild<BackgroundFillStyleList>();
            builder.AddElement<FormatScheme>()
.AddAttribute(0, "name", a => a.Name);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BackgroundFillStyleList), 1, 1)
            };
        }

        /// <summary>
        /// <para>Fill Style List.</para>
        /// <para>Represents the following element tag in the schema: a:fillStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FillStyleList FillStyleList
        {
            get => GetElement<FillStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Style List.</para>
        /// <para>Represents the following element tag in the schema: a:lnStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LineStyleList LineStyleList
        {
            get => GetElement<LineStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Effect Style List.</para>
        /// <para>Represents the following element tag in the schema: a:effectStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectStyleList EffectStyleList
        {
            get => GetElement<EffectStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Background Fill Style List.</para>
        /// <para>Represents the following element tag in the schema: a:bgFillStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BackgroundFillStyleList BackgroundFillStyleList
        {
            get => GetElement<BackgroundFillStyleList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormatScheme>(deep);
    }

    /// <summary>
    /// <para>Dark 1.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dk1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Dark1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Dark1Color class.
        /// </summary>
        public Dark1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Dark1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "dk1");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark1Color>(deep);
    }

    /// <summary>
    /// <para>Light 1.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lt1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Light1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Light1Color class.
        /// </summary>
        public Light1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Light1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lt1");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light1Color>(deep);
    }

    /// <summary>
    /// <para>Dark 2.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dk2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Dark2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Dark2Color class.
        /// </summary>
        public Dark2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Dark2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "dk2");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark2Color>(deep);
    }

    /// <summary>
    /// <para>Light 2.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lt2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Light2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Light2Color class.
        /// </summary>
        public Light2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Light2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lt2");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light2Color>(deep);
    }

    /// <summary>
    /// <para>Accent 1.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent1Color class.
        /// </summary>
        public Accent1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent1");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent1Color>(deep);
    }

    /// <summary>
    /// <para>Accent 2.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent2Color class.
        /// </summary>
        public Accent2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent2");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent2Color>(deep);
    }

    /// <summary>
    /// <para>Accent 3.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent3.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent3Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent3Color class.
        /// </summary>
        public Accent3Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent3Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent3Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent3Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent3");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent3Color>(deep);
    }

    /// <summary>
    /// <para>Accent 4.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent4.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent4Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent4Color class.
        /// </summary>
        public Accent4Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent4Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent4Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent4Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent4");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent4Color>(deep);
    }

    /// <summary>
    /// <para>Accent 5.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent5.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent5Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent5Color class.
        /// </summary>
        public Accent5Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent5Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent5Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent5Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent5");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent5Color>(deep);
    }

    /// <summary>
    /// <para>Accent 6.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent6.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Accent6Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent6Color class.
        /// </summary>
        public Accent6Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent6Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent6Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent6Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "accent6");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent6Color>(deep);
    }

    /// <summary>
    /// <para>Hyperlink.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class Hyperlink : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Hyperlink class.
        /// </summary>
        public Hyperlink() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Hyperlink(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hlink");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);
    }

    /// <summary>
    /// <para>Followed Hyperlink.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:folHlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class FollowedHyperlinkColor : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class.
        /// </summary>
        public FollowedHyperlinkColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FollowedHyperlinkColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FollowedHyperlinkColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FollowedHyperlinkColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "folHlink");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FollowedHyperlinkColor>(deep);
    }

    /// <summary>
    /// <para>Defines the Color2Type Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public abstract partial class Color2Type : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Color2Type class.
        /// </summary>
        protected Color2Type() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected Color2Type(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected Color2Type(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected Color2Type(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<PresetColor>();
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Horizontal Ratio.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sx.</para>
    /// </summary>
    public partial class ScaleX : RatioType
    {
        /// <summary>
        /// Initializes a new instance of the ScaleX class.
        /// </summary>
        public ScaleX() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleX>(deep);
    }

    /// <summary>
    /// <para>Vertical Ratio.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sy.</para>
    /// </summary>
    public partial class ScaleY : RatioType
    {
        /// <summary>
        /// Initializes a new instance of the ScaleY class.
        /// </summary>
        public ScaleY() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sy");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleY>(deep);
    }

    /// <summary>
    /// <para>Defines the RatioType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RatioType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RatioType class.
        /// </summary>
        protected RatioType() : base()
        {
        }

        /// <summary>
        /// <para>Numerator</para>
        /// <para>Represents the following attribute in the schema: n</para>
        /// </summary>
        public Int32Value Numerator
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Denominator</para>
        /// <para>Represents the following attribute in the schema: d</para>
        /// </summary>
        public Int32Value Denominator
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<RatioType>()
                           .AddAttribute(0, "n", a => a.Numerator, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           })
                           .AddAttribute(0, "d", a => a.Denominator, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           });
        }
    }

    /// <summary>
    /// <para>Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:off.</para>
    /// </summary>
    public partial class Offset : Point2DType
    {
        /// <summary>
        /// Initializes a new instance of the Offset class.
        /// </summary>
        public Offset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "off");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Offset>(deep);
    }

    /// <summary>
    /// <para>Child Offset.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chOff.</para>
    /// </summary>
    public partial class ChildOffset : Point2DType
    {
        /// <summary>
        /// Initializes a new instance of the ChildOffset class.
        /// </summary>
        public ChildOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "chOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildOffset>(deep);
    }

    /// <summary>
    /// <para>Defines the Point2DType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class Point2DType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Point2DType class.
        /// </summary>
        protected Point2DType() : base()
        {
        }

        /// <summary>
        /// <para>X-Axis Coordinate</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public Int64Value X
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Axis Coordinate</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public Int64Value Y
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<Point2DType>()
                           .AddAttribute(0, "x", a => a.X, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                           })
                           .AddAttribute(0, "y", a => a.Y, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                           });
        }
    }

    /// <summary>
    /// <para>Extents.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    public partial class Extents : PositiveSize2DType
    {
        /// <summary>
        /// Initializes a new instance of the Extents class.
        /// </summary>
        public Extents() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extents>(deep);
    }

    /// <summary>
    /// <para>Child Extents.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chExt.</para>
    /// </summary>
    public partial class ChildExtents : PositiveSize2DType
    {
        /// <summary>
        /// Initializes a new instance of the ChildExtents class.
        /// </summary>
        public ChildExtents() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "chExt");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildExtents>(deep);
    }

    /// <summary>
    /// <para>Defines the PositiveSize2DType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositiveSize2DType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositiveSize2DType class.
        /// </summary>
        protected PositiveSize2DType() : base()
        {
        }

        /// <summary>
        /// <para>Extent Length</para>
        /// <para>Represents the following attribute in the schema: cx</para>
        /// </summary>
        public Int64Value Cx
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Extent Width</para>
        /// <para>Represents the following attribute in the schema: cy</para>
        /// </summary>
        public Int64Value Cy
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositiveSize2DType>()
                           .AddAttribute(0, "cx", a => a.Cx, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                           })
                           .AddAttribute(0, "cy", a => a.Cy, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                           });
        }
    }

    /// <summary>
    /// <para>Shape Locks.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeLocks : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeLocks class.
        /// </summary>
        public ShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Text Editing</para>
        /// <para>Represents the following attribute in the schema: noTextEdit</para>
        /// </summary>
        public BooleanValue NoTextEdit
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spLocks");
            builder.AddChild<ExtensionList>();
            builder.AddElement<ShapeLocks>()
.AddAttribute(0, "noGrp", a => a.NoGrouping)
.AddAttribute(0, "noSelect", a => a.NoSelection)
.AddAttribute(0, "noRot", a => a.NoRotation)
.AddAttribute(0, "noChangeAspect", a => a.NoChangeAspect)
.AddAttribute(0, "noMove", a => a.NoMove)
.AddAttribute(0, "noResize", a => a.NoResize)
.AddAttribute(0, "noEditPoints", a => a.NoEditPoints)
.AddAttribute(0, "noAdjustHandles", a => a.NoAdjustHandles)
.AddAttribute(0, "noChangeArrowheads", a => a.NoChangeArrowheads)
.AddAttribute(0, "noChangeShapeType", a => a.NoChangeShapeType)
.AddAttribute(0, "noTextEdit", a => a.NoTextEdit);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Connection Shape Locks.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnSpLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConnectorLockingExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionShapeLocks : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class.
        /// </summary>
        public ConnectionShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cxnSpLocks");
            builder.AddChild<ConnectorLockingExtensionList>();
            builder.AddElement<ConnectionShapeLocks>()
.AddAttribute(0, "noGrp", a => a.NoGrouping)
.AddAttribute(0, "noSelect", a => a.NoSelection)
.AddAttribute(0, "noRot", a => a.NoRotation)
.AddAttribute(0, "noChangeAspect", a => a.NoChangeAspect)
.AddAttribute(0, "noMove", a => a.NoMove)
.AddAttribute(0, "noResize", a => a.NoResize)
.AddAttribute(0, "noEditPoints", a => a.NoEditPoints)
.AddAttribute(0, "noAdjustHandles", a => a.NoAdjustHandles)
.AddAttribute(0, "noChangeArrowheads", a => a.NoChangeArrowheads)
.AddAttribute(0, "noChangeShapeType", a => a.NoChangeShapeType);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectorLockingExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ConnectorLockingExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ConnectorLockingExtensionList ConnectorLockingExtensionList
        {
            get => GetElement<ConnectorLockingExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Connection Start.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:stCxn.</para>
    /// </summary>
    public partial class StartConnection : ConnectionType
    {
        /// <summary>
        /// Initializes a new instance of the StartConnection class.
        /// </summary>
        public StartConnection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "stCxn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartConnection>(deep);
    }

    /// <summary>
    /// <para>Connection End.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:endCxn.</para>
    /// </summary>
    public partial class EndConnection : ConnectionType
    {
        /// <summary>
        /// Initializes a new instance of the EndConnection class.
        /// </summary>
        public EndConnection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "endCxn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndConnection>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectionType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class ConnectionType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionType class.
        /// </summary>
        protected ConnectionType() : base()
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public UInt32Value Id
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Index</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public UInt32Value Index
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<ConnectionType>()
                           .AddAttribute(0, "id", a => a.Id, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           })
                           .AddAttribute(0, "idx", a => a.Index, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                           });
        }
    }

    /// <summary>
    /// <para>Graphic Frame Locks.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicFrameLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicFrameLocks : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class.
        /// </summary>
        public GraphicFrameLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrameLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrameLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicFrameLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Selection of Child Shapes</para>
        /// <para>Represents the following attribute in the schema: noDrilldown</para>
        /// </summary>
        public BooleanValue NoDrilldown
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "graphicFrameLocks");
            builder.AddChild<ExtensionList>();
            builder.AddElement<GraphicFrameLocks>()
.AddAttribute(0, "noGrp", a => a.NoGrouping)
.AddAttribute(0, "noDrilldown", a => a.NoDrilldown)
.AddAttribute(0, "noSelect", a => a.NoSelection)
.AddAttribute(0, "noChangeAspect", a => a.NoChangeAspect)
.AddAttribute(0, "noMove", a => a.NoMove)
.AddAttribute(0, "noResize", a => a.NoResize);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrameLocks>(deep);
    }

    /// <summary>
    /// <para>Graphic Object Data.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Graphic &lt;a:graphic></description></item>
    ///   <item><description>Blip &lt;a:blip></description></item>
    ///   <item><description>Theme &lt;a:theme></description></item>
    ///   <item><description>ThemeOverride &lt;a:themeOverride></description></item>
    ///   <item><description>ThemeManager &lt;a:themeManager></description></item>
    ///   <item><description>Table &lt;a:tbl></description></item>
    ///   <item><description>TableStyleList &lt;a:tblStyleLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty &lt;wp15:webVideoPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily &lt;thm15:themeFamily></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties &lt;a15:backgroundPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties &lt;a15:nonVisualGroupProps></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties &lt;a15:objectPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine &lt;a15:signatureLine></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.CameraTool &lt;a14:cameraTool></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension &lt;a14:compatExt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas &lt;a14:isCanvas></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart &lt;a14:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured &lt;a14:shadowObscured></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties &lt;a14:hiddenFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties &lt;a14:hiddenLine></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties &lt;a14:hiddenEffects></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D &lt;a14:hiddenScene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D &lt;a14:hiddenSp3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties &lt;a14:imgProps></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi &lt;a14:useLocalDpi></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.TextMath &lt;a14:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties &lt;dgm14:cNvPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages &lt;dgm14:recolorImg></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office.Drawing.Drawing &lt;dsp:drawing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock &lt;dsp:dataModelExt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinition &lt;dgm:colorsDef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeader &lt;dgm:colorsDefHdr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeaderList &lt;dgm:colorsDefHdrLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.DataModelRoot &lt;dgm:dataModel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinition &lt;dgm:layoutDef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeader &lt;dgm:layoutDefHdr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeaderList &lt;dgm:layoutDefHdrLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.RelationshipIds &lt;dgm:relIds></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinition &lt;dgm:styleDef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader &lt;dgm:styleDefHdr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeaderList &lt;dgm:styleDefHdrLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Charts.ChartSpace &lt;c:chartSpace></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Charts.UserShapes &lt;c:userShapes></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Charts.ChartReference &lt;c:chart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.PivotSource &lt;c15:pivotSource></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.NumberingFormat &lt;c15:numFmt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShapeProperties &lt;c15:spPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.Layout &lt;c15:layout></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FullReference &lt;c15:fullRef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.LevelReference &lt;c15:levelRef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FormulaReference &lt;c15:formulaRef></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSeriesTitle &lt;c15:filteredSeriesTitle></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredCategoryTitle &lt;c15:filteredCategoryTitle></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredAreaSeries &lt;c15:filteredAreaSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBarSeries &lt;c15:filteredBarSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBubbleSeries &lt;c15:filteredBubbleSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredLineSeriesExtension &lt;c15:filteredLineSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredPieSeries &lt;c15:filteredPieSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredRadarSeries &lt;c15:filteredRadarSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredScatterSeries &lt;c15:filteredScatterSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSurfaceSeries &lt;c15:filteredSurfaceSeries></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelsRange &lt;c15:datalabelsRange></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.CategoryFilterExceptions &lt;c15:categoryFilterExceptions></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelFieldTable &lt;c15:dlblFieldTable></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ExceptionForSave &lt;c15:xForSave></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowDataLabelsRange &lt;c15:showDataLabelsRange></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ChartText &lt;c15:tx></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowLeaderLines &lt;c15:showLeaderLines></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.LeaderLines &lt;c15:leaderLines></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.AutoGeneneratedCategories &lt;c15:autoCat></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.PivotOptions &lt;c14:pivotOptions></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.SketchOptions &lt;c14:sketchOptions></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.InvertSolidFillFormat &lt;c14:invertSolidFillFmt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.Style &lt;c14:style></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.ChartDrawing.ContentPart &lt;cdr14:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.LegacyCompatibility.LegacyDrawing &lt;comp:legacyDrawing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.LockedCanvas.LockedCanvas &lt;lc:lockedCanvas></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline &lt;wp:inline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor &lt;wp:anchor></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionHeightOffset &lt;wp14:pctPosHOffset></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionVerticalOffset &lt;wp14:pctPosVOffset></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeWidth &lt;wp14:sizeRelH></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeHeight &lt;wp14:sizeRelV></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Pictures.Picture &lt;pic:pic></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Pictures.ShapeStyle &lt;pic14:style></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Pictures.OfficeArtExtensionList &lt;pic14:extLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing &lt;xdr:wsDr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ContentPart &lt;xdr:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Excel.Drawing.ContentPart &lt;xdr14:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.CommentAuthorList &lt;p:cmAuthorLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.CommentList &lt;p:cmLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.OleObject &lt;p:oleObj></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.Presentation &lt;p:presentation></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.PresentationProperties &lt;p:presentationPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.Slide &lt;p:sld></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.SlideLayout &lt;p:sldLayout></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.SlideMaster &lt;p:sldMaster></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.HandoutMaster &lt;p:handoutMaster></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.NotesMaster &lt;p:notesMaster></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.NotesSlide &lt;p:notes></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.SlideSyncProperties &lt;p:sldSyncPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.TagList &lt;p:tagLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.ViewProperties &lt;p:viewPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Presentation.ContentPart &lt;p:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.PresetTransition &lt;p15:prstTrans></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.PresenceInfo &lt;p15:presenceInfo></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.ThreadingInfo &lt;p15:threadingInfo></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.SlideGuideList &lt;p15:sldGuideLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.NotesGuideList &lt;p15:notesGuideLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.ChartTrackingReferenceBased &lt;p15:chartTrackingRefBased></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.NonVisualContentPartProperties &lt;p14:nvContentPartPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.Transform2D &lt;p14:xfrm></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ExtensionListModify &lt;p14:extLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.Media &lt;p14:media></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.VortexTransition &lt;p14:vortex></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SwitchTransition &lt;p14:switch></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlipTransition &lt;p14:flip></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.RippleTransition &lt;p14:ripple></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.HoneycombTransition &lt;p14:honeycomb></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.PrismTransition &lt;p14:prism></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DoorsTransition &lt;p14:doors></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WindowTransition &lt;p14:window></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FerrisTransition &lt;p14:ferris></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.GalleryTransition &lt;p14:gallery></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ConveyorTransition &lt;p14:conveyor></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.PanTransition &lt;p14:pan></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.GlitterTransition &lt;p14:glitter></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WarpTransition &lt;p14:warp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlythroughTransition &lt;p14:flythrough></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlashTransition &lt;p14:flash></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShredTransition &lt;p14:shred></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.RevealTransition &lt;p14:reveal></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WheelReverseTransition &lt;p14:wheelReverse></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget &lt;p14:bmkTgt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SectionProperties &lt;p14:sectionPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SectionList &lt;p14:sectionLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BrowseMode &lt;p14:browseMode></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.LaserColor &lt;p14:laserClr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DefaultImageDpi &lt;p14:defaultImageDpi></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DiscardImageEditData &lt;p14:discardImageEditData></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShowMediaControls &lt;p14:showMediaCtrls></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.LaserTraceList &lt;p14:laserTraceLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.CreationId &lt;p14:creationId></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ModificationId &lt;p14:modId></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShowEventRecordList &lt;p14:showEvtLst></description></item>
    ///   <item><description>DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary &lt;sl:schemaLibrary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathProperties &lt;m:mathPr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Recipients &lt;w:recipients></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.TextBoxContent &lt;w:txbxContent></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Comments &lt;w:comments></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Footnotes &lt;w:footnotes></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Endnotes &lt;w:endnotes></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Header &lt;w:hdr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Footer &lt;w:ftr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Settings &lt;w:settings></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.WebSettings &lt;w:webSettings></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Fonts &lt;w:fonts></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Numbering &lt;w:numbering></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Styles &lt;w:styles></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.Document &lt;w:document></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Wordprocessing.GlossaryDocument &lt;w:glossaryDocument></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Color &lt;w15:color></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.DataBinding &lt;w15:dataBinding></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Appearance &lt;w15:appearance></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.CommentsEx &lt;w15:commentsEx></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.People &lt;w15:people></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection &lt;w15:repeatingSection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem &lt;w15:repeatingSectionItem></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased &lt;w15:chartTrackingRefBased></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.DefaultCollapsed &lt;w15:collapsed></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId &lt;w15:docId></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns &lt;w15:footnoteColumns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked &lt;w15:webExtensionLinked></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated &lt;w15:webExtensionCreated></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ContentPart &lt;w14:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DocumentId &lt;w14:docId></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictMode &lt;w14:conflictMode></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData &lt;w14:discardImageEditingData></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi &lt;w14:defaultImageDpi></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty &lt;w14:entityPicker></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox &lt;w14:checkbox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shape &lt;v:shape></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shapetype &lt;v:shapetype></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Group &lt;v:group></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Background &lt;v:background></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Fill &lt;v:fill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Formulas &lt;v:formulas></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ShapeHandles &lt;v:handles></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ImageData &lt;v:imagedata></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Path &lt;v:path></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.TextBox &lt;v:textbox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shadow &lt;v:shadow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Stroke &lt;v:stroke></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.TextPath &lt;v:textpath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Arc &lt;v:arc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Curve &lt;v:curve></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ImageFile &lt;v:image></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Line &lt;v:line></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Oval &lt;v:oval></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.PolyLine &lt;v:polyline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Rectangle &lt;v:rect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.RoundRectangle &lt;v:roundrect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeDefaults &lt;o:shapedefaults></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeLayout &lt;o:shapelayout></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.SignatureLine &lt;o:signatureline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Ink &lt;o:ink></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Diagram &lt;o:diagram></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Skew &lt;o:skew></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Extrusion &lt;o:extrusion></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Callout &lt;o:callout></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Lock &lt;o:lock></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.OleObject &lt;o:OLEObject></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.Complex &lt;o:complex></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.LeftStroke &lt;o:left></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.TopStroke &lt;o:top></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.RightStroke &lt;o:right></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.BottomStroke &lt;o:bottom></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ColumnStroke &lt;o:column></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ClipPath &lt;o:clippath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.FillExtendedProperties &lt;o:fill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.TopBorder &lt;w10:bordertop></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.LeftBorder &lt;w10:borderleft></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.RightBorder &lt;w10:borderright></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.BottomBorder &lt;w10:borderbottom></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.TextWrap &lt;w10:wrap></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.AnchorLock &lt;w10:anchorlock></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Spreadsheet.ClientData &lt;xvml:ClientData></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Presentation.InkAnnotationFlag &lt;pvml:iscomment></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Presentation.TextData &lt;pvml:textdata></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingCanvas.WordprocessingCanvas &lt;wpc:wpc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingGroup.WordprocessingGroup &lt;wpg:wgp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingShape.WordprocessingShape &lt;wps:wsp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Slicer.Slicer &lt;sle:slicer></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ColorStyle &lt;cs:colorStyle></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ChartStyle &lt;cs:chartStyle></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.WebExtension.WebExtension &lt;we:webextension></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.WebExtension.WebExtensionReference &lt;we:webextensionref></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.TimeSlicer.TimeSlicer &lt;tsle:timeslicer></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicData class.
        /// </summary>
        public GraphicData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicData(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Uniform Resource Identifier</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "graphicData");
            builder.AddChild<Graphic>();
            builder.AddChild<Blip>();
            builder.AddChild<Theme>();
            builder.AddChild<ThemeOverride>();
            builder.AddChild<ThemeManager>();
            builder.AddChild<Table>();
            builder.AddChild<TableStyleList>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.CameraTool>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.TextMath>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.DataModelRoot>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.RelationshipIds>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Charts.ChartSpace>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Charts.UserShapes>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Charts.ChartReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.PivotSource>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.Layout>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FullReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.LevelReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FormulaReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSeriesTitle>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredCategoryTitle>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredAreaSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBarSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBubbleSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredLineSeriesExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredPieSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredRadarSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredScatterSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSurfaceSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelsRange>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.CategoryFilterExceptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelFieldTable>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.ExceptionForSave>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowDataLabelsRange>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.ChartText>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowLeaderLines>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.LeaderLines>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.Chart.AutoGeneneratedCategories>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Charts.PivotOptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Charts.SketchOptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Charts.InvertSolidFillFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Charts.Style>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.ChartDrawing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.LegacyCompatibility.LegacyDrawing>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.LockedCanvas.LockedCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionHeightOffset>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionVerticalOffset>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeHeight>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Pictures.Picture>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Pictures.ShapeStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Pictures.OfficeArtExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Spreadsheet.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Excel.Drawing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.CommentAuthorList>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.CommentList>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.Presentation>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.PresentationProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.Slide>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.SlideLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.SlideMaster>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.HandoutMaster>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.NotesMaster>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.NotesSlide>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.SlideSyncProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.TagList>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.ViewProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Presentation.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.PresetTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.PresenceInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.ThreadingInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.SlideGuideList>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.NotesGuideList>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.PowerPoint.ChartTrackingReferenceBased>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.NonVisualContentPartProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.Transform2D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ExtensionListModify>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.Media>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.VortexTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.SwitchTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.FlipTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.RippleTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.HoneycombTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.PrismTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.DoorsTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.WindowTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.FerrisTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.GalleryTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ConveyorTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.PanTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.GlitterTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.WarpTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.FlythroughTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.FlashTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ShredTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.RevealTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.WheelReverseTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.SectionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.SectionList>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.BrowseMode>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.LaserColor>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.DefaultImageDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.DiscardImageEditData>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ShowMediaControls>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.LaserTraceList>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.CreationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ModificationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.PowerPoint.ShowEventRecordList>();
            builder.AddChild<DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Recipients>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxContent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Comments>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Footnotes>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Endnotes>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Header>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Footer>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Settings>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebSettings>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Fonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Numbering>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Styles>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Document>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GlossaryDocument>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.DataBinding>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Appearance>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.CommentsEx>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.People>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.DefaultCollapsed>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DocumentId>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictMode>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shapetype>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Background>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Fill>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Formulas>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ShapeHandles>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageData>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Path>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.TextBox>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Stroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.TextPath>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Arc>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Curve>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageFile>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Line>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Oval>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.PolyLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.RoundRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ShapeDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ShapeLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Ink>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Diagram>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Skew>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Extrusion>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Callout>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Lock>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.Complex>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.LeftStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.TopStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.RightStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.BottomStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ColumnStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ClipPath>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.FillExtendedProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.TextWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Wordprocessing.AnchorLock>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Spreadsheet.ClientData>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Presentation.InkAnnotationFlag>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Presentation.TextData>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DrawingCanvas.WordprocessingCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DrawingGroup.WordprocessingGroup>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DrawingShape.WordprocessingShape>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Slicer.Slicer>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ColorStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ChartStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.WebExtension.WebExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.WebExtension.WebExtensionReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.TimeSlicer.TimeSlicer>();
            builder.AddElement<GraphicData>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new AnyParticle(0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicData>(deep);
    }

    /// <summary>
    /// <para>Diagram to Animate.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dgm.</para>
    /// </summary>
    public partial class Diagram : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Diagram class.
        /// </summary>
        public Diagram() : base()
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public StringValue Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animation Build Step</para>
        /// <para>Represents the following attribute in the schema: bldStep</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.DiagramBuildStepValues> BuildStep
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.DiagramBuildStepValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "dgm");
            builder.AddElement<Diagram>()
.AddAttribute(0, "id", a => a.Id, aBuilder =>
{
   aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
})
.AddAttribute(0, "bldStep", a => a.BuildStep, aBuilder =>
{
   aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Diagram>(deep);
    }

    /// <summary>
    /// <para>Chart to Animate.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chart.</para>
    /// </summary>
    public partial class Chart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Chart class.
        /// </summary>
        public Chart() : base()
        {
        }

        /// <summary>
        /// <para>Series Index</para>
        /// <para>Represents the following attribute in the schema: seriesIdx</para>
        /// </summary>
        public Int32Value SeriesIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Category Index</para>
        /// <para>Represents the following attribute in the schema: categoryIdx</para>
        /// </summary>
        public Int32Value CategoryIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animation Build Step</para>
        /// <para>Represents the following attribute in the schema: bldStep</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ChartBuildStepValues> BuildStep
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ChartBuildStepValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "chart");
            builder.AddElement<Chart>()
.AddAttribute(0, "seriesIdx", a => a.SeriesIndex)
.AddAttribute(0, "categoryIdx", a => a.CategoryIndex)
.AddAttribute(0, "bldStep", a => a.BuildStep, aBuilder =>
{
 aBuilder.AddValidator(RequiredValidator.Instance);
 aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Chart>(deep);
    }

    /// <summary>
    /// <para>Build Diagram.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bldDgm.</para>
    /// </summary>
    public partial class BuildDiagram : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BuildDiagram class.
        /// </summary>
        public BuildDiagram() : base()
        {
        }

        /// <summary>
        /// <para>Build</para>
        /// <para>Represents the following attribute in the schema: bld</para>
        /// </summary>
        public StringValue Build
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Reverse Animation</para>
        /// <para>Represents the following attribute in the schema: rev</para>
        /// </summary>
        public BooleanValue ReverseAnimation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bldDgm");
            builder.AddElement<BuildDiagram>()
.AddAttribute(0, "bld", a => a.Build, aBuilder =>
{
aBuilder.AddUnion(union =>
{
    union.AddValidator<EnumValue<DocumentFormat.OpenXml.Drawing.AnimationBuildValues>>(EnumValidator.Instance);
    union.AddValidator<EnumValue<DocumentFormat.OpenXml.Drawing.AnimationDiagramOnlyBuildValues>>(EnumValidator.Instance);
});
})
.AddAttribute(0, "rev", a => a.ReverseAnimation);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildDiagram>(deep);
    }

    /// <summary>
    /// <para>Build Chart.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bldChart.</para>
    /// </summary>
    public partial class BuildChart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BuildChart class.
        /// </summary>
        public BuildChart() : base()
        {
        }

        /// <summary>
        /// <para>Build</para>
        /// <para>Represents the following attribute in the schema: bld</para>
        /// </summary>
        public StringValue Build
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animate Background</para>
        /// <para>Represents the following attribute in the schema: animBg</para>
        /// </summary>
        public BooleanValue AnimateBackground
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bldChart");
            builder.AddElement<BuildChart>()
.AddAttribute(0, "bld", a => a.Build, aBuilder =>
{
aBuilder.AddUnion(union =>
{
  union.AddValidator<EnumValue<DocumentFormat.OpenXml.Drawing.AnimationBuildValues>>(EnumValidator.Instance);
  union.AddValidator<EnumValue<DocumentFormat.OpenXml.Drawing.AnimationChartOnlyBuildValues>>(EnumValidator.Instance);
});
})
.AddAttribute(0, "animBg", a => a.AnimateBackground);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildChart>(deep);
    }

    /// <summary>
    /// <para>Shape Text Body.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txBody.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>BodyProperties &lt;a:bodyPr></description></item>
    ///   <item><description>ListStyle &lt;a:lstStyle></description></item>
    ///   <item><description>Paragraph &lt;a:p></description></item>
    /// </list>
    /// </remark>
    public partial class TextBody : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBody class.
        /// </summary>
        public TextBody() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBody(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBody(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextBody(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "txBody");
            builder.AddChild<BodyProperties>();
            builder.AddChild<ListStyle>();
            builder.AddChild<Paragraph>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ListStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Paragraph), 1, 0)
            };
        }

        /// <summary>
        /// <para>Body Properties.</para>
        /// <para>Represents the following element tag in the schema: a:bodyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BodyProperties BodyProperties
        {
            get => GetElement<BodyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text List Styles.</para>
        /// <para>Represents the following element tag in the schema: a:lstStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ListStyle ListStyle
        {
            get => GetElement<ListStyle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBody>(deep);
    }

    /// <summary>
    /// <para>Use Shape Text Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:useSpRect.</para>
    /// </summary>
    public partial class UseShapeRectangle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UseShapeRectangle class.
        /// </summary>
        public UseShapeRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "useSpRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseShapeRectangle>(deep);
    }

    /// <summary>
    /// <para>Defines the Transform2D Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Offset &lt;a:off></description></item>
    ///   <item><description>Extents &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class Transform2D : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Transform2D class.
        /// </summary>
        public Transform2D() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Transform2D(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Transform2D(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Transform2D(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Flip</para>
        /// <para>Represents the following attribute in the schema: flipH</para>
        /// </summary>
        public BooleanValue HorizontalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Flip</para>
        /// <para>Represents the following attribute in the schema: flipV</para>
        /// </summary>
        public BooleanValue VerticalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "xfrm");
            builder.AddChild<Offset>();
            builder.AddChild<Extents>();
            builder.AddElement<Transform2D>()
.AddAttribute(0, "rot", a => a.Rotation)
.AddAttribute(0, "flipH", a => a.HorizontalFlip)
.AddAttribute(0, "flipV", a => a.VerticalFlip);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Offset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Extents), 0, 1)
            };
        }

        /// <summary>
        /// <para>Offset.</para>
        /// <para>Represents the following element tag in the schema: a:off.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Offset Offset
        {
            get => GetElement<Offset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extents.</para>
        /// <para>Represents the following element tag in the schema: a:ext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Extents Extents
        {
            get => GetElement<Extents>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Transform2D>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
    ///   <item><description>HyperlinkOnHover &lt;a:hlinkHover></description></item>
    ///   <item><description>NonVisualDrawingPropertiesExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class.
        /// </summary>
        public NonVisualDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public UInt32Value Id
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>descr</para>
        /// <para>Represents the following attribute in the schema: descr</para>
        /// </summary>
        public StringValue Description
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>hidden</para>
        /// <para>Represents the following attribute in the schema: hidden</para>
        /// </summary>
        public BooleanValue Hidden
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>title</para>
        /// <para>Represents the following attribute in the schema: title</para>
        /// </summary>
        public StringValue Title
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvPr");
            builder.AddChild<HyperlinkOnClick>();
            builder.AddChild<HyperlinkOnHover>();
            builder.AddChild<NonVisualDrawingPropertiesExtensionList>();
            builder.AddElement<NonVisualDrawingProperties>()
.AddAttribute(0, "id", a => a.Id, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "name", a => a.Name, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
})
.AddAttribute(0, "descr", a => a.Description)
.AddAttribute(0, "hidden", a => a.Hidden)
.AddAttribute(0, "title", a => a.Title);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnHover), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingPropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>HyperlinkOnClick.</para>
        /// <para>Represents the following element tag in the schema: a:hlinkClick.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HyperlinkOnClick HyperlinkOnClick
        {
            get => GetElement<HyperlinkOnClick>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HyperlinkOnHover.</para>
        /// <para>Represents the following element tag in the schema: a:hlinkHover.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HyperlinkOnHover HyperlinkOnHover
        {
            get => GetElement<HyperlinkOnHover>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NonVisualDrawingPropertiesExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingPropertiesExtensionList NonVisualDrawingPropertiesExtensionList
        {
            get => GetElement<NonVisualDrawingPropertiesExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeLocks &lt;a:spLocks></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualShapeDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class.
        /// </summary>
        public NonVisualShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Text Box</para>
        /// <para>Represents the following attribute in the schema: txBox</para>
        /// </summary>
        public BooleanValue TextBox
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvSpPr");
            builder.AddChild<ShapeLocks>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<NonVisualShapeDrawingProperties>()
.AddAttribute(0, "txBox", a => a.TextBox);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Locks.</para>
        /// <para>Represents the following element tag in the schema: a:spLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeLocks ShapeLocks
        {
            get => GetElement<ShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
    ///   <item><description>NonVisualShapeDrawingProperties &lt;a:cNvSpPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualShapeProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class.
        /// </summary>
        public NonVisualShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nvSpPr");
            builder.AddChild<NonVisualDrawingProperties>();
            builder.AddChild<NonVisualShapeDrawingProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingProperties NonVisualDrawingProperties
        {
            get => GetElement<NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualShapeDrawingProperties NonVisualShapeDrawingProperties
        {
            get => GetElement<NonVisualShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Visual Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Transform2D &lt;a:xfrm></description></item>
    ///   <item><description>CustomGeometry &lt;a:custGeom></description></item>
    ///   <item><description>PresetGeometry &lt;a:prstGeom></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Scene3DType &lt;a:scene3d></description></item>
    ///   <item><description>Shape3DType &lt;a:sp3d></description></item>
    ///   <item><description>ShapePropertiesExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeProperties class.
        /// </summary>
        public ShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues> BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spPr");
            builder.AddChild<Transform2D>();
            builder.AddChild<CustomGeometry>();
            builder.AddChild<PresetGeometry>();
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddChild<Outline>();
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.AddChild<Scene3DType>();
            builder.AddChild<Shape3DType>();
            builder.AddChild<ShapePropertiesExtensionList>();
            builder.AddElement<ShapeProperties>()
.AddAttribute(0, "bwMode", a => a.BlackWhiteMode, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Transform2D), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomGeometry), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetGeometry), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shape3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Individual Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Transform2D Transform2D
        {
            get => GetElement<Transform2D>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Text Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TextBody &lt;a:txBody></description></item>
    ///   <item><description>UseShapeRectangle &lt;a:useSpRect></description></item>
    ///   <item><description>Transform2D &lt;a:xfrm></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TextShape : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextShape class.
        /// </summary>
        public TextShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "txSp");
            builder.AddChild<TextBody>();
            builder.AddChild<UseShapeRectangle>();
            builder.AddChild<Transform2D>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TextBody), 1, 1),
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UseShapeRectangle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Transform2D), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Text Body.</para>
        /// <para>Represents the following element tag in the schema: a:txBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TextBody TextBody
        {
            get => GetElement<TextBody>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextShape>(deep);
    }

    /// <summary>
    /// <para>Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:style.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    ///   <item><description>FillReference &lt;a:fillRef></description></item>
    ///   <item><description>EffectReference &lt;a:effectRef></description></item>
    ///   <item><description>FontReference &lt;a:fontRef></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeStyle class.
        /// </summary>
        public ShapeStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "style");
            builder.AddChild<LineReference>();
            builder.AddChild<FillReference>();
            builder.AddChild<EffectReference>();
            builder.AddChild<FontReference>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FontReference), 1, 1)
            };
        }

        /// <summary>
        /// <para>LineReference.</para>
        /// <para>Represents the following element tag in the schema: a:lnRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LineReference LineReference
        {
            get => GetElement<LineReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillReference.</para>
        /// <para>Represents the following element tag in the schema: a:fillRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FillReference FillReference
        {
            get => GetElement<FillReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EffectReference.</para>
        /// <para>Represents the following element tag in the schema: a:effectRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EffectReference EffectReference
        {
            get => GetElement<EffectReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Font Reference.</para>
        /// <para>Represents the following element tag in the schema: a:fontRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FontReference FontReference
        {
            get => GetElement<FontReference>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeStyle>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Connector Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvCxnSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConnectionShapeLocks &lt;a:cxnSpLocks></description></item>
    ///   <item><description>StartConnection &lt;a:stCxn></description></item>
    ///   <item><description>EndConnection &lt;a:endCxn></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualConnectorShapeDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class.
        /// </summary>
        public NonVisualConnectorShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectorShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectorShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualConnectorShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvCxnSpPr");
            builder.AddChild<ConnectionShapeLocks>();
            builder.AddChild<StartConnection>();
            builder.AddChild<EndConnection>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectionShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.StartConnection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EndConnection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Connection Shape Locks.</para>
        /// <para>Represents the following element tag in the schema: a:cxnSpLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ConnectionShapeLocks ConnectionShapeLocks
        {
            get => GetElement<ConnectionShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Connection Start.</para>
        /// <para>Represents the following element tag in the schema: a:stCxn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public StartConnection StartConnection
        {
            get => GetElement<StartConnection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Connection End.</para>
        /// <para>Represents the following element tag in the schema: a:endCxn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public EndConnection EndConnection
        {
            get => GetElement<EndConnection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectorShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Connection Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvCxnSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
    ///   <item><description>NonVisualConnectorShapeDrawingProperties &lt;a:cNvCxnSpPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualConnectionShapeProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class.
        /// </summary>
        public NonVisualConnectionShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectionShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectionShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualConnectionShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nvCxnSpPr");
            builder.AddChild<NonVisualDrawingProperties>();
            builder.AddChild<NonVisualConnectorShapeDrawingProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualConnectorShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingProperties NonVisualDrawingProperties
        {
            get => GetElement<NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Connector Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvCxnSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualConnectorShapeDrawingProperties NonVisualConnectorShapeDrawingProperties
        {
            get => GetElement<NonVisualConnectorShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectionShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Picture Drawing Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvPicPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PictureLocks &lt;a:picLocks></description></item>
    ///   <item><description>NonVisualPicturePropertiesExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPictureDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class.
        /// </summary>
        public NonVisualPictureDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPictureDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>preferRelativeResize</para>
        /// <para>Represents the following attribute in the schema: preferRelativeResize</para>
        /// </summary>
        public BooleanValue PreferRelativeResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvPicPr");
            builder.AddChild<PictureLocks>();
            builder.AddChild<NonVisualPicturePropertiesExtensionList>();
            builder.AddElement<NonVisualPictureDrawingProperties>()
.AddAttribute(0, "preferRelativeResize", a => a.PreferRelativeResize);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualPicturePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>PictureLocks.</para>
        /// <para>Represents the following element tag in the schema: a:picLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PictureLocks PictureLocks
        {
            get => GetElement<PictureLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NonVisualPicturePropertiesExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualPicturePropertiesExtensionList NonVisualPicturePropertiesExtensionList
        {
            get => GetElement<NonVisualPicturePropertiesExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Picture.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvPicPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
    ///   <item><description>NonVisualPictureDrawingProperties &lt;a:cNvPicPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPictureProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class.
        /// </summary>
        public NonVisualPictureProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPictureProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nvPicPr");
            builder.AddChild<NonVisualDrawingProperties>();
            builder.AddChild<NonVisualPictureDrawingProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualPictureDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingProperties NonVisualDrawingProperties
        {
            get => GetElement<NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Picture Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPicPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualPictureDrawingProperties NonVisualPictureDrawingProperties
        {
            get => GetElement<NonVisualPictureDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Graphic Frame Drawing Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvGraphicFramePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GraphicFrameLocks &lt;a:graphicFrameLocks></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGraphicFrameDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class.
        /// </summary>
        public NonVisualGraphicFrameDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGraphicFrameDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvGraphicFramePr");
            builder.AddChild<GraphicFrameLocks>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GraphicFrameLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Graphic Frame Locks.</para>
        /// <para>Represents the following element tag in the schema: a:graphicFrameLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GraphicFrameLocks GraphicFrameLocks
        {
            get => GetElement<GraphicFrameLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Graphic Frame.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvGraphicFramePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
    ///   <item><description>NonVisualGraphicFrameDrawingProperties &lt;a:cNvGraphicFramePr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGraphicFrameProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class.
        /// </summary>
        public NonVisualGraphicFrameProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGraphicFrameProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nvGraphicFramePr");
            builder.AddChild<NonVisualDrawingProperties>();
            builder.AddChild<NonVisualGraphicFrameDrawingProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGraphicFrameDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingProperties NonVisualDrawingProperties
        {
            get => GetElement<NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Graphic Frame Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvGraphicFramePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualGraphicFrameDrawingProperties NonVisualGraphicFrameDrawingProperties
        {
            get => GetElement<NonVisualGraphicFrameDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Group Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvGrpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GroupShapeLocks &lt;a:grpSpLocks></description></item>
    ///   <item><description>NonVisualGroupDrawingShapePropsExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupShapeDrawingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class.
        /// </summary>
        public NonVisualGroupShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cNvGrpSpPr");
            builder.AddChild<GroupShapeLocks>();
            builder.AddChild<NonVisualGroupDrawingShapePropsExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGroupDrawingShapePropsExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>GroupShapeLocks.</para>
        /// <para>Represents the following element tag in the schema: a:grpSpLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public GroupShapeLocks GroupShapeLocks
        {
            get => GetElement<GroupShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NonVisualGroupDrawingShapePropsExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualGroupDrawingShapePropsExtensionList NonVisualGroupDrawingShapePropsExtensionList
        {
            get => GetElement<NonVisualGroupDrawingShapePropsExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Rotation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rot.</para>
    /// </summary>
    public partial class Rotation : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Rotation class.
        /// </summary>
        public Rotation() : base()
        {
        }

        /// <summary>
        /// <para>Latitude</para>
        /// <para>Represents the following attribute in the schema: lat</para>
        /// </summary>
        public Int32Value Latitude
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Longitude</para>
        /// <para>Represents the following attribute in the schema: lon</para>
        /// </summary>
        public Int32Value Longitude
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revolution</para>
        /// <para>Represents the following attribute in the schema: rev</para>
        /// </summary>
        public Int32Value Revolution
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "rot");
            builder.AddElement<Rotation>()
.AddAttribute(0, "lat", a => a.Latitude, aBuilder =>
{
   aBuilder.AddValidator(RequiredValidator.Instance);
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "lon", a => a.Longitude, aBuilder =>
{
   aBuilder.AddValidator(RequiredValidator.Instance);
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
})
.AddAttribute(0, "rev", a => a.Revolution, aBuilder =>
{
   aBuilder.AddValidator(RequiredValidator.Instance);
   aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rotation>(deep);
    }

    /// <summary>
    /// <para>Camera.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:camera.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Rotation &lt;a:rot></description></item>
    /// </list>
    /// </remark>
    public partial class Camera : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Camera class.
        /// </summary>
        public Camera() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Camera(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Camera(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Camera(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Camera Type</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetCameraValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetCameraValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field of View</para>
        /// <para>Represents the following attribute in the schema: fov</para>
        /// </summary>
        public Int32Value FieldOfView
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Zoom</para>
        /// <para>Represents the following attribute in the schema: zoom</para>
        /// </summary>
        public Int32Value Zoom
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "camera");
            builder.AddChild<Rotation>();
            builder.AddElement<Camera>()
.AddAttribute(0, "prst", a => a.Preset, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "fov", a => a.FieldOfView, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (10800000L) });
})
.AddAttribute(0, "zoom", a => a.Zoom, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Rotation), 0, 1)
            };
        }

        /// <summary>
        /// <para>Rotation.</para>
        /// <para>Represents the following element tag in the schema: a:rot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Rotation Rotation
        {
            get => GetElement<Rotation>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Camera>(deep);
    }

    /// <summary>
    /// <para>Light Rig.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lightRig.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Rotation &lt;a:rot></description></item>
    /// </list>
    /// </remark>
    public partial class LightRig : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LightRig class.
        /// </summary>
        public LightRig() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LightRig(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LightRig(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LightRig(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rig Preset</para>
        /// <para>Represents the following attribute in the schema: rig</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LightRigValues> Rig
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LightRigValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LightRigDirectionValues> Direction
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LightRigDirectionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lightRig");
            builder.AddChild<Rotation>();
            builder.AddElement<LightRig>()
.AddAttribute(0, "rig", a => a.Rig, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "dir", a => a.Direction, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Rotation), 0, 1)
            };
        }

        /// <summary>
        /// <para>Rotation.</para>
        /// <para>Represents the following element tag in the schema: a:rot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Rotation Rotation
        {
            get => GetElement<Rotation>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LightRig>(deep);
    }

    /// <summary>
    /// <para>Backdrop Plane.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:backdrop.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Anchor &lt;a:anchor></description></item>
    ///   <item><description>Normal &lt;a:norm></description></item>
    ///   <item><description>UpVector &lt;a:up></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Backdrop : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Backdrop class.
        /// </summary>
        public Backdrop() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Backdrop(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Backdrop(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Backdrop(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "backdrop");
            builder.AddChild<Anchor>();
            builder.AddChild<Normal>();
            builder.AddChild<UpVector>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Anchor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Normal), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UpVector), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Anchor Point.</para>
        /// <para>Represents the following element tag in the schema: a:anchor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Anchor Anchor
        {
            get => GetElement<Anchor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Normal.</para>
        /// <para>Represents the following element tag in the schema: a:norm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Normal Normal
        {
            get => GetElement<Normal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Up Vector.</para>
        /// <para>Represents the following element tag in the schema: a:up.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public UpVector UpVector
        {
            get => GetElement<UpVector>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Backdrop>(deep);
    }

    /// <summary>
    /// <para>Anchor Point.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:anchor.</para>
    /// </summary>
    public partial class Anchor : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Anchor class.
        /// </summary>
        public Anchor() : base()
        {
        }

        /// <summary>
        /// <para>X-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public Int64Value X
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public Int64Value Y
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Z-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "anchor");
            builder.AddElement<Anchor>()
.AddAttribute(0, "x", a => a.X, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "y", a => a.Y, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
})
.AddAttribute(0, "z", a => a.Z, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Anchor>(deep);
    }

    /// <summary>
    /// <para>Normal.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:norm.</para>
    /// </summary>
    public partial class Normal : Vector3DType
    {
        /// <summary>
        /// Initializes a new instance of the Normal class.
        /// </summary>
        public Normal() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "norm");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Normal>(deep);
    }

    /// <summary>
    /// <para>Up Vector.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:up.</para>
    /// </summary>
    public partial class UpVector : Vector3DType
    {
        /// <summary>
        /// Initializes a new instance of the UpVector class.
        /// </summary>
        public UpVector() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "up");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UpVector>(deep);
    }

    /// <summary>
    /// <para>Defines the Vector3DType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class Vector3DType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Vector3DType class.
        /// </summary>
        protected Vector3DType() : base()
        {
        }

        /// <summary>
        /// <para>Distance along X-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dx</para>
        /// </summary>
        public Int64Value Dx
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance along Y-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dy</para>
        /// </summary>
        public Int64Value Dy
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance along Z-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dz</para>
        /// </summary>
        public Int64Value Dz
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<Vector3DType>()
                           .AddAttribute(0, "dx", a => a.Dx, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                           })
                           .AddAttribute(0, "dy", a => a.Dy, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                           })
                           .AddAttribute(0, "dz", a => a.Dz, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                           });
        }
    }

    /// <summary>
    /// <para>Top Bevel.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevelT.</para>
    /// </summary>
    public partial class BevelTop : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the BevelTop class.
        /// </summary>
        public BevelTop() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bevelT");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelTop>(deep);
    }

    /// <summary>
    /// <para>Bottom Bevel.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevelB.</para>
    /// </summary>
    public partial class BevelBottom : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the BevelBottom class.
        /// </summary>
        public BevelBottom() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bevelB");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelBottom>(deep);
    }

    /// <summary>
    /// <para>Bevel.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevel.</para>
    /// </summary>
    public partial class Bevel : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the Bevel class.
        /// </summary>
        public Bevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bevel");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bevel>(deep);
    }

    /// <summary>
    /// <para>Defines the BevelType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BevelType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BevelType class.
        /// </summary>
        protected BevelType() : base()
        {
        }

        /// <summary>
        /// <para>Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Preset Bevel</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BevelPresetValues> Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BevelPresetValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<BevelType>()
                           .AddAttribute(0, "w", a => a.Width, aBuilder =>
                           {
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                           })
                           .AddAttribute(0, "h", a => a.Height, aBuilder =>
                           {
                               aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                           })
                           .AddAttribute(0, "prst", a => a.Preset, aBuilder =>
                           {
                               aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                           });
        }
    }

    /// <summary>
    /// <para>Fill To Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillToRect.</para>
    /// </summary>
    public partial class FillToRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the FillToRectangle class.
        /// </summary>
        public FillToRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fillToRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillToRectangle>(deep);
    }

    /// <summary>
    /// <para>Tile Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tileRect.</para>
    /// </summary>
    public partial class TileRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the TileRectangle class.
        /// </summary>
        public TileRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tileRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TileRectangle>(deep);
    }

    /// <summary>
    /// <para>Fill Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillRect.</para>
    /// </summary>
    public partial class FillRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the FillRectangle class.
        /// </summary>
        public FillRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "fillRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillRectangle>(deep);
    }

    /// <summary>
    /// <para>Source Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:srcRect.</para>
    /// </summary>
    public partial class SourceRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the SourceRectangle class.
        /// </summary>
        public SourceRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "srcRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceRectangle>(deep);
    }

    /// <summary>
    /// <para>Defines the RelativeRectangleType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RelativeRectangleType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelativeRectangleType class.
        /// </summary>
        protected RelativeRectangleType() : base()
        {
        }

        /// <summary>
        /// <para>Left Offset</para>
        /// <para>Represents the following attribute in the schema: l</para>
        /// </summary>
        public Int32Value Left
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Offset</para>
        /// <para>Represents the following attribute in the schema: t</para>
        /// </summary>
        public Int32Value Top
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Offset</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public Int32Value Right
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Offset</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public Int32Value Bottom
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<RelativeRectangleType>()
                           .AddAttribute(0, "l", a => a.Left)
                           .AddAttribute(0, "t", a => a.Top)
                           .AddAttribute(0, "r", a => a.Right)
                           .AddAttribute(0, "b", a => a.Bottom);
        }
    }

    /// <summary>
    /// <para>Gradient stops.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    /// </list>
    /// </remark>
    public partial class GradientStop : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientStop class.
        /// </summary>
        public GradientStop() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStop(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStop(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientStop(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Position</para>
        /// <para>Represents the following attribute in the schema: pos</para>
        /// </summary>
        public Int32Value Position
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gs");
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddElement<GradientStop>()
.AddAttribute(0, "pos", a => a.Position, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelPercentage RgbColorModelPercentage
        {
            get => GetElement<RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RgbColorModelHex RgbColorModelHex
        {
            get => GetElement<RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HslColor HslColor
        {
            get => GetElement<HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SystemColor SystemColor
        {
            get => GetElement<SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SchemeColor SchemeColor
        {
            get => GetElement<SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetColor PresetColor
        {
            get => GetElement<PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStop>(deep);
    }

    /// <summary>
    /// <para>Gradient Stop List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gsLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GradientStop &lt;a:gs></description></item>
    /// </list>
    /// </remark>
    public partial class GradientStopList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientStopList class.
        /// </summary>
        public GradientStopList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStopList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStopList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientStopList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gsLst");
            builder.AddChild<GradientStop>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientStop), 2, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStopList>(deep);
    }

    /// <summary>
    /// <para>Shape Guide.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gd.</para>
    /// </summary>
    public partial class ShapeGuide : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeGuide class.
        /// </summary>
        public ShapeGuide() : base()
        {
        }

        /// <summary>
        /// <para>Shape Guide Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Guide Formula</para>
        /// <para>Represents the following attribute in the schema: fmla</para>
        /// </summary>
        public StringValue Formula
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gd");
            builder.AddElement<ShapeGuide>()
.AddAttribute(0, "name", a => a.Name, aBuilder =>
{
    aBuilder.AddValidator(RequiredValidator.Instance);
    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "fmla", a => a.Formula, aBuilder =>
{
    aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuide>(deep);
    }

    /// <summary>
    /// <para>Position.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pos.</para>
    /// </summary>
    public partial class Position : AdjustPoint2DType
    {
        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pos");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Position>(deep);
    }

    /// <summary>
    /// <para>Move end point.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pt.</para>
    /// </summary>
    public partial class Point : AdjustPoint2DType
    {
        /// <summary>
        /// Initializes a new instance of the Point class.
        /// </summary>
        public Point() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pt");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Point>(deep);
    }

    /// <summary>
    /// <para>Defines the AdjustPoint2DType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class AdjustPoint2DType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustPoint2DType class.
        /// </summary>
        protected AdjustPoint2DType() : base()
        {
        }

        /// <summary>
        /// <para>X-Coordinate</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public StringValue X
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Coordinate</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public StringValue Y
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<AdjustPoint2DType>()
                           .AddAttribute(0, "x", a => a.X, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddUnion(union =>
                               {
                                   union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                                   union.AddValidator(StringValidator.Instance);
                               });
                           })
                           .AddAttribute(0, "y", a => a.Y, aBuilder =>
                           {
                               aBuilder.AddValidator(RequiredValidator.Instance);
                               aBuilder.AddUnion(union =>
                               {
                                   union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                                   union.AddValidator(StringValidator.Instance);
                               });
                           });
        }
    }

    /// <summary>
    /// <para>XY Adjust Handle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahXY.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Position &lt;a:pos></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandleXY : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class.
        /// </summary>
        public AdjustHandleXY() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleXY(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleXY(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandleXY(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Horizontal Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefX</para>
        /// </summary>
        public StringValue XAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Horizontal Adjustment</para>
        /// <para>Represents the following attribute in the schema: minX</para>
        /// </summary>
        public StringValue MinX
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Horizontal Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxX</para>
        /// </summary>
        public StringValue MaxX
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefY</para>
        /// </summary>
        public StringValue YAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Vertical Adjustment</para>
        /// <para>Represents the following attribute in the schema: minY</para>
        /// </summary>
        public StringValue MinY
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Vertical Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxY</para>
        /// </summary>
        public StringValue MaxY
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ahXY");
            builder.AddChild<Position>();
            builder.AddElement<AdjustHandleXY>()
.AddAttribute(0, "gdRefX", a => a.XAdjustmentGuide, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "minX", a => a.MinX, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "maxX", a => a.MaxX, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "gdRefY", a => a.YAdjustmentGuide, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "minY", a => a.MinY, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "maxY", a => a.MaxY, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleXY>(deep);
    }

    /// <summary>
    /// <para>Polar Adjust Handle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahPolar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Position &lt;a:pos></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandlePolar : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class.
        /// </summary>
        public AdjustHandlePolar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandlePolar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandlePolar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandlePolar(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Radial Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefR</para>
        /// </summary>
        public StringValue RadialAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Radial Adjustment</para>
        /// <para>Represents the following attribute in the schema: minR</para>
        /// </summary>
        public StringValue MinRadial
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Radial Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxR</para>
        /// </summary>
        public StringValue MaxRadial
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Angle Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefAng</para>
        /// </summary>
        public StringValue AngleAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Angle Adjustment</para>
        /// <para>Represents the following attribute in the schema: minAng</para>
        /// </summary>
        public StringValue MinAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Angle Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxAng</para>
        /// </summary>
        public StringValue MaxAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ahPolar");
            builder.AddChild<Position>();
            builder.AddElement<AdjustHandlePolar>()
.AddAttribute(0, "gdRefR", a => a.RadialAdjustmentGuide, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "minR", a => a.MinRadial, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "maxR", a => a.MaxRadial, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "gdRefAng", a => a.AngleAdjustmentGuide, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "minAng", a => a.MinAngle, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int32Value>(NumberValidator.Instance);
union.AddValidator(StringValidator.Instance);
});
})
.AddAttribute(0, "maxAng", a => a.MaxAngle, aBuilder =>
{
aBuilder.AddUnion(union =>
{
union.AddValidator<Int32Value>(NumberValidator.Instance);
union.AddValidator(StringValidator.Instance);
});
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Shape Position Coordinate.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandlePolar>(deep);
    }

    /// <summary>
    /// <para>Shape Connection Site.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxn.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Position &lt;a:pos></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionSite : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionSite class.
        /// </summary>
        public ConnectionSite() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSite(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSite(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionSite(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Connection Site Angle</para>
        /// <para>Represents the following attribute in the schema: ang</para>
        /// </summary>
        public StringValue Angle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cxn");
            builder.AddChild<Position>();
            builder.AddElement<ConnectionSite>()
.AddAttribute(0, "ang", a => a.Angle, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddUnion(union =>
{
union.AddValidator<Int32Value>(NumberValidator.Instance);
union.AddValidator(StringValidator.Instance);
});
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSite>(deep);
    }

    /// <summary>
    /// <para>Close Shape Path.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:close.</para>
    /// </summary>
    public partial class CloseShapePath : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CloseShapePath class.
        /// </summary>
        public CloseShapePath() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "close");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CloseShapePath>(deep);
    }

    /// <summary>
    /// <para>Move Path To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Point &lt;a:pt></description></item>
    /// </list>
    /// </remark>
    public partial class MoveTo : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MoveTo class.
        /// </summary>
        public MoveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "moveTo");
            builder.AddChild<Point>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Point), 1, 1)
            };
        }

        /// <summary>
        /// <para>Move end point.</para>
        /// <para>Represents the following element tag in the schema: a:pt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Point Point
        {
            get => GetElement<Point>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveTo>(deep);
    }

    /// <summary>
    /// <para>Draw Line To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Point &lt;a:pt></description></item>
    /// </list>
    /// </remark>
    public partial class LineTo : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LineTo class.
        /// </summary>
        public LineTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnTo");
            builder.AddChild<Point>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Point), 1, 1)
            };
        }

        /// <summary>
        /// <para>Line end point.</para>
        /// <para>Represents the following element tag in the schema: a:pt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Point Point
        {
            get => GetElement<Point>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineTo>(deep);
    }

    /// <summary>
    /// <para>Draw Arc To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:arcTo.</para>
    /// </summary>
    public partial class ArcTo : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ArcTo class.
        /// </summary>
        public ArcTo() : base()
        {
        }

        /// <summary>
        /// <para>Shape Arc Width Radius</para>
        /// <para>Represents the following attribute in the schema: wR</para>
        /// </summary>
        public StringValue WidthRadius
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Height Radius</para>
        /// <para>Represents the following attribute in the schema: hR</para>
        /// </summary>
        public StringValue HeightRadius
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Start Angle</para>
        /// <para>Represents the following attribute in the schema: stAng</para>
        /// </summary>
        public StringValue StartAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Swing Angle</para>
        /// <para>Represents the following attribute in the schema: swAng</para>
        /// </summary>
        public StringValue SwingAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "arcTo");
            builder.AddElement<ArcTo>()
.AddAttribute(0, "wR", a => a.WidthRadius, aBuilder =>
{
 aBuilder.AddValidator(RequiredValidator.Instance);
 aBuilder.AddUnion(union =>
 {
     union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
     union.AddValidator(StringValidator.Instance);
 });
})
.AddAttribute(0, "hR", a => a.HeightRadius, aBuilder =>
{
 aBuilder.AddValidator(RequiredValidator.Instance);
 aBuilder.AddUnion(union =>
 {
     union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
     union.AddValidator(StringValidator.Instance);
 });
})
.AddAttribute(0, "stAng", a => a.StartAngle, aBuilder =>
{
 aBuilder.AddValidator(RequiredValidator.Instance);
 aBuilder.AddUnion(union =>
 {
     union.AddValidator<Int32Value>(NumberValidator.Instance);
     union.AddValidator(StringValidator.Instance);
 });
})
.AddAttribute(0, "swAng", a => a.SwingAngle, aBuilder =>
{
 aBuilder.AddValidator(RequiredValidator.Instance);
 aBuilder.AddUnion(union =>
 {
     union.AddValidator<Int32Value>(NumberValidator.Instance);
     union.AddValidator(StringValidator.Instance);
 });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ArcTo>(deep);
    }

    /// <summary>
    /// <para>Draw Quadratic Bezier Curve To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:quadBezTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Point &lt;a:pt></description></item>
    /// </list>
    /// </remark>
    public partial class QuadraticBezierCurveTo : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class.
        /// </summary>
        public QuadraticBezierCurveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuadraticBezierCurveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuadraticBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public QuadraticBezierCurveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "quadBezTo");
            builder.AddChild<Point>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Point), 2, 2)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuadraticBezierCurveTo>(deep);
    }

    /// <summary>
    /// <para>Draw Cubic Bezier Curve To.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cubicBezTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Point &lt;a:pt></description></item>
    /// </list>
    /// </remark>
    public partial class CubicBezierCurveTo : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class.
        /// </summary>
        public CubicBezierCurveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CubicBezierCurveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CubicBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CubicBezierCurveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cubicBezTo");
            builder.AddChild<Point>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Point), 3, 3)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CubicBezierCurveTo>(deep);
    }

    /// <summary>
    /// <para>Shape Path.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:path.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CloseShapePath &lt;a:close></description></item>
    ///   <item><description>MoveTo &lt;a:moveTo></description></item>
    ///   <item><description>LineTo &lt;a:lnTo></description></item>
    ///   <item><description>ArcTo &lt;a:arcTo></description></item>
    ///   <item><description>QuadraticBezierCurveTo &lt;a:quadBezTo></description></item>
    ///   <item><description>CubicBezierCurveTo &lt;a:cubicBezTo></description></item>
    /// </list>
    /// </remark>
    public partial class Path : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Path class.
        /// </summary>
        public Path() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Path(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Path(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Path(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Path Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Fill</para>
        /// <para>Represents the following attribute in the schema: fill</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PathFillModeValues> Fill
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PathFillModeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Stroke</para>
        /// <para>Represents the following attribute in the schema: stroke</para>
        /// </summary>
        public BooleanValue Stroke
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>3D Extrusion Allowed</para>
        /// <para>Represents the following attribute in the schema: extrusionOk</para>
        /// </summary>
        public BooleanValue ExtrusionOk
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "path");
            builder.AddChild<CloseShapePath>();
            builder.AddChild<MoveTo>();
            builder.AddChild<LineTo>();
            builder.AddChild<ArcTo>();
            builder.AddChild<QuadraticBezierCurveTo>();
            builder.AddChild<CubicBezierCurveTo>();
            builder.AddElement<Path>()
.AddAttribute(0, "w", a => a.Width, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "h", a => a.Height, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
})
.AddAttribute(0, "fill", a => a.Fill, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "stroke", a => a.Stroke)
.AddAttribute(0, "extrusionOk", a => a.ExtrusionOk);
            builder.Particle = new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CloseShapePath), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.MoveTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ArcTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.QuadraticBezierCurveTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CubicBezierCurveTo), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Path>(deep);
    }

    /// <summary>
    /// <para>List of Shape Adjust Values.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:avLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeGuide &lt;a:gd></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustValueList : GeometryGuideListType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustValueList class.
        /// </summary>
        public AdjustValueList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustValueList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustValueList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustValueList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "avLst");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeGuide), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustValueList>(deep);
    }

    /// <summary>
    /// <para>List of Shape Guides.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gdLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeGuide &lt;a:gd></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeGuideList : GeometryGuideListType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class.
        /// </summary>
        public ShapeGuideList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeGuideList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeGuideList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeGuideList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gdLst");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeGuide), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuideList>(deep);
    }

    /// <summary>
    /// <para>Defines the GeometryGuideListType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeGuide &lt;a:gd></description></item>
    /// </list>
    /// </remark>
    public abstract partial class GeometryGuideListType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class.
        /// </summary>
        protected GeometryGuideListType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected GeometryGuideListType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected GeometryGuideListType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected GeometryGuideListType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<ShapeGuide>();
        }
    }

    /// <summary>
    /// <para>List of Shape Adjust Handles.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AdjustHandleXY &lt;a:ahXY></description></item>
    ///   <item><description>AdjustHandlePolar &lt;a:ahPolar></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandleList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class.
        /// </summary>
        public AdjustHandleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ahLst");
            builder.AddChild<AdjustHandleXY>();
            builder.AddChild<AdjustHandlePolar>();
            builder.Particle = new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustHandleXY), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AdjustHandlePolar), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleList>(deep);
    }

    /// <summary>
    /// <para>List of Shape Connection Sites.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConnectionSite &lt;a:cxn></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionSiteList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class.
        /// </summary>
        public ConnectionSiteList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSiteList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSiteList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionSiteList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cxnLst");
            builder.AddChild<ConnectionSite>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectionSite), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSiteList>(deep);
    }

    /// <summary>
    /// <para>Shape Text Rectangle.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rect.</para>
    /// </summary>
    public partial class Rectangle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Rectangle class.
        /// </summary>
        public Rectangle() : base()
        {
        }

        /// <summary>
        /// <para>Left</para>
        /// <para>Represents the following attribute in the schema: l</para>
        /// </summary>
        public StringValue Left
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top</para>
        /// <para>Represents the following attribute in the schema: t</para>
        /// </summary>
        public StringValue Top
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public StringValue Right
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Position</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public StringValue Bottom
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "rect");
            builder.AddElement<Rectangle>()
.AddAttribute(0, "l", a => a.Left, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
  aBuilder.AddUnion(union =>
  {
      union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
      union.AddValidator(StringValidator.Instance);
  });
})
.AddAttribute(0, "t", a => a.Top, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
  aBuilder.AddUnion(union =>
  {
      union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
      union.AddValidator(StringValidator.Instance);
  });
})
.AddAttribute(0, "r", a => a.Right, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
  aBuilder.AddUnion(union =>
  {
      union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
      union.AddValidator(StringValidator.Instance);
  });
})
.AddAttribute(0, "b", a => a.Bottom, aBuilder =>
{
  aBuilder.AddValidator(RequiredValidator.Instance);
  aBuilder.AddUnion(union =>
  {
      union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
      union.AddValidator(StringValidator.Instance);
  });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rectangle>(deep);
    }

    /// <summary>
    /// <para>List of Shape Paths.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pathLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Path &lt;a:path></description></item>
    /// </list>
    /// </remark>
    public partial class PathList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PathList class.
        /// </summary>
        public PathList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PathList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pathLst");
            builder.AddChild<Path>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Path), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathList>(deep);
    }

    /// <summary>
    /// <para>Dash Stop.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ds.</para>
    /// </summary>
    public partial class DashStop : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DashStop class.
        /// </summary>
        public DashStop() : base()
        {
        }

        /// <summary>
        /// <para>Dash Length</para>
        /// <para>Represents the following attribute in the schema: d</para>
        /// </summary>
        public Int32Value DashLength
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Space Length</para>
        /// <para>Represents the following attribute in the schema: sp</para>
        /// </summary>
        public Int32Value SpaceLength
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ds");
            builder.AddElement<DashStop>()
.AddAttribute(0, "d", a => a.DashLength, aBuilder =>
{
    aBuilder.AddValidator(RequiredValidator.Instance);
    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
})
.AddAttribute(0, "sp", a => a.SpaceLength, aBuilder =>
{
    aBuilder.AddValidator(RequiredValidator.Instance);
    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
});
            builder.AddConstraint(new AttributeValueRangeConstraint(0 /*:d*/, true, 1, true, double.PositiveInfinity, true));
            builder.AddConstraint(new AttributeValueRangeConstraint(1 /*:sp*/, true, 1, true, double.PositiveInfinity, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DashStop>(deep);
    }

    /// <summary>
    /// <para>Line Head/End Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:headEnd.</para>
    /// </summary>
    public partial class HeadEnd : LineEndPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the HeadEnd class.
        /// </summary>
        public HeadEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "headEnd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeadEnd>(deep);
    }

    /// <summary>
    /// <para>Tail line end style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tailEnd.</para>
    /// </summary>
    public partial class TailEnd : LineEndPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TailEnd class.
        /// </summary>
        public TailEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tailEnd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TailEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the LineEndPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LineEndPropertiesType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineEndPropertiesType class.
        /// </summary>
        protected LineEndPropertiesType() : base()
        {
        }

        /// <summary>
        /// <para>Line Head/End Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndValues> Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LineEndValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Width of Head/End</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndWidthValues> Width
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LineEndWidthValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Length of Head/End</para>
        /// <para>Represents the following attribute in the schema: len</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndLengthValues> Length
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.LineEndLengthValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<LineEndPropertiesType>()
                           .AddAttribute(0, "type", a => a.Type, aBuilder =>
                           {
                               aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                           })
                           .AddAttribute(0, "w", a => a.Width, aBuilder =>
                           {
                               aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                           })
                           .AddAttribute(0, "len", a => a.Length, aBuilder =>
                           {
                               aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                           });
        }
    }

    /// <summary>
    /// <para>2D Transform for Grouped Objects.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Offset &lt;a:off></description></item>
    ///   <item><description>Extents &lt;a:ext></description></item>
    ///   <item><description>ChildOffset &lt;a:chOff></description></item>
    ///   <item><description>ChildExtents &lt;a:chExt></description></item>
    /// </list>
    /// </remark>
    public partial class TransformGroup : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TransformGroup class.
        /// </summary>
        public TransformGroup() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TransformGroup(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TransformGroup(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TransformGroup(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Flip</para>
        /// <para>Represents the following attribute in the schema: flipH</para>
        /// </summary>
        public BooleanValue HorizontalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Flip</para>
        /// <para>Represents the following attribute in the schema: flipV</para>
        /// </summary>
        public BooleanValue VerticalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "xfrm");
            builder.AddChild<Offset>();
            builder.AddChild<Extents>();
            builder.AddChild<ChildOffset>();
            builder.AddChild<ChildExtents>();
            builder.AddElement<TransformGroup>()
.AddAttribute(0, "rot", a => a.Rotation)
.AddAttribute(0, "flipH", a => a.HorizontalFlip)
.AddAttribute(0, "flipV", a => a.VerticalFlip);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Offset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Extents), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ChildOffset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ChildExtents), 0, 1)
            };
        }

        /// <summary>
        /// <para>Offset.</para>
        /// <para>Represents the following element tag in the schema: a:off.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Offset Offset
        {
            get => GetElement<Offset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extents.</para>
        /// <para>Represents the following element tag in the schema: a:ext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Extents Extents
        {
            get => GetElement<Extents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Child Offset.</para>
        /// <para>Represents the following element tag in the schema: a:chOff.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ChildOffset ChildOffset
        {
            get => GetElement<ChildOffset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Child Extents.</para>
        /// <para>Represents the following element tag in the schema: a:chExt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ChildExtents ChildExtents
        {
            get => GetElement<ChildExtents>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformGroup>(deep);
    }

    /// <summary>
    /// <para>Defines the BodyProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bodyPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PresetTextWrap &lt;a:prstTxWarp></description></item>
    ///   <item><description>NoAutoFit &lt;a:noAutofit></description></item>
    ///   <item><description>NormalAutoFit &lt;a:normAutofit></description></item>
    ///   <item><description>ShapeAutoFit &lt;a:spAutoFit></description></item>
    ///   <item><description>Scene3DType &lt;a:scene3d></description></item>
    ///   <item><description>Shape3DType &lt;a:sp3d></description></item>
    ///   <item><description>FlatText &lt;a:flatTx></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class BodyProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BodyProperties class.
        /// </summary>
        public BodyProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BodyProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BodyProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BodyProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Paragraph Spacing</para>
        /// <para>Represents the following attribute in the schema: spcFirstLastPara</para>
        /// </summary>
        public BooleanValue UseParagraphSpacing
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Vertical Overflow</para>
        /// <para>Represents the following attribute in the schema: vertOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues> VerticalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Horizontal Overflow</para>
        /// <para>Represents the following attribute in the schema: horzOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues> HorizontalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Text</para>
        /// <para>Represents the following attribute in the schema: vert</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues> Vertical
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Wrapping Type</para>
        /// <para>Represents the following attribute in the schema: wrap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextWrappingValues> Wrap
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextWrappingValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Left Inset</para>
        /// <para>Represents the following attribute in the schema: lIns</para>
        /// </summary>
        public Int32Value LeftInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Inset</para>
        /// <para>Represents the following attribute in the schema: tIns</para>
        /// </summary>
        public Int32Value TopInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Inset</para>
        /// <para>Represents the following attribute in the schema: rIns</para>
        /// </summary>
        public Int32Value RightInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Inset</para>
        /// <para>Represents the following attribute in the schema: bIns</para>
        /// </summary>
        public Int32Value BottomInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Number of Columns</para>
        /// <para>Represents the following attribute in the schema: numCol</para>
        /// </summary>
        public Int32Value ColumnCount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Space Between Columns</para>
        /// <para>Represents the following attribute in the schema: spcCol</para>
        /// </summary>
        public Int32Value ColumnSpacing
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Columns Right-To-Left</para>
        /// <para>Represents the following attribute in the schema: rtlCol</para>
        /// </summary>
        public BooleanValue RightToLeftColumns
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>From WordArt</para>
        /// <para>Represents the following attribute in the schema: fromWordArt</para>
        /// </summary>
        public BooleanValue FromWordArt
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor</para>
        /// <para>Represents the following attribute in the schema: anchor</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues> Anchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor Center</para>
        /// <para>Represents the following attribute in the schema: anchorCtr</para>
        /// </summary>
        public BooleanValue AnchorCenter
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Force Anti-Alias</para>
        /// <para>Represents the following attribute in the schema: forceAA</para>
        /// </summary>
        public BooleanValue ForceAntiAlias
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Upright</para>
        /// <para>Represents the following attribute in the schema: upright</para>
        /// </summary>
        public BooleanValue UpRight
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Compatible Line Spacing</para>
        /// <para>Represents the following attribute in the schema: compatLnSpc</para>
        /// </summary>
        public BooleanValue CompatibleLineSpacing
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bodyPr");
            builder.AddChild<PresetTextWrap>();
            builder.AddChild<NoAutoFit>();
            builder.AddChild<NormalAutoFit>();
            builder.AddChild<ShapeAutoFit>();
            builder.AddChild<Scene3DType>();
            builder.AddChild<Shape3DType>();
            builder.AddChild<FlatText>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<BodyProperties>()
.AddAttribute(0, "rot", a => a.Rotation)
.AddAttribute(0, "spcFirstLastPara", a => a.UseParagraphSpacing)
.AddAttribute(0, "vertOverflow", a => a.VerticalOverflow, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "horzOverflow", a => a.HorizontalOverflow, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "vert", a => a.Vertical, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "wrap", a => a.Wrap, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "lIns", a => a.LeftInset)
.AddAttribute(0, "tIns", a => a.TopInset)
.AddAttribute(0, "rIns", a => a.RightInset)
.AddAttribute(0, "bIns", a => a.BottomInset)
.AddAttribute(0, "numCol", a => a.ColumnCount, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (16L) });
})
.AddAttribute(0, "spcCol", a => a.ColumnSpacing, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
})
.AddAttribute(0, "rtlCol", a => a.RightToLeftColumns)
.AddAttribute(0, "fromWordArt", a => a.FromWordArt)
.AddAttribute(0, "anchor", a => a.Anchor, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "anchorCtr", a => a.AnchorCenter)
.AddAttribute(0, "forceAA", a => a.ForceAntiAlias)
.AddAttribute(0, "upright", a => a.UpRight)
.AddAttribute(0, "compatLnSpc", a => a.CompatibleLineSpacing);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetTextWrap), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoAutoFit), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NormalAutoFit), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeAutoFit), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Scene3DType), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shape3DType), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FlatText), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Preset Text Shape.</para>
        /// <para>Represents the following element tag in the schema: a:prstTxWarp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public PresetTextWrap PresetTextWrap
        {
            get => GetElement<PresetTextWrap>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BodyProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the ListStyle Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lstStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DefaultParagraphProperties &lt;a:defPPr></description></item>
    ///   <item><description>Level1ParagraphProperties &lt;a:lvl1pPr></description></item>
    ///   <item><description>Level2ParagraphProperties &lt;a:lvl2pPr></description></item>
    ///   <item><description>Level3ParagraphProperties &lt;a:lvl3pPr></description></item>
    ///   <item><description>Level4ParagraphProperties &lt;a:lvl4pPr></description></item>
    ///   <item><description>Level5ParagraphProperties &lt;a:lvl5pPr></description></item>
    ///   <item><description>Level6ParagraphProperties &lt;a:lvl6pPr></description></item>
    ///   <item><description>Level7ParagraphProperties &lt;a:lvl7pPr></description></item>
    ///   <item><description>Level8ParagraphProperties &lt;a:lvl8pPr></description></item>
    ///   <item><description>Level9ParagraphProperties &lt;a:lvl9pPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ListStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ListStyle class.
        /// </summary>
        public ListStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ListStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ListStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ListStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lstStyle");
            builder.AddChild<DefaultParagraphProperties>();
            builder.AddChild<Level1ParagraphProperties>();
            builder.AddChild<Level2ParagraphProperties>();
            builder.AddChild<Level3ParagraphProperties>();
            builder.AddChild<Level4ParagraphProperties>();
            builder.AddChild<Level5ParagraphProperties>();
            builder.AddChild<Level6ParagraphProperties>();
            builder.AddChild<Level7ParagraphProperties>();
            builder.AddChild<Level8ParagraphProperties>();
            builder.AddChild<Level9ParagraphProperties>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level1ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level2ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level3ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level4ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level5ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level6ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level7ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level8ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Level9ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Default Paragraph Style.</para>
        /// <para>Represents the following element tag in the schema: a:defPPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DefaultParagraphProperties DefaultParagraphProperties
        {
            get => GetElement<DefaultParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 1 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl1pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level1ParagraphProperties Level1ParagraphProperties
        {
            get => GetElement<Level1ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 2 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl2pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level2ParagraphProperties Level2ParagraphProperties
        {
            get => GetElement<Level2ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 3 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl3pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level3ParagraphProperties Level3ParagraphProperties
        {
            get => GetElement<Level3ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 4 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl4pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level4ParagraphProperties Level4ParagraphProperties
        {
            get => GetElement<Level4ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 5 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl5pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level5ParagraphProperties Level5ParagraphProperties
        {
            get => GetElement<Level5ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 6 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl6pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level6ParagraphProperties Level6ParagraphProperties
        {
            get => GetElement<Level6ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 7 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl7pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level7ParagraphProperties Level7ParagraphProperties
        {
            get => GetElement<Level7ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 8 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl8pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level8ParagraphProperties Level8ParagraphProperties
        {
            get => GetElement<Level8ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 9 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl9pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Level9ParagraphProperties Level9ParagraphProperties
        {
            get => GetElement<Level9ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListStyle>(deep);
    }

    /// <summary>
    /// <para>Shape Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>BodyProperties &lt;a:bodyPr></description></item>
    ///   <item><description>ListStyle &lt;a:lstStyle></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefault class.
        /// </summary>
        public ShapeDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spDef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeDefault>(deep);
    }

    /// <summary>
    /// <para>Line Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>BodyProperties &lt;a:bodyPr></description></item>
    ///   <item><description>ListStyle &lt;a:lstStyle></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class LineDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the LineDefault class.
        /// </summary>
        public LineDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnDef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineDefault>(deep);
    }

    /// <summary>
    /// <para>Text Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>BodyProperties &lt;a:bodyPr></description></item>
    ///   <item><description>ListStyle &lt;a:lstStyle></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TextDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the TextDefault class.
        /// </summary>
        public TextDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "txDef");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextDefault>(deep);
    }

    /// <summary>
    /// <para>Defines the DefaultShapeDefinitionType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>BodyProperties &lt;a:bodyPr></description></item>
    ///   <item><description>ListStyle &lt;a:lstStyle></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class DefaultShapeDefinitionType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class.
        /// </summary>
        protected DefaultShapeDefinitionType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DefaultShapeDefinitionType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DefaultShapeDefinitionType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected DefaultShapeDefinitionType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<ShapeProperties>();
            builder.AddChild<BodyProperties>();
            builder.AddChild<ListStyle>();
            builder.AddChild<ShapeStyle>();
            builder.AddChild<ExtensionList>();
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeProperties ShapeProperties
        {
            get => GetElement<ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BodyProperties.</para>
        /// <para>Represents the following element tag in the schema: a:bodyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BodyProperties BodyProperties
        {
            get => GetElement<BodyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ListStyle.</para>
        /// <para>Represents the following element tag in the schema: a:lstStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ListStyle ListStyle
        {
            get => GetElement<ListStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeStyle.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeStyle ShapeStyle
        {
            get => GetElement<ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Override Color Mapping.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:overrideClrMapping.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class OverrideColorMapping : ColorMappingType
    {
        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class.
        /// </summary>
        public OverrideColorMapping() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OverrideColorMapping(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OverrideColorMapping(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OverrideColorMapping(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "overrideClrMapping");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OverrideColorMapping>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorMap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrMap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ColorMap : ColorMappingType
    {
        /// <summary>
        /// Initializes a new instance of the ColorMap class.
        /// </summary>
        public ColorMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorMap(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "clrMap");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorMap>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorMappingType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ColorMappingType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorMappingType class.
        /// </summary>
        protected ColorMappingType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorMappingType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorMappingType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ColorMappingType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Background 1</para>
        /// <para>Represents the following attribute in the schema: bg1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Background1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 1</para>
        /// <para>Represents the following attribute in the schema: tx1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Text1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Background 2</para>
        /// <para>Represents the following attribute in the schema: bg2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Background2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 2</para>
        /// <para>Represents the following attribute in the schema: tx2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Text2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 1</para>
        /// <para>Represents the following attribute in the schema: accent1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 2</para>
        /// <para>Represents the following attribute in the schema: accent2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 3</para>
        /// <para>Represents the following attribute in the schema: accent3</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent3
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 4</para>
        /// <para>Represents the following attribute in the schema: accent4</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent4
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 5</para>
        /// <para>Represents the following attribute in the schema: accent5</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent5
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 6</para>
        /// <para>Represents the following attribute in the schema: accent6</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent6
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink</para>
        /// <para>Represents the following attribute in the schema: hlink</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Hyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Followed Hyperlink</para>
        /// <para>Represents the following attribute in the schema: folHlink</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> FollowedHyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<ExtensionList>();
            builder.AddElement<ColorMappingType>()
.AddAttribute(0, "bg1", a => a.Background1, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "tx1", a => a.Text1, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "bg2", a => a.Background2, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "tx2", a => a.Text2, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent1", a => a.Accent1, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent2", a => a.Accent2, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent3", a => a.Accent3, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent4", a => a.Accent4, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent5", a => a.Accent5, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "accent6", a => a.Accent6, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "hlink", a => a.Hyperlink, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "folHlink", a => a.FollowedHyperlink, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Extra Color Scheme.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extraClrScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ColorScheme &lt;a:clrScheme></description></item>
    ///   <item><description>ColorMap &lt;a:clrMap></description></item>
    /// </list>
    /// </remark>
    public partial class ExtraColorScheme : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class.
        /// </summary>
        public ExtraColorScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtraColorScheme(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extraClrScheme");
            builder.AddChild<ColorScheme>();
            builder.AddChild<ColorMap>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorMap), 0, 1)
            };
        }

        /// <summary>
        /// <para>ColorScheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorScheme ColorScheme
        {
            get => GetElement<ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ColorMap.</para>
        /// <para>Represents the following element tag in the schema: a:clrMap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorMap ColorMap
        {
            get => GetElement<ColorMap>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorScheme>(deep);
    }

    /// <summary>
    /// <para>Defines the ThemeElements Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeElements.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ColorScheme &lt;a:clrScheme></description></item>
    ///   <item><description>FontScheme &lt;a:fontScheme></description></item>
    ///   <item><description>FormatScheme &lt;a:fmtScheme></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ThemeElements : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeElements class.
        /// </summary>
        public ThemeElements() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeElements(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeElements(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ThemeElements(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "themeElements");
            builder.AddChild<ColorScheme>();
            builder.AddChild<FontScheme>();
            builder.AddChild<FormatScheme>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ColorScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FontScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FormatScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ColorScheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ColorScheme ColorScheme
        {
            get => GetElement<ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Font Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:fontScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FontScheme FontScheme
        {
            get => GetElement<FontScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Format Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:fmtScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FormatScheme FormatScheme
        {
            get => GetElement<FormatScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeElements>(deep);
    }

    /// <summary>
    /// <para>Cell 3-D.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cell3D.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Bevel &lt;a:bevel></description></item>
    ///   <item><description>LightRig &lt;a:lightRig></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Cell3DProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class.
        /// </summary>
        public Cell3DProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Cell3DProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Cell3DProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Cell3DProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Material</para>
        /// <para>Represents the following attribute in the schema: prstMaterial</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues> PresetMaterial
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cell3D");
            builder.AddChild<Bevel>();
            builder.AddChild<LightRig>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<Cell3DProperties>()
.AddAttribute(0, "prstMaterial", a => a.PresetMaterial, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Bevel), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LightRig), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevel.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Bevel Bevel
        {
            get => GetElement<Bevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light Rig.</para>
        /// <para>Represents the following element tag in the schema: a:lightRig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LightRig LightRig
        {
            get => GetElement<LightRig>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Cell3DProperties>(deep);
    }

    /// <summary>
    /// <para>Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LeftBorderLineProperties &lt;a:lnL></description></item>
    ///   <item><description>RightBorderLineProperties &lt;a:lnR></description></item>
    ///   <item><description>TopBorderLineProperties &lt;a:lnT></description></item>
    ///   <item><description>BottomBorderLineProperties &lt;a:lnB></description></item>
    ///   <item><description>TopLeftToBottomRightBorderLineProperties &lt;a:lnTlToBr></description></item>
    ///   <item><description>BottomLeftToTopRightBorderLineProperties &lt;a:lnBlToTr></description></item>
    ///   <item><description>Cell3DProperties &lt;a:cell3D></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellProperties class.
        /// </summary>
        public TableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Left Margin</para>
        /// <para>Represents the following attribute in the schema: marL</para>
        /// </summary>
        public Int32Value LeftMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Margin</para>
        /// <para>Represents the following attribute in the schema: marR</para>
        /// </summary>
        public Int32Value RightMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Margin</para>
        /// <para>Represents the following attribute in the schema: marT</para>
        /// </summary>
        public Int32Value TopMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Margin</para>
        /// <para>Represents the following attribute in the schema: marB</para>
        /// </summary>
        public Int32Value BottomMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Direction</para>
        /// <para>Represents the following attribute in the schema: vert</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues> Vertical
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor</para>
        /// <para>Represents the following attribute in the schema: anchor</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues> Anchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor Center</para>
        /// <para>Represents the following attribute in the schema: anchorCtr</para>
        /// </summary>
        public BooleanValue AnchorCenter
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Overflow</para>
        /// <para>Represents the following attribute in the schema: horzOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues> HorizontalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tcPr");
            builder.AddChild<LeftBorderLineProperties>();
            builder.AddChild<RightBorderLineProperties>();
            builder.AddChild<TopBorderLineProperties>();
            builder.AddChild<BottomBorderLineProperties>();
            builder.AddChild<TopLeftToBottomRightBorderLineProperties>();
            builder.AddChild<BottomLeftToTopRightBorderLineProperties>();
            builder.AddChild<Cell3DProperties>();
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableCellProperties>()
.AddAttribute(0, "marL", a => a.LeftMargin)
.AddAttribute(0, "marR", a => a.RightMargin)
.AddAttribute(0, "marT", a => a.TopMargin)
.AddAttribute(0, "marB", a => a.BottomMargin)
.AddAttribute(0, "vert", a => a.Vertical, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "anchor", a => a.Anchor, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "anchorCtr", a => a.AnchorCenter)
.AddAttribute(0, "horzOverflow", a => a.HorizontalOverflow, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LeftBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TopBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BottomBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TopLeftToBottomRightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BottomLeftToTopRightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Cell3DProperties), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Left Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnL.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LeftBorderLineProperties LeftBorderLineProperties
        {
            get => GetElement<LeftBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnR.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RightBorderLineProperties RightBorderLineProperties
        {
            get => GetElement<RightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnT.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TopBorderLineProperties TopBorderLineProperties
        {
            get => GetElement<TopBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnB.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BottomBorderLineProperties BottomBorderLineProperties
        {
            get => GetElement<BottomBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top-Left to Bottom-Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnTlToBr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TopLeftToBottomRightBorderLineProperties TopLeftToBottomRightBorderLineProperties
        {
            get => GetElement<TopLeftToBottomRightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom-Left to Top-Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnBlToTr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BottomLeftToTopRightBorderLineProperties BottomLeftToTopRightBorderLineProperties
        {
            get => GetElement<BottomLeftToTopRightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Cell 3-D.</para>
        /// <para>Represents the following element tag in the schema: a:cell3D.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Cell3DProperties Cell3DProperties
        {
            get => GetElement<Cell3DProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Table Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TextBody &lt;a:txBody></description></item>
    ///   <item><description>TableCellProperties &lt;a:tcPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableCell : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCell class.
        /// </summary>
        public TableCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCell(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Row Span</para>
        /// <para>Represents the following attribute in the schema: rowSpan</para>
        /// </summary>
        public Int32Value RowSpan
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grid Span</para>
        /// <para>Represents the following attribute in the schema: gridSpan</para>
        /// </summary>
        public Int32Value GridSpan
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Merge</para>
        /// <para>Represents the following attribute in the schema: hMerge</para>
        /// </summary>
        public BooleanValue HorizontalMerge
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Merge</para>
        /// <para>Represents the following attribute in the schema: vMerge</para>
        /// </summary>
        public BooleanValue VerticalMerge
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tc");
            builder.AddChild<TextBody>();
            builder.AddChild<TableCellProperties>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableCell>()
.AddAttribute(0, "rowSpan", a => a.RowSpan)
.AddAttribute(0, "gridSpan", a => a.GridSpan)
.AddAttribute(0, "hMerge", a => a.HorizontalMerge)
.AddAttribute(0, "vMerge", a => a.VerticalMerge);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TextBody), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeValueRangeConstraint(0 /*:rowSpan*/, true, 1, true, double.PositiveInfinity, true));
            builder.AddConstraint(new AttributeValueRangeConstraint(1 /*:gridSpan*/, true, 1, true, double.PositiveInfinity, true));
        }

        /// <summary>
        /// <para>Text Body.</para>
        /// <para>Represents the following element tag in the schema: a:txBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TextBody TextBody
        {
            get => GetElement<TextBody>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: a:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableCellProperties TableCellProperties
        {
            get => GetElement<TableCellProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCell>(deep);
    }

    /// <summary>
    /// <para>Table Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tableStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableBackground &lt;a:tblBg></description></item>
    ///   <item><description>WholeTable &lt;a:wholeTbl></description></item>
    ///   <item><description>Band1Horizontal &lt;a:band1H></description></item>
    ///   <item><description>Band2Horizontal &lt;a:band2H></description></item>
    ///   <item><description>Band1Vertical &lt;a:band1V></description></item>
    ///   <item><description>Band2Vertical &lt;a:band2V></description></item>
    ///   <item><description>LastColumn &lt;a:lastCol></description></item>
    ///   <item><description>FirstColumn &lt;a:firstCol></description></item>
    ///   <item><description>LastRow &lt;a:lastRow></description></item>
    ///   <item><description>SoutheastCell &lt;a:seCell></description></item>
    ///   <item><description>SouthwestCell &lt;a:swCell></description></item>
    ///   <item><description>FirstRow &lt;a:firstRow></description></item>
    ///   <item><description>NortheastCell &lt;a:neCell></description></item>
    ///   <item><description>NorthwestCell &lt;a:nwCell></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyle : TableStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TableStyle class.
        /// </summary>
        public TableStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tableStyle");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableBackground), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.WholeTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band1Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band2Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band1Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band2Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LastColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FirstColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LastRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SoutheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SouthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FirstRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NortheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NorthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(0 /*:styleId*/, true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);
    }

    /// <summary>
    /// <para>Table Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableBackground &lt;a:tblBg></description></item>
    ///   <item><description>WholeTable &lt;a:wholeTbl></description></item>
    ///   <item><description>Band1Horizontal &lt;a:band1H></description></item>
    ///   <item><description>Band2Horizontal &lt;a:band2H></description></item>
    ///   <item><description>Band1Vertical &lt;a:band1V></description></item>
    ///   <item><description>Band2Vertical &lt;a:band2V></description></item>
    ///   <item><description>LastColumn &lt;a:lastCol></description></item>
    ///   <item><description>FirstColumn &lt;a:firstCol></description></item>
    ///   <item><description>LastRow &lt;a:lastRow></description></item>
    ///   <item><description>SoutheastCell &lt;a:seCell></description></item>
    ///   <item><description>SouthwestCell &lt;a:swCell></description></item>
    ///   <item><description>FirstRow &lt;a:firstRow></description></item>
    ///   <item><description>NortheastCell &lt;a:neCell></description></item>
    ///   <item><description>NorthwestCell &lt;a:nwCell></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleEntry : TableStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class.
        /// </summary>
        public TableStyleEntry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleEntry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleEntry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleEntry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tblStyle");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableBackground), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.WholeTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band1Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band2Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band1Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Band2Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LastColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FirstColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LastRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SoutheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SouthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FirstRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NortheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NorthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(0 /*:styleId*/, true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleEntry>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableBackground &lt;a:tblBg></description></item>
    ///   <item><description>WholeTable &lt;a:wholeTbl></description></item>
    ///   <item><description>Band1Horizontal &lt;a:band1H></description></item>
    ///   <item><description>Band2Horizontal &lt;a:band2H></description></item>
    ///   <item><description>Band1Vertical &lt;a:band1V></description></item>
    ///   <item><description>Band2Vertical &lt;a:band2V></description></item>
    ///   <item><description>LastColumn &lt;a:lastCol></description></item>
    ///   <item><description>FirstColumn &lt;a:firstCol></description></item>
    ///   <item><description>LastRow &lt;a:lastRow></description></item>
    ///   <item><description>SoutheastCell &lt;a:seCell></description></item>
    ///   <item><description>SouthwestCell &lt;a:swCell></description></item>
    ///   <item><description>FirstRow &lt;a:firstRow></description></item>
    ///   <item><description>NortheastCell &lt;a:neCell></description></item>
    ///   <item><description>NorthwestCell &lt;a:nwCell></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TableStyleType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleType class.
        /// </summary>
        protected TableStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TableStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TableStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TableStyleType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style ID</para>
        /// <para>Represents the following attribute in the schema: styleId</para>
        /// </summary>
        public StringValue StyleId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: styleName</para>
        /// </summary>
        public StringValue StyleName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<TableBackground>();
            builder.AddChild<WholeTable>();
            builder.AddChild<Band1Horizontal>();
            builder.AddChild<Band2Horizontal>();
            builder.AddChild<Band1Vertical>();
            builder.AddChild<Band2Vertical>();
            builder.AddChild<LastColumn>();
            builder.AddChild<FirstColumn>();
            builder.AddChild<LastRow>();
            builder.AddChild<SoutheastCell>();
            builder.AddChild<SouthwestCell>();
            builder.AddChild<FirstRow>();
            builder.AddChild<NortheastCell>();
            builder.AddChild<NorthwestCell>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableStyleType>()
.AddAttribute(0, "styleId", a => a.StyleId, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
})
.AddAttribute(0, "styleName", a => a.StyleName, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
});
        }

        /// <summary>
        /// <para>Table Background.</para>
        /// <para>Represents the following element tag in the schema: a:tblBg.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableBackground TableBackground
        {
            get => GetElement<TableBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Whole Table.</para>
        /// <para>Represents the following element tag in the schema: a:wholeTbl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public WholeTable WholeTable
        {
            get => GetElement<WholeTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 1 Horizontal.</para>
        /// <para>Represents the following element tag in the schema: a:band1H.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Band1Horizontal Band1Horizontal
        {
            get => GetElement<Band1Horizontal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 2 Horizontal.</para>
        /// <para>Represents the following element tag in the schema: a:band2H.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Band2Horizontal Band2Horizontal
        {
            get => GetElement<Band2Horizontal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 1 Vertical.</para>
        /// <para>Represents the following element tag in the schema: a:band1V.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Band1Vertical Band1Vertical
        {
            get => GetElement<Band1Vertical>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 2 Vertical.</para>
        /// <para>Represents the following element tag in the schema: a:band2V.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Band2Vertical Band2Vertical
        {
            get => GetElement<Band2Vertical>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Last Column.</para>
        /// <para>Represents the following element tag in the schema: a:lastCol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LastColumn LastColumn
        {
            get => GetElement<LastColumn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Column.</para>
        /// <para>Represents the following element tag in the schema: a:firstCol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FirstColumn FirstColumn
        {
            get => GetElement<FirstColumn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Last Row.</para>
        /// <para>Represents the following element tag in the schema: a:lastRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LastRow LastRow
        {
            get => GetElement<LastRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Southeast Cell.</para>
        /// <para>Represents the following element tag in the schema: a:seCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SoutheastCell SoutheastCell
        {
            get => GetElement<SoutheastCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Southwest Cell.</para>
        /// <para>Represents the following element tag in the schema: a:swCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SouthwestCell SouthwestCell
        {
            get => GetElement<SouthwestCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Row.</para>
        /// <para>Represents the following element tag in the schema: a:firstRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public FirstRow FirstRow
        {
            get => GetElement<FirstRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Northeast Cell.</para>
        /// <para>Represents the following element tag in the schema: a:neCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NortheastCell NortheastCell
        {
            get => GetElement<NortheastCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Northwest Cell.</para>
        /// <para>Represents the following element tag in the schema: a:nwCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NorthwestCell NorthwestCell
        {
            get => GetElement<NorthwestCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Table Style ID.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tableStyleId.</para>
    /// </summary>
    public partial class TableStyleId : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleId class.
        /// </summary>
        public TableStyleId() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleId class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public TableStyleId(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
            builder.SetSchema(10, "tableStyleId");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleId>(deep);
    }

    /// <summary>
    /// <para>Table Grid Column.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gridCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class GridColumn : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GridColumn class.
        /// </summary>
        public GridColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GridColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GridColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GridColumn(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "gridCol");
            builder.AddChild<ExtensionList>();
            builder.AddElement<GridColumn>()
.AddAttribute(0, "w", a => a.Width, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridColumn>(deep);
    }

    /// <summary>
    /// <para>Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>TableStyle &lt;a:tableStyle></description></item>
    ///   <item><description>TableStyleId &lt;a:tableStyleId></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>
        public TableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Right-to-Left</para>
        /// <para>Represents the following attribute in the schema: rtl</para>
        /// </summary>
        public BooleanValue RightToLeft
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>First Row</para>
        /// <para>Represents the following attribute in the schema: firstRow</para>
        /// </summary>
        public BooleanValue FirstRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>First Column</para>
        /// <para>Represents the following attribute in the schema: firstCol</para>
        /// </summary>
        public BooleanValue FirstColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Row</para>
        /// <para>Represents the following attribute in the schema: lastRow</para>
        /// </summary>
        public BooleanValue LastRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Column</para>
        /// <para>Represents the following attribute in the schema: lastCol</para>
        /// </summary>
        public BooleanValue LastColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Banded Rows</para>
        /// <para>Represents the following attribute in the schema: bandRow</para>
        /// </summary>
        public BooleanValue BandRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Banded Columns</para>
        /// <para>Represents the following attribute in the schema: bandCol</para>
        /// </summary>
        public BooleanValue BandColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tblPr");
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.AddChild<TableStyle>();
            builder.AddChild<TableStyleId>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableProperties>()
.AddAttribute(0, "rtl", a => a.RightToLeft)
.AddAttribute(0, "firstRow", a => a.FirstRow)
.AddAttribute(0, "firstCol", a => a.FirstColumn)
.AddAttribute(0, "lastRow", a => a.LastRow)
.AddAttribute(0, "lastCol", a => a.LastColumn)
.AddAttribute(0, "bandRow", a => a.BandRow)
.AddAttribute(0, "bandCol", a => a.BandColumn);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableStyle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableStyleId), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Grid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GridColumn &lt;a:gridCol></description></item>
    /// </list>
    /// </remark>
    public partial class TableGrid : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGrid class.
        /// </summary>
        public TableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGrid(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tblGrid");
            builder.AddChild<GridColumn>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GridColumn), 1, 1000)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGrid>(deep);
    }

    /// <summary>
    /// <para>Table Row.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCell &lt;a:tc></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableRow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRow class.
        /// </summary>
        public TableRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tr");
            builder.AddChild<TableCell>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableRow>()
.AddAttribute(0, "h", a => a.Height, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCell), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRow>(deep);
    }

    /// <summary>
    /// <para>Left Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:left.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class LeftBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorder class.
        /// </summary>
        public LeftBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LeftBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "left");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);
    }

    /// <summary>
    /// <para>Right Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:right.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class RightBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorder class.
        /// </summary>
        public RightBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RightBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "right");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);
    }

    /// <summary>
    /// <para>Top Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:top.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class TopBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorder class.
        /// </summary>
        public TopBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "top");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);
    }

    /// <summary>
    /// <para>Bottom Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bottom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class BottomBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorder class.
        /// </summary>
        public BottomBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "bottom");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);
    }

    /// <summary>
    /// <para>Inside Horizontal Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:insideH.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class InsideHorizontalBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class.
        /// </summary>
        public InsideHorizontalBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideHorizontalBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideHorizontalBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsideHorizontalBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "insideH");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideHorizontalBorder>(deep);
    }

    /// <summary>
    /// <para>Inside Vertical Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:insideV.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class InsideVerticalBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class.
        /// </summary>
        public InsideVerticalBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideVerticalBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideVerticalBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsideVerticalBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "insideV");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideVerticalBorder>(deep);
    }

    /// <summary>
    /// <para>Top Left to Bottom Right Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tl2br.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class TopLeftToBottomRightBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class.
        /// </summary>
        public TopLeftToBottomRightBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopLeftToBottomRightBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tl2br");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorder>(deep);
    }

    /// <summary>
    /// <para>Top Right to Bottom Left Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tr2bl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public partial class TopRightToBottomLeftBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class.
        /// </summary>
        public TopRightToBottomLeftBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopRightToBottomLeftBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopRightToBottomLeftBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopRightToBottomLeftBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tr2bl");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopRightToBottomLeftBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the ThemeableLineStyleType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>LineReference &lt;a:lnRef></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ThemeableLineStyleType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class.
        /// </summary>
        protected ThemeableLineStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ThemeableLineStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ThemeableLineStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ThemeableLineStyleType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<Outline>();
            builder.AddChild<LineReference>();
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: a:ln.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Reference.</para>
        /// <para>Represents the following element tag in the schema: a:lnRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LineReference LineReference
        {
            get => GetElement<LineReference>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Table Cell Borders.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LeftBorder &lt;a:left></description></item>
    ///   <item><description>RightBorder &lt;a:right></description></item>
    ///   <item><description>TopBorder &lt;a:top></description></item>
    ///   <item><description>BottomBorder &lt;a:bottom></description></item>
    ///   <item><description>InsideHorizontalBorder &lt;a:insideH></description></item>
    ///   <item><description>InsideVerticalBorder &lt;a:insideV></description></item>
    ///   <item><description>TopLeftToBottomRightBorder &lt;a:tl2br></description></item>
    ///   <item><description>TopRightToBottomLeftBorder &lt;a:tr2bl></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellBorders class.
        /// </summary>
        public TableCellBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellBorders(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tcBdr");
            builder.AddChild<LeftBorder>();
            builder.AddChild<RightBorder>();
            builder.AddChild<TopBorder>();
            builder.AddChild<BottomBorder>();
            builder.AddChild<InsideHorizontalBorder>();
            builder.AddChild<InsideVerticalBorder>();
            builder.AddChild<TopLeftToBottomRightBorder>();
            builder.AddChild<TopRightToBottomLeftBorder>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InsideHorizontalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.InsideVerticalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TopLeftToBottomRightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TopRightToBottomLeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Left Border.</para>
        /// <para>Represents the following element tag in the schema: a:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border.</para>
        /// <para>Represents the following element tag in the schema: a:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Border.</para>
        /// <para>Represents the following element tag in the schema: a:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: a:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inside Horizontal Border.</para>
        /// <para>Represents the following element tag in the schema: a:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public InsideHorizontalBorder InsideHorizontalBorder
        {
            get => GetElement<InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inside Vertical Border.</para>
        /// <para>Represents the following element tag in the schema: a:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public InsideVerticalBorder InsideVerticalBorder
        {
            get => GetElement<InsideVerticalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Left to Bottom Right Border.</para>
        /// <para>Represents the following element tag in the schema: a:tl2br.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TopLeftToBottomRightBorder TopLeftToBottomRightBorder
        {
            get => GetElement<TopLeftToBottomRightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Right to Bottom Left Border.</para>
        /// <para>Represents the following element tag in the schema: a:tr2bl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TopRightToBottomLeftBorder TopRightToBottomLeftBorder
        {
            get => GetElement<TopRightToBottomLeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellBorders>(deep);
    }

    /// <summary>
    /// <para>Table Cell Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcTxStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Fonts &lt;a:font></description></item>
    ///   <item><description>FontReference &lt;a:fontRef></description></item>
    ///   <item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
    ///   <item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
    ///   <item><description>HslColor &lt;a:hslClr></description></item>
    ///   <item><description>SystemColor &lt;a:sysClr></description></item>
    ///   <item><description>SchemeColor &lt;a:schemeClr></description></item>
    ///   <item><description>PresetColor &lt;a:prstClr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellTextStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class.
        /// </summary>
        public TableCellTextStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellTextStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellTextStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellTextStyle(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Bold</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues> Bold
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Italic</para>
        /// <para>Represents the following attribute in the schema: i</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues> Italic
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tcTxStyle");
            builder.AddChild<Fonts>();
            builder.AddChild<FontReference>();
            builder.AddChild<RgbColorModelPercentage>();
            builder.AddChild<RgbColorModelHex>();
            builder.AddChild<HslColor>();
            builder.AddChild<SystemColor>();
            builder.AddChild<SchemeColor>();
            builder.AddChild<PresetColor>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TableCellTextStyle>()
.AddAttribute(0, "b", a => a.Bold, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "i", a => a.Italic, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Fonts), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FontReference), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PresetColor), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellTextStyle>(deep);
    }

    /// <summary>
    /// <para>Table Cell Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellBorders &lt;a:tcBdr></description></item>
    ///   <item><description>FillProperties &lt;a:fill></description></item>
    ///   <item><description>FillReference &lt;a:fillRef></description></item>
    ///   <item><description>Cell3DProperties &lt;a:cell3D></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellStyle class.
        /// </summary>
        public TableCellStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tcStyle");
            builder.AddChild<TableCellBorders>();
            builder.AddChild<FillProperties>();
            builder.AddChild<FillReference>();
            builder.AddChild<Cell3DProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellBorders), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillProperties), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillReference), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Cell3DProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Table Cell Borders.</para>
        /// <para>Represents the following element tag in the schema: a:tcBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableCellBorders TableCellBorders
        {
            get => GetElement<TableCellBorders>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellStyle>(deep);
    }

    /// <summary>
    /// <para>Table Background.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblBg.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FillProperties &lt;a:fill></description></item>
    ///   <item><description>FillReference &lt;a:fillRef></description></item>
    ///   <item><description>EffectPropertiesType &lt;a:effect></description></item>
    ///   <item><description>EffectReference &lt;a:effectRef></description></item>
    /// </list>
    /// </remark>
    public partial class TableBackground : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableBackground class.
        /// </summary>
        public TableBackground() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBackground(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBackground(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableBackground(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tblBg");
            builder.AddChild<FillProperties>();
            builder.AddChild<FillReference>();
            builder.AddChild<EffectPropertiesType>();
            builder.AddChild<EffectReference>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillProperties), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.FillReference), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectPropertiesType), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectReference), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableBackground>(deep);
    }

    /// <summary>
    /// <para>Whole Table.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:wholeTbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class WholeTable : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the WholeTable class.
        /// </summary>
        public WholeTable() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WholeTable(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WholeTable(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WholeTable(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "wholeTbl");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WholeTable>(deep);
    }

    /// <summary>
    /// <para>Band 1 Horizontal.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band1H.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class Band1Horizontal : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class.
        /// </summary>
        public Band1Horizontal() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Horizontal(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Horizontal(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band1Horizontal(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "band1H");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Horizontal>(deep);
    }

    /// <summary>
    /// <para>Band 2 Horizontal.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band2H.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class Band2Horizontal : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class.
        /// </summary>
        public Band2Horizontal() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Horizontal(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Horizontal(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band2Horizontal(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "band2H");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Horizontal>(deep);
    }

    /// <summary>
    /// <para>Band 1 Vertical.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band1V.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class Band1Vertical : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band1Vertical class.
        /// </summary>
        public Band1Vertical() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Vertical(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Vertical(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band1Vertical(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "band1V");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Vertical>(deep);
    }

    /// <summary>
    /// <para>Band 2 Vertical.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band2V.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class Band2Vertical : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band2Vertical class.
        /// </summary>
        public Band2Vertical() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Vertical(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Vertical(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band2Vertical(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "band2V");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Vertical>(deep);
    }

    /// <summary>
    /// <para>Last Column.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lastCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class LastColumn : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LastColumn class.
        /// </summary>
        public LastColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LastColumn(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lastCol");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastColumn>(deep);
    }

    /// <summary>
    /// <para>First Column.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:firstCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class FirstColumn : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the FirstColumn class.
        /// </summary>
        public FirstColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FirstColumn(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "firstCol");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstColumn>(deep);
    }

    /// <summary>
    /// <para>Last Row.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lastRow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class LastRow : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LastRow class.
        /// </summary>
        public LastRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LastRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lastRow");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastRow>(deep);
    }

    /// <summary>
    /// <para>Southeast Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:seCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class SoutheastCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the SoutheastCell class.
        /// </summary>
        public SoutheastCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SoutheastCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SoutheastCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SoutheastCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "seCell");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoutheastCell>(deep);
    }

    /// <summary>
    /// <para>Southwest Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:swCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class SouthwestCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the SouthwestCell class.
        /// </summary>
        public SouthwestCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SouthwestCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SouthwestCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SouthwestCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "swCell");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SouthwestCell>(deep);
    }

    /// <summary>
    /// <para>First Row.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:firstRow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class FirstRow : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the FirstRow class.
        /// </summary>
        public FirstRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FirstRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "firstRow");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstRow>(deep);
    }

    /// <summary>
    /// <para>Northeast Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:neCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class NortheastCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the NortheastCell class.
        /// </summary>
        public NortheastCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NortheastCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NortheastCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NortheastCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "neCell");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NortheastCell>(deep);
    }

    /// <summary>
    /// <para>Northwest Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nwCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public partial class NorthwestCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the NorthwestCell class.
        /// </summary>
        public NorthwestCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NorthwestCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NorthwestCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NorthwestCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nwCell");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NorthwestCell>(deep);
    }

    /// <summary>
    /// <para>Defines the TablePartStyleType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
    ///   <item><description>TableCellStyle &lt;a:tcStyle></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TablePartStyleType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class.
        /// </summary>
        protected TablePartStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TablePartStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TablePartStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TablePartStyleType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<TableCellTextStyle>();
            builder.AddChild<TableCellStyle>();
        }

        /// <summary>
        /// <para>Table Cell Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:tcTxStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableCellTextStyle TableCellTextStyle
        {
            get => GetElement<TableCellTextStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Style.</para>
        /// <para>Represents the following element tag in the schema: a:tcStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TableCellStyle TableCellStyle
        {
            get => GetElement<TableCellStyle>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Text Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class.
        /// </summary>
        public ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Default Paragraph Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:defPPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class DefaultParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class.
        /// </summary>
        public DefaultParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DefaultParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "defPPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 1 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl1pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level1ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class.
        /// </summary>
        public Level1ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level1ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level1ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level1ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl1pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level1ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 2 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl2pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level2ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class.
        /// </summary>
        public Level2ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level2ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level2ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level2ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl2pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level2ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 3 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl3pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level3ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class.
        /// </summary>
        public Level3ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level3ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level3ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level3ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl3pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level3ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 4 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl4pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level4ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class.
        /// </summary>
        public Level4ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level4ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level4ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level4ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl4pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level4ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 5 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl5pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level5ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class.
        /// </summary>
        public Level5ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level5ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level5ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level5ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl5pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level5ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 6 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl6pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level6ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class.
        /// </summary>
        public Level6ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level6ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level6ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level6ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl6pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level6ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 7 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl7pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level7ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class.
        /// </summary>
        public Level7ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level7ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level7ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level7ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl7pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level7ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 8 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl8pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level8ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class.
        /// </summary>
        public Level8ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level8ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level8ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level8ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl8pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level8ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 9 Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl9pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Level9ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class.
        /// </summary>
        public Level9ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level9ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level9ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level9ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lvl9pPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpaceAfter), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level9ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TextParagraphPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LineSpacing &lt;a:lnSpc></description></item>
    ///   <item><description>SpaceBefore &lt;a:spcBef></description></item>
    ///   <item><description>SpaceAfter &lt;a:spcAft></description></item>
    ///   <item><description>BulletColorText &lt;a:buClrTx></description></item>
    ///   <item><description>BulletColor &lt;a:buClr></description></item>
    ///   <item><description>BulletSizeText &lt;a:buSzTx></description></item>
    ///   <item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
    ///   <item><description>BulletSizePoints &lt;a:buSzPts></description></item>
    ///   <item><description>BulletFontText &lt;a:buFontTx></description></item>
    ///   <item><description>BulletFont &lt;a:buFont></description></item>
    ///   <item><description>NoBullet &lt;a:buNone></description></item>
    ///   <item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
    ///   <item><description>CharacterBullet &lt;a:buChar></description></item>
    ///   <item><description>PictureBullet &lt;a:buBlip></description></item>
    ///   <item><description>TabStopList &lt;a:tabLst></description></item>
    ///   <item><description>DefaultRunProperties &lt;a:defRPr></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextParagraphPropertiesType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class.
        /// </summary>
        protected TextParagraphPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextParagraphPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextParagraphPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextParagraphPropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Left Margin</para>
        /// <para>Represents the following attribute in the schema: marL</para>
        /// </summary>
        public Int32Value LeftMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Margin</para>
        /// <para>Represents the following attribute in the schema: marR</para>
        /// </summary>
        public Int32Value RightMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Level</para>
        /// <para>Represents the following attribute in the schema: lvl</para>
        /// </summary>
        public Int32Value Level
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Indent</para>
        /// <para>Represents the following attribute in the schema: indent</para>
        /// </summary>
        public Int32Value Indent
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextAlignmentTypeValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextAlignmentTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Tab Size</para>
        /// <para>Represents the following attribute in the schema: defTabSz</para>
        /// </summary>
        public Int32Value DefaultTabSize
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right To Left</para>
        /// <para>Represents the following attribute in the schema: rtl</para>
        /// </summary>
        public BooleanValue RightToLeft
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>East Asian Line Break</para>
        /// <para>Represents the following attribute in the schema: eaLnBrk</para>
        /// </summary>
        public BooleanValue EastAsianLineBreak
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Font Alignment</para>
        /// <para>Represents the following attribute in the schema: fontAlgn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextFontAlignmentValues> FontAlignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextFontAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Latin Line Break</para>
        /// <para>Represents the following attribute in the schema: latinLnBrk</para>
        /// </summary>
        public BooleanValue LatinLineBreak
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hanging Punctuation</para>
        /// <para>Represents the following attribute in the schema: hangingPunct</para>
        /// </summary>
        public BooleanValue Height
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<LineSpacing>();
            builder.AddChild<SpaceBefore>();
            builder.AddChild<SpaceAfter>();
            builder.AddChild<BulletColorText>();
            builder.AddChild<BulletColor>();
            builder.AddChild<BulletSizeText>();
            builder.AddChild<BulletSizePercentage>();
            builder.AddChild<BulletSizePoints>();
            builder.AddChild<BulletFontText>();
            builder.AddChild<BulletFont>();
            builder.AddChild<NoBullet>();
            builder.AddChild<AutoNumberedBullet>();
            builder.AddChild<CharacterBullet>();
            builder.AddChild<PictureBullet>();
            builder.AddChild<TabStopList>();
            builder.AddChild<DefaultRunProperties>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TextParagraphPropertiesType>()
.AddAttribute(0, "marL", a => a.LeftMargin, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (51206400L) });
})
.AddAttribute(0, "marR", a => a.RightMargin, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (51206400L) });
})
.AddAttribute(0, "lvl", a => a.Level, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (8L) });
})
.AddAttribute(0, "indent", a => a.Indent, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-51206400L), MaxInclusive = (51206400L) });
})
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "defTabSz", a => a.DefaultTabSize)
.AddAttribute(0, "rtl", a => a.RightToLeft)
.AddAttribute(0, "eaLnBrk", a => a.EastAsianLineBreak)
.AddAttribute(0, "fontAlgn", a => a.FontAlignment, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "latinLnBrk", a => a.LatinLineBreak)
.AddAttribute(0, "hangingPunct", a => a.Height);
        }

        /// <summary>
        /// <para>Line Spacing.</para>
        /// <para>Represents the following element tag in the schema: a:lnSpc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LineSpacing LineSpacing
        {
            get => GetElement<LineSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space Before.</para>
        /// <para>Represents the following element tag in the schema: a:spcBef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SpaceBefore SpaceBefore
        {
            get => GetElement<SpaceBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space After.</para>
        /// <para>Represents the following element tag in the schema: a:spcAft.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SpaceAfter SpaceAfter
        {
            get => GetElement<SpaceAfter>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>End Paragraph Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:endParaRPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Highlight &lt;a:highlight></description></item>
    ///   <item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
    ///   <item><description>Underline &lt;a:uLn></description></item>
    ///   <item><description>UnderlineFillText &lt;a:uFillTx></description></item>
    ///   <item><description>UnderlineFill &lt;a:uFill></description></item>
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SymbolFont &lt;a:sym></description></item>
    ///   <item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
    ///   <item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
    ///   <item><description>RightToLeft &lt;a:rtl></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class EndParagraphRunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class.
        /// </summary>
        public EndParagraphRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndParagraphRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndParagraphRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndParagraphRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "endParaRPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Highlight), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Underline), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndParagraphRunProperties>(deep);
    }

    /// <summary>
    /// <para>Text Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Highlight &lt;a:highlight></description></item>
    ///   <item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
    ///   <item><description>Underline &lt;a:uLn></description></item>
    ///   <item><description>UnderlineFillText &lt;a:uFillTx></description></item>
    ///   <item><description>UnderlineFill &lt;a:uFill></description></item>
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SymbolFont &lt;a:sym></description></item>
    ///   <item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
    ///   <item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
    ///   <item><description>RightToLeft &lt;a:rtl></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class RunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the RunProperties class.
        /// </summary>
        public RunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "rPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Highlight), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Underline), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);
    }

    /// <summary>
    /// <para>Default Text Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:defRPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Highlight &lt;a:highlight></description></item>
    ///   <item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
    ///   <item><description>Underline &lt;a:uLn></description></item>
    ///   <item><description>UnderlineFillText &lt;a:uFillTx></description></item>
    ///   <item><description>UnderlineFill &lt;a:uFill></description></item>
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SymbolFont &lt;a:sym></description></item>
    ///   <item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
    ///   <item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
    ///   <item><description>RightToLeft &lt;a:rtl></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class DefaultRunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class.
        /// </summary>
        public DefaultRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DefaultRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "defRPr");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Outline), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Highlight), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Underline), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultRunProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TextCharacterPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Outline &lt;a:ln></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Highlight &lt;a:highlight></description></item>
    ///   <item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
    ///   <item><description>Underline &lt;a:uLn></description></item>
    ///   <item><description>UnderlineFillText &lt;a:uFillTx></description></item>
    ///   <item><description>UnderlineFill &lt;a:uFill></description></item>
    ///   <item><description>LatinFont &lt;a:latin></description></item>
    ///   <item><description>EastAsianFont &lt;a:ea></description></item>
    ///   <item><description>ComplexScriptFont &lt;a:cs></description></item>
    ///   <item><description>SymbolFont &lt;a:sym></description></item>
    ///   <item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
    ///   <item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
    ///   <item><description>RightToLeft &lt;a:rtl></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextCharacterPropertiesType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class.
        /// </summary>
        protected TextCharacterPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextCharacterPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextCharacterPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextCharacterPropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>kumimoji</para>
        /// <para>Represents the following attribute in the schema: kumimoji</para>
        /// </summary>
        public BooleanValue Kumimoji
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: lang</para>
        /// </summary>
        public StringValue Language
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>altLang</para>
        /// <para>Represents the following attribute in the schema: altLang</para>
        /// </summary>
        public StringValue AlternativeLanguage
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>sz</para>
        /// <para>Represents the following attribute in the schema: sz</para>
        /// </summary>
        public Int32Value FontSize
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>b</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public BooleanValue Bold
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>i</para>
        /// <para>Represents the following attribute in the schema: i</para>
        /// </summary>
        public BooleanValue Italic
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>u</para>
        /// <para>Represents the following attribute in the schema: u</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextUnderlineValues> Underline
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextUnderlineValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>strike</para>
        /// <para>Represents the following attribute in the schema: strike</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextStrikeValues> Strike
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextStrikeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>kern</para>
        /// <para>Represents the following attribute in the schema: kern</para>
        /// </summary>
        public Int32Value Kerning
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>cap</para>
        /// <para>Represents the following attribute in the schema: cap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextCapsValues> Capital
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextCapsValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>spc</para>
        /// <para>Represents the following attribute in the schema: spc</para>
        /// </summary>
        public Int32Value Spacing
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>normalizeH</para>
        /// <para>Represents the following attribute in the schema: normalizeH</para>
        /// </summary>
        public BooleanValue NormalizeHeight
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>baseline</para>
        /// <para>Represents the following attribute in the schema: baseline</para>
        /// </summary>
        public Int32Value Baseline
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>noProof</para>
        /// <para>Represents the following attribute in the schema: noProof</para>
        /// </summary>
        public BooleanValue NoProof
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dirty</para>
        /// <para>Represents the following attribute in the schema: dirty</para>
        /// </summary>
        public BooleanValue Dirty
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>err</para>
        /// <para>Represents the following attribute in the schema: err</para>
        /// </summary>
        public BooleanValue SpellingError
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>smtClean</para>
        /// <para>Represents the following attribute in the schema: smtClean</para>
        /// </summary>
        public BooleanValue SmartTagClean
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>smtId</para>
        /// <para>Represents the following attribute in the schema: smtId</para>
        /// </summary>
        public UInt32Value SmartTagId
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>bmk</para>
        /// <para>Represents the following attribute in the schema: bmk</para>
        /// </summary>
        public StringValue Bookmark
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<Outline>();
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.AddChild<Highlight>();
            builder.AddChild<UnderlineFollowsText>();
            builder.AddChild<Underline>();
            builder.AddChild<UnderlineFillText>();
            builder.AddChild<UnderlineFill>();
            builder.AddChild<LatinFont>();
            builder.AddChild<EastAsianFont>();
            builder.AddChild<ComplexScriptFont>();
            builder.AddChild<SymbolFont>();
            builder.AddChild<HyperlinkOnClick>();
            builder.AddChild<HyperlinkOnMouseOver>();
            builder.AddChild<RightToLeft>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<TextCharacterPropertiesType>()
.AddAttribute(0, "kumimoji", a => a.Kumimoji)
.AddAttribute(0, "lang", a => a.Language)
.AddAttribute(0, "altLang", a => a.AlternativeLanguage)
.AddAttribute(0, "sz", a => a.FontSize, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (100L), MaxInclusive = (400000L) });
})
.AddAttribute(0, "b", a => a.Bold)
.AddAttribute(0, "i", a => a.Italic)
.AddAttribute(0, "u", a => a.Underline, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "strike", a => a.Strike, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "kern", a => a.Kerning, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (400000L) });
})
.AddAttribute(0, "cap", a => a.Capital, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
})
.AddAttribute(0, "spc", a => a.Spacing, aBuilder =>
{
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-400000L), MaxInclusive = (400000L) });
})
.AddAttribute(0, "normalizeH", a => a.NormalizeHeight)
.AddAttribute(0, "baseline", a => a.Baseline)
.AddAttribute(0, "noProof", a => a.NoProof)
.AddAttribute(0, "dirty", a => a.Dirty)
.AddAttribute(0, "err", a => a.SpellingError)
.AddAttribute(0, "smtClean", a => a.SmartTagClean)
.AddAttribute(0, "smtId", a => a.SmartTagId)
.AddAttribute(0, "bmk", a => a.Bookmark);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: a:ln.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Text Paragraphs.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:p.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphProperties &lt;a:pPr></description></item>
    ///   <item><description>Run &lt;a:r></description></item>
    ///   <item><description>Break &lt;a:br></description></item>
    ///   <item><description>Field &lt;a:fld></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.TextMath &lt;a14:m></description></item>
    ///   <item><description>EndParagraphRunProperties &lt;a:endParaRPr></description></item>
    /// </list>
    /// </remark>
    public partial class Paragraph : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Paragraph class.
        /// </summary>
        public Paragraph() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Paragraph(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "p");
            builder.AddChild<ParagraphProperties>();
            builder.AddChild<Run>();
            builder.AddChild<Break>();
            builder.AddChild<Field>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.TextMath>();
            builder.AddChild<EndParagraphRunProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ParagraphProperties), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Run), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Break), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Field), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.TextMath), 1, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EndParagraphRunProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: a:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ParagraphProperties ParagraphProperties
        {
            get => GetElement<ParagraphProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraph>(deep);
    }

    /// <summary>
    /// <para>Tab Stop.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tab.</para>
    /// </summary>
    public partial class TabStop : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStop class.
        /// </summary>
        public TabStop() : base()
        {
        }

        /// <summary>
        /// <para>Tab Position</para>
        /// <para>Represents the following attribute in the schema: pos</para>
        /// </summary>
        public Int32Value Position
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tab Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.TextTabAlignmentValues> Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.TextTabAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tab");
            builder.AddElement<TabStop>()
.AddAttribute(0, "pos", a => a.Position)
.AddAttribute(0, "algn", a => a.Alignment, aBuilder =>
{
   aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStop>(deep);
    }

    /// <summary>
    /// <para>Spacing Percent.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcPct.</para>
    /// </summary>
    public partial class SpacingPercent : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingPercent class.
        /// </summary>
        public SpacingPercent() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spcPct");
            builder.AddElement<SpacingPercent>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (13200000L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPercent>(deep);
    }

    /// <summary>
    /// <para>Spacing Points.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcPts.</para>
    /// </summary>
    public partial class SpacingPoints : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingPoints class.
        /// </summary>
        public SpacingPoints() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spcPts");
            builder.AddElement<SpacingPoints>()
.AddAttribute(0, "val", a => a.Val, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (158400L) });
});
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPoints>(deep);
    }

    /// <summary>
    /// <para>Line Spacing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnSpc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SpacingPercent &lt;a:spcPct></description></item>
    ///   <item><description>SpacingPoints &lt;a:spcPts></description></item>
    /// </list>
    /// </remark>
    public partial class LineSpacing : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the LineSpacing class.
        /// </summary>
        public LineSpacing() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineSpacing(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineSpacing(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineSpacing(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "lnSpc");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineSpacing>(deep);
    }

    /// <summary>
    /// <para>Space Before.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcBef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SpacingPercent &lt;a:spcPct></description></item>
    ///   <item><description>SpacingPoints &lt;a:spcPts></description></item>
    /// </list>
    /// </remark>
    public partial class SpaceBefore : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceBefore class.
        /// </summary>
        public SpaceBefore() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceBefore(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceBefore(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SpaceBefore(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spcBef");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceBefore>(deep);
    }

    /// <summary>
    /// <para>Space After.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcAft.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SpacingPercent &lt;a:spcPct></description></item>
    ///   <item><description>SpacingPoints &lt;a:spcPts></description></item>
    /// </list>
    /// </remark>
    public partial class SpaceAfter : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceAfter class.
        /// </summary>
        public SpaceAfter() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceAfter(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceAfter(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SpaceAfter(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "spcAft");
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceAfter>(deep);
    }

    /// <summary>
    /// <para>Defines the TextSpacingType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SpacingPercent &lt;a:spcPct></description></item>
    ///   <item><description>SpacingPoints &lt;a:spcPts></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextSpacingType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextSpacingType class.
        /// </summary>
        protected TextSpacingType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextSpacingType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextSpacingType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextSpacingType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<SpacingPercent>();
            builder.AddChild<SpacingPoints>();
        }

        /// <summary>
        /// <para>Spacing Percent.</para>
        /// <para>Represents the following element tag in the schema: a:spcPct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SpacingPercent SpacingPercent
        {
            get => GetElement<SpacingPercent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing Points.</para>
        /// <para>Represents the following element tag in the schema: a:spcPts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public SpacingPoints SpacingPoints
        {
            get => GetElement<SpacingPoints>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Tab List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tabLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TabStop &lt;a:tab></description></item>
    /// </list>
    /// </remark>
    public partial class TabStopList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStopList class.
        /// </summary>
        public TabStopList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TabStopList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TabStopList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TabStopList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "tabLst");
            builder.AddChild<TabStop>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TabStop), 0, 32)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStopList>(deep);
    }

    /// <summary>
    /// <para>Defines the Text Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:t.</para>
    /// </summary>
    public partial class Text : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Text class.
        /// </summary>
        public Text() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Text class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Text(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "t");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapePropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties &lt;a14:hiddenFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties &lt;a14:hiddenLine></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties &lt;a14:hiddenEffects></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D &lt;a14:hiddenScene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D &lt;a14:hiddenSp3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured &lt;a14:shadowObscured></description></item>
    /// </list>
    /// </remark>
    public partial class ShapePropertiesExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class.
        /// </summary>
        public ShapePropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapePropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured>();
            builder.AddElement<ShapePropertiesExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the GvmlGroupShapeExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas &lt;a14:isCanvas></description></item>
    /// </list>
    /// </remark>
    public partial class GvmlGroupShapeExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class.
        /// </summary>
        public GvmlGroupShapeExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GvmlGroupShapeExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas>();
            builder.AddElement<GvmlGroupShapeExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapePropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapePropertiesExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class ShapePropertiesExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class.
        /// </summary>
        public ShapePropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapePropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<ShapePropertiesExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapePropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Group Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvGrpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
    ///   <item><description>NonVisualGroupShapeDrawingProperties &lt;a:cNvGrpSpPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupShapeProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class.
        /// </summary>
        public NonVisualGroupShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "nvGrpSpPr");
            builder.AddChild<NonVisualDrawingProperties>();
            builder.AddChild<NonVisualGroupShapeDrawingProperties>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGroupShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualDrawingProperties NonVisualDrawingProperties
        {
            get => GetElement<NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Group Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvGrpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualGroupShapeDrawingProperties NonVisualGroupShapeDrawingProperties
        {
            get => GetElement<NonVisualGroupShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Visual Group Shape Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TransformGroup &lt;a:xfrm></description></item>
    ///   <item><description>NoFill &lt;a:noFill></description></item>
    ///   <item><description>SolidFill &lt;a:solidFill></description></item>
    ///   <item><description>GradientFill &lt;a:gradFill></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>PatternFill &lt;a:pattFill></description></item>
    ///   <item><description>GroupFill &lt;a:grpFill></description></item>
    ///   <item><description>EffectList &lt;a:effectLst></description></item>
    ///   <item><description>EffectDag &lt;a:effectDag></description></item>
    ///   <item><description>Scene3DType &lt;a:scene3d></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class VisualGroupShapeProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class.
        /// </summary>
        public VisualGroupShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VisualGroupShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public VisualGroupShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues> BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "grpSpPr");
            builder.AddChild<TransformGroup>();
            builder.AddChild<NoFill>();
            builder.AddChild<SolidFill>();
            builder.AddChild<GradientFill>();
            builder.AddChild<BlipFill>();
            builder.AddChild<PatternFill>();
            builder.AddChild<GroupFill>();
            builder.AddChild<EffectList>();
            builder.AddChild<EffectDag>();
            builder.AddChild<Scene3DType>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<VisualGroupShapeProperties>()
.AddAttribute(0, "bwMode", a => a.BlackWhiteMode, aBuilder =>
{
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TransformGroup), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Grouped Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TransformGroup TransformGroup
        {
            get => GetElement<TransformGroup>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VisualGroupShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualShapeProperties &lt;a:nvSpPr></description></item>
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>TextShape &lt;a:txSp></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Shape : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Shape class.
        /// </summary>
        public Shape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Shape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "sp");
            builder.AddChild<NonVisualShapeProperties>();
            builder.AddChild<ShapeProperties>();
            builder.AddChild<TextShape>();
            builder.AddChild<ShapeStyle>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TextShape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualShapeProperties NonVisualShapeProperties
        {
            get => GetElement<NonVisualShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeProperties ShapeProperties
        {
            get => GetElement<ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Shape.</para>
        /// <para>Represents the following element tag in the schema: a:txSp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TextShape TextShape
        {
            get => GetElement<TextShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeStyle ShapeStyle
        {
            get => GetElement<ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape>(deep);
    }

    /// <summary>
    /// <para>Connection Shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualConnectionShapeProperties &lt;a:nvCxnSpPr></description></item>
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionShape : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionShape class.
        /// </summary>
        public ConnectionShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "cxnSp");
            builder.AddChild<NonVisualConnectionShapeProperties>();
            builder.AddChild<ShapeProperties>();
            builder.AddChild<ShapeStyle>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualConnectionShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Connection Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvCxnSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualConnectionShapeProperties NonVisualConnectionShapeProperties
        {
            get => GetElement<NonVisualConnectionShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeProperties ShapeProperties
        {
            get => GetElement<ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Style.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeStyle ShapeStyle
        {
            get => GetElement<ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShape>(deep);
    }

    /// <summary>
    /// <para>Picture.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pic.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualPictureProperties &lt;a:nvPicPr></description></item>
    ///   <item><description>BlipFill &lt;a:blipFill></description></item>
    ///   <item><description>ShapeProperties &lt;a:spPr></description></item>
    ///   <item><description>ShapeStyle &lt;a:style></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class Picture : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Picture class.
        /// </summary>
        public Picture() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Picture(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "pic");
            builder.AddChild<NonVisualPictureProperties>();
            builder.AddChild<BlipFill>();
            builder.AddChild<ShapeProperties>();
            builder.AddChild<ShapeStyle>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualPictureProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipFill), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Picture.</para>
        /// <para>Represents the following element tag in the schema: a:nvPicPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualPictureProperties NonVisualPictureProperties
        {
            get => GetElement<NonVisualPictureProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Picture Fill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public BlipFill BlipFill
        {
            get => GetElement<BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeProperties ShapeProperties
        {
            get => GetElement<ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeStyle.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeStyle ShapeStyle
        {
            get => GetElement<ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);
    }

    /// <summary>
    /// <para>Graphic Frame.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicFrame.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualGraphicFrameProperties &lt;a:nvGraphicFramePr></description></item>
    ///   <item><description>Graphic &lt;a:graphic></description></item>
    ///   <item><description>Transform2D &lt;a:xfrm></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicFrame : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicFrame class.
        /// </summary>
        public GraphicFrame() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrame(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrame(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicFrame(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "graphicFrame");
            builder.AddChild<NonVisualGraphicFrameProperties>();
            builder.AddChild<Graphic>();
            builder.AddChild<Transform2D>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGraphicFrameProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Graphic), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Transform2D), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Graphic Frame.</para>
        /// <para>Represents the following element tag in the schema: a:nvGraphicFramePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualGraphicFrameProperties NonVisualGraphicFrameProperties
        {
            get => GetElement<NonVisualGraphicFrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Graphic.</para>
        /// <para>Represents the following element tag in the schema: a:graphic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Graphic Graphic
        {
            get => GetElement<Graphic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Transform2D.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public Transform2D Transform2D
        {
            get => GetElement<Transform2D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrame>(deep);
    }

    /// <summary>
    /// <para>Group shape.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualGroupShapeProperties &lt;a:nvGrpSpPr></description></item>
    ///   <item><description>VisualGroupShapeProperties &lt;a:grpSpPr></description></item>
    ///   <item><description>TextShape &lt;a:txSp></description></item>
    ///   <item><description>Shape &lt;a:sp></description></item>
    ///   <item><description>ConnectionShape &lt;a:cxnSp></description></item>
    ///   <item><description>Picture &lt;a:pic></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart &lt;a14:contentPart></description></item>
    ///   <item><description>GraphicFrame &lt;a:graphicFrame></description></item>
    ///   <item><description>GroupShape &lt;a:grpSp></description></item>
    ///   <item><description>GvmlGroupShapeExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class GroupShape : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupShape class.
        /// </summary>
        public GroupShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GroupShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "grpSp");
            builder.AddChild<NonVisualGroupShapeProperties>();
            builder.AddChild<VisualGroupShapeProperties>();
            builder.AddChild<TextShape>();
            builder.AddChild<Shape>();
            builder.AddChild<ConnectionShape>();
            builder.AddChild<Picture>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart>();
            builder.AddChild<GraphicFrame>();
            builder.AddChild<GroupShape>();
            builder.AddChild<GvmlGroupShapeExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGroupShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.VisualGroupShapeProperties), 1, 1),
                new CompositeParticle(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TextShape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Shape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectionShape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Picture), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart), 1, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GraphicFrame), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GroupShape), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GvmlGroupShapeExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Group Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvGrpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public NonVisualGroupShapeProperties NonVisualGroupShapeProperties
        {
            get => GetElement<NonVisualGroupShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Group Shape Properties.</para>
        /// <para>Represents the following element tag in the schema: a:grpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public VisualGroupShapeProperties VisualGroupShapeProperties
        {
            get => GetElement<VisualGroupShapeProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShape>(deep);
    }

    /// <summary>
    /// <para>Defines the GvmlGroupShapeExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GvmlGroupShapeExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class GvmlGroupShapeExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class.
        /// </summary>
        public GvmlGroupShapeExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GvmlGroupShapeExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<GvmlGroupShapeExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.GvmlGroupShapeExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualGroupDrawingShapePropsExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties &lt;a15:nonVisualGroupProps></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupDrawingShapePropsExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class.
        /// </summary>
        public NonVisualGroupDrawingShapePropsExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupDrawingShapePropsExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties>();
            builder.AddElement<NonVisualGroupDrawingShapePropsExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeStyleSheetExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily &lt;thm15:themeFamily></description></item>
    /// </list>
    /// </remark>
    public partial class OfficeStyleSheetExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class.
        /// </summary>
        public OfficeStyleSheetExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OfficeStyleSheetExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily>();
            builder.AddElement<OfficeStyleSheetExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectorLockingExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Graphic &lt;a:graphic></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectorLockingExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class.
        /// </summary>
        public ConnectorLockingExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectorLockingExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<Graphic>();
            builder.AddElement<ConnectorLockingExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Graphic), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnClick Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkClick.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HyperlinkSound &lt;a:snd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnClick : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class.
        /// </summary>
        public HyperlinkOnClick() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnClick(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnClick(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnClick(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hlinkClick");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(0 /*r:id*/));
            builder.AddConstraint(new RelationshipExistConstraint(0 /*r:id*/));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnClick>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnHover Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkHover.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HyperlinkSound &lt;a:snd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnHover : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class.
        /// </summary>
        public HyperlinkOnHover() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnHover(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnHover(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnHover(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hlinkHover");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(0 /*r:id*/));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnHover>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnMouseOver Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkMouseOver.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HyperlinkSound &lt;a:snd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnMouseOver : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class.
        /// </summary>
        public HyperlinkOnMouseOver() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnMouseOver(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnMouseOver(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnMouseOver(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "hlinkMouseOver");
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(0 /*r:id*/));
            builder.AddConstraint(new RelationshipExistConstraint(0 /*r:id*/));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnMouseOver>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HyperlinkSound &lt;a:snd></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public abstract partial class HyperlinkType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkType class.
        /// </summary>
        protected HyperlinkType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HyperlinkType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HyperlinkType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected HyperlinkType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Drawing Object Hyperlink Target</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Invalid URL</para>
        /// <para>Represents the following attribute in the schema: invalidUrl</para>
        /// </summary>
        public StringValue InvalidUrl
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Action Setting</para>
        /// <para>Represents the following attribute in the schema: action</para>
        /// </summary>
        public StringValue Action
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Target Frame</para>
        /// <para>Represents the following attribute in the schema: tgtFrame</para>
        /// </summary>
        public StringValue TargetFrame
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink Tooltip</para>
        /// <para>Represents the following attribute in the schema: tooltip</para>
        /// </summary>
        public StringValue Tooltip
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Add Hyperlink to Page History</para>
        /// <para>Represents the following attribute in the schema: history</para>
        /// </summary>
        public BooleanValue History
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Highlight Click</para>
        /// <para>Represents the following attribute in the schema: highlightClick</para>
        /// </summary>
        public BooleanValue HighlightClick
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>End Sounds</para>
        /// <para>Represents the following attribute in the schema: endSnd</para>
        /// </summary>
        public BooleanValue EndSound
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<HyperlinkSound>();
            builder.AddChild<ExtensionList>();
            builder.AddElement<HyperlinkType>()
.AddAttribute(19, "id", a => a.Id)
.AddAttribute(0, "invalidUrl", a => a.InvalidUrl)
.AddAttribute(0, "action", a => a.Action)
.AddAttribute(0, "tgtFrame", a => a.TargetFrame)
.AddAttribute(0, "tooltip", a => a.Tooltip)
.AddAttribute(0, "history", a => a.History)
.AddAttribute(0, "highlightClick", a => a.HighlightClick)
.AddAttribute(0, "endSnd", a => a.EndSound);
        }

        /// <summary>
        /// <para>Hyperlink Sound.</para>
        /// <para>Represents the following element tag in the schema: a:snd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public HyperlinkSound HyperlinkSound
        {
            get => GetElement<HyperlinkSound>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingPropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualDrawingPropertiesExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingPropertiesExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class.
        /// </summary>
        public NonVisualDrawingPropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingPropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<NonVisualDrawingPropertiesExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualDrawingPropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingPropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension &lt;a14:compatExt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties &lt;a15:backgroundPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingPropertiesExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class.
        /// </summary>
        public NonVisualDrawingPropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingPropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties>();
            builder.AddElement<NonVisualDrawingPropertiesExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the PictureLocks Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:picLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class PictureLocks : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureLocks class.
        /// </summary>
        public PictureLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Crop Changes</para>
        /// <para>Represents the following attribute in the schema: noCrop</para>
        /// </summary>
        public BooleanValue NoCrop
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "picLocks");
            builder.AddChild<ExtensionList>();
            builder.AddElement<PictureLocks>()
.AddAttribute(0, "noGrp", a => a.NoGrouping)
.AddAttribute(0, "noSelect", a => a.NoSelection)
.AddAttribute(0, "noRot", a => a.NoRotation)
.AddAttribute(0, "noChangeAspect", a => a.NoChangeAspect)
.AddAttribute(0, "noMove", a => a.NoMove)
.AddAttribute(0, "noResize", a => a.NoResize)
.AddAttribute(0, "noEditPoints", a => a.NoEditPoints)
.AddAttribute(0, "noAdjustHandles", a => a.NoAdjustHandles)
.AddAttribute(0, "noChangeArrowheads", a => a.NoChangeArrowheads)
.AddAttribute(0, "noChangeShapeType", a => a.NoChangeShapeType)
.AddAttribute(0, "noCrop", a => a.NoCrop);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureLocks>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualPicturePropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualPicturePropertiesExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPicturePropertiesExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class.
        /// </summary>
        public NonVisualPicturePropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPicturePropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<NonVisualPicturePropertiesExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualPicturePropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualPicturePropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.CameraTool &lt;a14:cameraTool></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine &lt;a15:signatureLine></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties &lt;a15:objectPr></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPicturePropertiesExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class.
        /// </summary>
        public NonVisualPicturePropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPicturePropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.CameraTool>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties>();
            builder.AddElement<NonVisualPicturePropertiesExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CameraTool), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the GroupShapeLocks Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSpLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class GroupShapeLocks : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class.
        /// </summary>
        public GroupShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GroupShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Ungrouping</para>
        /// <para>Represents the following attribute in the schema: noUngrp</para>
        /// </summary>
        public BooleanValue NoUngrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Moving Shape</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resizing</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "grpSpLocks");
            builder.AddChild<ExtensionList>();
            builder.AddElement<GroupShapeLocks>()
.AddAttribute(0, "noGrp", a => a.NoGrouping)
.AddAttribute(0, "noUngrp", a => a.NoUngrouping)
.AddAttribute(0, "noSelect", a => a.NoSelection)
.AddAttribute(0, "noRot", a => a.NoRotation)
.AddAttribute(0, "noChangeAspect", a => a.NoChangeAspect)
.AddAttribute(0, "noMove", a => a.NoMove)
.AddAttribute(0, "noResize", a => a.NoResize);
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualGroupDrawingShapePropsExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NonVisualGroupDrawingShapePropsExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupDrawingShapePropsExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class.
        /// </summary>
        public NonVisualGroupDrawingShapePropsExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<NonVisualGroupDrawingShapePropsExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.NonVisualGroupDrawingShapePropsExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the BlipExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>BlipExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class BlipExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class.
        /// </summary>
        public BlipExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<BlipExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.BlipExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the BlipExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties &lt;a14:imgProps></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi &lt;a14:useLocalDpi></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty &lt;wp15:webVideoPr></description></item>
    /// </list>
    /// </remark>
    public partial class BlipExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipExtension class.
        /// </summary>
        public BlipExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty>();
            builder.AddElement<BlipExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectDefaults Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:objectDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ShapeDefault &lt;a:spDef></description></item>
    ///   <item><description>LineDefault &lt;a:lnDef></description></item>
    ///   <item><description>TextDefault &lt;a:txDef></description></item>
    ///   <item><description>ExtensionList &lt;a:extLst></description></item>
    /// </list>
    /// </remark>
    public partial class ObjectDefaults : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class.
        /// </summary>
        public ObjectDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ObjectDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ObjectDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ObjectDefaults(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "objectDefaults");
            builder.AddChild<ShapeDefault>();
            builder.AddChild<LineDefault>();
            builder.AddChild<TextDefault>();
            builder.AddChild<ExtensionList>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ShapeDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.LineDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.TextDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Default.</para>
        /// <para>Represents the following element tag in the schema: a:spDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ShapeDefault ShapeDefault
        {
            get => GetElement<ShapeDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Default.</para>
        /// <para>Represents the following element tag in the schema: a:lnDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public LineDefault LineDefault
        {
            get => GetElement<LineDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Default.</para>
        /// <para>Represents the following element tag in the schema: a:txDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public TextDefault TextDefault
        {
            get => GetElement<TextDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public ExtensionList ExtensionList
        {
            get => GetElement<ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectDefaults>(deep);
    }

    /// <summary>
    /// <para>Defines the ExtraColorSchemeList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extraClrSchemeLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ExtraColorScheme &lt;a:extraClrScheme></description></item>
    /// </list>
    /// </remark>
    public partial class ExtraColorSchemeList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class.
        /// </summary>
        public ExtraColorSchemeList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorSchemeList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorSchemeList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtraColorSchemeList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extraClrSchemeLst");
            builder.AddChild<ExtraColorScheme>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ExtraColorScheme), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorSchemeList>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomColorList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custClrLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomColor &lt;a:custClr></description></item>
    /// </list>
    /// </remark>
    public partial class CustomColorList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomColorList class.
        /// </summary>
        public CustomColorList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColorList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColorList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomColorList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "custClrLst");
            builder.AddChild<CustomColor>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.CustomColor), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColorList>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeStyleSheetExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>OfficeStyleSheetExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class OfficeStyleSheetExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class.
        /// </summary>
        public OfficeStyleSheetExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OfficeStyleSheetExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<OfficeStyleSheetExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.OfficeStyleSheetExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the RightToLeft Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rtl.</para>
    /// </summary>
    public partial class RightToLeft : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RightToLeft class.
        /// </summary>
        public RightToLeft() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "rtl");
            builder.AddElement<RightToLeft>()
.AddAttribute(0, "val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightToLeft>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectorLockingExtensionList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConnectorLockingExtension &lt;a:ext></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectorLockingExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class.
        /// </summary>
        public ConnectorLockingExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectorLockingExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "extLst");
            builder.AddChild<ConnectorLockingExtension>();
            builder.Particle = new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.ConnectorLockingExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the DataModelExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock &lt;dsp:dataModelExt></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages &lt;dgm14:recolorImg></description></item>
    /// </list>
    /// </remark>
    public partial class DataModelExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataModelExtension class.
        /// </summary>
        public DataModelExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataModelExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataModelExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataModelExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages>();
            builder.AddElement<DataModelExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataModelExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the PtExtension Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties &lt;dgm14:cNvPr></description></item>
    /// </list>
    /// </remark>
    public partial class PtExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PtExtension class.
        /// </summary>
        public PtExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PtExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PtExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PtExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(10, "ext");
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties>();
            builder.AddElement<PtExtension>()
.AddAttribute(0, "uri", a => a.Uri, aBuilder =>
{
aBuilder.AddValidator(RequiredValidator.Instance);
aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
});
            builder.Particle = new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PtExtension>(deep);
    }

    /// <summary>
    /// Font Collection Index
    /// </summary>
    public enum FontCollectionIndexValues
    {
        ///<summary>
        ///Major Font.
        ///<para>When the item is serialized out as xml, its value is "major".</para>
        ///</summary>
        [EnumString("major")]
        Major,
        ///<summary>
        ///Minor Font.
        ///<para>When the item is serialized out as xml, its value is "minor".</para>
        ///</summary>
        [EnumString("minor")]
        Minor,
        ///<summary>
        ///None.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Theme Color Reference
    /// </summary>
    public enum ColorSchemeIndexValues
    {
        ///<summary>
        ///Dark 1.
        ///<para>When the item is serialized out as xml, its value is "dk1".</para>
        ///</summary>
        [EnumString("dk1")]
        Dark1,
        ///<summary>
        ///Light 1.
        ///<para>When the item is serialized out as xml, its value is "lt1".</para>
        ///</summary>
        [EnumString("lt1")]
        Light1,
        ///<summary>
        ///Dark 2.
        ///<para>When the item is serialized out as xml, its value is "dk2".</para>
        ///</summary>
        [EnumString("dk2")]
        Dark2,
        ///<summary>
        ///Light 2.
        ///<para>When the item is serialized out as xml, its value is "lt2".</para>
        ///</summary>
        [EnumString("lt2")]
        Light2,
        ///<summary>
        ///Accent 1.
        ///<para>When the item is serialized out as xml, its value is "accent1".</para>
        ///</summary>
        [EnumString("accent1")]
        Accent1,
        ///<summary>
        ///Accent 2.
        ///<para>When the item is serialized out as xml, its value is "accent2".</para>
        ///</summary>
        [EnumString("accent2")]
        Accent2,
        ///<summary>
        ///Accent 3.
        ///<para>When the item is serialized out as xml, its value is "accent3".</para>
        ///</summary>
        [EnumString("accent3")]
        Accent3,
        ///<summary>
        ///Accent 4.
        ///<para>When the item is serialized out as xml, its value is "accent4".</para>
        ///</summary>
        [EnumString("accent4")]
        Accent4,
        ///<summary>
        ///Accent 5.
        ///<para>When the item is serialized out as xml, its value is "accent5".</para>
        ///</summary>
        [EnumString("accent5")]
        Accent5,
        ///<summary>
        ///Accent 6.
        ///<para>When the item is serialized out as xml, its value is "accent6".</para>
        ///</summary>
        [EnumString("accent6")]
        Accent6,
        ///<summary>
        ///Hyperlink.
        ///<para>When the item is serialized out as xml, its value is "hlink".</para>
        ///</summary>
        [EnumString("hlink")]
        Hyperlink,
        ///<summary>
        ///Followed Hyperlink.
        ///<para>When the item is serialized out as xml, its value is "folHlink".</para>
        ///</summary>
        [EnumString("folHlink")]
        FollowedHyperlink,
    }

    /// <summary>
    /// System Color Value
    /// </summary>
    public enum SystemColorValues
    {
        ///<summary>
        ///Scroll Bar System Color.
        ///<para>When the item is serialized out as xml, its value is "scrollBar".</para>
        ///</summary>
        [EnumString("scrollBar")]
        ScrollBar,
        ///<summary>
        ///Background System Color.
        ///<para>When the item is serialized out as xml, its value is "background".</para>
        ///</summary>
        [EnumString("background")]
        Background,
        ///<summary>
        ///Active Caption System Color.
        ///<para>When the item is serialized out as xml, its value is "activeCaption".</para>
        ///</summary>
        [EnumString("activeCaption")]
        ActiveCaption,
        ///<summary>
        ///Inactive Caption System Color.
        ///<para>When the item is serialized out as xml, its value is "inactiveCaption".</para>
        ///</summary>
        [EnumString("inactiveCaption")]
        InactiveCaption,
        ///<summary>
        ///Menu System Color.
        ///<para>When the item is serialized out as xml, its value is "menu".</para>
        ///</summary>
        [EnumString("menu")]
        Menu,
        ///<summary>
        ///Window System Color.
        ///<para>When the item is serialized out as xml, its value is "window".</para>
        ///</summary>
        [EnumString("window")]
        Window,
        ///<summary>
        ///Window Frame System Color.
        ///<para>When the item is serialized out as xml, its value is "windowFrame".</para>
        ///</summary>
        [EnumString("windowFrame")]
        WindowFrame,
        ///<summary>
        ///Menu Text System Color.
        ///<para>When the item is serialized out as xml, its value is "menuText".</para>
        ///</summary>
        [EnumString("menuText")]
        MenuText,
        ///<summary>
        ///Window Text System Color.
        ///<para>When the item is serialized out as xml, its value is "windowText".</para>
        ///</summary>
        [EnumString("windowText")]
        WindowText,
        ///<summary>
        ///Caption Text System Color.
        ///<para>When the item is serialized out as xml, its value is "captionText".</para>
        ///</summary>
        [EnumString("captionText")]
        CaptionText,
        ///<summary>
        ///Active Border System Color.
        ///<para>When the item is serialized out as xml, its value is "activeBorder".</para>
        ///</summary>
        [EnumString("activeBorder")]
        ActiveBorder,
        ///<summary>
        ///Inactive Border System Color.
        ///<para>When the item is serialized out as xml, its value is "inactiveBorder".</para>
        ///</summary>
        [EnumString("inactiveBorder")]
        InactiveBorder,
        ///<summary>
        ///Application Workspace System Color.
        ///<para>When the item is serialized out as xml, its value is "appWorkspace".</para>
        ///</summary>
        [EnumString("appWorkspace")]
        ApplicationWorkspace,
        ///<summary>
        ///Highlight System Color.
        ///<para>When the item is serialized out as xml, its value is "highlight".</para>
        ///</summary>
        [EnumString("highlight")]
        Highlight,
        ///<summary>
        ///Highlight Text System Color.
        ///<para>When the item is serialized out as xml, its value is "highlightText".</para>
        ///</summary>
        [EnumString("highlightText")]
        HighlightText,
        ///<summary>
        ///Button Face System Color.
        ///<para>When the item is serialized out as xml, its value is "btnFace".</para>
        ///</summary>
        [EnumString("btnFace")]
        ButtonFace,
        ///<summary>
        ///Button Shadow System Color.
        ///<para>When the item is serialized out as xml, its value is "btnShadow".</para>
        ///</summary>
        [EnumString("btnShadow")]
        ButtonShadow,
        ///<summary>
        ///Gray Text System Color.
        ///<para>When the item is serialized out as xml, its value is "grayText".</para>
        ///</summary>
        [EnumString("grayText")]
        GrayText,
        ///<summary>
        ///Button Text System Color.
        ///<para>When the item is serialized out as xml, its value is "btnText".</para>
        ///</summary>
        [EnumString("btnText")]
        ButtonText,
        ///<summary>
        ///Inactive Caption Text System Color.
        ///<para>When the item is serialized out as xml, its value is "inactiveCaptionText".</para>
        ///</summary>
        [EnumString("inactiveCaptionText")]
        InactiveCaptionText,
        ///<summary>
        ///Button Highlight System Color.
        ///<para>When the item is serialized out as xml, its value is "btnHighlight".</para>
        ///</summary>
        [EnumString("btnHighlight")]
        ButtonHighlight,
        ///<summary>
        ///3D Dark System Color.
        ///<para>When the item is serialized out as xml, its value is "3dDkShadow".</para>
        ///</summary>
        [EnumString("3dDkShadow")]
        ThreeDDarkShadow,
        ///<summary>
        ///3D Light System Color.
        ///<para>When the item is serialized out as xml, its value is "3dLight".</para>
        ///</summary>
        [EnumString("3dLight")]
        ThreeDLight,
        ///<summary>
        ///Info Text System Color.
        ///<para>When the item is serialized out as xml, its value is "infoText".</para>
        ///</summary>
        [EnumString("infoText")]
        InfoText,
        ///<summary>
        ///Info Back System Color.
        ///<para>When the item is serialized out as xml, its value is "infoBk".</para>
        ///</summary>
        [EnumString("infoBk")]
        InfoBack,
        ///<summary>
        ///Hot Light System Color.
        ///<para>When the item is serialized out as xml, its value is "hotLight".</para>
        ///</summary>
        [EnumString("hotLight")]
        HotLight,
        ///<summary>
        ///Gradient Active Caption System Color.
        ///<para>When the item is serialized out as xml, its value is "gradientActiveCaption".</para>
        ///</summary>
        [EnumString("gradientActiveCaption")]
        GradientActiveCaption,
        ///<summary>
        ///Gradient Inactive Caption System Color.
        ///<para>When the item is serialized out as xml, its value is "gradientInactiveCaption".</para>
        ///</summary>
        [EnumString("gradientInactiveCaption")]
        GradientInactiveCaption,
        ///<summary>
        ///Menu Highlight System Color.
        ///<para>When the item is serialized out as xml, its value is "menuHighlight".</para>
        ///</summary>
        [EnumString("menuHighlight")]
        MenuHighlight,
        ///<summary>
        ///Menu Bar System Color.
        ///<para>When the item is serialized out as xml, its value is "menuBar".</para>
        ///</summary>
        [EnumString("menuBar")]
        MenuBar,
    }

    /// <summary>
    /// Scheme Color
    /// </summary>
    public enum SchemeColorValues
    {
        ///<summary>
        ///Background Color 1.
        ///<para>When the item is serialized out as xml, its value is "bg1".</para>
        ///</summary>
        [EnumString("bg1")]
        Background1,
        ///<summary>
        ///Text Color 1.
        ///<para>When the item is serialized out as xml, its value is "tx1".</para>
        ///</summary>
        [EnumString("tx1")]
        Text1,
        ///<summary>
        ///Background Color 2.
        ///<para>When the item is serialized out as xml, its value is "bg2".</para>
        ///</summary>
        [EnumString("bg2")]
        Background2,
        ///<summary>
        ///Text Color 2.
        ///<para>When the item is serialized out as xml, its value is "tx2".</para>
        ///</summary>
        [EnumString("tx2")]
        Text2,
        ///<summary>
        ///Accent Color 1.
        ///<para>When the item is serialized out as xml, its value is "accent1".</para>
        ///</summary>
        [EnumString("accent1")]
        Accent1,
        ///<summary>
        ///Accent Color 2.
        ///<para>When the item is serialized out as xml, its value is "accent2".</para>
        ///</summary>
        [EnumString("accent2")]
        Accent2,
        ///<summary>
        ///Accent Color 3.
        ///<para>When the item is serialized out as xml, its value is "accent3".</para>
        ///</summary>
        [EnumString("accent3")]
        Accent3,
        ///<summary>
        ///Accent Color 4.
        ///<para>When the item is serialized out as xml, its value is "accent4".</para>
        ///</summary>
        [EnumString("accent4")]
        Accent4,
        ///<summary>
        ///Accent Color 5.
        ///<para>When the item is serialized out as xml, its value is "accent5".</para>
        ///</summary>
        [EnumString("accent5")]
        Accent5,
        ///<summary>
        ///Accent Color 6.
        ///<para>When the item is serialized out as xml, its value is "accent6".</para>
        ///</summary>
        [EnumString("accent6")]
        Accent6,
        ///<summary>
        ///Hyperlink Color.
        ///<para>When the item is serialized out as xml, its value is "hlink".</para>
        ///</summary>
        [EnumString("hlink")]
        Hyperlink,
        ///<summary>
        ///Followed Hyperlink Color.
        ///<para>When the item is serialized out as xml, its value is "folHlink".</para>
        ///</summary>
        [EnumString("folHlink")]
        FollowedHyperlink,
        ///<summary>
        ///Style Color.
        ///<para>When the item is serialized out as xml, its value is "phClr".</para>
        ///</summary>
        [EnumString("phClr")]
        PhColor,
        ///<summary>
        ///Dark Color 1.
        ///<para>When the item is serialized out as xml, its value is "dk1".</para>
        ///</summary>
        [EnumString("dk1")]
        Dark1,
        ///<summary>
        ///Light Color 1.
        ///<para>When the item is serialized out as xml, its value is "lt1".</para>
        ///</summary>
        [EnumString("lt1")]
        Light1,
        ///<summary>
        ///Dark Color 2.
        ///<para>When the item is serialized out as xml, its value is "dk2".</para>
        ///</summary>
        [EnumString("dk2")]
        Dark2,
        ///<summary>
        ///Light Color 2.
        ///<para>When the item is serialized out as xml, its value is "lt2".</para>
        ///</summary>
        [EnumString("lt2")]
        Light2,
    }

    /// <summary>
    /// Rectangle Alignments
    /// </summary>
    public enum RectangleAlignmentValues
    {
        ///<summary>
        ///Rectangle Alignment Enum ( Top Left ).
        ///<para>When the item is serialized out as xml, its value is "tl".</para>
        ///</summary>
        [EnumString("tl")]
        TopLeft,
        ///<summary>
        ///Rectangle Alignment Enum ( Top ).
        ///<para>When the item is serialized out as xml, its value is "t".</para>
        ///</summary>
        [EnumString("t")]
        Top,
        ///<summary>
        ///Rectangle Alignment Enum ( Top Right ).
        ///<para>When the item is serialized out as xml, its value is "tr".</para>
        ///</summary>
        [EnumString("tr")]
        TopRight,
        ///<summary>
        ///Rectangle Alignment Enum ( Left ).
        ///<para>When the item is serialized out as xml, its value is "l".</para>
        ///</summary>
        [EnumString("l")]
        Left,
        ///<summary>
        ///Rectangle Alignment Enum ( Center ).
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Rectangle Alignment Enum ( Right ).
        ///<para>When the item is serialized out as xml, its value is "r".</para>
        ///</summary>
        [EnumString("r")]
        Right,
        ///<summary>
        ///Rectangle Alignment Enum ( Bottom Left ).
        ///<para>When the item is serialized out as xml, its value is "bl".</para>
        ///</summary>
        [EnumString("bl")]
        BottomLeft,
        ///<summary>
        ///Rectangle Alignment Enum ( Bottom ).
        ///<para>When the item is serialized out as xml, its value is "b".</para>
        ///</summary>
        [EnumString("b")]
        Bottom,
        ///<summary>
        ///Rectangle Alignment Enum ( Bottom Right ).
        ///<para>When the item is serialized out as xml, its value is "br".</para>
        ///</summary>
        [EnumString("br")]
        BottomRight,
    }

    /// <summary>
    /// Black and White Mode
    /// </summary>
    public enum BlackWhiteModeValues
    {
        ///<summary>
        ///Color.
        ///<para>When the item is serialized out as xml, its value is "clr".</para>
        ///</summary>
        [EnumString("clr")]
        Color,
        ///<summary>
        ///Automatic.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
        ///<summary>
        ///Gray.
        ///<para>When the item is serialized out as xml, its value is "gray".</para>
        ///</summary>
        [EnumString("gray")]
        Gray,
        ///<summary>
        ///Light Gray.
        ///<para>When the item is serialized out as xml, its value is "ltGray".</para>
        ///</summary>
        [EnumString("ltGray")]
        LightGray,
        ///<summary>
        ///Inverse Gray.
        ///<para>When the item is serialized out as xml, its value is "invGray".</para>
        ///</summary>
        [EnumString("invGray")]
        InvGray,
        ///<summary>
        ///Gray and White.
        ///<para>When the item is serialized out as xml, its value is "grayWhite".</para>
        ///</summary>
        [EnumString("grayWhite")]
        GrayWhite,
        ///<summary>
        ///Black and Gray.
        ///<para>When the item is serialized out as xml, its value is "blackGray".</para>
        ///</summary>
        [EnumString("blackGray")]
        BlackGray,
        ///<summary>
        ///Black and White.
        ///<para>When the item is serialized out as xml, its value is "blackWhite".</para>
        ///</summary>
        [EnumString("blackWhite")]
        BlackWhite,
        ///<summary>
        ///Black.
        ///<para>When the item is serialized out as xml, its value is "black".</para>
        ///</summary>
        [EnumString("black")]
        Black,
        ///<summary>
        ///White.
        ///<para>When the item is serialized out as xml, its value is "white".</para>
        ///</summary>
        [EnumString("white")]
        White,
        ///<summary>
        ///Hidden.
        ///<para>When the item is serialized out as xml, its value is "hidden".</para>
        ///</summary>
        [EnumString("hidden")]
        Hidden,
    }

    /// <summary>
    /// Chart Animation Build Step
    /// </summary>
    public enum ChartBuildStepValues
    {
        ///<summary>
        ///Category.
        ///<para>When the item is serialized out as xml, its value is "category".</para>
        ///</summary>
        [EnumString("category")]
        Category,
        ///<summary>
        ///Category Points.
        ///<para>When the item is serialized out as xml, its value is "ptInCategory".</para>
        ///</summary>
        [EnumString("ptInCategory")]
        CategoryPoints,
        ///<summary>
        ///Series.
        ///<para>When the item is serialized out as xml, its value is "series".</para>
        ///</summary>
        [EnumString("series")]
        Series,
        ///<summary>
        ///Series Points.
        ///<para>When the item is serialized out as xml, its value is "ptInSeries".</para>
        ///</summary>
        [EnumString("ptInSeries")]
        SeriesPoints,
        ///<summary>
        ///All Points.
        ///<para>When the item is serialized out as xml, its value is "allPts".</para>
        ///</summary>
        [EnumString("allPts")]
        AllPoints,
        ///<summary>
        ///Grid and Legend.
        ///<para>When the item is serialized out as xml, its value is "gridLegend".</para>
        ///</summary>
        [EnumString("gridLegend")]
        GridLegend,
    }

    /// <summary>
    /// Diagram Animation Build Steps
    /// </summary>
    public enum DiagramBuildStepValues
    {
        ///<summary>
        ///Shape.
        ///<para>When the item is serialized out as xml, its value is "sp".</para>
        ///</summary>
        [EnumString("sp")]
        Shape,
        ///<summary>
        ///Background.
        ///<para>When the item is serialized out as xml, its value is "bg".</para>
        ///</summary>
        [EnumString("bg")]
        Background,
    }

    /// <summary>
    /// Animation Build Type
    /// </summary>
    public enum AnimationBuildValues
    {
        ///<summary>
        ///Animate At Once.
        ///<para>When the item is serialized out as xml, its value is "allAtOnce".</para>
        ///</summary>
        [EnumString("allAtOnce")]
        AllAtOnce,
    }

    /// <summary>
    /// Diagram only Animation Types
    /// </summary>
    public enum AnimationDiagramOnlyBuildValues
    {
        ///<summary>
        ///Elements One-by-One.
        ///<para>When the item is serialized out as xml, its value is "one".</para>
        ///</summary>
        [EnumString("one")]
        One,
        ///<summary>
        ///Level One-by-One.
        ///<para>When the item is serialized out as xml, its value is "lvlOne".</para>
        ///</summary>
        [EnumString("lvlOne")]
        LevelOne,
        ///<summary>
        ///Each Level at Once.
        ///<para>When the item is serialized out as xml, its value is "lvlAtOnce".</para>
        ///</summary>
        [EnumString("lvlAtOnce")]
        LevelAtOnce,
    }

    /// <summary>
    /// Chart only Animation Types
    /// </summary>
    public enum AnimationChartOnlyBuildValues
    {
        ///<summary>
        ///Series.
        ///<para>When the item is serialized out as xml, its value is "series".</para>
        ///</summary>
        [EnumString("series")]
        Series,
        ///<summary>
        ///Category.
        ///<para>When the item is serialized out as xml, its value is "category".</para>
        ///</summary>
        [EnumString("category")]
        Category,
        ///<summary>
        ///Series Element.
        ///<para>When the item is serialized out as xml, its value is "seriesEl".</para>
        ///</summary>
        [EnumString("seriesEl")]
        SeriesElement,
        ///<summary>
        ///Category Element.
        ///<para>When the item is serialized out as xml, its value is "categoryEl".</para>
        ///</summary>
        [EnumString("categoryEl")]
        CategoryElement,
    }

    /// <summary>
    /// Preset Camera Type
    /// </summary>
    public enum PresetCameraValues
    {
        ///<summary>
        ///Legacy Oblique Top Left.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueTopLeft".</para>
        ///</summary>
        [EnumString("legacyObliqueTopLeft")]
        LegacyObliqueTopLeft,
        ///<summary>
        ///Legacy Oblique Top.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueTop".</para>
        ///</summary>
        [EnumString("legacyObliqueTop")]
        LegacyObliqueTop,
        ///<summary>
        ///Legacy Oblique Top Right.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueTopRight".</para>
        ///</summary>
        [EnumString("legacyObliqueTopRight")]
        LegacyObliqueTopRight,
        ///<summary>
        ///Legacy Oblique Left.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueLeft".</para>
        ///</summary>
        [EnumString("legacyObliqueLeft")]
        LegacyObliqueLeft,
        ///<summary>
        ///Legacy Oblique Front.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueFront".</para>
        ///</summary>
        [EnumString("legacyObliqueFront")]
        LegacyObliqueFront,
        ///<summary>
        ///Legacy Oblique Right.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueRight".</para>
        ///</summary>
        [EnumString("legacyObliqueRight")]
        LegacyObliqueRight,
        ///<summary>
        ///Legacy Oblique Bottom Left.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueBottomLeft".</para>
        ///</summary>
        [EnumString("legacyObliqueBottomLeft")]
        LegacyObliqueBottomLeft,
        ///<summary>
        ///Legacy Oblique Bottom.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueBottom".</para>
        ///</summary>
        [EnumString("legacyObliqueBottom")]
        LegacyObliqueBottom,
        ///<summary>
        ///Legacy Oblique Bottom Right.
        ///<para>When the item is serialized out as xml, its value is "legacyObliqueBottomRight".</para>
        ///</summary>
        [EnumString("legacyObliqueBottomRight")]
        LegacyObliqueBottomRight,
        ///<summary>
        ///Legacy Perspective Top Left.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTopLeft".</para>
        ///</summary>
        [EnumString("legacyPerspectiveTopLeft")]
        LegacyPerspectiveTopLeft,
        ///<summary>
        ///Legacy Perspective Top.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTop".</para>
        ///</summary>
        [EnumString("legacyPerspectiveTop")]
        LegacyPerspectiveTop,
        ///<summary>
        ///Legacy Perspective Top Right.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTopRight".</para>
        ///</summary>
        [EnumString("legacyPerspectiveTopRight")]
        LegacyPerspectiveTopRight,
        ///<summary>
        ///Legacy Perspective Left.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveLeft".</para>
        ///</summary>
        [EnumString("legacyPerspectiveLeft")]
        LegacyPerspectiveLeft,
        ///<summary>
        ///Legacy Perspective Front.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveFront".</para>
        ///</summary>
        [EnumString("legacyPerspectiveFront")]
        LegacyPerspectiveFront,
        ///<summary>
        ///Legacy Perspective Right.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveRight".</para>
        ///</summary>
        [EnumString("legacyPerspectiveRight")]
        LegacyPerspectiveRight,
        ///<summary>
        ///Legacy Perspective Bottom Left.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomLeft".</para>
        ///</summary>
        [EnumString("legacyPerspectiveBottomLeft")]
        LegacyPerspectiveBottomLeft,
        ///<summary>
        ///Legacy Perspective Bottom.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottom".</para>
        ///</summary>
        [EnumString("legacyPerspectiveBottom")]
        LegacyPerspectiveBottom,
        ///<summary>
        ///Legacy Perspective Bottom Right.
        ///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomRight".</para>
        ///</summary>
        [EnumString("legacyPerspectiveBottomRight")]
        LegacyPerspectiveBottomRight,
        ///<summary>
        ///Orthographic Front.
        ///<para>When the item is serialized out as xml, its value is "orthographicFront".</para>
        ///</summary>
        [EnumString("orthographicFront")]
        OrthographicFront,
        ///<summary>
        ///Isometric Top Up.
        ///<para>When the item is serialized out as xml, its value is "isometricTopUp".</para>
        ///</summary>
        [EnumString("isometricTopUp")]
        IsometricTopUp,
        ///<summary>
        ///Isometric Top Down.
        ///<para>When the item is serialized out as xml, its value is "isometricTopDown".</para>
        ///</summary>
        [EnumString("isometricTopDown")]
        IsometricTopDown,
        ///<summary>
        ///Isometric Bottom Up.
        ///<para>When the item is serialized out as xml, its value is "isometricBottomUp".</para>
        ///</summary>
        [EnumString("isometricBottomUp")]
        IsometricBottomUp,
        ///<summary>
        ///Isometric Bottom Down.
        ///<para>When the item is serialized out as xml, its value is "isometricBottomDown".</para>
        ///</summary>
        [EnumString("isometricBottomDown")]
        IsometricBottomDown,
        ///<summary>
        ///Isometric Left Up.
        ///<para>When the item is serialized out as xml, its value is "isometricLeftUp".</para>
        ///</summary>
        [EnumString("isometricLeftUp")]
        IsometricLeftUp,
        ///<summary>
        ///Isometric Left Down.
        ///<para>When the item is serialized out as xml, its value is "isometricLeftDown".</para>
        ///</summary>
        [EnumString("isometricLeftDown")]
        IsometricLeftDown,
        ///<summary>
        ///Isometric Right Up.
        ///<para>When the item is serialized out as xml, its value is "isometricRightUp".</para>
        ///</summary>
        [EnumString("isometricRightUp")]
        IsometricRightUp,
        ///<summary>
        ///Isometric Right Down.
        ///<para>When the item is serialized out as xml, its value is "isometricRightDown".</para>
        ///</summary>
        [EnumString("isometricRightDown")]
        IsometricRightDown,
        ///<summary>
        ///Isometric Off Axis 1 Left.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Left".</para>
        ///</summary>
        [EnumString("isometricOffAxis1Left")]
        IsometricOffAxis1Left,
        ///<summary>
        ///Isometric Off Axis 1 Right.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Right".</para>
        ///</summary>
        [EnumString("isometricOffAxis1Right")]
        IsometricOffAxis1Right,
        ///<summary>
        ///Isometric Off Axis 1 Top.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Top".</para>
        ///</summary>
        [EnumString("isometricOffAxis1Top")]
        IsometricOffAxis1Top,
        ///<summary>
        ///Isometric Off Axis 2 Left.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Left".</para>
        ///</summary>
        [EnumString("isometricOffAxis2Left")]
        IsometricOffAxis2Left,
        ///<summary>
        ///Isometric Off Axis 2 Right.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Right".</para>
        ///</summary>
        [EnumString("isometricOffAxis2Right")]
        IsometricOffAxis2Right,
        ///<summary>
        ///Isometric Off Axis 2 Top.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Top".</para>
        ///</summary>
        [EnumString("isometricOffAxis2Top")]
        IsometricOffAxis2Top,
        ///<summary>
        ///Isometric Off Axis 3 Left.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Left".</para>
        ///</summary>
        [EnumString("isometricOffAxis3Left")]
        IsometricOffAxis3Left,
        ///<summary>
        ///Isometric Off Axis 3 Right.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Right".</para>
        ///</summary>
        [EnumString("isometricOffAxis3Right")]
        IsometricOffAxis3Right,
        ///<summary>
        ///Isometric Off Axis 3 Bottom.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Bottom".</para>
        ///</summary>
        [EnumString("isometricOffAxis3Bottom")]
        IsometricOffAxis3Bottom,
        ///<summary>
        ///Isometric Off Axis 4 Left.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Left".</para>
        ///</summary>
        [EnumString("isometricOffAxis4Left")]
        IsometricOffAxis4Left,
        ///<summary>
        ///Isometric Off Axis 4 Right.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Right".</para>
        ///</summary>
        [EnumString("isometricOffAxis4Right")]
        IsometricOffAxis4Right,
        ///<summary>
        ///Isometric Off Axis 4 Bottom.
        ///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Bottom".</para>
        ///</summary>
        [EnumString("isometricOffAxis4Bottom")]
        IsometricOffAxis4Bottom,
        ///<summary>
        ///Oblique Top Left.
        ///<para>When the item is serialized out as xml, its value is "obliqueTopLeft".</para>
        ///</summary>
        [EnumString("obliqueTopLeft")]
        ObliqueTopLeft,
        ///<summary>
        ///Oblique Top.
        ///<para>When the item is serialized out as xml, its value is "obliqueTop".</para>
        ///</summary>
        [EnumString("obliqueTop")]
        ObliqueTop,
        ///<summary>
        ///Oblique Top Right.
        ///<para>When the item is serialized out as xml, its value is "obliqueTopRight".</para>
        ///</summary>
        [EnumString("obliqueTopRight")]
        ObliqueTopRight,
        ///<summary>
        ///Oblique Left.
        ///<para>When the item is serialized out as xml, its value is "obliqueLeft".</para>
        ///</summary>
        [EnumString("obliqueLeft")]
        ObliqueLeft,
        ///<summary>
        ///Oblique Right.
        ///<para>When the item is serialized out as xml, its value is "obliqueRight".</para>
        ///</summary>
        [EnumString("obliqueRight")]
        ObliqueRight,
        ///<summary>
        ///Oblique Bottom Left.
        ///<para>When the item is serialized out as xml, its value is "obliqueBottomLeft".</para>
        ///</summary>
        [EnumString("obliqueBottomLeft")]
        ObliqueBottomLeft,
        ///<summary>
        ///Oblique Bottom.
        ///<para>When the item is serialized out as xml, its value is "obliqueBottom".</para>
        ///</summary>
        [EnumString("obliqueBottom")]
        ObliqueBottom,
        ///<summary>
        ///Oblique Bottom Right.
        ///<para>When the item is serialized out as xml, its value is "obliqueBottomRight".</para>
        ///</summary>
        [EnumString("obliqueBottomRight")]
        ObliqueBottomRight,
        ///<summary>
        ///Perspective Front.
        ///<para>When the item is serialized out as xml, its value is "perspectiveFront".</para>
        ///</summary>
        [EnumString("perspectiveFront")]
        PerspectiveFront,
        ///<summary>
        ///Perspective Left.
        ///<para>When the item is serialized out as xml, its value is "perspectiveLeft".</para>
        ///</summary>
        [EnumString("perspectiveLeft")]
        PerspectiveLeft,
        ///<summary>
        ///Perspective Right.
        ///<para>When the item is serialized out as xml, its value is "perspectiveRight".</para>
        ///</summary>
        [EnumString("perspectiveRight")]
        PerspectiveRight,
        ///<summary>
        ///Orthographic Above.
        ///<para>When the item is serialized out as xml, its value is "perspectiveAbove".</para>
        ///</summary>
        [EnumString("perspectiveAbove")]
        PerspectiveAbove,
        ///<summary>
        ///Perspective Below.
        ///<para>When the item is serialized out as xml, its value is "perspectiveBelow".</para>
        ///</summary>
        [EnumString("perspectiveBelow")]
        PerspectiveBelow,
        ///<summary>
        ///Perspective Above Left Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveAboveLeftFacing".</para>
        ///</summary>
        [EnumString("perspectiveAboveLeftFacing")]
        PerspectiveAboveLeftFacing,
        ///<summary>
        ///Perspective Above Right Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveAboveRightFacing".</para>
        ///</summary>
        [EnumString("perspectiveAboveRightFacing")]
        PerspectiveAboveRightFacing,
        ///<summary>
        ///Perspective Contrasting Left Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveContrastingLeftFacing".</para>
        ///</summary>
        [EnumString("perspectiveContrastingLeftFacing")]
        PerspectiveContrastingLeftFacing,
        ///<summary>
        ///Perspective Contrasting Right Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveContrastingRightFacing".</para>
        ///</summary>
        [EnumString("perspectiveContrastingRightFacing")]
        PerspectiveContrastingRightFacing,
        ///<summary>
        ///Perspective Heroic Left Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveHeroicLeftFacing".</para>
        ///</summary>
        [EnumString("perspectiveHeroicLeftFacing")]
        PerspectiveHeroicLeftFacing,
        ///<summary>
        ///Perspective Heroic Right Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveHeroicRightFacing".</para>
        ///</summary>
        [EnumString("perspectiveHeroicRightFacing")]
        PerspectiveHeroicRightFacing,
        ///<summary>
        ///Perspective Heroic Extreme Left Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeLeftFacing".</para>
        ///</summary>
        [EnumString("perspectiveHeroicExtremeLeftFacing")]
        PerspectiveHeroicExtremeLeftFacing,
        ///<summary>
        ///Perspective Heroic Extreme Right Facing.
        ///<para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeRightFacing".</para>
        ///</summary>
        [EnumString("perspectiveHeroicExtremeRightFacing")]
        PerspectiveHeroicExtremeRightFacing,
        ///<summary>
        ///Perspective Relaxed.
        ///<para>When the item is serialized out as xml, its value is "perspectiveRelaxed".</para>
        ///</summary>
        [EnumString("perspectiveRelaxed")]
        PerspectiveRelaxed,
        ///<summary>
        ///Perspective Relaxed Moderately.
        ///<para>When the item is serialized out as xml, its value is "perspectiveRelaxedModerately".</para>
        ///</summary>
        [EnumString("perspectiveRelaxedModerately")]
        PerspectiveRelaxedModerately,
    }

    /// <summary>
    /// Light Rig Direction
    /// </summary>
    public enum LightRigDirectionValues
    {
        ///<summary>
        ///Top Left.
        ///<para>When the item is serialized out as xml, its value is "tl".</para>
        ///</summary>
        [EnumString("tl")]
        TopLeft,
        ///<summary>
        ///Top.
        ///<para>When the item is serialized out as xml, its value is "t".</para>
        ///</summary>
        [EnumString("t")]
        Top,
        ///<summary>
        ///Top Right.
        ///<para>When the item is serialized out as xml, its value is "tr".</para>
        ///</summary>
        [EnumString("tr")]
        TopRight,
        ///<summary>
        ///Left.
        ///<para>When the item is serialized out as xml, its value is "l".</para>
        ///</summary>
        [EnumString("l")]
        Left,
        ///<summary>
        ///Right.
        ///<para>When the item is serialized out as xml, its value is "r".</para>
        ///</summary>
        [EnumString("r")]
        Right,
        ///<summary>
        ///Bottom Left.
        ///<para>When the item is serialized out as xml, its value is "bl".</para>
        ///</summary>
        [EnumString("bl")]
        BottomLeft,
        ///<summary>
        ///Bottom.
        ///<para>When the item is serialized out as xml, its value is "b".</para>
        ///</summary>
        [EnumString("b")]
        Bottom,
        ///<summary>
        ///Bottom Right.
        ///<para>When the item is serialized out as xml, its value is "br".</para>
        ///</summary>
        [EnumString("br")]
        BottomRight,
    }

    /// <summary>
    /// Light Rig Type
    /// </summary>
    public enum LightRigValues
    {
        ///<summary>
        ///Legacy Flat 1.
        ///<para>When the item is serialized out as xml, its value is "legacyFlat1".</para>
        ///</summary>
        [EnumString("legacyFlat1")]
        LegacyFlat1,
        ///<summary>
        ///Legacy Flat 2.
        ///<para>When the item is serialized out as xml, its value is "legacyFlat2".</para>
        ///</summary>
        [EnumString("legacyFlat2")]
        LegacyFlat2,
        ///<summary>
        ///Legacy Flat 3.
        ///<para>When the item is serialized out as xml, its value is "legacyFlat3".</para>
        ///</summary>
        [EnumString("legacyFlat3")]
        LegacyFlat3,
        ///<summary>
        ///Legacy Flat 4.
        ///<para>When the item is serialized out as xml, its value is "legacyFlat4".</para>
        ///</summary>
        [EnumString("legacyFlat4")]
        LegacyFlat4,
        ///<summary>
        ///Legacy Normal 1.
        ///<para>When the item is serialized out as xml, its value is "legacyNormal1".</para>
        ///</summary>
        [EnumString("legacyNormal1")]
        LegacyNormal1,
        ///<summary>
        ///Legacy Normal 2.
        ///<para>When the item is serialized out as xml, its value is "legacyNormal2".</para>
        ///</summary>
        [EnumString("legacyNormal2")]
        LegacyNormal2,
        ///<summary>
        ///Legacy Normal 3.
        ///<para>When the item is serialized out as xml, its value is "legacyNormal3".</para>
        ///</summary>
        [EnumString("legacyNormal3")]
        LegacyNormal3,
        ///<summary>
        ///Legacy Normal 4.
        ///<para>When the item is serialized out as xml, its value is "legacyNormal4".</para>
        ///</summary>
        [EnumString("legacyNormal4")]
        LegacyNormal4,
        ///<summary>
        ///Legacy Harsh 1.
        ///<para>When the item is serialized out as xml, its value is "legacyHarsh1".</para>
        ///</summary>
        [EnumString("legacyHarsh1")]
        LegacyHarsh1,
        ///<summary>
        ///Legacy Harsh 2.
        ///<para>When the item is serialized out as xml, its value is "legacyHarsh2".</para>
        ///</summary>
        [EnumString("legacyHarsh2")]
        LegacyHarsh2,
        ///<summary>
        ///Legacy Harsh 3.
        ///<para>When the item is serialized out as xml, its value is "legacyHarsh3".</para>
        ///</summary>
        [EnumString("legacyHarsh3")]
        LegacyHarsh3,
        ///<summary>
        ///Legacy Harsh 4.
        ///<para>When the item is serialized out as xml, its value is "legacyHarsh4".</para>
        ///</summary>
        [EnumString("legacyHarsh4")]
        LegacyHarsh4,
        ///<summary>
        ///Three Point.
        ///<para>When the item is serialized out as xml, its value is "threePt".</para>
        ///</summary>
        [EnumString("threePt")]
        ThreePoints,
        ///<summary>
        ///Light Rig Enum ( Balanced ).
        ///<para>When the item is serialized out as xml, its value is "balanced".</para>
        ///</summary>
        [EnumString("balanced")]
        Balanced,
        ///<summary>
        ///Soft.
        ///<para>When the item is serialized out as xml, its value is "soft".</para>
        ///</summary>
        [EnumString("soft")]
        Soft,
        ///<summary>
        ///Harsh.
        ///<para>When the item is serialized out as xml, its value is "harsh".</para>
        ///</summary>
        [EnumString("harsh")]
        Harsh,
        ///<summary>
        ///Flood.
        ///<para>When the item is serialized out as xml, its value is "flood".</para>
        ///</summary>
        [EnumString("flood")]
        Flood,
        ///<summary>
        ///Contrasting.
        ///<para>When the item is serialized out as xml, its value is "contrasting".</para>
        ///</summary>
        [EnumString("contrasting")]
        Contrasting,
        ///<summary>
        ///Morning.
        ///<para>When the item is serialized out as xml, its value is "morning".</para>
        ///</summary>
        [EnumString("morning")]
        Morning,
        ///<summary>
        ///Sunrise.
        ///<para>When the item is serialized out as xml, its value is "sunrise".</para>
        ///</summary>
        [EnumString("sunrise")]
        Sunrise,
        ///<summary>
        ///Sunset.
        ///<para>When the item is serialized out as xml, its value is "sunset".</para>
        ///</summary>
        [EnumString("sunset")]
        Sunset,
        ///<summary>
        ///Chilly.
        ///<para>When the item is serialized out as xml, its value is "chilly".</para>
        ///</summary>
        [EnumString("chilly")]
        Chilly,
        ///<summary>
        ///Freezing.
        ///<para>When the item is serialized out as xml, its value is "freezing".</para>
        ///</summary>
        [EnumString("freezing")]
        Freezing,
        ///<summary>
        ///Flat.
        ///<para>When the item is serialized out as xml, its value is "flat".</para>
        ///</summary>
        [EnumString("flat")]
        Flat,
        ///<summary>
        ///Two Point.
        ///<para>When the item is serialized out as xml, its value is "twoPt".</para>
        ///</summary>
        [EnumString("twoPt")]
        TwoPoints,
        ///<summary>
        ///Glow.
        ///<para>When the item is serialized out as xml, its value is "glow".</para>
        ///</summary>
        [EnumString("glow")]
        Glow,
        ///<summary>
        ///Bright Room.
        ///<para>When the item is serialized out as xml, its value is "brightRoom".</para>
        ///</summary>
        [EnumString("brightRoom")]
        BrightRoom,
    }

    /// <summary>
    /// Bevel Presets
    /// </summary>
    public enum BevelPresetValues
    {
        ///<summary>
        ///Relaxed Inset.
        ///<para>When the item is serialized out as xml, its value is "relaxedInset".</para>
        ///</summary>
        [EnumString("relaxedInset")]
        RelaxedInset,
        ///<summary>
        ///Circle.
        ///<para>When the item is serialized out as xml, its value is "circle".</para>
        ///</summary>
        [EnumString("circle")]
        Circle,
        ///<summary>
        ///Slope.
        ///<para>When the item is serialized out as xml, its value is "slope".</para>
        ///</summary>
        [EnumString("slope")]
        Slope,
        ///<summary>
        ///Cross.
        ///<para>When the item is serialized out as xml, its value is "cross".</para>
        ///</summary>
        [EnumString("cross")]
        Cross,
        ///<summary>
        ///Angle.
        ///<para>When the item is serialized out as xml, its value is "angle".</para>
        ///</summary>
        [EnumString("angle")]
        Angle,
        ///<summary>
        ///Soft Round.
        ///<para>When the item is serialized out as xml, its value is "softRound".</para>
        ///</summary>
        [EnumString("softRound")]
        SoftRound,
        ///<summary>
        ///Convex.
        ///<para>When the item is serialized out as xml, its value is "convex".</para>
        ///</summary>
        [EnumString("convex")]
        Convex,
        ///<summary>
        ///Cool Slant.
        ///<para>When the item is serialized out as xml, its value is "coolSlant".</para>
        ///</summary>
        [EnumString("coolSlant")]
        CoolSlant,
        ///<summary>
        ///Divot.
        ///<para>When the item is serialized out as xml, its value is "divot".</para>
        ///</summary>
        [EnumString("divot")]
        Divot,
        ///<summary>
        ///Riblet.
        ///<para>When the item is serialized out as xml, its value is "riblet".</para>
        ///</summary>
        [EnumString("riblet")]
        Riblet,
        ///<summary>
        ///Hard Edge.
        ///<para>When the item is serialized out as xml, its value is "hardEdge".</para>
        ///</summary>
        [EnumString("hardEdge")]
        HardEdge,
        ///<summary>
        ///Art Deco.
        ///<para>When the item is serialized out as xml, its value is "artDeco".</para>
        ///</summary>
        [EnumString("artDeco")]
        ArtDeco,
    }

    /// <summary>
    /// Preset Material Type
    /// </summary>
    public enum PresetMaterialTypeValues
    {
        ///<summary>
        ///Legacy Matte.
        ///<para>When the item is serialized out as xml, its value is "legacyMatte".</para>
        ///</summary>
        [EnumString("legacyMatte")]
        LegacyMatte,
        ///<summary>
        ///Legacy Plastic.
        ///<para>When the item is serialized out as xml, its value is "legacyPlastic".</para>
        ///</summary>
        [EnumString("legacyPlastic")]
        LegacyPlastic,
        ///<summary>
        ///Legacy Metal.
        ///<para>When the item is serialized out as xml, its value is "legacyMetal".</para>
        ///</summary>
        [EnumString("legacyMetal")]
        LegacyMetal,
        ///<summary>
        ///Legacy Wireframe.
        ///<para>When the item is serialized out as xml, its value is "legacyWireframe".</para>
        ///</summary>
        [EnumString("legacyWireframe")]
        LegacyWireframe,
        ///<summary>
        ///Matte.
        ///<para>When the item is serialized out as xml, its value is "matte".</para>
        ///</summary>
        [EnumString("matte")]
        Matte,
        ///<summary>
        ///Plastic.
        ///<para>When the item is serialized out as xml, its value is "plastic".</para>
        ///</summary>
        [EnumString("plastic")]
        Plastic,
        ///<summary>
        ///Metal.
        ///<para>When the item is serialized out as xml, its value is "metal".</para>
        ///</summary>
        [EnumString("metal")]
        Metal,
        ///<summary>
        ///Warm Matte.
        ///<para>When the item is serialized out as xml, its value is "warmMatte".</para>
        ///</summary>
        [EnumString("warmMatte")]
        WarmMatte,
        ///<summary>
        ///Translucent Powder.
        ///<para>When the item is serialized out as xml, its value is "translucentPowder".</para>
        ///</summary>
        [EnumString("translucentPowder")]
        TranslucentPowder,
        ///<summary>
        ///Powder.
        ///<para>When the item is serialized out as xml, its value is "powder".</para>
        ///</summary>
        [EnumString("powder")]
        Powder,
        ///<summary>
        ///Dark Edge.
        ///<para>When the item is serialized out as xml, its value is "dkEdge".</para>
        ///</summary>
        [EnumString("dkEdge")]
        DarkEdge,
        ///<summary>
        ///Soft Edge.
        ///<para>When the item is serialized out as xml, its value is "softEdge".</para>
        ///</summary>
        [EnumString("softEdge")]
        SoftEdge,
        ///<summary>
        ///Clear.
        ///<para>When the item is serialized out as xml, its value is "clear".</para>
        ///</summary>
        [EnumString("clear")]
        Clear,
        ///<summary>
        ///Flat.
        ///<para>When the item is serialized out as xml, its value is "flat".</para>
        ///</summary>
        [EnumString("flat")]
        Flat,
        ///<summary>
        ///Soft Metal.
        ///<para>When the item is serialized out as xml, its value is "softmetal".</para>
        ///</summary>
        [EnumString("softmetal")]
        SoftMetal,
    }

    /// <summary>
    /// Preset Shadow Type
    /// </summary>
    public enum PresetShadowValues
    {
        ///<summary>
        ///Top Left Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw1".</para>
        ///</summary>
        [EnumString("shdw1")]
        TopLeftDropShadow,
        ///<summary>
        ///Top Right Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw2".</para>
        ///</summary>
        [EnumString("shdw2")]
        TopRightDropShadow,
        ///<summary>
        ///Back Left Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw3".</para>
        ///</summary>
        [EnumString("shdw3")]
        BackLeftPerspectiveShadow,
        ///<summary>
        ///Back Right Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw4".</para>
        ///</summary>
        [EnumString("shdw4")]
        BackRightPerspectiveShadow,
        ///<summary>
        ///Bottom Left Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw5".</para>
        ///</summary>
        [EnumString("shdw5")]
        BottomLeftDropShadow,
        ///<summary>
        ///Bottom Right Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw6".</para>
        ///</summary>
        [EnumString("shdw6")]
        BottomRightDropShadow,
        ///<summary>
        ///Front Left Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw7".</para>
        ///</summary>
        [EnumString("shdw7")]
        FrontLeftPerspectiveShadow,
        ///<summary>
        ///Front Right Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw8".</para>
        ///</summary>
        [EnumString("shdw8")]
        FrontRightPerspectiveShadow,
        ///<summary>
        ///Top Left Small Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw9".</para>
        ///</summary>
        [EnumString("shdw9")]
        TopLeftSmallDropShadow,
        ///<summary>
        ///Top Left Large Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw10".</para>
        ///</summary>
        [EnumString("shdw10")]
        TopLeftLargeDropShadow,
        ///<summary>
        ///Back Left Long Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw11".</para>
        ///</summary>
        [EnumString("shdw11")]
        BackLeftLongPerspectiveShadow,
        ///<summary>
        ///Back Right Long Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw12".</para>
        ///</summary>
        [EnumString("shdw12")]
        BackRightLongPerspectiveShadow,
        ///<summary>
        ///Top Left Double Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw13".</para>
        ///</summary>
        [EnumString("shdw13")]
        TopLeftDoubleDropShadow,
        ///<summary>
        ///Bottom Right Small Drop Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw14".</para>
        ///</summary>
        [EnumString("shdw14")]
        BottomRightSmallDropShadow,
        ///<summary>
        ///Front Left Long Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw15".</para>
        ///</summary>
        [EnumString("shdw15")]
        FrontLeftLongPerspectiveShadow,
        ///<summary>
        ///Front Right LongPerspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw16".</para>
        ///</summary>
        [EnumString("shdw16")]
        FrontRightLongPerspectiveShadow,
        ///<summary>
        ///3D Outer Box Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw17".</para>
        ///</summary>
        [EnumString("shdw17")]
        ThreeDimensionalOuterBoxShadow,
        ///<summary>
        ///3D Inner Box Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw18".</para>
        ///</summary>
        [EnumString("shdw18")]
        ThreeDimensionalInnerBoxShadow,
        ///<summary>
        ///Back Center Perspective Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw19".</para>
        ///</summary>
        [EnumString("shdw19")]
        BackCenterPerspectiveShadow,
        ///<summary>
        ///Front Bottom Shadow.
        ///<para>When the item is serialized out as xml, its value is "shdw20".</para>
        ///</summary>
        [EnumString("shdw20")]
        FrontBottomShadow,
    }

    /// <summary>
    /// Path Shade Type
    /// </summary>
    public enum PathShadeValues
    {
        ///<summary>
        ///Shape.
        ///<para>When the item is serialized out as xml, its value is "shape".</para>
        ///</summary>
        [EnumString("shape")]
        Shape,
        ///<summary>
        ///Circle.
        ///<para>When the item is serialized out as xml, its value is "circle".</para>
        ///</summary>
        [EnumString("circle")]
        Circle,
        ///<summary>
        ///Rectangle.
        ///<para>When the item is serialized out as xml, its value is "rect".</para>
        ///</summary>
        [EnumString("rect")]
        Rectangle,
    }

    /// <summary>
    /// Tile Flip Mode
    /// </summary>
    public enum TileFlipValues
    {
        ///<summary>
        ///None.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Horizontal.
        ///<para>When the item is serialized out as xml, its value is "x".</para>
        ///</summary>
        [EnumString("x")]
        Horizontal,
        ///<summary>
        ///Vertical.
        ///<para>When the item is serialized out as xml, its value is "y".</para>
        ///</summary>
        [EnumString("y")]
        Vertical,
        ///<summary>
        ///Horizontal and Vertical.
        ///<para>When the item is serialized out as xml, its value is "xy".</para>
        ///</summary>
        [EnumString("xy")]
        HorizontalAndVertical,
    }

    /// <summary>
    /// Blip Compression Type
    /// </summary>
    public enum BlipCompressionValues
    {
        ///<summary>
        ///Email Compression.
        ///<para>When the item is serialized out as xml, its value is "email".</para>
        ///</summary>
        [EnumString("email")]
        Email,
        ///<summary>
        ///Screen Viewing Compression.
        ///<para>When the item is serialized out as xml, its value is "screen".</para>
        ///</summary>
        [EnumString("screen")]
        Screen,
        ///<summary>
        ///Printing Compression.
        ///<para>When the item is serialized out as xml, its value is "print".</para>
        ///</summary>
        [EnumString("print")]
        Print,
        ///<summary>
        ///High Quality Printing Compression.
        ///<para>When the item is serialized out as xml, its value is "hqprint".</para>
        ///</summary>
        [EnumString("hqprint")]
        HighQualityPrint,
        ///<summary>
        ///No Compression.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Preset Pattern Value
    /// </summary>
    public enum PresetPatternValues
    {
        ///<summary>
        ///5%.
        ///<para>When the item is serialized out as xml, its value is "pct5".</para>
        ///</summary>
        [EnumString("pct5")]
        Percent5,
        ///<summary>
        ///10%.
        ///<para>When the item is serialized out as xml, its value is "pct10".</para>
        ///</summary>
        [EnumString("pct10")]
        Percent10,
        ///<summary>
        ///20%.
        ///<para>When the item is serialized out as xml, its value is "pct20".</para>
        ///</summary>
        [EnumString("pct20")]
        Percent20,
        ///<summary>
        ///25%.
        ///<para>When the item is serialized out as xml, its value is "pct25".</para>
        ///</summary>
        [EnumString("pct25")]
        Percent25,
        ///<summary>
        ///30%.
        ///<para>When the item is serialized out as xml, its value is "pct30".</para>
        ///</summary>
        [EnumString("pct30")]
        Percent30,
        ///<summary>
        ///40%.
        ///<para>When the item is serialized out as xml, its value is "pct40".</para>
        ///</summary>
        [EnumString("pct40")]
        Percent40,
        ///<summary>
        ///50%.
        ///<para>When the item is serialized out as xml, its value is "pct50".</para>
        ///</summary>
        [EnumString("pct50")]
        Percent50,
        ///<summary>
        ///60%.
        ///<para>When the item is serialized out as xml, its value is "pct60".</para>
        ///</summary>
        [EnumString("pct60")]
        Percent60,
        ///<summary>
        ///70%.
        ///<para>When the item is serialized out as xml, its value is "pct70".</para>
        ///</summary>
        [EnumString("pct70")]
        Percent70,
        ///<summary>
        ///75%.
        ///<para>When the item is serialized out as xml, its value is "pct75".</para>
        ///</summary>
        [EnumString("pct75")]
        Percent75,
        ///<summary>
        ///80%.
        ///<para>When the item is serialized out as xml, its value is "pct80".</para>
        ///</summary>
        [EnumString("pct80")]
        Percent80,
        ///<summary>
        ///90%.
        ///<para>When the item is serialized out as xml, its value is "pct90".</para>
        ///</summary>
        [EnumString("pct90")]
        Percent90,
        ///<summary>
        ///Horizontal.
        ///<para>When the item is serialized out as xml, its value is "horz".</para>
        ///</summary>
        [EnumString("horz")]
        Horizontal,
        ///<summary>
        ///Vertical.
        ///<para>When the item is serialized out as xml, its value is "vert".</para>
        ///</summary>
        [EnumString("vert")]
        Vertical,
        ///<summary>
        ///Light Horizontal.
        ///<para>When the item is serialized out as xml, its value is "ltHorz".</para>
        ///</summary>
        [EnumString("ltHorz")]
        LightHorizontal,
        ///<summary>
        ///Light Vertical.
        ///<para>When the item is serialized out as xml, its value is "ltVert".</para>
        ///</summary>
        [EnumString("ltVert")]
        LightVertical,
        ///<summary>
        ///Dark Horizontal.
        ///<para>When the item is serialized out as xml, its value is "dkHorz".</para>
        ///</summary>
        [EnumString("dkHorz")]
        DarkHorizontal,
        ///<summary>
        ///Dark Vertical.
        ///<para>When the item is serialized out as xml, its value is "dkVert".</para>
        ///</summary>
        [EnumString("dkVert")]
        DarkVertical,
        ///<summary>
        ///Narrow Horizontal.
        ///<para>When the item is serialized out as xml, its value is "narHorz".</para>
        ///</summary>
        [EnumString("narHorz")]
        NarrowHorizontal,
        ///<summary>
        ///Narrow Vertical.
        ///<para>When the item is serialized out as xml, its value is "narVert".</para>
        ///</summary>
        [EnumString("narVert")]
        NarrowVertical,
        ///<summary>
        ///Dashed Horizontal.
        ///<para>When the item is serialized out as xml, its value is "dashHorz".</para>
        ///</summary>
        [EnumString("dashHorz")]
        DashedHorizontal,
        ///<summary>
        ///Dashed Vertical.
        ///<para>When the item is serialized out as xml, its value is "dashVert".</para>
        ///</summary>
        [EnumString("dashVert")]
        DashedVertical,
        ///<summary>
        ///Cross.
        ///<para>When the item is serialized out as xml, its value is "cross".</para>
        ///</summary>
        [EnumString("cross")]
        Cross,
        ///<summary>
        ///Downward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "dnDiag".</para>
        ///</summary>
        [EnumString("dnDiag")]
        DownwardDiagonal,
        ///<summary>
        ///Upward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "upDiag".</para>
        ///</summary>
        [EnumString("upDiag")]
        UpwardDiagonal,
        ///<summary>
        ///Light Downward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "ltDnDiag".</para>
        ///</summary>
        [EnumString("ltDnDiag")]
        LightDownwardDiagonal,
        ///<summary>
        ///Light Upward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "ltUpDiag".</para>
        ///</summary>
        [EnumString("ltUpDiag")]
        LightUpwardDiagonal,
        ///<summary>
        ///Dark Downward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "dkDnDiag".</para>
        ///</summary>
        [EnumString("dkDnDiag")]
        DarkDownwardDiagonal,
        ///<summary>
        ///Dark Upward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "dkUpDiag".</para>
        ///</summary>
        [EnumString("dkUpDiag")]
        DarkUpwardDiagonal,
        ///<summary>
        ///Wide Downward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "wdDnDiag".</para>
        ///</summary>
        [EnumString("wdDnDiag")]
        WideDownwardDiagonal,
        ///<summary>
        ///Wide Upward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "wdUpDiag".</para>
        ///</summary>
        [EnumString("wdUpDiag")]
        WideUpwardDiagonal,
        ///<summary>
        ///Dashed Downward Diagonal.
        ///<para>When the item is serialized out as xml, its value is "dashDnDiag".</para>
        ///</summary>
        [EnumString("dashDnDiag")]
        DashedDownwardDiagonal,
        ///<summary>
        ///Dashed Upward DIagonal.
        ///<para>When the item is serialized out as xml, its value is "dashUpDiag".</para>
        ///</summary>
        [EnumString("dashUpDiag")]
        DashedUpwardDiagonal,
        ///<summary>
        ///Diagonal Cross.
        ///<para>When the item is serialized out as xml, its value is "diagCross".</para>
        ///</summary>
        [EnumString("diagCross")]
        DiagonalCross,
        ///<summary>
        ///Small Checker Board.
        ///<para>When the item is serialized out as xml, its value is "smCheck".</para>
        ///</summary>
        [EnumString("smCheck")]
        SmallCheck,
        ///<summary>
        ///Large Checker Board.
        ///<para>When the item is serialized out as xml, its value is "lgCheck".</para>
        ///</summary>
        [EnumString("lgCheck")]
        LargeCheck,
        ///<summary>
        ///Small Grid.
        ///<para>When the item is serialized out as xml, its value is "smGrid".</para>
        ///</summary>
        [EnumString("smGrid")]
        SmallGrid,
        ///<summary>
        ///Large Grid.
        ///<para>When the item is serialized out as xml, its value is "lgGrid".</para>
        ///</summary>
        [EnumString("lgGrid")]
        LargeGrid,
        ///<summary>
        ///Dotted Grid.
        ///<para>When the item is serialized out as xml, its value is "dotGrid".</para>
        ///</summary>
        [EnumString("dotGrid")]
        DotGrid,
        ///<summary>
        ///Small Confetti.
        ///<para>When the item is serialized out as xml, its value is "smConfetti".</para>
        ///</summary>
        [EnumString("smConfetti")]
        SmallConfetti,
        ///<summary>
        ///Large Confetti.
        ///<para>When the item is serialized out as xml, its value is "lgConfetti".</para>
        ///</summary>
        [EnumString("lgConfetti")]
        LargeConfetti,
        ///<summary>
        ///Horizontal Brick.
        ///<para>When the item is serialized out as xml, its value is "horzBrick".</para>
        ///</summary>
        [EnumString("horzBrick")]
        HorizontalBrick,
        ///<summary>
        ///Diagonal Brick.
        ///<para>When the item is serialized out as xml, its value is "diagBrick".</para>
        ///</summary>
        [EnumString("diagBrick")]
        DiagonalBrick,
        ///<summary>
        ///Solid Diamond.
        ///<para>When the item is serialized out as xml, its value is "solidDmnd".</para>
        ///</summary>
        [EnumString("solidDmnd")]
        SolidDiamond,
        ///<summary>
        ///Open Diamond.
        ///<para>When the item is serialized out as xml, its value is "openDmnd".</para>
        ///</summary>
        [EnumString("openDmnd")]
        OpenDiamond,
        ///<summary>
        ///Dotted Diamond.
        ///<para>When the item is serialized out as xml, its value is "dotDmnd".</para>
        ///</summary>
        [EnumString("dotDmnd")]
        DottedDiamond,
        ///<summary>
        ///Plaid.
        ///<para>When the item is serialized out as xml, its value is "plaid".</para>
        ///</summary>
        [EnumString("plaid")]
        Plaid,
        ///<summary>
        ///Sphere.
        ///<para>When the item is serialized out as xml, its value is "sphere".</para>
        ///</summary>
        [EnumString("sphere")]
        Sphere,
        ///<summary>
        ///Weave.
        ///<para>When the item is serialized out as xml, its value is "weave".</para>
        ///</summary>
        [EnumString("weave")]
        Weave,
        ///<summary>
        ///Divot.
        ///<para>When the item is serialized out as xml, its value is "divot".</para>
        ///</summary>
        [EnumString("divot")]
        Divot,
        ///<summary>
        ///Shingle.
        ///<para>When the item is serialized out as xml, its value is "shingle".</para>
        ///</summary>
        [EnumString("shingle")]
        Shingle,
        ///<summary>
        ///Wave.
        ///<para>When the item is serialized out as xml, its value is "wave".</para>
        ///</summary>
        [EnumString("wave")]
        Wave,
        ///<summary>
        ///Trellis.
        ///<para>When the item is serialized out as xml, its value is "trellis".</para>
        ///</summary>
        [EnumString("trellis")]
        Trellis,
        ///<summary>
        ///Zig Zag.
        ///<para>When the item is serialized out as xml, its value is "zigZag".</para>
        ///</summary>
        [EnumString("zigZag")]
        ZigZag,
    }

    /// <summary>
    /// Blend Mode
    /// </summary>
    public enum BlendModeValues
    {
        ///<summary>
        ///Overlay.
        ///<para>When the item is serialized out as xml, its value is "over".</para>
        ///</summary>
        [EnumString("over")]
        Overlay,
        ///<summary>
        ///Multiply.
        ///<para>When the item is serialized out as xml, its value is "mult".</para>
        ///</summary>
        [EnumString("mult")]
        Multiply,
        ///<summary>
        ///Screen.
        ///<para>When the item is serialized out as xml, its value is "screen".</para>
        ///</summary>
        [EnumString("screen")]
        Screen,
        ///<summary>
        ///Darken.
        ///<para>When the item is serialized out as xml, its value is "darken".</para>
        ///</summary>
        [EnumString("darken")]
        Darken,
        ///<summary>
        ///Lighten.
        ///<para>When the item is serialized out as xml, its value is "lighten".</para>
        ///</summary>
        [EnumString("lighten")]
        Lighten,
    }

    /// <summary>
    /// Effect Container Type
    /// </summary>
    public enum EffectContainerValues
    {
        ///<summary>
        ///Sibling.
        ///<para>When the item is serialized out as xml, its value is "sib".</para>
        ///</summary>
        [EnumString("sib")]
        Sibling,
        ///<summary>
        ///Tree.
        ///<para>When the item is serialized out as xml, its value is "tree".</para>
        ///</summary>
        [EnumString("tree")]
        Tree,
    }

    /// <summary>
    /// Preset Shape Types
    /// </summary>
    public enum ShapeTypeValues
    {
        ///<summary>
        ///Line Shape.
        ///<para>When the item is serialized out as xml, its value is "line".</para>
        ///</summary>
        [EnumString("line")]
        Line,
        ///<summary>
        ///Line Inverse Shape.
        ///<para>When the item is serialized out as xml, its value is "lineInv".</para>
        ///</summary>
        [EnumString("lineInv")]
        LineInverse,
        ///<summary>
        ///Triangle Shape.
        ///<para>When the item is serialized out as xml, its value is "triangle".</para>
        ///</summary>
        [EnumString("triangle")]
        Triangle,
        ///<summary>
        ///Right Triangle Shape.
        ///<para>When the item is serialized out as xml, its value is "rtTriangle".</para>
        ///</summary>
        [EnumString("rtTriangle")]
        RightTriangle,
        ///<summary>
        ///Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "rect".</para>
        ///</summary>
        [EnumString("rect")]
        Rectangle,
        ///<summary>
        ///Diamond Shape.
        ///<para>When the item is serialized out as xml, its value is "diamond".</para>
        ///</summary>
        [EnumString("diamond")]
        Diamond,
        ///<summary>
        ///Parallelogram Shape.
        ///<para>When the item is serialized out as xml, its value is "parallelogram".</para>
        ///</summary>
        [EnumString("parallelogram")]
        Parallelogram,
        ///<summary>
        ///Trapezoid Shape.
        ///<para>When the item is serialized out as xml, its value is "trapezoid".</para>
        ///</summary>
        [EnumString("trapezoid")]
        Trapezoid,
        ///<summary>
        ///Non-Isosceles Trapezoid Shape.
        ///<para>When the item is serialized out as xml, its value is "nonIsoscelesTrapezoid".</para>
        ///</summary>
        [EnumString("nonIsoscelesTrapezoid")]
        NonIsoscelesTrapezoid,
        ///<summary>
        ///Pentagon Shape.
        ///<para>When the item is serialized out as xml, its value is "pentagon".</para>
        ///</summary>
        [EnumString("pentagon")]
        Pentagon,
        ///<summary>
        ///Hexagon Shape.
        ///<para>When the item is serialized out as xml, its value is "hexagon".</para>
        ///</summary>
        [EnumString("hexagon")]
        Hexagon,
        ///<summary>
        ///Heptagon Shape.
        ///<para>When the item is serialized out as xml, its value is "heptagon".</para>
        ///</summary>
        [EnumString("heptagon")]
        Heptagon,
        ///<summary>
        ///Octagon Shape.
        ///<para>When the item is serialized out as xml, its value is "octagon".</para>
        ///</summary>
        [EnumString("octagon")]
        Octagon,
        ///<summary>
        ///Decagon Shape.
        ///<para>When the item is serialized out as xml, its value is "decagon".</para>
        ///</summary>
        [EnumString("decagon")]
        Decagon,
        ///<summary>
        ///Dodecagon Shape.
        ///<para>When the item is serialized out as xml, its value is "dodecagon".</para>
        ///</summary>
        [EnumString("dodecagon")]
        Dodecagon,
        ///<summary>
        ///Four Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star4".</para>
        ///</summary>
        [EnumString("star4")]
        Star4,
        ///<summary>
        ///Five Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star5".</para>
        ///</summary>
        [EnumString("star5")]
        Star5,
        ///<summary>
        ///Six Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star6".</para>
        ///</summary>
        [EnumString("star6")]
        Star6,
        ///<summary>
        ///Seven Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star7".</para>
        ///</summary>
        [EnumString("star7")]
        Star7,
        ///<summary>
        ///Eight Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star8".</para>
        ///</summary>
        [EnumString("star8")]
        Star8,
        ///<summary>
        ///Ten Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star10".</para>
        ///</summary>
        [EnumString("star10")]
        Star10,
        ///<summary>
        ///Twelve Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star12".</para>
        ///</summary>
        [EnumString("star12")]
        Star12,
        ///<summary>
        ///Sixteen Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star16".</para>
        ///</summary>
        [EnumString("star16")]
        Star16,
        ///<summary>
        ///Twenty Four Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star24".</para>
        ///</summary>
        [EnumString("star24")]
        Star24,
        ///<summary>
        ///Thirty Two Pointed Star Shape.
        ///<para>When the item is serialized out as xml, its value is "star32".</para>
        ///</summary>
        [EnumString("star32")]
        Star32,
        ///<summary>
        ///Round Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "roundRect".</para>
        ///</summary>
        [EnumString("roundRect")]
        RoundRectangle,
        ///<summary>
        ///One Round Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "round1Rect".</para>
        ///</summary>
        [EnumString("round1Rect")]
        Round1Rectangle,
        ///<summary>
        ///Two Same-side Round Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "round2SameRect".</para>
        ///</summary>
        [EnumString("round2SameRect")]
        Round2SameRectangle,
        ///<summary>
        ///Two Diagonal Round Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "round2DiagRect".</para>
        ///</summary>
        [EnumString("round2DiagRect")]
        Round2DiagonalRectangle,
        ///<summary>
        ///One Snip One Round Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "snipRoundRect".</para>
        ///</summary>
        [EnumString("snipRoundRect")]
        SnipRoundRectangle,
        ///<summary>
        ///One Snip Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "snip1Rect".</para>
        ///</summary>
        [EnumString("snip1Rect")]
        Snip1Rectangle,
        ///<summary>
        ///Two Same-side Snip Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "snip2SameRect".</para>
        ///</summary>
        [EnumString("snip2SameRect")]
        Snip2SameRectangle,
        ///<summary>
        ///Two Diagonal Snip Corner Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "snip2DiagRect".</para>
        ///</summary>
        [EnumString("snip2DiagRect")]
        Snip2DiagonalRectangle,
        ///<summary>
        ///Plaque Shape.
        ///<para>When the item is serialized out as xml, its value is "plaque".</para>
        ///</summary>
        [EnumString("plaque")]
        Plaque,
        ///<summary>
        ///Ellipse Shape.
        ///<para>When the item is serialized out as xml, its value is "ellipse".</para>
        ///</summary>
        [EnumString("ellipse")]
        Ellipse,
        ///<summary>
        ///Teardrop Shape.
        ///<para>When the item is serialized out as xml, its value is "teardrop".</para>
        ///</summary>
        [EnumString("teardrop")]
        Teardrop,
        ///<summary>
        ///Home Plate Shape.
        ///<para>When the item is serialized out as xml, its value is "homePlate".</para>
        ///</summary>
        [EnumString("homePlate")]
        HomePlate,
        ///<summary>
        ///Chevron Shape.
        ///<para>When the item is serialized out as xml, its value is "chevron".</para>
        ///</summary>
        [EnumString("chevron")]
        Chevron,
        ///<summary>
        ///Pie Wedge Shape.
        ///<para>When the item is serialized out as xml, its value is "pieWedge".</para>
        ///</summary>
        [EnumString("pieWedge")]
        PieWedge,
        ///<summary>
        ///Pie Shape.
        ///<para>When the item is serialized out as xml, its value is "pie".</para>
        ///</summary>
        [EnumString("pie")]
        Pie,
        ///<summary>
        ///Block Arc Shape.
        ///<para>When the item is serialized out as xml, its value is "blockArc".</para>
        ///</summary>
        [EnumString("blockArc")]
        BlockArc,
        ///<summary>
        ///Donut Shape.
        ///<para>When the item is serialized out as xml, its value is "donut".</para>
        ///</summary>
        [EnumString("donut")]
        Donut,
        ///<summary>
        ///No Smoking Shape.
        ///<para>When the item is serialized out as xml, its value is "noSmoking".</para>
        ///</summary>
        [EnumString("noSmoking")]
        NoSmoking,
        ///<summary>
        ///Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "rightArrow".</para>
        ///</summary>
        [EnumString("rightArrow")]
        RightArrow,
        ///<summary>
        ///Left Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftArrow".</para>
        ///</summary>
        [EnumString("leftArrow")]
        LeftArrow,
        ///<summary>
        ///Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "upArrow".</para>
        ///</summary>
        [EnumString("upArrow")]
        UpArrow,
        ///<summary>
        ///Down Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "downArrow".</para>
        ///</summary>
        [EnumString("downArrow")]
        DownArrow,
        ///<summary>
        ///Striped Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "stripedRightArrow".</para>
        ///</summary>
        [EnumString("stripedRightArrow")]
        StripedRightArrow,
        ///<summary>
        ///Notched Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "notchedRightArrow".</para>
        ///</summary>
        [EnumString("notchedRightArrow")]
        NotchedRightArrow,
        ///<summary>
        ///Bent Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "bentUpArrow".</para>
        ///</summary>
        [EnumString("bentUpArrow")]
        BentUpArrow,
        ///<summary>
        ///Left Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftRightArrow".</para>
        ///</summary>
        [EnumString("leftRightArrow")]
        LeftRightArrow,
        ///<summary>
        ///Up Down Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "upDownArrow".</para>
        ///</summary>
        [EnumString("upDownArrow")]
        UpDownArrow,
        ///<summary>
        ///Left Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftUpArrow".</para>
        ///</summary>
        [EnumString("leftUpArrow")]
        LeftUpArrow,
        ///<summary>
        ///Left Right Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftRightUpArrow".</para>
        ///</summary>
        [EnumString("leftRightUpArrow")]
        LeftRightUpArrow,
        ///<summary>
        ///Quad-Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "quadArrow".</para>
        ///</summary>
        [EnumString("quadArrow")]
        QuadArrow,
        ///<summary>
        ///Callout Left Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftArrowCallout".</para>
        ///</summary>
        [EnumString("leftArrowCallout")]
        LeftArrowCallout,
        ///<summary>
        ///Callout Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "rightArrowCallout".</para>
        ///</summary>
        [EnumString("rightArrowCallout")]
        RightArrowCallout,
        ///<summary>
        ///Callout Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "upArrowCallout".</para>
        ///</summary>
        [EnumString("upArrowCallout")]
        UpArrowCallout,
        ///<summary>
        ///Callout Down Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "downArrowCallout".</para>
        ///</summary>
        [EnumString("downArrowCallout")]
        DownArrowCallout,
        ///<summary>
        ///Callout Left Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftRightArrowCallout".</para>
        ///</summary>
        [EnumString("leftRightArrowCallout")]
        LeftRightArrowCallout,
        ///<summary>
        ///Callout Up Down Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "upDownArrowCallout".</para>
        ///</summary>
        [EnumString("upDownArrowCallout")]
        UpDownArrowCallout,
        ///<summary>
        ///Callout Quad-Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "quadArrowCallout".</para>
        ///</summary>
        [EnumString("quadArrowCallout")]
        QuadArrowCallout,
        ///<summary>
        ///Bent Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "bentArrow".</para>
        ///</summary>
        [EnumString("bentArrow")]
        BentArrow,
        ///<summary>
        ///U-Turn Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "uturnArrow".</para>
        ///</summary>
        [EnumString("uturnArrow")]
        UTurnArrow,
        ///<summary>
        ///Circular Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "circularArrow".</para>
        ///</summary>
        [EnumString("circularArrow")]
        CircularArrow,
        ///<summary>
        ///Left Circular Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftCircularArrow".</para>
        ///</summary>
        [EnumString("leftCircularArrow")]
        LeftCircularArrow,
        ///<summary>
        ///Left Right Circular Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "leftRightCircularArrow".</para>
        ///</summary>
        [EnumString("leftRightCircularArrow")]
        LeftRightCircularArrow,
        ///<summary>
        ///Curved Right Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedRightArrow".</para>
        ///</summary>
        [EnumString("curvedRightArrow")]
        CurvedRightArrow,
        ///<summary>
        ///Curved Left Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedLeftArrow".</para>
        ///</summary>
        [EnumString("curvedLeftArrow")]
        CurvedLeftArrow,
        ///<summary>
        ///Curved Up Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedUpArrow".</para>
        ///</summary>
        [EnumString("curvedUpArrow")]
        CurvedUpArrow,
        ///<summary>
        ///Curved Down Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedDownArrow".</para>
        ///</summary>
        [EnumString("curvedDownArrow")]
        CurvedDownArrow,
        ///<summary>
        ///Swoosh Arrow Shape.
        ///<para>When the item is serialized out as xml, its value is "swooshArrow".</para>
        ///</summary>
        [EnumString("swooshArrow")]
        SwooshArrow,
        ///<summary>
        ///Cube Shape.
        ///<para>When the item is serialized out as xml, its value is "cube".</para>
        ///</summary>
        [EnumString("cube")]
        Cube,
        ///<summary>
        ///Can Shape.
        ///<para>When the item is serialized out as xml, its value is "can".</para>
        ///</summary>
        [EnumString("can")]
        Can,
        ///<summary>
        ///Lightning Bolt Shape.
        ///<para>When the item is serialized out as xml, its value is "lightningBolt".</para>
        ///</summary>
        [EnumString("lightningBolt")]
        LightningBolt,
        ///<summary>
        ///Heart Shape.
        ///<para>When the item is serialized out as xml, its value is "heart".</para>
        ///</summary>
        [EnumString("heart")]
        Heart,
        ///<summary>
        ///Sun Shape.
        ///<para>When the item is serialized out as xml, its value is "sun".</para>
        ///</summary>
        [EnumString("sun")]
        Sun,
        ///<summary>
        ///Moon Shape.
        ///<para>When the item is serialized out as xml, its value is "moon".</para>
        ///</summary>
        [EnumString("moon")]
        Moon,
        ///<summary>
        ///Smiley Face Shape.
        ///<para>When the item is serialized out as xml, its value is "smileyFace".</para>
        ///</summary>
        [EnumString("smileyFace")]
        SmileyFace,
        ///<summary>
        ///Irregular Seal 1 Shape.
        ///<para>When the item is serialized out as xml, its value is "irregularSeal1".</para>
        ///</summary>
        [EnumString("irregularSeal1")]
        IrregularSeal1,
        ///<summary>
        ///Irregular Seal 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "irregularSeal2".</para>
        ///</summary>
        [EnumString("irregularSeal2")]
        IrregularSeal2,
        ///<summary>
        ///Folded Corner Shape.
        ///<para>When the item is serialized out as xml, its value is "foldedCorner".</para>
        ///</summary>
        [EnumString("foldedCorner")]
        FoldedCorner,
        ///<summary>
        ///Bevel Shape.
        ///<para>When the item is serialized out as xml, its value is "bevel".</para>
        ///</summary>
        [EnumString("bevel")]
        Bevel,
        ///<summary>
        ///Frame Shape.
        ///<para>When the item is serialized out as xml, its value is "frame".</para>
        ///</summary>
        [EnumString("frame")]
        Frame,
        ///<summary>
        ///Half Frame Shape.
        ///<para>When the item is serialized out as xml, its value is "halfFrame".</para>
        ///</summary>
        [EnumString("halfFrame")]
        HalfFrame,
        ///<summary>
        ///Corner Shape.
        ///<para>When the item is serialized out as xml, its value is "corner".</para>
        ///</summary>
        [EnumString("corner")]
        Corner,
        ///<summary>
        ///Diagonal Stripe Shape.
        ///<para>When the item is serialized out as xml, its value is "diagStripe".</para>
        ///</summary>
        [EnumString("diagStripe")]
        DiagonalStripe,
        ///<summary>
        ///Chord Shape.
        ///<para>When the item is serialized out as xml, its value is "chord".</para>
        ///</summary>
        [EnumString("chord")]
        Chord,
        ///<summary>
        ///Curved Arc Shape.
        ///<para>When the item is serialized out as xml, its value is "arc".</para>
        ///</summary>
        [EnumString("arc")]
        Arc,
        ///<summary>
        ///Left Bracket Shape.
        ///<para>When the item is serialized out as xml, its value is "leftBracket".</para>
        ///</summary>
        [EnumString("leftBracket")]
        LeftBracket,
        ///<summary>
        ///Right Bracket Shape.
        ///<para>When the item is serialized out as xml, its value is "rightBracket".</para>
        ///</summary>
        [EnumString("rightBracket")]
        RightBracket,
        ///<summary>
        ///Left Brace Shape.
        ///<para>When the item is serialized out as xml, its value is "leftBrace".</para>
        ///</summary>
        [EnumString("leftBrace")]
        LeftBrace,
        ///<summary>
        ///Right Brace Shape.
        ///<para>When the item is serialized out as xml, its value is "rightBrace".</para>
        ///</summary>
        [EnumString("rightBrace")]
        RightBrace,
        ///<summary>
        ///Bracket Pair Shape.
        ///<para>When the item is serialized out as xml, its value is "bracketPair".</para>
        ///</summary>
        [EnumString("bracketPair")]
        BracketPair,
        ///<summary>
        ///Brace Pair Shape.
        ///<para>When the item is serialized out as xml, its value is "bracePair".</para>
        ///</summary>
        [EnumString("bracePair")]
        BracePair,
        ///<summary>
        ///Straight Connector 1 Shape.
        ///<para>When the item is serialized out as xml, its value is "straightConnector1".</para>
        ///</summary>
        [EnumString("straightConnector1")]
        StraightConnector1,
        ///<summary>
        ///Bent Connector 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "bentConnector2".</para>
        ///</summary>
        [EnumString("bentConnector2")]
        BentConnector2,
        ///<summary>
        ///Bent Connector 3 Shape.
        ///<para>When the item is serialized out as xml, its value is "bentConnector3".</para>
        ///</summary>
        [EnumString("bentConnector3")]
        BentConnector3,
        ///<summary>
        ///Bent Connector 4 Shape.
        ///<para>When the item is serialized out as xml, its value is "bentConnector4".</para>
        ///</summary>
        [EnumString("bentConnector4")]
        BentConnector4,
        ///<summary>
        ///Bent Connector 5 Shape.
        ///<para>When the item is serialized out as xml, its value is "bentConnector5".</para>
        ///</summary>
        [EnumString("bentConnector5")]
        BentConnector5,
        ///<summary>
        ///Curved Connector 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedConnector2".</para>
        ///</summary>
        [EnumString("curvedConnector2")]
        CurvedConnector2,
        ///<summary>
        ///Curved Connector 3 Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedConnector3".</para>
        ///</summary>
        [EnumString("curvedConnector3")]
        CurvedConnector3,
        ///<summary>
        ///Curved Connector 4 Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedConnector4".</para>
        ///</summary>
        [EnumString("curvedConnector4")]
        CurvedConnector4,
        ///<summary>
        ///Curved Connector 5 Shape.
        ///<para>When the item is serialized out as xml, its value is "curvedConnector5".</para>
        ///</summary>
        [EnumString("curvedConnector5")]
        CurvedConnector5,
        ///<summary>
        ///Callout 1 Shape.
        ///<para>When the item is serialized out as xml, its value is "callout1".</para>
        ///</summary>
        [EnumString("callout1")]
        Callout1,
        ///<summary>
        ///Callout 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "callout2".</para>
        ///</summary>
        [EnumString("callout2")]
        Callout2,
        ///<summary>
        ///Callout 3 Shape.
        ///<para>When the item is serialized out as xml, its value is "callout3".</para>
        ///</summary>
        [EnumString("callout3")]
        Callout3,
        ///<summary>
        ///Callout 1 Shape.
        ///<para>When the item is serialized out as xml, its value is "accentCallout1".</para>
        ///</summary>
        [EnumString("accentCallout1")]
        AccentCallout1,
        ///<summary>
        ///Callout 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "accentCallout2".</para>
        ///</summary>
        [EnumString("accentCallout2")]
        AccentCallout2,
        ///<summary>
        ///Callout 3 Shape.
        ///<para>When the item is serialized out as xml, its value is "accentCallout3".</para>
        ///</summary>
        [EnumString("accentCallout3")]
        AccentCallout3,
        ///<summary>
        ///Callout 1 with Border Shape.
        ///<para>When the item is serialized out as xml, its value is "borderCallout1".</para>
        ///</summary>
        [EnumString("borderCallout1")]
        BorderCallout1,
        ///<summary>
        ///Callout 2 with Border Shape.
        ///<para>When the item is serialized out as xml, its value is "borderCallout2".</para>
        ///</summary>
        [EnumString("borderCallout2")]
        BorderCallout2,
        ///<summary>
        ///Callout 3 with Border Shape.
        ///<para>When the item is serialized out as xml, its value is "borderCallout3".</para>
        ///</summary>
        [EnumString("borderCallout3")]
        BorderCallout3,
        ///<summary>
        ///Callout 1 with Border and Accent Shape.
        ///<para>When the item is serialized out as xml, its value is "accentBorderCallout1".</para>
        ///</summary>
        [EnumString("accentBorderCallout1")]
        AccentBorderCallout1,
        ///<summary>
        ///Callout 2 with Border and Accent Shape.
        ///<para>When the item is serialized out as xml, its value is "accentBorderCallout2".</para>
        ///</summary>
        [EnumString("accentBorderCallout2")]
        AccentBorderCallout2,
        ///<summary>
        ///Callout 3 with Border and Accent Shape.
        ///<para>When the item is serialized out as xml, its value is "accentBorderCallout3".</para>
        ///</summary>
        [EnumString("accentBorderCallout3")]
        AccentBorderCallout3,
        ///<summary>
        ///Callout Wedge Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "wedgeRectCallout".</para>
        ///</summary>
        [EnumString("wedgeRectCallout")]
        WedgeRectangleCallout,
        ///<summary>
        ///Callout Wedge Round Rectangle Shape.
        ///<para>When the item is serialized out as xml, its value is "wedgeRoundRectCallout".</para>
        ///</summary>
        [EnumString("wedgeRoundRectCallout")]
        WedgeRoundRectangleCallout,
        ///<summary>
        ///Callout Wedge Ellipse Shape.
        ///<para>When the item is serialized out as xml, its value is "wedgeEllipseCallout".</para>
        ///</summary>
        [EnumString("wedgeEllipseCallout")]
        WedgeEllipseCallout,
        ///<summary>
        ///Callout Cloud Shape.
        ///<para>When the item is serialized out as xml, its value is "cloudCallout".</para>
        ///</summary>
        [EnumString("cloudCallout")]
        CloudCallout,
        ///<summary>
        ///Cloud Shape.
        ///<para>When the item is serialized out as xml, its value is "cloud".</para>
        ///</summary>
        [EnumString("cloud")]
        Cloud,
        ///<summary>
        ///Ribbon Shape.
        ///<para>When the item is serialized out as xml, its value is "ribbon".</para>
        ///</summary>
        [EnumString("ribbon")]
        Ribbon,
        ///<summary>
        ///Ribbon 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "ribbon2".</para>
        ///</summary>
        [EnumString("ribbon2")]
        Ribbon2,
        ///<summary>
        ///Ellipse Ribbon Shape.
        ///<para>When the item is serialized out as xml, its value is "ellipseRibbon".</para>
        ///</summary>
        [EnumString("ellipseRibbon")]
        EllipseRibbon,
        ///<summary>
        ///Ellipse Ribbon 2 Shape.
        ///<para>When the item is serialized out as xml, its value is "ellipseRibbon2".</para>
        ///</summary>
        [EnumString("ellipseRibbon2")]
        EllipseRibbon2,
        ///<summary>
        ///Left Right Ribbon Shape.
        ///<para>When the item is serialized out as xml, its value is "leftRightRibbon".</para>
        ///</summary>
        [EnumString("leftRightRibbon")]
        LeftRightRibbon,
        ///<summary>
        ///Vertical Scroll Shape.
        ///<para>When the item is serialized out as xml, its value is "verticalScroll".</para>
        ///</summary>
        [EnumString("verticalScroll")]
        VerticalScroll,
        ///<summary>
        ///Horizontal Scroll Shape.
        ///<para>When the item is serialized out as xml, its value is "horizontalScroll".</para>
        ///</summary>
        [EnumString("horizontalScroll")]
        HorizontalScroll,
        ///<summary>
        ///Wave Shape.
        ///<para>When the item is serialized out as xml, its value is "wave".</para>
        ///</summary>
        [EnumString("wave")]
        Wave,
        ///<summary>
        ///Double Wave Shape.
        ///<para>When the item is serialized out as xml, its value is "doubleWave".</para>
        ///</summary>
        [EnumString("doubleWave")]
        DoubleWave,
        ///<summary>
        ///Plus Shape.
        ///<para>When the item is serialized out as xml, its value is "plus".</para>
        ///</summary>
        [EnumString("plus")]
        Plus,
        ///<summary>
        ///Process Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartProcess".</para>
        ///</summary>
        [EnumString("flowChartProcess")]
        FlowChartProcess,
        ///<summary>
        ///Decision Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartDecision".</para>
        ///</summary>
        [EnumString("flowChartDecision")]
        FlowChartDecision,
        ///<summary>
        ///Input Output Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartInputOutput".</para>
        ///</summary>
        [EnumString("flowChartInputOutput")]
        FlowChartInputOutput,
        ///<summary>
        ///Predefined Process Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartPredefinedProcess".</para>
        ///</summary>
        [EnumString("flowChartPredefinedProcess")]
        FlowChartPredefinedProcess,
        ///<summary>
        ///Internal Storage Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartInternalStorage".</para>
        ///</summary>
        [EnumString("flowChartInternalStorage")]
        FlowChartInternalStorage,
        ///<summary>
        ///Document Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartDocument".</para>
        ///</summary>
        [EnumString("flowChartDocument")]
        FlowChartDocument,
        ///<summary>
        ///Multi-Document Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartMultidocument".</para>
        ///</summary>
        [EnumString("flowChartMultidocument")]
        FlowChartMultidocument,
        ///<summary>
        ///Terminator Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartTerminator".</para>
        ///</summary>
        [EnumString("flowChartTerminator")]
        FlowChartTerminator,
        ///<summary>
        ///Preparation Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartPreparation".</para>
        ///</summary>
        [EnumString("flowChartPreparation")]
        FlowChartPreparation,
        ///<summary>
        ///Manual Input Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartManualInput".</para>
        ///</summary>
        [EnumString("flowChartManualInput")]
        FlowChartManualInput,
        ///<summary>
        ///Manual Operation Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartManualOperation".</para>
        ///</summary>
        [EnumString("flowChartManualOperation")]
        FlowChartManualOperation,
        ///<summary>
        ///Connector Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartConnector".</para>
        ///</summary>
        [EnumString("flowChartConnector")]
        FlowChartConnector,
        ///<summary>
        ///Punched Card Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartPunchedCard".</para>
        ///</summary>
        [EnumString("flowChartPunchedCard")]
        FlowChartPunchedCard,
        ///<summary>
        ///Punched Tape Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartPunchedTape".</para>
        ///</summary>
        [EnumString("flowChartPunchedTape")]
        FlowChartPunchedTape,
        ///<summary>
        ///Summing Junction Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartSummingJunction".</para>
        ///</summary>
        [EnumString("flowChartSummingJunction")]
        FlowChartSummingJunction,
        ///<summary>
        ///Or Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartOr".</para>
        ///</summary>
        [EnumString("flowChartOr")]
        FlowChartOr,
        ///<summary>
        ///Collate Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartCollate".</para>
        ///</summary>
        [EnumString("flowChartCollate")]
        FlowChartCollate,
        ///<summary>
        ///Sort Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartSort".</para>
        ///</summary>
        [EnumString("flowChartSort")]
        FlowChartSort,
        ///<summary>
        ///Extract Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartExtract".</para>
        ///</summary>
        [EnumString("flowChartExtract")]
        FlowChartExtract,
        ///<summary>
        ///Merge Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartMerge".</para>
        ///</summary>
        [EnumString("flowChartMerge")]
        FlowChartMerge,
        ///<summary>
        ///Offline Storage Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartOfflineStorage".</para>
        ///</summary>
        [EnumString("flowChartOfflineStorage")]
        FlowChartOfflineStorage,
        ///<summary>
        ///Online Storage Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartOnlineStorage".</para>
        ///</summary>
        [EnumString("flowChartOnlineStorage")]
        FlowChartOnlineStorage,
        ///<summary>
        ///Magnetic Tape Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartMagneticTape".</para>
        ///</summary>
        [EnumString("flowChartMagneticTape")]
        FlowChartMagneticTape,
        ///<summary>
        ///Magnetic Disk Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartMagneticDisk".</para>
        ///</summary>
        [EnumString("flowChartMagneticDisk")]
        FlowChartMagneticDisk,
        ///<summary>
        ///Magnetic Drum Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartMagneticDrum".</para>
        ///</summary>
        [EnumString("flowChartMagneticDrum")]
        FlowChartMagneticDrum,
        ///<summary>
        ///Display Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartDisplay".</para>
        ///</summary>
        [EnumString("flowChartDisplay")]
        FlowChartDisplay,
        ///<summary>
        ///Delay Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartDelay".</para>
        ///</summary>
        [EnumString("flowChartDelay")]
        FlowChartDelay,
        ///<summary>
        ///Alternate Process Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartAlternateProcess".</para>
        ///</summary>
        [EnumString("flowChartAlternateProcess")]
        FlowChartAlternateProcess,
        ///<summary>
        ///Off-Page Connector Flow Shape.
        ///<para>When the item is serialized out as xml, its value is "flowChartOffpageConnector".</para>
        ///</summary>
        [EnumString("flowChartOffpageConnector")]
        FlowChartOffpageConnector,
        ///<summary>
        ///Blank Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonBlank".</para>
        ///</summary>
        [EnumString("actionButtonBlank")]
        ActionButtonBlank,
        ///<summary>
        ///Home Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonHome".</para>
        ///</summary>
        [EnumString("actionButtonHome")]
        ActionButtonHome,
        ///<summary>
        ///Help Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonHelp".</para>
        ///</summary>
        [EnumString("actionButtonHelp")]
        ActionButtonHelp,
        ///<summary>
        ///Information Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonInformation".</para>
        ///</summary>
        [EnumString("actionButtonInformation")]
        ActionButtonInformation,
        ///<summary>
        ///Forward or Next Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonForwardNext".</para>
        ///</summary>
        [EnumString("actionButtonForwardNext")]
        ActionButtonForwardNext,
        ///<summary>
        ///Back or Previous Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonBackPrevious".</para>
        ///</summary>
        [EnumString("actionButtonBackPrevious")]
        ActionButtonBackPrevious,
        ///<summary>
        ///End Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonEnd".</para>
        ///</summary>
        [EnumString("actionButtonEnd")]
        ActionButtonEnd,
        ///<summary>
        ///Beginning Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonBeginning".</para>
        ///</summary>
        [EnumString("actionButtonBeginning")]
        ActionButtonBeginning,
        ///<summary>
        ///Return Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonReturn".</para>
        ///</summary>
        [EnumString("actionButtonReturn")]
        ActionButtonReturn,
        ///<summary>
        ///Document Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonDocument".</para>
        ///</summary>
        [EnumString("actionButtonDocument")]
        ActionButtonDocument,
        ///<summary>
        ///Sound Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonSound".</para>
        ///</summary>
        [EnumString("actionButtonSound")]
        ActionButtonSound,
        ///<summary>
        ///Movie Button Shape.
        ///<para>When the item is serialized out as xml, its value is "actionButtonMovie".</para>
        ///</summary>
        [EnumString("actionButtonMovie")]
        ActionButtonMovie,
        ///<summary>
        ///Gear 6 Shape.
        ///<para>When the item is serialized out as xml, its value is "gear6".</para>
        ///</summary>
        [EnumString("gear6")]
        Gear6,
        ///<summary>
        ///Gear 9 Shape.
        ///<para>When the item is serialized out as xml, its value is "gear9".</para>
        ///</summary>
        [EnumString("gear9")]
        Gear9,
        ///<summary>
        ///Funnel Shape.
        ///<para>When the item is serialized out as xml, its value is "funnel".</para>
        ///</summary>
        [EnumString("funnel")]
        Funnel,
        ///<summary>
        ///Plus Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathPlus".</para>
        ///</summary>
        [EnumString("mathPlus")]
        MathPlus,
        ///<summary>
        ///Minus Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathMinus".</para>
        ///</summary>
        [EnumString("mathMinus")]
        MathMinus,
        ///<summary>
        ///Multiply Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathMultiply".</para>
        ///</summary>
        [EnumString("mathMultiply")]
        MathMultiply,
        ///<summary>
        ///Divide Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathDivide".</para>
        ///</summary>
        [EnumString("mathDivide")]
        MathDivide,
        ///<summary>
        ///Equal Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathEqual".</para>
        ///</summary>
        [EnumString("mathEqual")]
        MathEqual,
        ///<summary>
        ///Not Equal Math Shape.
        ///<para>When the item is serialized out as xml, its value is "mathNotEqual".</para>
        ///</summary>
        [EnumString("mathNotEqual")]
        MathNotEqual,
        ///<summary>
        ///Corner Tabs Shape.
        ///<para>When the item is serialized out as xml, its value is "cornerTabs".</para>
        ///</summary>
        [EnumString("cornerTabs")]
        CornerTabs,
        ///<summary>
        ///Square Tabs Shape.
        ///<para>When the item is serialized out as xml, its value is "squareTabs".</para>
        ///</summary>
        [EnumString("squareTabs")]
        SquareTabs,
        ///<summary>
        ///Plaque Tabs Shape.
        ///<para>When the item is serialized out as xml, its value is "plaqueTabs".</para>
        ///</summary>
        [EnumString("plaqueTabs")]
        PlaqueTabs,
        ///<summary>
        ///Chart X Shape.
        ///<para>When the item is serialized out as xml, its value is "chartX".</para>
        ///</summary>
        [EnumString("chartX")]
        ChartX,
        ///<summary>
        ///Chart Star Shape.
        ///<para>When the item is serialized out as xml, its value is "chartStar".</para>
        ///</summary>
        [EnumString("chartStar")]
        ChartStar,
        ///<summary>
        ///Chart Plus Shape.
        ///<para>When the item is serialized out as xml, its value is "chartPlus".</para>
        ///</summary>
        [EnumString("chartPlus")]
        ChartPlus,
    }

    /// <summary>
    /// Preset Text Shape Types
    /// </summary>
    public enum TextShapeValues
    {
        ///<summary>
        ///No Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textNoShape".</para>
        ///</summary>
        [EnumString("textNoShape")]
        TextNoShape,
        ///<summary>
        ///Plain Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textPlain".</para>
        ///</summary>
        [EnumString("textPlain")]
        TextPlain,
        ///<summary>
        ///Stop Sign Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textStop".</para>
        ///</summary>
        [EnumString("textStop")]
        TextStop,
        ///<summary>
        ///Triangle Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textTriangle".</para>
        ///</summary>
        [EnumString("textTriangle")]
        TextTriangle,
        ///<summary>
        ///Inverted Triangle Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textTriangleInverted".</para>
        ///</summary>
        [EnumString("textTriangleInverted")]
        TextTriangleInverted,
        ///<summary>
        ///Chevron Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textChevron".</para>
        ///</summary>
        [EnumString("textChevron")]
        TextChevron,
        ///<summary>
        ///Inverted Chevron Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textChevronInverted".</para>
        ///</summary>
        [EnumString("textChevronInverted")]
        TextChevronInverted,
        ///<summary>
        ///Inside Ring Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textRingInside".</para>
        ///</summary>
        [EnumString("textRingInside")]
        TextRingInside,
        ///<summary>
        ///Outside Ring Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textRingOutside".</para>
        ///</summary>
        [EnumString("textRingOutside")]
        TextRingOutside,
        ///<summary>
        ///Upward Arch Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textArchUp".</para>
        ///</summary>
        [EnumString("textArchUp")]
        TextArchUp,
        ///<summary>
        ///Downward Arch Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textArchDown".</para>
        ///</summary>
        [EnumString("textArchDown")]
        TextArchDown,
        ///<summary>
        ///Circle Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCircle".</para>
        ///</summary>
        [EnumString("textCircle")]
        TextCircle,
        ///<summary>
        ///Button Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textButton".</para>
        ///</summary>
        [EnumString("textButton")]
        TextButton,
        ///<summary>
        ///Upward Pour Arch Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textArchUpPour".</para>
        ///</summary>
        [EnumString("textArchUpPour")]
        TextArchUpPour,
        ///<summary>
        ///Downward Pour Arch Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textArchDownPour".</para>
        ///</summary>
        [EnumString("textArchDownPour")]
        TextArchDownPour,
        ///<summary>
        ///Circle Pour Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCirclePour".</para>
        ///</summary>
        [EnumString("textCirclePour")]
        TextCirclePour,
        ///<summary>
        ///Button Pour Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textButtonPour".</para>
        ///</summary>
        [EnumString("textButtonPour")]
        TextButtonPour,
        ///<summary>
        ///Upward Curve Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCurveUp".</para>
        ///</summary>
        [EnumString("textCurveUp")]
        TextCurveUp,
        ///<summary>
        ///Downward Curve Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCurveDown".</para>
        ///</summary>
        [EnumString("textCurveDown")]
        TextCurveDown,
        ///<summary>
        ///Upward Can Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCanUp".</para>
        ///</summary>
        [EnumString("textCanUp")]
        TextCanUp,
        ///<summary>
        ///Downward Can Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCanDown".</para>
        ///</summary>
        [EnumString("textCanDown")]
        TextCanDown,
        ///<summary>
        ///Wave 1 Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textWave1".</para>
        ///</summary>
        [EnumString("textWave1")]
        TextWave1,
        ///<summary>
        ///Wave 2 Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textWave2".</para>
        ///</summary>
        [EnumString("textWave2")]
        TextWave2,
        ///<summary>
        ///Double Wave 1 Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDoubleWave1".</para>
        ///</summary>
        [EnumString("textDoubleWave1")]
        TextDoubleWave1,
        ///<summary>
        ///Wave 4 Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textWave4".</para>
        ///</summary>
        [EnumString("textWave4")]
        TextWave4,
        ///<summary>
        ///Inflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textInflate".</para>
        ///</summary>
        [EnumString("textInflate")]
        TextInflate,
        ///<summary>
        ///Deflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDeflate".</para>
        ///</summary>
        [EnumString("textDeflate")]
        TextDeflate,
        ///<summary>
        ///Bottom Inflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textInflateBottom".</para>
        ///</summary>
        [EnumString("textInflateBottom")]
        TextInflateBottom,
        ///<summary>
        ///Bottom Deflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDeflateBottom".</para>
        ///</summary>
        [EnumString("textDeflateBottom")]
        TextDeflateBottom,
        ///<summary>
        ///Top Inflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textInflateTop".</para>
        ///</summary>
        [EnumString("textInflateTop")]
        TextInflateTop,
        ///<summary>
        ///Top Deflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDeflateTop".</para>
        ///</summary>
        [EnumString("textDeflateTop")]
        TextDeflateTop,
        ///<summary>
        ///Deflate-Inflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDeflateInflate".</para>
        ///</summary>
        [EnumString("textDeflateInflate")]
        TextDeflateInflate,
        ///<summary>
        ///Deflate-Inflate-Deflate Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textDeflateInflateDeflate".</para>
        ///</summary>
        [EnumString("textDeflateInflateDeflate")]
        TextDeflateInflateDeflate,
        ///<summary>
        ///Right Fade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textFadeRight".</para>
        ///</summary>
        [EnumString("textFadeRight")]
        TextFadeRight,
        ///<summary>
        ///Left Fade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textFadeLeft".</para>
        ///</summary>
        [EnumString("textFadeLeft")]
        TextFadeLeft,
        ///<summary>
        ///Upward Fade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textFadeUp".</para>
        ///</summary>
        [EnumString("textFadeUp")]
        TextFadeUp,
        ///<summary>
        ///Downward Fade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textFadeDown".</para>
        ///</summary>
        [EnumString("textFadeDown")]
        TextFadeDown,
        ///<summary>
        ///Upward Slant Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textSlantUp".</para>
        ///</summary>
        [EnumString("textSlantUp")]
        TextSlantUp,
        ///<summary>
        ///Downward Slant Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textSlantDown".</para>
        ///</summary>
        [EnumString("textSlantDown")]
        TextSlantDown,
        ///<summary>
        ///Upward Cascade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCascadeUp".</para>
        ///</summary>
        [EnumString("textCascadeUp")]
        TextCascadeUp,
        ///<summary>
        ///Downward Cascade Text Shape.
        ///<para>When the item is serialized out as xml, its value is "textCascadeDown".</para>
        ///</summary>
        [EnumString("textCascadeDown")]
        TextCascadeDown,
    }

    /// <summary>
    /// Path Fill Mode
    /// </summary>
    public enum PathFillModeValues
    {
        ///<summary>
        ///No Path Fill.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Normal Path Fill.
        ///<para>When the item is serialized out as xml, its value is "norm".</para>
        ///</summary>
        [EnumString("norm")]
        Norm,
        ///<summary>
        ///Lighten Path Fill.
        ///<para>When the item is serialized out as xml, its value is "lighten".</para>
        ///</summary>
        [EnumString("lighten")]
        Lighten,
        ///<summary>
        ///Lighten Path Fill Less.
        ///<para>When the item is serialized out as xml, its value is "lightenLess".</para>
        ///</summary>
        [EnumString("lightenLess")]
        LightenLess,
        ///<summary>
        ///Darken Path Fill.
        ///<para>When the item is serialized out as xml, its value is "darken".</para>
        ///</summary>
        [EnumString("darken")]
        Darken,
        ///<summary>
        ///Darken Path Fill Less.
        ///<para>When the item is serialized out as xml, its value is "darkenLess".</para>
        ///</summary>
        [EnumString("darkenLess")]
        DarkenLess,
    }

    /// <summary>
    /// Line End Type
    /// </summary>
    public enum LineEndValues
    {
        ///<summary>
        ///None.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Triangle Arrow Head.
        ///<para>When the item is serialized out as xml, its value is "triangle".</para>
        ///</summary>
        [EnumString("triangle")]
        Triangle,
        ///<summary>
        ///Stealth Arrow.
        ///<para>When the item is serialized out as xml, its value is "stealth".</para>
        ///</summary>
        [EnumString("stealth")]
        Stealth,
        ///<summary>
        ///Diamond.
        ///<para>When the item is serialized out as xml, its value is "diamond".</para>
        ///</summary>
        [EnumString("diamond")]
        Diamond,
        ///<summary>
        ///Oval.
        ///<para>When the item is serialized out as xml, its value is "oval".</para>
        ///</summary>
        [EnumString("oval")]
        Oval,
        ///<summary>
        ///Arrow Head.
        ///<para>When the item is serialized out as xml, its value is "arrow".</para>
        ///</summary>
        [EnumString("arrow")]
        Arrow,
    }

    /// <summary>
    /// Line End Width
    /// </summary>
    public enum LineEndWidthValues
    {
        ///<summary>
        ///Small.
        ///<para>When the item is serialized out as xml, its value is "sm".</para>
        ///</summary>
        [EnumString("sm")]
        Small,
        ///<summary>
        ///Medium.
        ///<para>When the item is serialized out as xml, its value is "med".</para>
        ///</summary>
        [EnumString("med")]
        Medium,
        ///<summary>
        ///Large.
        ///<para>When the item is serialized out as xml, its value is "lg".</para>
        ///</summary>
        [EnumString("lg")]
        Large,
    }

    /// <summary>
    /// Line End Length
    /// </summary>
    public enum LineEndLengthValues
    {
        ///<summary>
        ///Small.
        ///<para>When the item is serialized out as xml, its value is "sm".</para>
        ///</summary>
        [EnumString("sm")]
        Small,
        ///<summary>
        ///Medium.
        ///<para>When the item is serialized out as xml, its value is "med".</para>
        ///</summary>
        [EnumString("med")]
        Medium,
        ///<summary>
        ///Large.
        ///<para>When the item is serialized out as xml, its value is "lg".</para>
        ///</summary>
        [EnumString("lg")]
        Large,
    }

    /// <summary>
    /// Preset Line Dash Value
    /// </summary>
    public enum PresetLineDashValues
    {
        ///<summary>
        ///Solid.
        ///<para>When the item is serialized out as xml, its value is "solid".</para>
        ///</summary>
        [EnumString("solid")]
        Solid,
        ///<summary>
        ///Dot.
        ///<para>When the item is serialized out as xml, its value is "dot".</para>
        ///</summary>
        [EnumString("dot")]
        Dot,
        ///<summary>
        ///Dash.
        ///<para>When the item is serialized out as xml, its value is "dash".</para>
        ///</summary>
        [EnumString("dash")]
        Dash,
        ///<summary>
        ///Large Dash.
        ///<para>When the item is serialized out as xml, its value is "lgDash".</para>
        ///</summary>
        [EnumString("lgDash")]
        LargeDash,
        ///<summary>
        ///Dash Dot.
        ///<para>When the item is serialized out as xml, its value is "dashDot".</para>
        ///</summary>
        [EnumString("dashDot")]
        DashDot,
        ///<summary>
        ///Large Dash Dot.
        ///<para>When the item is serialized out as xml, its value is "lgDashDot".</para>
        ///</summary>
        [EnumString("lgDashDot")]
        LargeDashDot,
        ///<summary>
        ///Large Dash Dot Dot.
        ///<para>When the item is serialized out as xml, its value is "lgDashDotDot".</para>
        ///</summary>
        [EnumString("lgDashDotDot")]
        LargeDashDotDot,
        ///<summary>
        ///System Dash.
        ///<para>When the item is serialized out as xml, its value is "sysDash".</para>
        ///</summary>
        [EnumString("sysDash")]
        SystemDash,
        ///<summary>
        ///System Dot.
        ///<para>When the item is serialized out as xml, its value is "sysDot".</para>
        ///</summary>
        [EnumString("sysDot")]
        SystemDot,
        ///<summary>
        ///System Dash Dot.
        ///<para>When the item is serialized out as xml, its value is "sysDashDot".</para>
        ///</summary>
        [EnumString("sysDashDot")]
        SystemDashDot,
        ///<summary>
        ///System Dash Dot Dot.
        ///<para>When the item is serialized out as xml, its value is "sysDashDotDot".</para>
        ///</summary>
        [EnumString("sysDashDotDot")]
        SystemDashDotDot,
    }

    /// <summary>
    /// End Line Cap
    /// </summary>
    public enum LineCapValues
    {
        ///<summary>
        ///Round Line Cap.
        ///<para>When the item is serialized out as xml, its value is "rnd".</para>
        ///</summary>
        [EnumString("rnd")]
        Round,
        ///<summary>
        ///Square Line Cap.
        ///<para>When the item is serialized out as xml, its value is "sq".</para>
        ///</summary>
        [EnumString("sq")]
        Square,
        ///<summary>
        ///Flat Line Cap.
        ///<para>When the item is serialized out as xml, its value is "flat".</para>
        ///</summary>
        [EnumString("flat")]
        Flat,
    }

    /// <summary>
    /// Alignment Type
    /// </summary>
    public enum PenAlignmentValues
    {
        ///<summary>
        ///Center Alignment.
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Inset Alignment.
        ///<para>When the item is serialized out as xml, its value is "in".</para>
        ///</summary>
        [EnumString("in")]
        Insert,
    }

    /// <summary>
    /// Compound Line Type
    /// </summary>
    public enum CompoundLineValues
    {
        ///<summary>
        ///Single Line.
        ///<para>When the item is serialized out as xml, its value is "sng".</para>
        ///</summary>
        [EnumString("sng")]
        Single,
        ///<summary>
        ///Double Lines.
        ///<para>When the item is serialized out as xml, its value is "dbl".</para>
        ///</summary>
        [EnumString("dbl")]
        Double,
        ///<summary>
        ///Thick Thin Double Lines.
        ///<para>When the item is serialized out as xml, its value is "thickThin".</para>
        ///</summary>
        [EnumString("thickThin")]
        ThickThin,
        ///<summary>
        ///Thin Thick Double Lines.
        ///<para>When the item is serialized out as xml, its value is "thinThick".</para>
        ///</summary>
        [EnumString("thinThick")]
        ThinThick,
        ///<summary>
        ///Thin Thick Thin Triple Lines.
        ///<para>When the item is serialized out as xml, its value is "tri".</para>
        ///</summary>
        [EnumString("tri")]
        Triple,
    }

    /// <summary>
    /// On/Off Style Type
    /// </summary>
    public enum BooleanStyleValues
    {
        ///<summary>
        ///On.
        ///<para>When the item is serialized out as xml, its value is "on".</para>
        ///</summary>
        [EnumString("on")]
        On,
        ///<summary>
        ///Off.
        ///<para>When the item is serialized out as xml, its value is "off".</para>
        ///</summary>
        [EnumString("off")]
        Off,
        ///<summary>
        ///Default.
        ///<para>When the item is serialized out as xml, its value is "def".</para>
        ///</summary>
        [EnumString("def")]
        Default,
    }

    /// <summary>
    /// Text Vertical Overflow
    /// </summary>
    public enum TextVerticalOverflowValues
    {
        ///<summary>
        ///Text Overflow Enum ( Overflow ).
        ///<para>When the item is serialized out as xml, its value is "overflow".</para>
        ///</summary>
        [EnumString("overflow")]
        Overflow,
        ///<summary>
        ///Text Overflow Enum ( Ellipsis ).
        ///<para>When the item is serialized out as xml, its value is "ellipsis".</para>
        ///</summary>
        [EnumString("ellipsis")]
        Ellipsis,
        ///<summary>
        ///Text Overflow Enum ( Clip ).
        ///<para>When the item is serialized out as xml, its value is "clip".</para>
        ///</summary>
        [EnumString("clip")]
        Clip,
    }

    /// <summary>
    /// Text Horizontal Overflow Types
    /// </summary>
    public enum TextHorizontalOverflowValues
    {
        ///<summary>
        ///Text Horizontal Overflow Enum ( Overflow ).
        ///<para>When the item is serialized out as xml, its value is "overflow".</para>
        ///</summary>
        [EnumString("overflow")]
        Overflow,
        ///<summary>
        ///Text Horizontal Overflow Enum ( Clip ).
        ///<para>When the item is serialized out as xml, its value is "clip".</para>
        ///</summary>
        [EnumString("clip")]
        Clip,
    }

    /// <summary>
    /// Vertical Text Types
    /// </summary>
    public enum TextVerticalValues
    {
        ///<summary>
        ///Vertical Text Type Enum ( Horizontal ).
        ///<para>When the item is serialized out as xml, its value is "horz".</para>
        ///</summary>
        [EnumString("horz")]
        Horizontal,
        ///<summary>
        ///Vertical Text Type Enum ( Vertical ).
        ///<para>When the item is serialized out as xml, its value is "vert".</para>
        ///</summary>
        [EnumString("vert")]
        Vertical,
        ///<summary>
        ///Vertical Text Type Enum ( Vertical 270 ).
        ///<para>When the item is serialized out as xml, its value is "vert270".</para>
        ///</summary>
        [EnumString("vert270")]
        Vertical270,
        ///<summary>
        ///Vertical Text Type Enum ( WordArt Vertical ).
        ///<para>When the item is serialized out as xml, its value is "wordArtVert".</para>
        ///</summary>
        [EnumString("wordArtVert")]
        WordArtVertical,
        ///<summary>
        ///Vertical Text Type Enum ( East Asian Vertical ).
        ///<para>When the item is serialized out as xml, its value is "eaVert".</para>
        ///</summary>
        [EnumString("eaVert")]
        EastAsianVetical,
        ///<summary>
        ///Vertical Text Type Enum ( Mongolian Vertical ).
        ///<para>When the item is serialized out as xml, its value is "mongolianVert".</para>
        ///</summary>
        [EnumString("mongolianVert")]
        MongolianVertical,
        ///<summary>
        ///Vertical WordArt Right to Left.
        ///<para>When the item is serialized out as xml, its value is "wordArtVertRtl".</para>
        ///</summary>
        [EnumString("wordArtVertRtl")]
        WordArtLeftToRight,
    }

    /// <summary>
    /// Text Wrapping Types
    /// </summary>
    public enum TextWrappingValues
    {
        ///<summary>
        ///Text Wrapping Type Enum ( None ).
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Text Wrapping Type Enum ( Square ).
        ///<para>When the item is serialized out as xml, its value is "square".</para>
        ///</summary>
        [EnumString("square")]
        Square,
    }

    /// <summary>
    /// Text Anchoring Types
    /// </summary>
    public enum TextAnchoringTypeValues
    {
        ///<summary>
        ///Text Anchoring Type Enum ( Top ).
        ///<para>When the item is serialized out as xml, its value is "t".</para>
        ///</summary>
        [EnumString("t")]
        Top,
        ///<summary>
        ///Text Anchor Enum ( Center ).
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Text Anchor Enum ( Bottom ).
        ///<para>When the item is serialized out as xml, its value is "b".</para>
        ///</summary>
        [EnumString("b")]
        Bottom,
    }

    /// <summary>
    /// Text Auto-number Schemes
    /// </summary>
    public enum TextAutoNumberSchemeValues
    {
        ///<summary>
        ///Autonumber Enum ( alphaLcParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "alphaLcParenBoth".</para>
        ///</summary>
        [EnumString("alphaLcParenBoth")]
        AlphaLowerCharacterParenBoth,
        ///<summary>
        ///Autonumbering Enum ( alphaUcParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "alphaUcParenBoth".</para>
        ///</summary>
        [EnumString("alphaUcParenBoth")]
        AlphaUpperCharacterParenBoth,
        ///<summary>
        ///Autonumbering Enum ( alphaLcParenR ).
        ///<para>When the item is serialized out as xml, its value is "alphaLcParenR".</para>
        ///</summary>
        [EnumString("alphaLcParenR")]
        AlphaLowerCharacterParenR,
        ///<summary>
        ///Autonumbering Enum ( alphaUcParenR ).
        ///<para>When the item is serialized out as xml, its value is "alphaUcParenR".</para>
        ///</summary>
        [EnumString("alphaUcParenR")]
        AlphaUpperCharacterParenR,
        ///<summary>
        ///Autonumbering Enum ( alphaLcPeriod ).
        ///<para>When the item is serialized out as xml, its value is "alphaLcPeriod".</para>
        ///</summary>
        [EnumString("alphaLcPeriod")]
        AlphaLowerCharacterPeriod,
        ///<summary>
        ///Autonumbering Enum ( alphaUcPeriod ).
        ///<para>When the item is serialized out as xml, its value is "alphaUcPeriod".</para>
        ///</summary>
        [EnumString("alphaUcPeriod")]
        AlphaUpperCharacterPeriod,
        ///<summary>
        ///Autonumbering Enum ( arabicParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "arabicParenBoth".</para>
        ///</summary>
        [EnumString("arabicParenBoth")]
        ArabicParenBoth,
        ///<summary>
        ///Autonumbering Enum ( arabicParenR ).
        ///<para>When the item is serialized out as xml, its value is "arabicParenR".</para>
        ///</summary>
        [EnumString("arabicParenR")]
        ArabicParenR,
        ///<summary>
        ///Autonumbering Enum ( arabicPeriod ).
        ///<para>When the item is serialized out as xml, its value is "arabicPeriod".</para>
        ///</summary>
        [EnumString("arabicPeriod")]
        ArabicPeriod,
        ///<summary>
        ///Autonumbering Enum ( arabicPlain ).
        ///<para>When the item is serialized out as xml, its value is "arabicPlain".</para>
        ///</summary>
        [EnumString("arabicPlain")]
        ArabicPlain,
        ///<summary>
        ///Autonumbering Enum ( romanLcParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "romanLcParenBoth".</para>
        ///</summary>
        [EnumString("romanLcParenBoth")]
        RomanLowerCharacterParenBoth,
        ///<summary>
        ///Autonumbering Enum ( romanUcParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "romanUcParenBoth".</para>
        ///</summary>
        [EnumString("romanUcParenBoth")]
        RomanUpperCharacterParenBoth,
        ///<summary>
        ///Autonumbering Enum ( romanLcParenR ).
        ///<para>When the item is serialized out as xml, its value is "romanLcParenR".</para>
        ///</summary>
        [EnumString("romanLcParenR")]
        RomanLowerCharacterParenR,
        ///<summary>
        ///Autonumbering Enum ( romanUcParenR ).
        ///<para>When the item is serialized out as xml, its value is "romanUcParenR".</para>
        ///</summary>
        [EnumString("romanUcParenR")]
        RomanUpperCharacterParenR,
        ///<summary>
        ///Autonumbering Enum ( romanLcPeriod ).
        ///<para>When the item is serialized out as xml, its value is "romanLcPeriod".</para>
        ///</summary>
        [EnumString("romanLcPeriod")]
        RomanLowerCharacterPeriod,
        ///<summary>
        ///Autonumbering Enum ( romanUcPeriod ).
        ///<para>When the item is serialized out as xml, its value is "romanUcPeriod".</para>
        ///</summary>
        [EnumString("romanUcPeriod")]
        RomanUpperCharacterPeriod,
        ///<summary>
        ///Autonumbering Enum ( circleNumDbPlain ).
        ///<para>When the item is serialized out as xml, its value is "circleNumDbPlain".</para>
        ///</summary>
        [EnumString("circleNumDbPlain")]
        CircleNumberDoubleBytePlain,
        ///<summary>
        ///Autonumbering Enum ( circleNumWdBlackPlain ).
        ///<para>When the item is serialized out as xml, its value is "circleNumWdBlackPlain".</para>
        ///</summary>
        [EnumString("circleNumWdBlackPlain")]
        CircleNumberWingdingsBlackPlain,
        ///<summary>
        ///Autonumbering Enum ( circleNumWdWhitePlain ).
        ///<para>When the item is serialized out as xml, its value is "circleNumWdWhitePlain".</para>
        ///</summary>
        [EnumString("circleNumWdWhitePlain")]
        CircleNumberWingdingsWhitePlain,
        ///<summary>
        ///Autonumbering Enum ( arabicDbPeriod ).
        ///<para>When the item is serialized out as xml, its value is "arabicDbPeriod".</para>
        ///</summary>
        [EnumString("arabicDbPeriod")]
        ArabicDoubleBytePeriod,
        ///<summary>
        ///Autonumbering Enum ( arabicDbPlain ).
        ///<para>When the item is serialized out as xml, its value is "arabicDbPlain".</para>
        ///</summary>
        [EnumString("arabicDbPlain")]
        ArabicDoubleBytePlain,
        ///<summary>
        ///Autonumbering Enum ( ea1ChsPeriod ).
        ///<para>When the item is serialized out as xml, its value is "ea1ChsPeriod".</para>
        ///</summary>
        [EnumString("ea1ChsPeriod")]
        EastAsianSimplifiedChinesePeriod,
        ///<summary>
        ///Autonumbering Enum ( ea1ChsPlain ).
        ///<para>When the item is serialized out as xml, its value is "ea1ChsPlain".</para>
        ///</summary>
        [EnumString("ea1ChsPlain")]
        EastAsianSimplifiedChinesePlain,
        ///<summary>
        ///Autonumbering Enum ( ea1ChtPeriod ).
        ///<para>When the item is serialized out as xml, its value is "ea1ChtPeriod".</para>
        ///</summary>
        [EnumString("ea1ChtPeriod")]
        EastAsianTraditionalChinesePeriod,
        ///<summary>
        ///Autonumbering Enum ( ea1ChtPlain ).
        ///<para>When the item is serialized out as xml, its value is "ea1ChtPlain".</para>
        ///</summary>
        [EnumString("ea1ChtPlain")]
        EastAsianTraditionalChinesePlain,
        ///<summary>
        ///Autonumbering Enum ( ea1JpnChsDbPeriod ).
        ///<para>When the item is serialized out as xml, its value is "ea1JpnChsDbPeriod".</para>
        ///</summary>
        [EnumString("ea1JpnChsDbPeriod")]
        EastAsianJapaneseDoubleBytePeriod,
        ///<summary>
        ///Autonumbering Enum ( ea1JpnKorPlain ).
        ///<para>When the item is serialized out as xml, its value is "ea1JpnKorPlain".</para>
        ///</summary>
        [EnumString("ea1JpnKorPlain")]
        EastAsianJapaneseKoreanPlain,
        ///<summary>
        ///Autonumbering Enum ( ea1JpnKorPeriod ).
        ///<para>When the item is serialized out as xml, its value is "ea1JpnKorPeriod".</para>
        ///</summary>
        [EnumString("ea1JpnKorPeriod")]
        EastAsianJapaneseKoreanPeriod,
        ///<summary>
        ///Autonumbering Enum ( arabic1Minus ).
        ///<para>When the item is serialized out as xml, its value is "arabic1Minus".</para>
        ///</summary>
        [EnumString("arabic1Minus")]
        Arabic1Minus,
        ///<summary>
        ///Autonumbering Enum ( arabic2Minus ).
        ///<para>When the item is serialized out as xml, its value is "arabic2Minus".</para>
        ///</summary>
        [EnumString("arabic2Minus")]
        Arabic2Minus,
        ///<summary>
        ///Autonumbering Enum ( hebrew2Minus ).
        ///<para>When the item is serialized out as xml, its value is "hebrew2Minus".</para>
        ///</summary>
        [EnumString("hebrew2Minus")]
        Hebrew2Minus,
        ///<summary>
        ///Autonumbering Enum ( thaiAlphaPeriod ).
        ///<para>When the item is serialized out as xml, its value is "thaiAlphaPeriod".</para>
        ///</summary>
        [EnumString("thaiAlphaPeriod")]
        ThaiAlphaPeriod,
        ///<summary>
        ///Autonumbering Enum ( thaiAlphaParenR ).
        ///<para>When the item is serialized out as xml, its value is "thaiAlphaParenR".</para>
        ///</summary>
        [EnumString("thaiAlphaParenR")]
        ThaiAlphaParenthesisRight,
        ///<summary>
        ///Autonumbering Enum ( thaiAlphaParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "thaiAlphaParenBoth".</para>
        ///</summary>
        [EnumString("thaiAlphaParenBoth")]
        ThaiAlphaParenthesisBoth,
        ///<summary>
        ///Autonumbering Enum ( thaiNumPeriod ).
        ///<para>When the item is serialized out as xml, its value is "thaiNumPeriod".</para>
        ///</summary>
        [EnumString("thaiNumPeriod")]
        ThaiNumberPeriod,
        ///<summary>
        ///Autonumbering Enum ( thaiNumParenR ).
        ///<para>When the item is serialized out as xml, its value is "thaiNumParenR".</para>
        ///</summary>
        [EnumString("thaiNumParenR")]
        ThaiNumberParenthesisRight,
        ///<summary>
        ///Autonumbering Enum ( thaiNumParenBoth ).
        ///<para>When the item is serialized out as xml, its value is "thaiNumParenBoth".</para>
        ///</summary>
        [EnumString("thaiNumParenBoth")]
        ThaiNumberParenthesisBoth,
        ///<summary>
        ///Autonumbering Enum ( hindiAlphaPeriod ).
        ///<para>When the item is serialized out as xml, its value is "hindiAlphaPeriod".</para>
        ///</summary>
        [EnumString("hindiAlphaPeriod")]
        HindiAlphaPeriod,
        ///<summary>
        ///Autonumbering Enum ( hindiNumPeriod ).
        ///<para>When the item is serialized out as xml, its value is "hindiNumPeriod".</para>
        ///</summary>
        [EnumString("hindiNumPeriod")]
        HindiNumPeriod,
        ///<summary>
        ///Autonumbering Enum ( hindiNumParenR ).
        ///<para>When the item is serialized out as xml, its value is "hindiNumParenR".</para>
        ///</summary>
        [EnumString("hindiNumParenR")]
        HindiNumberParenthesisRight,
        ///<summary>
        ///Autonumbering Enum ( hindiAlpha1Period ).
        ///<para>When the item is serialized out as xml, its value is "hindiAlpha1Period".</para>
        ///</summary>
        [EnumString("hindiAlpha1Period")]
        HindiAlpha1Period,
    }

    /// <summary>
    /// Text Underline Types
    /// </summary>
    public enum TextUnderlineValues
    {
        ///<summary>
        ///Text Underline Enum ( None ).
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Text Underline Enum ( Words ).
        ///<para>When the item is serialized out as xml, its value is "words".</para>
        ///</summary>
        [EnumString("words")]
        Words,
        ///<summary>
        ///Text Underline Enum ( Single ).
        ///<para>When the item is serialized out as xml, its value is "sng".</para>
        ///</summary>
        [EnumString("sng")]
        Single,
        ///<summary>
        ///Text Underline Enum ( Double ).
        ///<para>When the item is serialized out as xml, its value is "dbl".</para>
        ///</summary>
        [EnumString("dbl")]
        Double,
        ///<summary>
        ///Text Underline Enum ( Heavy ).
        ///<para>When the item is serialized out as xml, its value is "heavy".</para>
        ///</summary>
        [EnumString("heavy")]
        Heavy,
        ///<summary>
        ///Text Underline Enum ( Dotted ).
        ///<para>When the item is serialized out as xml, its value is "dotted".</para>
        ///</summary>
        [EnumString("dotted")]
        Dotted,
        ///<summary>
        ///Text Underline Enum ( Heavy Dotted  ).
        ///<para>When the item is serialized out as xml, its value is "dottedHeavy".</para>
        ///</summary>
        [EnumString("dottedHeavy")]
        HeavyDotted,
        ///<summary>
        ///Text Underline Enum ( Dashed ).
        ///<para>When the item is serialized out as xml, its value is "dash".</para>
        ///</summary>
        [EnumString("dash")]
        Dash,
        ///<summary>
        ///Text Underline Enum ( Heavy Dashed ).
        ///<para>When the item is serialized out as xml, its value is "dashHeavy".</para>
        ///</summary>
        [EnumString("dashHeavy")]
        DashHeavy,
        ///<summary>
        ///Text Underline Enum ( Long Dashed ).
        ///<para>When the item is serialized out as xml, its value is "dashLong".</para>
        ///</summary>
        [EnumString("dashLong")]
        DashLong,
        ///<summary>
        ///Text Underline Enum ( Heavy Long Dashed ).
        ///<para>When the item is serialized out as xml, its value is "dashLongHeavy".</para>
        ///</summary>
        [EnumString("dashLongHeavy")]
        DashLongHeavy,
        ///<summary>
        ///Text Underline Enum ( Dot Dash ).
        ///<para>When the item is serialized out as xml, its value is "dotDash".</para>
        ///</summary>
        [EnumString("dotDash")]
        DotDash,
        ///<summary>
        ///Text Underline Enum ( Heavy Dot Dash ).
        ///<para>When the item is serialized out as xml, its value is "dotDashHeavy".</para>
        ///</summary>
        [EnumString("dotDashHeavy")]
        DotDashHeavy,
        ///<summary>
        ///Text Underline Enum ( Dot Dot Dash ).
        ///<para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        ///</summary>
        [EnumString("dotDotDash")]
        DotDotDash,
        ///<summary>
        ///Text Underline Enum ( Heavy Dot Dot Dash ).
        ///<para>When the item is serialized out as xml, its value is "dotDotDashHeavy".</para>
        ///</summary>
        [EnumString("dotDotDashHeavy")]
        DotDotDashHeavy,
        ///<summary>
        ///Text Underline Enum ( Wavy ).
        ///<para>When the item is serialized out as xml, its value is "wavy".</para>
        ///</summary>
        [EnumString("wavy")]
        Wavy,
        ///<summary>
        ///Text Underline Enum ( Heavy Wavy ).
        ///<para>When the item is serialized out as xml, its value is "wavyHeavy".</para>
        ///</summary>
        [EnumString("wavyHeavy")]
        WavyHeavy,
        ///<summary>
        ///Text Underline Enum ( Double Wavy ).
        ///<para>When the item is serialized out as xml, its value is "wavyDbl".</para>
        ///</summary>
        [EnumString("wavyDbl")]
        WavyDouble,
    }

    /// <summary>
    /// Text Strike Type
    /// </summary>
    public enum TextStrikeValues
    {
        ///<summary>
        ///Text Strike Enum ( No Strike ).
        ///<para>When the item is serialized out as xml, its value is "noStrike".</para>
        ///</summary>
        [EnumString("noStrike")]
        NoStrike,
        ///<summary>
        ///Text Strike Enum ( Single Strike ).
        ///<para>When the item is serialized out as xml, its value is "sngStrike".</para>
        ///</summary>
        [EnumString("sngStrike")]
        SingleStrike,
        ///<summary>
        ///Text Strike Enum ( Double Strike ).
        ///<para>When the item is serialized out as xml, its value is "dblStrike".</para>
        ///</summary>
        [EnumString("dblStrike")]
        DoubleStrike,
    }

    /// <summary>
    /// Text Cap Types
    /// </summary>
    public enum TextCapsValues
    {
        ///<summary>
        ///Text Caps Enum ( None ).
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Text Caps Enum ( Small ).
        ///<para>When the item is serialized out as xml, its value is "small".</para>
        ///</summary>
        [EnumString("small")]
        Small,
        ///<summary>
        ///Text Caps Enum ( All ).
        ///<para>When the item is serialized out as xml, its value is "all".</para>
        ///</summary>
        [EnumString("all")]
        All,
    }

    /// <summary>
    /// Text Tab Alignment Types
    /// </summary>
    public enum TextTabAlignmentValues
    {
        ///<summary>
        ///Text Tab Alignment Enum ( Left).
        ///<para>When the item is serialized out as xml, its value is "l".</para>
        ///</summary>
        [EnumString("l")]
        Left,
        ///<summary>
        ///Text Tab Alignment Enum ( Center ).
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Text Tab Alignment Enum ( Right ).
        ///<para>When the item is serialized out as xml, its value is "r".</para>
        ///</summary>
        [EnumString("r")]
        Right,
        ///<summary>
        ///Text Tab Alignment Enum ( Decimal ).
        ///<para>When the item is serialized out as xml, its value is "dec".</para>
        ///</summary>
        [EnumString("dec")]
        Decimal,
    }

    /// <summary>
    /// Text Alignment Types
    /// </summary>
    public enum TextAlignmentTypeValues
    {
        ///<summary>
        ///Text Alignment Enum ( Left ).
        ///<para>When the item is serialized out as xml, its value is "l".</para>
        ///</summary>
        [EnumString("l")]
        Left,
        ///<summary>
        ///Text Alignment Enum ( Center ).
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Text Alignment Enum ( Right ).
        ///<para>When the item is serialized out as xml, its value is "r".</para>
        ///</summary>
        [EnumString("r")]
        Right,
        ///<summary>
        ///Text Alignment Enum ( Justified ).
        ///<para>When the item is serialized out as xml, its value is "just".</para>
        ///</summary>
        [EnumString("just")]
        Justified,
        ///<summary>
        ///Text Alignment Enum ( Justified Low ).
        ///<para>When the item is serialized out as xml, its value is "justLow".</para>
        ///</summary>
        [EnumString("justLow")]
        JustifiedLow,
        ///<summary>
        ///Text Alignment Enum ( Distributed ).
        ///<para>When the item is serialized out as xml, its value is "dist".</para>
        ///</summary>
        [EnumString("dist")]
        Distributed,
        ///<summary>
        ///Text Alignment Enum ( Thai Distributed ).
        ///<para>When the item is serialized out as xml, its value is "thaiDist".</para>
        ///</summary>
        [EnumString("thaiDist")]
        ThaiDistributed,
    }

    /// <summary>
    /// Font Alignment Types
    /// </summary>
    public enum TextFontAlignmentValues
    {
        ///<summary>
        ///Font Alignment Enum ( Automatic ).
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Automatic,
        ///<summary>
        ///Font Alignment Enum ( Top ).
        ///<para>When the item is serialized out as xml, its value is "t".</para>
        ///</summary>
        [EnumString("t")]
        Top,
        ///<summary>
        ///Font Alignment Enum ( Center ).
        ///<para>When the item is serialized out as xml, its value is "ctr".</para>
        ///</summary>
        [EnumString("ctr")]
        Center,
        ///<summary>
        ///Font Alignment Enum ( Baseline ).
        ///<para>When the item is serialized out as xml, its value is "base".</para>
        ///</summary>
        [EnumString("base")]
        Baseline,
        ///<summary>
        ///Font Alignment Enum ( Bottom ).
        ///<para>When the item is serialized out as xml, its value is "b".</para>
        ///</summary>
        [EnumString("b")]
        Bottom,
    }

    /// <summary>
    /// Preset Color Value
    /// </summary>
    public enum PresetColorValues
    {
        ///<summary>
        ///Alice Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "aliceBlue".</para>
        ///</summary>
        [EnumString("aliceBlue")]
        AliceBlue,
        ///<summary>
        ///Antique White Preset Color.
        ///<para>When the item is serialized out as xml, its value is "antiqueWhite".</para>
        ///</summary>
        [EnumString("antiqueWhite")]
        AntiqueWhite,
        ///<summary>
        ///Aqua Preset Color.
        ///<para>When the item is serialized out as xml, its value is "aqua".</para>
        ///</summary>
        [EnumString("aqua")]
        Aqua,
        ///<summary>
        ///Aquamarine Preset Color.
        ///<para>When the item is serialized out as xml, its value is "aquamarine".</para>
        ///</summary>
        [EnumString("aquamarine")]
        Aquamarine,
        ///<summary>
        ///Azure Preset Color.
        ///<para>When the item is serialized out as xml, its value is "azure".</para>
        ///</summary>
        [EnumString("azure")]
        Azure,
        ///<summary>
        ///Beige Preset Color.
        ///<para>When the item is serialized out as xml, its value is "beige".</para>
        ///</summary>
        [EnumString("beige")]
        Beige,
        ///<summary>
        ///Bisque Preset Color.
        ///<para>When the item is serialized out as xml, its value is "bisque".</para>
        ///</summary>
        [EnumString("bisque")]
        Bisque,
        ///<summary>
        ///Black Preset Color.
        ///<para>When the item is serialized out as xml, its value is "black".</para>
        ///</summary>
        [EnumString("black")]
        Black,
        ///<summary>
        ///Blanched Almond Preset Color.
        ///<para>When the item is serialized out as xml, its value is "blanchedAlmond".</para>
        ///</summary>
        [EnumString("blanchedAlmond")]
        BlanchedAlmond,
        ///<summary>
        ///Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "blue".</para>
        ///</summary>
        [EnumString("blue")]
        Blue,
        ///<summary>
        ///Blue Violet Preset Color.
        ///<para>When the item is serialized out as xml, its value is "blueViolet".</para>
        ///</summary>
        [EnumString("blueViolet")]
        BlueViolet,
        ///<summary>
        ///Brown Preset Color.
        ///<para>When the item is serialized out as xml, its value is "brown".</para>
        ///</summary>
        [EnumString("brown")]
        Brown,
        ///<summary>
        ///Burly Wood Preset Color.
        ///<para>When the item is serialized out as xml, its value is "burlyWood".</para>
        ///</summary>
        [EnumString("burlyWood")]
        BurlyWood,
        ///<summary>
        ///Cadet Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "cadetBlue".</para>
        ///</summary>
        [EnumString("cadetBlue")]
        CadetBlue,
        ///<summary>
        ///Chartreuse Preset Color.
        ///<para>When the item is serialized out as xml, its value is "chartreuse".</para>
        ///</summary>
        [EnumString("chartreuse")]
        Chartreuse,
        ///<summary>
        ///Chocolate Preset Color.
        ///<para>When the item is serialized out as xml, its value is "chocolate".</para>
        ///</summary>
        [EnumString("chocolate")]
        Chocolate,
        ///<summary>
        ///Coral Preset Color.
        ///<para>When the item is serialized out as xml, its value is "coral".</para>
        ///</summary>
        [EnumString("coral")]
        Coral,
        ///<summary>
        ///Cornflower Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "cornflowerBlue".</para>
        ///</summary>
        [EnumString("cornflowerBlue")]
        CornflowerBlue,
        ///<summary>
        ///Cornsilk Preset Color.
        ///<para>When the item is serialized out as xml, its value is "cornsilk".</para>
        ///</summary>
        [EnumString("cornsilk")]
        Cornsilk,
        ///<summary>
        ///Crimson Preset Color.
        ///<para>When the item is serialized out as xml, its value is "crimson".</para>
        ///</summary>
        [EnumString("crimson")]
        Crimson,
        ///<summary>
        ///Cyan Preset Color.
        ///<para>When the item is serialized out as xml, its value is "cyan".</para>
        ///</summary>
        [EnumString("cyan")]
        Cyan,
        ///<summary>
        ///Dark Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkBlue".</para>
        ///</summary>
        [EnumString("dkBlue")]
        DarkBlue,
        ///<summary>
        ///Dark Cyan Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkCyan".</para>
        ///</summary>
        [EnumString("dkCyan")]
        DarkCyan,
        ///<summary>
        ///Dark Goldenrod Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkGoldenrod".</para>
        ///</summary>
        [EnumString("dkGoldenrod")]
        DarkGoldenrod,
        ///<summary>
        ///Dark Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkGray".</para>
        ///</summary>
        [EnumString("dkGray")]
        DarkGray,
        ///<summary>
        ///Dark Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkGreen".</para>
        ///</summary>
        [EnumString("dkGreen")]
        DarkGreen,
        ///<summary>
        ///Dark Khaki Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkKhaki".</para>
        ///</summary>
        [EnumString("dkKhaki")]
        DarkKhaki,
        ///<summary>
        ///Dark Magenta Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkMagenta".</para>
        ///</summary>
        [EnumString("dkMagenta")]
        DarkMagenta,
        ///<summary>
        ///Dark Olive Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkOliveGreen".</para>
        ///</summary>
        [EnumString("dkOliveGreen")]
        DarkOliveGreen,
        ///<summary>
        ///Dark Orange Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkOrange".</para>
        ///</summary>
        [EnumString("dkOrange")]
        DarkOrange,
        ///<summary>
        ///Dark Orchid Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkOrchid".</para>
        ///</summary>
        [EnumString("dkOrchid")]
        DarkOrchid,
        ///<summary>
        ///Dark Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkRed".</para>
        ///</summary>
        [EnumString("dkRed")]
        DarkRed,
        ///<summary>
        ///Dark Salmon Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkSalmon".</para>
        ///</summary>
        [EnumString("dkSalmon")]
        DarkSalmon,
        ///<summary>
        ///Dark Sea Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkSeaGreen".</para>
        ///</summary>
        [EnumString("dkSeaGreen")]
        DarkSeaGreen,
        ///<summary>
        ///Dark Slate Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkSlateBlue".</para>
        ///</summary>
        [EnumString("dkSlateBlue")]
        DarkSlateBlue,
        ///<summary>
        ///Dark Slate Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkSlateGray".</para>
        ///</summary>
        [EnumString("dkSlateGray")]
        DarkSlateGray,
        ///<summary>
        ///Dark Turquoise Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkTurquoise".</para>
        ///</summary>
        [EnumString("dkTurquoise")]
        DarkTurquoise,
        ///<summary>
        ///Dark Violet Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dkViolet".</para>
        ///</summary>
        [EnumString("dkViolet")]
        DarkViolet,
        ///<summary>
        ///Deep Pink Preset Color.
        ///<para>When the item is serialized out as xml, its value is "deepPink".</para>
        ///</summary>
        [EnumString("deepPink")]
        DeepPink,
        ///<summary>
        ///Deep Sky Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "deepSkyBlue".</para>
        ///</summary>
        [EnumString("deepSkyBlue")]
        DeepSkyBlue,
        ///<summary>
        ///Dim Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dimGray".</para>
        ///</summary>
        [EnumString("dimGray")]
        DimGray,
        ///<summary>
        ///Dodger Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "dodgerBlue".</para>
        ///</summary>
        [EnumString("dodgerBlue")]
        DodgerBlue,
        ///<summary>
        ///Firebrick Preset Color.
        ///<para>When the item is serialized out as xml, its value is "firebrick".</para>
        ///</summary>
        [EnumString("firebrick")]
        Firebrick,
        ///<summary>
        ///Floral White Preset Color.
        ///<para>When the item is serialized out as xml, its value is "floralWhite".</para>
        ///</summary>
        [EnumString("floralWhite")]
        FloralWhite,
        ///<summary>
        ///Forest Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "forestGreen".</para>
        ///</summary>
        [EnumString("forestGreen")]
        ForestGreen,
        ///<summary>
        ///Fuchsia Preset Color.
        ///<para>When the item is serialized out as xml, its value is "fuchsia".</para>
        ///</summary>
        [EnumString("fuchsia")]
        Fuchsia,
        ///<summary>
        ///Gainsboro Preset Color.
        ///<para>When the item is serialized out as xml, its value is "gainsboro".</para>
        ///</summary>
        [EnumString("gainsboro")]
        Gainsboro,
        ///<summary>
        ///Ghost White Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ghostWhite".</para>
        ///</summary>
        [EnumString("ghostWhite")]
        GhostWhite,
        ///<summary>
        ///Gold Preset Color.
        ///<para>When the item is serialized out as xml, its value is "gold".</para>
        ///</summary>
        [EnumString("gold")]
        Gold,
        ///<summary>
        ///Goldenrod Preset Color.
        ///<para>When the item is serialized out as xml, its value is "goldenrod".</para>
        ///</summary>
        [EnumString("goldenrod")]
        Goldenrod,
        ///<summary>
        ///Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "gray".</para>
        ///</summary>
        [EnumString("gray")]
        Gray,
        ///<summary>
        ///Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "green".</para>
        ///</summary>
        [EnumString("green")]
        Green,
        ///<summary>
        ///Green Yellow Preset Color.
        ///<para>When the item is serialized out as xml, its value is "greenYellow".</para>
        ///</summary>
        [EnumString("greenYellow")]
        GreenYellow,
        ///<summary>
        ///Honeydew Preset Color.
        ///<para>When the item is serialized out as xml, its value is "honeydew".</para>
        ///</summary>
        [EnumString("honeydew")]
        Honeydew,
        ///<summary>
        ///Hot Pink Preset Color.
        ///<para>When the item is serialized out as xml, its value is "hotPink".</para>
        ///</summary>
        [EnumString("hotPink")]
        HotPink,
        ///<summary>
        ///Indian Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "indianRed".</para>
        ///</summary>
        [EnumString("indianRed")]
        IndianRed,
        ///<summary>
        ///Indigo Preset Color.
        ///<para>When the item is serialized out as xml, its value is "indigo".</para>
        ///</summary>
        [EnumString("indigo")]
        Indigo,
        ///<summary>
        ///Ivory Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ivory".</para>
        ///</summary>
        [EnumString("ivory")]
        Ivory,
        ///<summary>
        ///Khaki Preset Color.
        ///<para>When the item is serialized out as xml, its value is "khaki".</para>
        ///</summary>
        [EnumString("khaki")]
        Khaki,
        ///<summary>
        ///Lavender Preset Color.
        ///<para>When the item is serialized out as xml, its value is "lavender".</para>
        ///</summary>
        [EnumString("lavender")]
        Lavender,
        ///<summary>
        ///Lavender Blush Preset Color.
        ///<para>When the item is serialized out as xml, its value is "lavenderBlush".</para>
        ///</summary>
        [EnumString("lavenderBlush")]
        LavenderBlush,
        ///<summary>
        ///Lawn Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "lawnGreen".</para>
        ///</summary>
        [EnumString("lawnGreen")]
        LawnGreen,
        ///<summary>
        ///Lemon Chiffon Preset Color.
        ///<para>When the item is serialized out as xml, its value is "lemonChiffon".</para>
        ///</summary>
        [EnumString("lemonChiffon")]
        LemonChiffon,
        ///<summary>
        ///Light Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltBlue".</para>
        ///</summary>
        [EnumString("ltBlue")]
        LightBlue,
        ///<summary>
        ///Light Coral Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltCoral".</para>
        ///</summary>
        [EnumString("ltCoral")]
        LightCoral,
        ///<summary>
        ///Light Cyan Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltCyan".</para>
        ///</summary>
        [EnumString("ltCyan")]
        LightCyan,
        ///<summary>
        ///Light Goldenrod Yellow Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltGoldenrodYellow".</para>
        ///</summary>
        [EnumString("ltGoldenrodYellow")]
        LightGoldenrodYellow,
        ///<summary>
        ///Light Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltGray".</para>
        ///</summary>
        [EnumString("ltGray")]
        LightGray,
        ///<summary>
        ///Light Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltGreen".</para>
        ///</summary>
        [EnumString("ltGreen")]
        LightGreen,
        ///<summary>
        ///Light Pink Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltPink".</para>
        ///</summary>
        [EnumString("ltPink")]
        LightPink,
        ///<summary>
        ///Light Salmon Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltSalmon".</para>
        ///</summary>
        [EnumString("ltSalmon")]
        LightSalmon,
        ///<summary>
        ///Light Sea Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltSeaGreen".</para>
        ///</summary>
        [EnumString("ltSeaGreen")]
        LightSeaGreen,
        ///<summary>
        ///Light Sky Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltSkyBlue".</para>
        ///</summary>
        [EnumString("ltSkyBlue")]
        LightSkyBlue,
        ///<summary>
        ///Light Slate Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltSlateGray".</para>
        ///</summary>
        [EnumString("ltSlateGray")]
        LightSlateGray,
        ///<summary>
        ///Light Steel Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltSteelBlue".</para>
        ///</summary>
        [EnumString("ltSteelBlue")]
        LightSteelBlue,
        ///<summary>
        ///Light Yellow Preset Color.
        ///<para>When the item is serialized out as xml, its value is "ltYellow".</para>
        ///</summary>
        [EnumString("ltYellow")]
        LightYellow,
        ///<summary>
        ///Lime Preset Color.
        ///<para>When the item is serialized out as xml, its value is "lime".</para>
        ///</summary>
        [EnumString("lime")]
        Lime,
        ///<summary>
        ///Lime Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "limeGreen".</para>
        ///</summary>
        [EnumString("limeGreen")]
        LimeGreen,
        ///<summary>
        ///Linen Preset Color.
        ///<para>When the item is serialized out as xml, its value is "linen".</para>
        ///</summary>
        [EnumString("linen")]
        Linen,
        ///<summary>
        ///Magenta Preset Color.
        ///<para>When the item is serialized out as xml, its value is "magenta".</para>
        ///</summary>
        [EnumString("magenta")]
        Magenta,
        ///<summary>
        ///Maroon Preset Color.
        ///<para>When the item is serialized out as xml, its value is "maroon".</para>
        ///</summary>
        [EnumString("maroon")]
        Maroon,
        ///<summary>
        ///Medium Aquamarine Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medAquamarine".</para>
        ///</summary>
        [EnumString("medAquamarine")]
        MedAquamarine,
        ///<summary>
        ///Medium Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medBlue".</para>
        ///</summary>
        [EnumString("medBlue")]
        MediumBlue,
        ///<summary>
        ///Medium Orchid Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medOrchid".</para>
        ///</summary>
        [EnumString("medOrchid")]
        MediumOrchid,
        ///<summary>
        ///Medium Purple Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medPurple".</para>
        ///</summary>
        [EnumString("medPurple")]
        MediumPurple,
        ///<summary>
        ///Medium Sea Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medSeaGreen".</para>
        ///</summary>
        [EnumString("medSeaGreen")]
        MediumSeaGreen,
        ///<summary>
        ///Medium Slate Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medSlateBlue".</para>
        ///</summary>
        [EnumString("medSlateBlue")]
        MediumSlateBlue,
        ///<summary>
        ///Medium Spring Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medSpringGreen".</para>
        ///</summary>
        [EnumString("medSpringGreen")]
        MediumSpringGreen,
        ///<summary>
        ///Medium Turquoise Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medTurquoise".</para>
        ///</summary>
        [EnumString("medTurquoise")]
        MediumTurquoise,
        ///<summary>
        ///Medium Violet Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "medVioletRed".</para>
        ///</summary>
        [EnumString("medVioletRed")]
        MediumVioletRed,
        ///<summary>
        ///Midnight Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "midnightBlue".</para>
        ///</summary>
        [EnumString("midnightBlue")]
        MidnightBlue,
        ///<summary>
        ///Mint Cream Preset Color.
        ///<para>When the item is serialized out as xml, its value is "mintCream".</para>
        ///</summary>
        [EnumString("mintCream")]
        MintCream,
        ///<summary>
        ///Misty Rose Preset Color.
        ///<para>When the item is serialized out as xml, its value is "mistyRose".</para>
        ///</summary>
        [EnumString("mistyRose")]
        MistyRose,
        ///<summary>
        ///Moccasin Preset Color.
        ///<para>When the item is serialized out as xml, its value is "moccasin".</para>
        ///</summary>
        [EnumString("moccasin")]
        Moccasin,
        ///<summary>
        ///Navajo White Preset Color.
        ///<para>When the item is serialized out as xml, its value is "navajoWhite".</para>
        ///</summary>
        [EnumString("navajoWhite")]
        NavajoWhite,
        ///<summary>
        ///Navy Preset Color.
        ///<para>When the item is serialized out as xml, its value is "navy".</para>
        ///</summary>
        [EnumString("navy")]
        Navy,
        ///<summary>
        ///Old Lace Preset Color.
        ///<para>When the item is serialized out as xml, its value is "oldLace".</para>
        ///</summary>
        [EnumString("oldLace")]
        OldLace,
        ///<summary>
        ///Olive Preset Color.
        ///<para>When the item is serialized out as xml, its value is "olive".</para>
        ///</summary>
        [EnumString("olive")]
        Olive,
        ///<summary>
        ///Olive Drab Preset Color.
        ///<para>When the item is serialized out as xml, its value is "oliveDrab".</para>
        ///</summary>
        [EnumString("oliveDrab")]
        OliveDrab,
        ///<summary>
        ///Orange Preset Color.
        ///<para>When the item is serialized out as xml, its value is "orange".</para>
        ///</summary>
        [EnumString("orange")]
        Orange,
        ///<summary>
        ///Orange Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "orangeRed".</para>
        ///</summary>
        [EnumString("orangeRed")]
        OrangeRed,
        ///<summary>
        ///Orchid Preset Color.
        ///<para>When the item is serialized out as xml, its value is "orchid".</para>
        ///</summary>
        [EnumString("orchid")]
        Orchid,
        ///<summary>
        ///Pale Goldenrod Preset Color.
        ///<para>When the item is serialized out as xml, its value is "paleGoldenrod".</para>
        ///</summary>
        [EnumString("paleGoldenrod")]
        PaleGoldenrod,
        ///<summary>
        ///Pale Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "paleGreen".</para>
        ///</summary>
        [EnumString("paleGreen")]
        PaleGreen,
        ///<summary>
        ///Pale Turquoise Preset Color.
        ///<para>When the item is serialized out as xml, its value is "paleTurquoise".</para>
        ///</summary>
        [EnumString("paleTurquoise")]
        PaleTurquoise,
        ///<summary>
        ///Pale Violet Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "paleVioletRed".</para>
        ///</summary>
        [EnumString("paleVioletRed")]
        PaleVioletRed,
        ///<summary>
        ///Papaya Whip Preset Color.
        ///<para>When the item is serialized out as xml, its value is "papayaWhip".</para>
        ///</summary>
        [EnumString("papayaWhip")]
        PapayaWhip,
        ///<summary>
        ///Peach Puff Preset Color.
        ///<para>When the item is serialized out as xml, its value is "peachPuff".</para>
        ///</summary>
        [EnumString("peachPuff")]
        PeachPuff,
        ///<summary>
        ///Peru Preset Color.
        ///<para>When the item is serialized out as xml, its value is "peru".</para>
        ///</summary>
        [EnumString("peru")]
        Peru,
        ///<summary>
        ///Pink Preset Color.
        ///<para>When the item is serialized out as xml, its value is "pink".</para>
        ///</summary>
        [EnumString("pink")]
        Pink,
        ///<summary>
        ///Plum Preset Color.
        ///<para>When the item is serialized out as xml, its value is "plum".</para>
        ///</summary>
        [EnumString("plum")]
        Plum,
        ///<summary>
        ///Powder Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "powderBlue".</para>
        ///</summary>
        [EnumString("powderBlue")]
        PowderBlue,
        ///<summary>
        ///Purple Preset Color.
        ///<para>When the item is serialized out as xml, its value is "purple".</para>
        ///</summary>
        [EnumString("purple")]
        Purple,
        ///<summary>
        ///Red Preset Color.
        ///<para>When the item is serialized out as xml, its value is "red".</para>
        ///</summary>
        [EnumString("red")]
        Red,
        ///<summary>
        ///Rosy Brown Preset Color.
        ///<para>When the item is serialized out as xml, its value is "rosyBrown".</para>
        ///</summary>
        [EnumString("rosyBrown")]
        RosyBrown,
        ///<summary>
        ///Royal Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "royalBlue".</para>
        ///</summary>
        [EnumString("royalBlue")]
        RoyalBlue,
        ///<summary>
        ///Saddle Brown Preset Color.
        ///<para>When the item is serialized out as xml, its value is "saddleBrown".</para>
        ///</summary>
        [EnumString("saddleBrown")]
        SaddleBrown,
        ///<summary>
        ///Salmon Preset Color.
        ///<para>When the item is serialized out as xml, its value is "salmon".</para>
        ///</summary>
        [EnumString("salmon")]
        Salmon,
        ///<summary>
        ///Sandy Brown Preset Color.
        ///<para>When the item is serialized out as xml, its value is "sandyBrown".</para>
        ///</summary>
        [EnumString("sandyBrown")]
        SandyBrown,
        ///<summary>
        ///Sea Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "seaGreen".</para>
        ///</summary>
        [EnumString("seaGreen")]
        SeaGreen,
        ///<summary>
        ///Sea Shell Preset Color.
        ///<para>When the item is serialized out as xml, its value is "seaShell".</para>
        ///</summary>
        [EnumString("seaShell")]
        SeaShell,
        ///<summary>
        ///Sienna Preset Color.
        ///<para>When the item is serialized out as xml, its value is "sienna".</para>
        ///</summary>
        [EnumString("sienna")]
        Sienna,
        ///<summary>
        ///Silver Preset Color.
        ///<para>When the item is serialized out as xml, its value is "silver".</para>
        ///</summary>
        [EnumString("silver")]
        Silver,
        ///<summary>
        ///Sky Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "skyBlue".</para>
        ///</summary>
        [EnumString("skyBlue")]
        SkyBlue,
        ///<summary>
        ///Slate Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "slateBlue".</para>
        ///</summary>
        [EnumString("slateBlue")]
        SlateBlue,
        ///<summary>
        ///Slate Gray Preset Color.
        ///<para>When the item is serialized out as xml, its value is "slateGray".</para>
        ///</summary>
        [EnumString("slateGray")]
        SlateGray,
        ///<summary>
        ///Snow Preset Color.
        ///<para>When the item is serialized out as xml, its value is "snow".</para>
        ///</summary>
        [EnumString("snow")]
        Snow,
        ///<summary>
        ///Spring Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "springGreen".</para>
        ///</summary>
        [EnumString("springGreen")]
        SpringGreen,
        ///<summary>
        ///Steel Blue Preset Color.
        ///<para>When the item is serialized out as xml, its value is "steelBlue".</para>
        ///</summary>
        [EnumString("steelBlue")]
        SteelBlue,
        ///<summary>
        ///Tan Preset Color.
        ///<para>When the item is serialized out as xml, its value is "tan".</para>
        ///</summary>
        [EnumString("tan")]
        Tan,
        ///<summary>
        ///Teal Preset Color.
        ///<para>When the item is serialized out as xml, its value is "teal".</para>
        ///</summary>
        [EnumString("teal")]
        Teal,
        ///<summary>
        ///Thistle Preset Color.
        ///<para>When the item is serialized out as xml, its value is "thistle".</para>
        ///</summary>
        [EnumString("thistle")]
        Thistle,
        ///<summary>
        ///Tomato Preset Color.
        ///<para>When the item is serialized out as xml, its value is "tomato".</para>
        ///</summary>
        [EnumString("tomato")]
        Tomato,
        ///<summary>
        ///Turquoise Preset Color.
        ///<para>When the item is serialized out as xml, its value is "turquoise".</para>
        ///</summary>
        [EnumString("turquoise")]
        Turquoise,
        ///<summary>
        ///Violet Preset Color.
        ///<para>When the item is serialized out as xml, its value is "violet".</para>
        ///</summary>
        [EnumString("violet")]
        Violet,
        ///<summary>
        ///Wheat Preset Color.
        ///<para>When the item is serialized out as xml, its value is "wheat".</para>
        ///</summary>
        [EnumString("wheat")]
        Wheat,
        ///<summary>
        ///White Preset Color.
        ///<para>When the item is serialized out as xml, its value is "white".</para>
        ///</summary>
        [EnumString("white")]
        White,
        ///<summary>
        ///White Smoke Preset Color.
        ///<para>When the item is serialized out as xml, its value is "whiteSmoke".</para>
        ///</summary>
        [EnumString("whiteSmoke")]
        WhiteSmoke,
        ///<summary>
        ///Yellow Preset Color.
        ///<para>When the item is serialized out as xml, its value is "yellow".</para>
        ///</summary>
        [EnumString("yellow")]
        Yellow,
        ///<summary>
        ///Yellow Green Preset Color.
        ///<para>When the item is serialized out as xml, its value is "yellowGreen".</para>
        ///</summary>
        [EnumString("yellowGreen")]
        YellowGreen,
        ///<summary>
        ///darkBlue.
        ///<para>When the item is serialized out as xml, its value is "darkBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkBlue2010,
        ///<summary>
        ///darkCyan.
        ///<para>When the item is serialized out as xml, its value is "darkCyan".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkCyan")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkCyan2010,
        ///<summary>
        ///darkGoldenrod.
        ///<para>When the item is serialized out as xml, its value is "darkGoldenrod".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkGoldenrod")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkGoldenrod2010,
        ///<summary>
        ///darkGray.
        ///<para>When the item is serialized out as xml, its value is "darkGray".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkGray")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkGray2010,
        ///<summary>
        ///darkGrey.
        ///<para>When the item is serialized out as xml, its value is "darkGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkGrey2010,
        ///<summary>
        ///darkGreen.
        ///<para>When the item is serialized out as xml, its value is "darkGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkGreen2010,
        ///<summary>
        ///darkKhaki.
        ///<para>When the item is serialized out as xml, its value is "darkKhaki".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkKhaki")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkKhaki2010,
        ///<summary>
        ///darkMagenta.
        ///<para>When the item is serialized out as xml, its value is "darkMagenta".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkMagenta")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkMagenta2010,
        ///<summary>
        ///darkOliveGreen.
        ///<para>When the item is serialized out as xml, its value is "darkOliveGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkOliveGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkOliveGreen2010,
        ///<summary>
        ///darkOrange.
        ///<para>When the item is serialized out as xml, its value is "darkOrange".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkOrange")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkOrange2010,
        ///<summary>
        ///darkOrchid.
        ///<para>When the item is serialized out as xml, its value is "darkOrchid".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkOrchid")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkOrchid2010,
        ///<summary>
        ///darkRed.
        ///<para>When the item is serialized out as xml, its value is "darkRed".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkRed")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkRed2010,
        ///<summary>
        ///darkSalmon.
        ///<para>When the item is serialized out as xml, its value is "darkSalmon".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkSalmon")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSalmon2010,
        ///<summary>
        ///darkSeaGreen.
        ///<para>When the item is serialized out as xml, its value is "darkSeaGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSeaGreen2010,
        ///<summary>
        ///darkSlateBlue.
        ///<para>When the item is serialized out as xml, its value is "darkSlateBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkSlateBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSlateBlue2010,
        ///<summary>
        ///darkSlateGray.
        ///<para>When the item is serialized out as xml, its value is "darkSlateGray".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkSlateGray")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSlateGray2010,
        ///<summary>
        ///darkSlateGrey.
        ///<para>When the item is serialized out as xml, its value is "darkSlateGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSlateGrey2010,
        ///<summary>
        ///darkTurquoise.
        ///<para>When the item is serialized out as xml, its value is "darkTurquoise".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkTurquoise")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkTurquoise2010,
        ///<summary>
        ///darkViolet.
        ///<para>When the item is serialized out as xml, its value is "darkViolet".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("darkViolet")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkViolet2010,
        ///<summary>
        ///lightBlue.
        ///<para>When the item is serialized out as xml, its value is "lightBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightBlue2010,
        ///<summary>
        ///lightCoral.
        ///<para>When the item is serialized out as xml, its value is "lightCoral".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightCoral")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightCoral2010,
        ///<summary>
        ///lightCyan.
        ///<para>When the item is serialized out as xml, its value is "lightCyan".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightCyan")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightCyan2010,
        ///<summary>
        ///lightGoldenrodYellow.
        ///<para>When the item is serialized out as xml, its value is "lightGoldenrodYellow".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightGoldenrodYellow")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightGoldenrodYellow2010,
        ///<summary>
        ///lightGray.
        ///<para>When the item is serialized out as xml, its value is "lightGray".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightGray")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightGray2010,
        ///<summary>
        ///lightGrey.
        ///<para>When the item is serialized out as xml, its value is "lightGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightGrey2010,
        ///<summary>
        ///lightGreen.
        ///<para>When the item is serialized out as xml, its value is "lightGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightGreen2010,
        ///<summary>
        ///lightPink.
        ///<para>When the item is serialized out as xml, its value is "lightPink".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightPink")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightPink2010,
        ///<summary>
        ///lightSalmon.
        ///<para>When the item is serialized out as xml, its value is "lightSalmon".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSalmon")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSalmon2010,
        ///<summary>
        ///lightSeaGreen.
        ///<para>When the item is serialized out as xml, its value is "lightSeaGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSeaGreen2010,
        ///<summary>
        ///lightSkyBlue.
        ///<para>When the item is serialized out as xml, its value is "lightSkyBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSkyBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSkyBlue2010,
        ///<summary>
        ///lightSlateGray.
        ///<para>When the item is serialized out as xml, its value is "lightSlateGray".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSlateGray")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSlateGray2010,
        ///<summary>
        ///lightSlateGrey.
        ///<para>When the item is serialized out as xml, its value is "lightSlateGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSlateGrey2010,
        ///<summary>
        ///lightSteelBlue.
        ///<para>When the item is serialized out as xml, its value is "lightSteelBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightSteelBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSteelBlue2010,
        ///<summary>
        ///lightYellow.
        ///<para>When the item is serialized out as xml, its value is "lightYellow".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("lightYellow")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightYellow2010,
        ///<summary>
        ///mediumAquamarine.
        ///<para>When the item is serialized out as xml, its value is "mediumAquamarine".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumAquamarine")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumAquamarine2010,
        ///<summary>
        ///mediumBlue.
        ///<para>When the item is serialized out as xml, its value is "mediumBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumBlue2010,
        ///<summary>
        ///mediumOrchid.
        ///<para>When the item is serialized out as xml, its value is "mediumOrchid".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumOrchid")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumOrchid2010,
        ///<summary>
        ///mediumPurple.
        ///<para>When the item is serialized out as xml, its value is "mediumPurple".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumPurple")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumPurple2010,
        ///<summary>
        ///mediumSeaGreen.
        ///<para>When the item is serialized out as xml, its value is "mediumSeaGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumSeaGreen2010,
        ///<summary>
        ///mediumSlateBlue.
        ///<para>When the item is serialized out as xml, its value is "mediumSlateBlue".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumSlateBlue")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumSlateBlue2010,
        ///<summary>
        ///mediumSpringGreen.
        ///<para>When the item is serialized out as xml, its value is "mediumSpringGreen".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumSpringGreen")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumSpringGreen2010,
        ///<summary>
        ///mediumTurquoise.
        ///<para>When the item is serialized out as xml, its value is "mediumTurquoise".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumTurquoise")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumTurquoise2010,
        ///<summary>
        ///mediumVioletRed.
        ///<para>When the item is serialized out as xml, its value is "mediumVioletRed".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("mediumVioletRed")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        MediumVioletRed2010,
        ///<summary>
        ///dkGrey.
        ///<para>When the item is serialized out as xml, its value is "dkGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("dkGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkGrey,
        ///<summary>
        ///dimGrey.
        ///<para>When the item is serialized out as xml, its value is "dimGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("dimGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DimGrey,
        ///<summary>
        ///dkSlateGrey.
        ///<para>When the item is serialized out as xml, its value is "dkSlateGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("dkSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        DarkSlateGrey,
        ///<summary>
        ///grey.
        ///<para>When the item is serialized out as xml, its value is "grey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("grey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        Grey,
        ///<summary>
        ///ltGrey.
        ///<para>When the item is serialized out as xml, its value is "ltGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("ltGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightGrey,
        ///<summary>
        ///ltSlateGrey.
        ///<para>When the item is serialized out as xml, its value is "ltSlateGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("ltSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        LightSlateGrey,
        ///<summary>
        ///slateGrey.
        ///<para>When the item is serialized out as xml, its value is "slateGrey".</para>
        ///<para>This item is only available in Office2010.</para>
        ///</summary>
        [EnumString("slateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2010)]
        SlateGrey,
    }
}
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
using System;
using System.Collections.Generic;
using System.IO.Packaging;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Office2013.Word.Drawing;
using DocumentFormat.OpenXml.Office2013.Theme;
using DocumentFormat.OpenXml.Office2013.Drawing;
using DocumentFormat.OpenXml.Office2010.Drawing;
using DocumentFormat.OpenXml.Office2010.Drawing.Diagram;
using DocumentFormat.OpenXml.Office.Drawing;

namespace DocumentFormat.OpenXml.Drawing
{
/// <summary>
/// <para>Audio from CD.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:audioCd.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>StartTime &lt;a:st></description></item>
///<item><description>EndTime &lt;a:end></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(StartTime))]
    [ChildElementInfo(typeof(EndTime))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "audioCd")]
[Id(ElementTypeIdConst)]
public partial class AudioFromCD : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10001;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AudioFromCD class.
    /// </summary>
    public AudioFromCD():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AudioFromCD class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AudioFromCD(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AudioFromCD class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AudioFromCD(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AudioFromCD class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AudioFromCD(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Audio Start Time.</para>
    /// <para> Represents the following element tag in the schema: a:st </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public StartTime StartTime
	{
        get => GetElement<StartTime>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Audio End Time.</para>
    /// <para> Represents the following element tag in the schema: a:end </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public EndTime EndTime
	{
        get => GetElement<EndTime>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromCD>(deep);

}
/// <summary>
/// <para>Audio from WAV File.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:wavAudioFile.</para>
/// </summary>

[SchemaAttr(10, "wavAudioFile")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class WaveAudioFile : EmbeddedWavAudioFileType
{
    internal const int ElementTypeIdConst = 10002;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the WaveAudioFile class.
    /// </summary>
    public WaveAudioFile():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WaveAudioFile>(deep);

}
/// <summary>
/// <para>Hyperlink Sound.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:snd.</para>
/// </summary>

[SchemaAttr(10, "snd")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HyperlinkSound : EmbeddedWavAudioFileType
{
    internal const int ElementTypeIdConst = 10165;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HyperlinkSound class.
    /// </summary>
    public HyperlinkSound():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkSound>(deep);

}
/// <summary>
/// Defines the EmbeddedWavAudioFileType class.
/// </summary>


public abstract partial class EmbeddedWavAudioFileType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Embedded Audio File Relationship ID.</para>
    /// <para>Represents the following attribute in the schema: r:embed </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "embed")]
    [Index(0)]
    public StringValue Embed { get; set; }
	
    /// <summary>
    /// <para> Sound Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(1)]
    public StringValue Name { get; set; }
	
    /// <summary>
    /// <para> Recognized Built-In Sound.</para>
    /// <para>Represents the following attribute in the schema: builtIn </para>
    /// </summary>
    [SchemaAttr(0, "builtIn")]
    [Index(2)]
    public BooleanValue BuiltIn { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the EmbeddedWavAudioFileType class.
    /// </summary>
    protected EmbeddedWavAudioFileType(){}
    
    
    
}
/// <summary>
/// <para>Audio from File.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:audioFile.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "audioFile")]
[Id(ElementTypeIdConst)]
public partial class AudioFromFile : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10003;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Linked Relationship ID.</para>
    /// <para>Represents the following attribute in the schema: r:link </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "link")]
    [Index(0)]
    public StringValue Link { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AudioFromFile class.
    /// </summary>
    public AudioFromFile():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AudioFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AudioFromFile(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AudioFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AudioFromFile(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AudioFromFile class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AudioFromFile(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromFile>(deep);

}
/// <summary>
/// <para>Video from File.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:videoFile.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "videoFile")]
[Id(ElementTypeIdConst)]
public partial class VideoFromFile : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10004;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Linked Relationship ID.</para>
    /// <para>Represents the following attribute in the schema: r:link </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "link")]
    [Index(0)]
    public StringValue Link { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the VideoFromFile class.
    /// </summary>
    public VideoFromFile():base(){}
    
        /// <summary>
    ///Initializes a new instance of the VideoFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VideoFromFile(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the VideoFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VideoFromFile(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the VideoFromFile class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public VideoFromFile(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VideoFromFile>(deep);

}
/// <summary>
/// <para>QuickTime from File.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:quickTimeFile.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "quickTimeFile")]
[Id(ElementTypeIdConst)]
public partial class QuickTimeFromFile : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10005;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Linked Relationship ID.</para>
    /// <para>Represents the following attribute in the schema: r:link </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "link")]
    [Index(0)]
    public StringValue Link { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the QuickTimeFromFile class.
    /// </summary>
    public QuickTimeFromFile():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QuickTimeFromFile(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QuickTimeFromFile(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QuickTimeFromFile class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QuickTimeFromFile(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuickTimeFromFile>(deep);

}
/// <summary>
/// <para>Tint.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tint.</para>
/// </summary>

[SchemaAttr(10, "tint")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Tint : PositiveFixedPercentageType
{
    internal const int ElementTypeIdConst = 10006;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Tint class.
    /// </summary>
    public Tint():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tint>(deep);

}
/// <summary>
/// <para>Shade.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:shade.</para>
/// </summary>

[SchemaAttr(10, "shade")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Shade : PositiveFixedPercentageType
{
    internal const int ElementTypeIdConst = 10007;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Shade class.
    /// </summary>
    public Shade():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shade>(deep);

}
/// <summary>
/// <para>Alpha.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alpha.</para>
/// </summary>

[SchemaAttr(10, "alpha")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Alpha : PositiveFixedPercentageType
{
    internal const int ElementTypeIdConst = 10011;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Alpha class.
    /// </summary>
    public Alpha():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Alpha>(deep);

}
/// <summary>
/// Defines the PositiveFixedPercentageType class.
/// </summary>


public abstract partial class PositiveFixedPercentageType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the PositiveFixedPercentageType class.
    /// </summary>
    protected PositiveFixedPercentageType(){}
    
    
    
}
/// <summary>
/// <para>Complement.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:comp.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "comp")]
[Id(ElementTypeIdConst)]
public partial class Complement : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10008;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Complement class.
    /// </summary>
    public Complement():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Complement>(deep);

}
/// <summary>
/// <para>Inverse.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:inv.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "inv")]
[Id(ElementTypeIdConst)]
public partial class Inverse : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10009;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Inverse class.
    /// </summary>
    public Inverse():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inverse>(deep);

}
/// <summary>
/// <para>Gray.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gray.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gray")]
[Id(ElementTypeIdConst)]
public partial class Gray : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10010;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Gray class.
    /// </summary>
    public Gray():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gray>(deep);

}
/// <summary>
/// <para>Alpha Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaOff.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaOff")]
[Id(ElementTypeIdConst)]
public partial class AlphaOffset : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10012;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AlphaOffset class.
    /// </summary>
    public AlphaOffset():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOffset>(deep);

}
/// <summary>
/// <para>Alpha Modulation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaMod.</para>
/// </summary>

[SchemaAttr(10, "alphaMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class AlphaModulation : PositivePercentageType
{
    internal const int ElementTypeIdConst = 10013;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the AlphaModulation class.
    /// </summary>
    public AlphaModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulation>(deep);

}
/// <summary>
/// <para>Hue Modulate.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hueMod.</para>
/// </summary>

[SchemaAttr(10, "hueMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HueModulation : PositivePercentageType
{
    internal const int ElementTypeIdConst = 10016;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HueModulation class.
    /// </summary>
    public HueModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueModulation>(deep);

}
/// <summary>
/// Defines the PositivePercentageType class.
/// </summary>


public abstract partial class PositivePercentageType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the PositivePercentageType class.
    /// </summary>
    protected PositivePercentageType(){}
    
    
    
}
/// <summary>
/// <para>Hue.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hue.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "hue")]
[Id(ElementTypeIdConst)]
public partial class Hue : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10014;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Hue class.
    /// </summary>
    public Hue():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hue>(deep);

}
/// <summary>
/// <para>Hue Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hueOff.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "hueOff")]
[Id(ElementTypeIdConst)]
public partial class HueOffset : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10015;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the HueOffset class.
    /// </summary>
    public HueOffset():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueOffset>(deep);

}
/// <summary>
/// <para>Saturation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sat.</para>
/// </summary>

[SchemaAttr(10, "sat")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Saturation : PercentageType
{
    internal const int ElementTypeIdConst = 10017;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Saturation class.
    /// </summary>
    public Saturation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Saturation>(deep);

}
/// <summary>
/// <para>Saturation Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:satOff.</para>
/// </summary>

[SchemaAttr(10, "satOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SaturationOffset : PercentageType
{
    internal const int ElementTypeIdConst = 10018;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SaturationOffset class.
    /// </summary>
    public SaturationOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationOffset>(deep);

}
/// <summary>
/// <para>Saturation Modulation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:satMod.</para>
/// </summary>

[SchemaAttr(10, "satMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SaturationModulation : PercentageType
{
    internal const int ElementTypeIdConst = 10019;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SaturationModulation class.
    /// </summary>
    public SaturationModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationModulation>(deep);

}
/// <summary>
/// <para>Luminance.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lum.</para>
/// </summary>

[SchemaAttr(10, "lum")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Luminance : PercentageType
{
    internal const int ElementTypeIdConst = 10020;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Luminance class.
    /// </summary>
    public Luminance():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Luminance>(deep);

}
/// <summary>
/// <para>Luminance Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lumOff.</para>
/// </summary>

[SchemaAttr(10, "lumOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LuminanceOffset : PercentageType
{
    internal const int ElementTypeIdConst = 10021;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LuminanceOffset class.
    /// </summary>
    public LuminanceOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceOffset>(deep);

}
/// <summary>
/// <para>Luminance Modulation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lumMod.</para>
/// </summary>

[SchemaAttr(10, "lumMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LuminanceModulation : PercentageType
{
    internal const int ElementTypeIdConst = 10022;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LuminanceModulation class.
    /// </summary>
    public LuminanceModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceModulation>(deep);

}
/// <summary>
/// <para>Red.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:red.</para>
/// </summary>

[SchemaAttr(10, "red")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Red : PercentageType
{
    internal const int ElementTypeIdConst = 10023;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Red class.
    /// </summary>
    public Red():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Red>(deep);

}
/// <summary>
/// <para>Red Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:redOff.</para>
/// </summary>

[SchemaAttr(10, "redOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RedOffset : PercentageType
{
    internal const int ElementTypeIdConst = 10024;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the RedOffset class.
    /// </summary>
    public RedOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedOffset>(deep);

}
/// <summary>
/// <para>Red Modulation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:redMod.</para>
/// </summary>

[SchemaAttr(10, "redMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RedModulation : PercentageType
{
    internal const int ElementTypeIdConst = 10025;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the RedModulation class.
    /// </summary>
    public RedModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedModulation>(deep);

}
/// <summary>
/// <para>Green.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:green.</para>
/// </summary>

[SchemaAttr(10, "green")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Green : PercentageType
{
    internal const int ElementTypeIdConst = 10026;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Green class.
    /// </summary>
    public Green():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Green>(deep);

}
/// <summary>
/// <para>Green Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:greenOff.</para>
/// </summary>

[SchemaAttr(10, "greenOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class GreenOffset : PercentageType
{
    internal const int ElementTypeIdConst = 10027;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the GreenOffset class.
    /// </summary>
    public GreenOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenOffset>(deep);

}
/// <summary>
/// <para>Green Modification.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:greenMod.</para>
/// </summary>

[SchemaAttr(10, "greenMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class GreenModulation : PercentageType
{
    internal const int ElementTypeIdConst = 10028;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the GreenModulation class.
    /// </summary>
    public GreenModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenModulation>(deep);

}
/// <summary>
/// <para>Blue.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blue.</para>
/// </summary>

[SchemaAttr(10, "blue")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Blue : PercentageType
{
    internal const int ElementTypeIdConst = 10029;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Blue class.
    /// </summary>
    public Blue():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blue>(deep);

}
/// <summary>
/// <para>Blue Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blueOff.</para>
/// </summary>

[SchemaAttr(10, "blueOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BlueOffset : PercentageType
{
    internal const int ElementTypeIdConst = 10030;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BlueOffset class.
    /// </summary>
    public BlueOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueOffset>(deep);

}
/// <summary>
/// <para>Blue Modification.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blueMod.</para>
/// </summary>

[SchemaAttr(10, "blueMod")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BlueModulation : PercentageType
{
    internal const int ElementTypeIdConst = 10031;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BlueModulation class.
    /// </summary>
    public BlueModulation():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueModulation>(deep);

}
/// <summary>
/// Defines the PercentageType class.
/// </summary>


public abstract partial class PercentageType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the PercentageType class.
    /// </summary>
    protected PercentageType(){}
    
    
    
}
/// <summary>
/// <para>Gamma.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gamma.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gamma")]
[Id(ElementTypeIdConst)]
public partial class Gamma : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10032;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Gamma class.
    /// </summary>
    public Gamma():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gamma>(deep);

}
/// <summary>
/// <para>Inverse Gamma.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:invGamma.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "invGamma")]
[Id(ElementTypeIdConst)]
public partial class InverseGamma : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10033;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the InverseGamma class.
    /// </summary>
    public InverseGamma():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InverseGamma>(deep);

}
/// <summary>
/// <para>Extension.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
/// </list>
/// </remarks>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class Extension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10034;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Extension class.
    /// </summary>
    public Extension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Extension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Extension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Extension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Extension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Extension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Extension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extension>(deep);

}
/// <summary>
/// <para>RGB Color Model - Percentage Variant.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:scrgbClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "scrgbClr")]
[Id(ElementTypeIdConst)]
public partial class RgbColorModelPercentage : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10035;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Red.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r")]
    [Index(0)]
    public Int32Value RedPortion { get; set; }
	
    /// <summary>
    /// <para> Green.</para>
    /// <para>Represents the following attribute in the schema: g </para>
    /// </summary>
    [SchemaAttr(0, "g")]
    [Index(1)]
    public Int32Value GreenPortion { get; set; }
	
    /// <summary>
    /// <para> Blue.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b")]
    [Index(2)]
    public Int32Value BluePortion { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the RgbColorModelPercentage class.
    /// </summary>
    public RgbColorModelPercentage():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RgbColorModelPercentage(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RgbColorModelPercentage(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RgbColorModelPercentage class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RgbColorModelPercentage(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelPercentage>(deep);

}
/// <summary>
/// <para>RGB Color Model - Hex Variant.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:srgbClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "srgbClr")]
[Id(ElementTypeIdConst)]
public partial class RgbColorModelHex : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10036;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public HexBinaryValue Val { get; set; }
	
    /// <summary>
    /// <para> legacySpreadsheetColorIndex.</para>
    /// <para>Represents the following attribute in the schema: a14:legacySpreadsheetColorIndex </para>
    /// </summary>
///<remark> xmlns:a14=http://schemas.microsoft.com/office/drawing/2010/main
///</remark>
    [SchemaAttr(48, "legacySpreadsheetColorIndex")]
    [Index(1)]
    public Int32Value LegacySpreadsheetColorIndex { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the RgbColorModelHex class.
    /// </summary>
    public RgbColorModelHex():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RgbColorModelHex class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RgbColorModelHex(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RgbColorModelHex class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RgbColorModelHex(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RgbColorModelHex class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RgbColorModelHex(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelHex>(deep);

}
/// <summary>
/// <para>Hue, Saturation, Luminance Color Model.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hslClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "hslClr")]
[Id(ElementTypeIdConst)]
public partial class HslColor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10037;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Hue.</para>
    /// <para>Represents the following attribute in the schema: hue </para>
    /// </summary>
    [SchemaAttr(0, "hue")]
    [Index(0)]
    public Int32Value HueValue { get; set; }
	
    /// <summary>
    /// <para> Saturation.</para>
    /// <para>Represents the following attribute in the schema: sat </para>
    /// </summary>
    [SchemaAttr(0, "sat")]
    [Index(1)]
    public Int32Value SatValue { get; set; }
	
    /// <summary>
    /// <para> Luminance.</para>
    /// <para>Represents the following attribute in the schema: lum </para>
    /// </summary>
    [SchemaAttr(0, "lum")]
    [Index(2)]
    public Int32Value LumValue { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the HslColor class.
    /// </summary>
    public HslColor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the HslColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HslColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HslColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HslColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HslColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HslColor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HslColor>(deep);

}
/// <summary>
/// <para>System Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sysClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "sysClr")]
[Id(ElementTypeIdConst)]
public partial class SystemColor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10038;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.SystemColorValues> Val { get; set; }
	
    /// <summary>
    /// <para> Last Color.</para>
    /// <para>Represents the following attribute in the schema: lastClr </para>
    /// </summary>
    [SchemaAttr(0, "lastClr")]
    [Index(1)]
    public HexBinaryValue LastColor { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SystemColor class.
    /// </summary>
    public SystemColor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SystemColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SystemColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SystemColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SystemColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SystemColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SystemColor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SystemColor>(deep);

}
/// <summary>
/// <para>Scheme Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:schemeClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "schemeClr")]
[Id(ElementTypeIdConst)]
public partial class SchemeColor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10039;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.SchemeColorValues> Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SchemeColor class.
    /// </summary>
    public SchemeColor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SchemeColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SchemeColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SchemeColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SchemeColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SchemeColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SchemeColor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SchemeColor>(deep);

}
/// <summary>
/// <para>Preset Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:prstClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tint &lt;a:tint></description></item>
///<item><description>Shade &lt;a:shade></description></item>
///<item><description>Complement &lt;a:comp></description></item>
///<item><description>Inverse &lt;a:inv></description></item>
///<item><description>Gray &lt;a:gray></description></item>
///<item><description>Alpha &lt;a:alpha></description></item>
///<item><description>AlphaOffset &lt;a:alphaOff></description></item>
///<item><description>AlphaModulation &lt;a:alphaMod></description></item>
///<item><description>Hue &lt;a:hue></description></item>
///<item><description>HueOffset &lt;a:hueOff></description></item>
///<item><description>HueModulation &lt;a:hueMod></description></item>
///<item><description>Saturation &lt;a:sat></description></item>
///<item><description>SaturationOffset &lt;a:satOff></description></item>
///<item><description>SaturationModulation &lt;a:satMod></description></item>
///<item><description>Luminance &lt;a:lum></description></item>
///<item><description>LuminanceOffset &lt;a:lumOff></description></item>
///<item><description>LuminanceModulation &lt;a:lumMod></description></item>
///<item><description>Red &lt;a:red></description></item>
///<item><description>RedOffset &lt;a:redOff></description></item>
///<item><description>RedModulation &lt;a:redMod></description></item>
///<item><description>Green &lt;a:green></description></item>
///<item><description>GreenOffset &lt;a:greenOff></description></item>
///<item><description>GreenModulation &lt;a:greenMod></description></item>
///<item><description>Blue &lt;a:blue></description></item>
///<item><description>BlueOffset &lt;a:blueOff></description></item>
///<item><description>BlueModulation &lt;a:blueMod></description></item>
///<item><description>Gamma &lt;a:gamma></description></item>
///<item><description>InverseGamma &lt;a:invGamma></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tint))]
    [ChildElementInfo(typeof(Shade))]
    [ChildElementInfo(typeof(Complement))]
    [ChildElementInfo(typeof(Inverse))]
    [ChildElementInfo(typeof(Gray))]
    [ChildElementInfo(typeof(Alpha))]
    [ChildElementInfo(typeof(AlphaOffset))]
    [ChildElementInfo(typeof(AlphaModulation))]
    [ChildElementInfo(typeof(Hue))]
    [ChildElementInfo(typeof(HueOffset))]
    [ChildElementInfo(typeof(HueModulation))]
    [ChildElementInfo(typeof(Saturation))]
    [ChildElementInfo(typeof(SaturationOffset))]
    [ChildElementInfo(typeof(SaturationModulation))]
    [ChildElementInfo(typeof(Luminance))]
    [ChildElementInfo(typeof(LuminanceOffset))]
    [ChildElementInfo(typeof(LuminanceModulation))]
    [ChildElementInfo(typeof(Red))]
    [ChildElementInfo(typeof(RedOffset))]
    [ChildElementInfo(typeof(RedModulation))]
    [ChildElementInfo(typeof(Green))]
    [ChildElementInfo(typeof(GreenOffset))]
    [ChildElementInfo(typeof(GreenModulation))]
    [ChildElementInfo(typeof(Blue))]
    [ChildElementInfo(typeof(BlueOffset))]
    [ChildElementInfo(typeof(BlueModulation))]
    [ChildElementInfo(typeof(Gamma))]
    [ChildElementInfo(typeof(InverseGamma))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "prstClr")]
[Id(ElementTypeIdConst)]
public partial class PresetColor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10040;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetColorValues> Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PresetColor class.
    /// </summary>
    public PresetColor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PresetColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PresetColor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetColor>(deep);

}
/// <summary>
/// <para>Apply 3D shape properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sp3d.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>BevelTop &lt;a:bevelT></description></item>
///<item><description>BevelBottom &lt;a:bevelB></description></item>
///<item><description>ExtrusionColor &lt;a:extrusionClr></description></item>
///<item><description>ContourColor &lt;a:contourClr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(BevelTop))]
    [ChildElementInfo(typeof(BevelBottom))]
    [ChildElementInfo(typeof(ExtrusionColor))]
    [ChildElementInfo(typeof(ContourColor))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "sp3d")]
[Id(ElementTypeIdConst)]
public partial class Shape3DType : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10041;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Shape Depth.</para>
    /// <para>Represents the following attribute in the schema: z </para>
    /// </summary>
    [SchemaAttr(0, "z")]
    [Index(0)]
    public Int64Value Z { get; set; }
	
    /// <summary>
    /// <para> Extrusion Height.</para>
    /// <para>Represents the following attribute in the schema: extrusionH </para>
    /// </summary>
    [SchemaAttr(0, "extrusionH")]
    [Index(1)]
    public Int64Value ExtrusionHeight { get; set; }
	
    /// <summary>
    /// <para> Contour Width.</para>
    /// <para>Represents the following attribute in the schema: contourW </para>
    /// </summary>
    [SchemaAttr(0, "contourW")]
    [Index(2)]
    public Int64Value ContourWidth { get; set; }
	
    /// <summary>
    /// <para> Preset Material Type.</para>
    /// <para>Represents the following attribute in the schema: prstMaterial </para>
    /// </summary>
    [SchemaAttr(0, "prstMaterial")]
    [Index(3)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues> PresetMaterial { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Shape3DType class.
    /// </summary>
    public Shape3DType():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Shape3DType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Shape3DType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Shape3DType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Shape3DType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Shape3DType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Shape3DType(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Top Bevel.</para>
    /// <para> Represents the following element tag in the schema: a:bevelT </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public BevelTop BevelTop
	{
        get => GetElement<BevelTop>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Bottom Bevel.</para>
    /// <para> Represents the following element tag in the schema: a:bevelB </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public BevelBottom BevelBottom
	{
        get => GetElement<BevelBottom>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Extrusion Color.</para>
    /// <para> Represents the following element tag in the schema: a:extrusionClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtrusionColor ExtrusionColor
	{
        get => GetElement<ExtrusionColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Contour Color.</para>
    /// <para> Represents the following element tag in the schema: a:contourClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ContourColor ContourColor
	{
        get => GetElement<ContourColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape3DType>(deep);

}
/// <summary>
/// <para>No text in 3D scene.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:flatTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "flatTx")]
[Id(ElementTypeIdConst)]
public partial class FlatText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10042;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Z Coordinate.</para>
    /// <para>Represents the following attribute in the schema: z </para>
    /// </summary>
    [SchemaAttr(0, "z")]
    [Index(0)]
    public Int64Value Z { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the FlatText class.
    /// </summary>
    public FlatText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FlatText>(deep);

}
/// <summary>
/// <para>Linear Gradient Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lin.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lin")]
[Id(ElementTypeIdConst)]
public partial class LinearGradientFill : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10043;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Angle.</para>
    /// <para>Represents the following attribute in the schema: ang </para>
    /// </summary>
    [SchemaAttr(0, "ang")]
    [Index(0)]
    public Int32Value Angle { get; set; }
	
    /// <summary>
    /// <para> Scaled.</para>
    /// <para>Represents the following attribute in the schema: scaled </para>
    /// </summary>
    [SchemaAttr(0, "scaled")]
    [Index(1)]
    public BooleanValue Scaled { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the LinearGradientFill class.
    /// </summary>
    public LinearGradientFill():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinearGradientFill>(deep);

}
/// <summary>
/// <para>Path Gradient.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:path.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FillToRectangle &lt;a:fillToRect></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FillToRectangle))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "path")]
[Id(ElementTypeIdConst)]
public partial class PathGradientFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10044;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Gradient Fill Path.</para>
    /// <para>Represents the following attribute in the schema: path </para>
    /// </summary>
    [SchemaAttr(0, "path")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PathShadeValues> Path { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PathGradientFill class.
    /// </summary>
    public PathGradientFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PathGradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PathGradientFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PathGradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PathGradientFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PathGradientFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PathGradientFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Fill To Rectangle.</para>
    /// <para> Represents the following element tag in the schema: a:fillToRect </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public FillToRectangle FillToRectangle
	{
        get => GetElement<FillToRectangle>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathGradientFill>(deep);

}
/// <summary>
/// <para>Tile.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tile.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tile")]
[Id(ElementTypeIdConst)]
public partial class Tile : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10045;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Horizontal Offset.</para>
    /// <para>Represents the following attribute in the schema: tx </para>
    /// </summary>
    [SchemaAttr(0, "tx")]
    [Index(0)]
    public Int64Value HorizontalOffset { get; set; }
	
    /// <summary>
    /// <para> Vertical Offset.</para>
    /// <para>Represents the following attribute in the schema: ty </para>
    /// </summary>
    [SchemaAttr(0, "ty")]
    [Index(1)]
    public Int64Value VerticalOffset { get; set; }
	
    /// <summary>
    /// <para> Horizontal Ratio.</para>
    /// <para>Represents the following attribute in the schema: sx </para>
    /// </summary>
    [SchemaAttr(0, "sx")]
    [Index(2)]
    public Int32Value HorizontalRatio { get; set; }
	
    /// <summary>
    /// <para> Vertical Ratio.</para>
    /// <para>Represents the following attribute in the schema: sy </para>
    /// </summary>
    [SchemaAttr(0, "sy")]
    [Index(3)]
    public Int32Value VerticalRatio { get; set; }
	
    /// <summary>
    /// <para> Tile Flipping.</para>
    /// <para>Represents the following attribute in the schema: flip </para>
    /// </summary>
    [SchemaAttr(0, "flip")]
    [Index(4)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues> Flip { get; set; }
	
    /// <summary>
    /// <para> Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(5)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Tile class.
    /// </summary>
    public Tile():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tile>(deep);

}
/// <summary>
/// <para>Stretch.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:stretch.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FillRectangle &lt;a:fillRect></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FillRectangle))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "stretch")]
[Id(ElementTypeIdConst)]
public partial class Stretch : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10046;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Stretch class.
    /// </summary>
    public Stretch():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Stretch class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Stretch(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Stretch class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Stretch(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Stretch class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Stretch(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Fill Rectangle.</para>
    /// <para> Represents the following element tag in the schema: a:fillRect </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public FillRectangle FillRectangle
	{
        get => GetElement<FillRectangle>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Stretch>(deep);

}
/// <summary>
/// <para>Defines the NoFill Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:noFill.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "noFill")]
[Id(ElementTypeIdConst)]
public partial class NoFill : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10047;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NoFill class.
    /// </summary>
    public NoFill():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoFill>(deep);

}
/// <summary>
/// <para>Defines the SolidFill Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:solidFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "solidFill")]
[Id(ElementTypeIdConst)]
public partial class SolidFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10048;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the SolidFill class.
    /// </summary>
    public SolidFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SolidFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SolidFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SolidFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SolidFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SolidFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SolidFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SolidFill>(deep);

}
/// <summary>
/// <para>Defines the GradientFill Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gradFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GradientStopList &lt;a:gsLst></description></item>
///<item><description>LinearGradientFill &lt;a:lin></description></item>
///<item><description>PathGradientFill &lt;a:path></description></item>
///<item><description>TileRectangle &lt;a:tileRect></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GradientStopList))]
    [ChildElementInfo(typeof(LinearGradientFill))]
    [ChildElementInfo(typeof(PathGradientFill))]
    [ChildElementInfo(typeof(TileRectangle))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gradFill")]
[Id(ElementTypeIdConst)]
public partial class GradientFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10049;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Tile Flip.</para>
    /// <para>Represents the following attribute in the schema: flip </para>
    /// </summary>
    [SchemaAttr(0, "flip")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TileFlipValues> Flip { get; set; }
	
    /// <summary>
    /// <para> Rotate With Shape.</para>
    /// <para>Represents the following attribute in the schema: rotWithShape </para>
    /// </summary>
    [SchemaAttr(0, "rotWithShape")]
    [Index(1)]
    public BooleanValue RotateWithShape { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GradientFill class.
    /// </summary>
    public GradientFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GradientFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Gradient Stop List.</para>
    /// <para> Represents the following element tag in the schema: a:gsLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public GradientStopList GradientStopList
	{
        get => GetElement<GradientStopList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientFill>(deep);

}
/// <summary>
/// <para>Defines the BlipFill Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blipFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Blip &lt;a:blip></description></item>
///<item><description>SourceRectangle &lt;a:srcRect></description></item>
///<item><description>Tile &lt;a:tile></description></item>
///<item><description>Stretch &lt;a:stretch></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Blip))]
    [ChildElementInfo(typeof(SourceRectangle))]
    [ChildElementInfo(typeof(Tile))]
    [ChildElementInfo(typeof(Stretch))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "blipFill")]
[Id(ElementTypeIdConst)]
public partial class BlipFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10050;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> DPI Setting.</para>
    /// <para>Represents the following attribute in the schema: dpi </para>
    /// </summary>
    [SchemaAttr(0, "dpi")]
    [Index(0)]
    public UInt32Value Dpi { get; set; }
	
    /// <summary>
    /// <para> Rotate With Shape.</para>
    /// <para>Represents the following attribute in the schema: rotWithShape </para>
    /// </summary>
    [SchemaAttr(0, "rotWithShape")]
    [Index(1)]
    public BooleanValue RotateWithShape { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BlipFill class.
    /// </summary>
    public BlipFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BlipFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BlipFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Blip.</para>
    /// <para> Represents the following element tag in the schema: a:blip </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Blip Blip
	{
        get => GetElement<Blip>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Source Rectangle.</para>
    /// <para> Represents the following element tag in the schema: a:srcRect </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SourceRectangle SourceRectangle
	{
        get => GetElement<SourceRectangle>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipFill>(deep);

}
/// <summary>
/// <para>Pattern Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pattFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ForegroundColor &lt;a:fgClr></description></item>
///<item><description>BackgroundColor &lt;a:bgClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ForegroundColor))]
    [ChildElementInfo(typeof(BackgroundColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "pattFill")]
[Id(ElementTypeIdConst)]
public partial class PatternFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10051;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Pattern.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetPatternValues> Preset { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PatternFill class.
    /// </summary>
    public PatternFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PatternFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PatternFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PatternFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PatternFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PatternFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PatternFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Foreground color.</para>
    /// <para> Represents the following element tag in the schema: a:fgClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ForegroundColor ForegroundColor
	{
        get => GetElement<ForegroundColor>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Background color.</para>
    /// <para> Represents the following element tag in the schema: a:bgClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public BackgroundColor BackgroundColor
	{
        get => GetElement<BackgroundColor>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatternFill>(deep);

}
/// <summary>
/// <para>Group Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:grpFill.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "grpFill")]
[Id(ElementTypeIdConst)]
public partial class GroupFill : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10052;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the GroupFill class.
    /// </summary>
    public GroupFill():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupFill>(deep);

}
/// <summary>
/// <para>Effect Container.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cont.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectContainer &lt;a:cont></description></item>
///<item><description>Effect &lt;a:effect></description></item>
///<item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
///<item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
///<item><description>AlphaFloor &lt;a:alphaFloor></description></item>
///<item><description>AlphaInverse &lt;a:alphaInv></description></item>
///<item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
///<item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
///<item><description>AlphaOutset &lt;a:alphaOutset></description></item>
///<item><description>AlphaReplace &lt;a:alphaRepl></description></item>
///<item><description>BiLevel &lt;a:biLevel></description></item>
///<item><description>Blend &lt;a:blend></description></item>
///<item><description>Blur &lt;a:blur></description></item>
///<item><description>ColorChange &lt;a:clrChange></description></item>
///<item><description>ColorReplacement &lt;a:clrRepl></description></item>
///<item><description>Duotone &lt;a:duotone></description></item>
///<item><description>Fill &lt;a:fill></description></item>
///<item><description>FillOverlay &lt;a:fillOverlay></description></item>
///<item><description>Glow &lt;a:glow></description></item>
///<item><description>Grayscale &lt;a:grayscl></description></item>
///<item><description>Hsl &lt;a:hsl></description></item>
///<item><description>InnerShadow &lt;a:innerShdw></description></item>
///<item><description>LuminanceEffect &lt;a:lum></description></item>
///<item><description>OuterShadow &lt;a:outerShdw></description></item>
///<item><description>PresetShadow &lt;a:prstShdw></description></item>
///<item><description>Reflection &lt;a:reflection></description></item>
///<item><description>RelativeOffset &lt;a:relOff></description></item>
///<item><description>SoftEdge &lt;a:softEdge></description></item>
///<item><description>TintEffect &lt;a:tint></description></item>
///<item><description>TransformEffect &lt;a:xfrm></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "cont")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EffectContainer : EffectContainerType
{
    internal const int ElementTypeIdConst = 10053;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EffectContainer class.
    /// </summary>
    public EffectContainer():base(){}
        /// <summary>
    ///Initializes a new instance of the EffectContainer class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectContainer(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectContainer class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectContainer(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectContainer class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectContainer(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectContainer>(deep);

}
/// <summary>
/// <para>Effect Container.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effectDag.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectContainer &lt;a:cont></description></item>
///<item><description>Effect &lt;a:effect></description></item>
///<item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
///<item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
///<item><description>AlphaFloor &lt;a:alphaFloor></description></item>
///<item><description>AlphaInverse &lt;a:alphaInv></description></item>
///<item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
///<item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
///<item><description>AlphaOutset &lt;a:alphaOutset></description></item>
///<item><description>AlphaReplace &lt;a:alphaRepl></description></item>
///<item><description>BiLevel &lt;a:biLevel></description></item>
///<item><description>Blend &lt;a:blend></description></item>
///<item><description>Blur &lt;a:blur></description></item>
///<item><description>ColorChange &lt;a:clrChange></description></item>
///<item><description>ColorReplacement &lt;a:clrRepl></description></item>
///<item><description>Duotone &lt;a:duotone></description></item>
///<item><description>Fill &lt;a:fill></description></item>
///<item><description>FillOverlay &lt;a:fillOverlay></description></item>
///<item><description>Glow &lt;a:glow></description></item>
///<item><description>Grayscale &lt;a:grayscl></description></item>
///<item><description>Hsl &lt;a:hsl></description></item>
///<item><description>InnerShadow &lt;a:innerShdw></description></item>
///<item><description>LuminanceEffect &lt;a:lum></description></item>
///<item><description>OuterShadow &lt;a:outerShdw></description></item>
///<item><description>PresetShadow &lt;a:prstShdw></description></item>
///<item><description>Reflection &lt;a:reflection></description></item>
///<item><description>RelativeOffset &lt;a:relOff></description></item>
///<item><description>SoftEdge &lt;a:softEdge></description></item>
///<item><description>TintEffect &lt;a:tint></description></item>
///<item><description>TransformEffect &lt;a:xfrm></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "effectDag")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EffectDag : EffectContainerType
{
    internal const int ElementTypeIdConst = 10084;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EffectDag class.
    /// </summary>
    public EffectDag():base(){}
        /// <summary>
    ///Initializes a new instance of the EffectDag class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectDag(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectDag class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectDag(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectDag class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectDag(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectDag>(deep);

}
/// <summary>
/// Defines the EffectContainerType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectContainer &lt;a:cont></description></item>
///<item><description>Effect &lt;a:effect></description></item>
///<item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
///<item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
///<item><description>AlphaFloor &lt;a:alphaFloor></description></item>
///<item><description>AlphaInverse &lt;a:alphaInv></description></item>
///<item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
///<item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
///<item><description>AlphaOutset &lt;a:alphaOutset></description></item>
///<item><description>AlphaReplace &lt;a:alphaRepl></description></item>
///<item><description>BiLevel &lt;a:biLevel></description></item>
///<item><description>Blend &lt;a:blend></description></item>
///<item><description>Blur &lt;a:blur></description></item>
///<item><description>ColorChange &lt;a:clrChange></description></item>
///<item><description>ColorReplacement &lt;a:clrRepl></description></item>
///<item><description>Duotone &lt;a:duotone></description></item>
///<item><description>Fill &lt;a:fill></description></item>
///<item><description>FillOverlay &lt;a:fillOverlay></description></item>
///<item><description>Glow &lt;a:glow></description></item>
///<item><description>Grayscale &lt;a:grayscl></description></item>
///<item><description>Hsl &lt;a:hsl></description></item>
///<item><description>InnerShadow &lt;a:innerShdw></description></item>
///<item><description>LuminanceEffect &lt;a:lum></description></item>
///<item><description>OuterShadow &lt;a:outerShdw></description></item>
///<item><description>PresetShadow &lt;a:prstShdw></description></item>
///<item><description>Reflection &lt;a:reflection></description></item>
///<item><description>RelativeOffset &lt;a:relOff></description></item>
///<item><description>SoftEdge &lt;a:softEdge></description></item>
///<item><description>TintEffect &lt;a:tint></description></item>
///<item><description>TransformEffect &lt;a:xfrm></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectContainer))]
    [ChildElementInfo(typeof(Effect))]
    [ChildElementInfo(typeof(AlphaBiLevel))]
    [ChildElementInfo(typeof(AlphaCeiling))]
    [ChildElementInfo(typeof(AlphaFloor))]
    [ChildElementInfo(typeof(AlphaInverse))]
    [ChildElementInfo(typeof(AlphaModulationEffect))]
    [ChildElementInfo(typeof(AlphaModulationFixed))]
    [ChildElementInfo(typeof(AlphaOutset))]
    [ChildElementInfo(typeof(AlphaReplace))]
    [ChildElementInfo(typeof(BiLevel))]
    [ChildElementInfo(typeof(Blend))]
    [ChildElementInfo(typeof(Blur))]
    [ChildElementInfo(typeof(ColorChange))]
    [ChildElementInfo(typeof(ColorReplacement))]
    [ChildElementInfo(typeof(Duotone))]
    [ChildElementInfo(typeof(Fill))]
    [ChildElementInfo(typeof(FillOverlay))]
    [ChildElementInfo(typeof(Glow))]
    [ChildElementInfo(typeof(Grayscale))]
    [ChildElementInfo(typeof(Hsl))]
    [ChildElementInfo(typeof(InnerShadow))]
    [ChildElementInfo(typeof(LuminanceEffect))]
    [ChildElementInfo(typeof(OuterShadow))]
    [ChildElementInfo(typeof(PresetShadow))]
    [ChildElementInfo(typeof(Reflection))]
    [ChildElementInfo(typeof(RelativeOffset))]
    [ChildElementInfo(typeof(SoftEdge))]
    [ChildElementInfo(typeof(TintEffect))]
    [ChildElementInfo(typeof(TransformEffect))]

public abstract partial class EffectContainerType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Effect Container Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.EffectContainerValues> Type { get; set; }
	
    /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(1)]
    public StringValue Name { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the EffectContainerType class.
    /// </summary>
    protected EffectContainerType(){}
    
        /// <summary>
    ///Initializes a new instance of the EffectContainerType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected EffectContainerType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectContainerType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected EffectContainerType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectContainerType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected EffectContainerType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effect.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "effect")]
[Id(ElementTypeIdConst)]
public partial class Effect : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10054;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref")]
    [Index(0)]
    public StringValue Reference { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Effect class.
    /// </summary>
    public Effect():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Effect>(deep);

}
/// <summary>
/// <para>Defines the AlphaBiLevel Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaBiLevel.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaBiLevel")]
[Id(ElementTypeIdConst)]
public partial class AlphaBiLevel : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10055;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Threshold.</para>
    /// <para>Represents the following attribute in the schema: thresh </para>
    /// </summary>
    [SchemaAttr(0, "thresh")]
    [Index(0)]
    public Int32Value Threshold { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AlphaBiLevel class.
    /// </summary>
    public AlphaBiLevel():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaBiLevel>(deep);

}
/// <summary>
/// <para>Alpha Ceiling Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaCeiling.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaCeiling")]
[Id(ElementTypeIdConst)]
public partial class AlphaCeiling : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10056;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AlphaCeiling class.
    /// </summary>
    public AlphaCeiling():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaCeiling>(deep);

}
/// <summary>
/// <para>Alpha Floor Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaFloor.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaFloor")]
[Id(ElementTypeIdConst)]
public partial class AlphaFloor : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10057;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AlphaFloor class.
    /// </summary>
    public AlphaFloor():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaFloor>(deep);

}
/// <summary>
/// <para>Alpha Inverse Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaInv.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaInv")]
[Id(ElementTypeIdConst)]
public partial class AlphaInverse : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10058;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AlphaInverse class.
    /// </summary>
    public AlphaInverse():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AlphaInverse class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AlphaInverse(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AlphaInverse class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AlphaInverse(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AlphaInverse class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AlphaInverse(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaInverse>(deep);

}
/// <summary>
/// <para>Alpha Modulate Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaMod.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectContainer &lt;a:cont></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectContainer))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaMod")]
[Id(ElementTypeIdConst)]
public partial class AlphaModulationEffect : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10059;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AlphaModulationEffect class.
    /// </summary>
    public AlphaModulationEffect():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AlphaModulationEffect(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AlphaModulationEffect(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AlphaModulationEffect class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AlphaModulationEffect(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> EffectContainer.</para>
    /// <para> Represents the following element tag in the schema: a:cont </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public EffectContainer EffectContainer
	{
        get => GetElement<EffectContainer>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationEffect>(deep);

}
/// <summary>
/// <para>Defines the AlphaModulationFixed Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaModFix.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaModFix")]
[Id(ElementTypeIdConst)]
public partial class AlphaModulationFixed : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10060;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Amount.</para>
    /// <para>Represents the following attribute in the schema: amt </para>
    /// </summary>
    [SchemaAttr(0, "amt")]
    [Index(0)]
    public Int32Value Amount { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AlphaModulationFixed class.
    /// </summary>
    public AlphaModulationFixed():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationFixed>(deep);

}
/// <summary>
/// <para>Alpha Inset/Outset Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaOutset.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaOutset")]
[Id(ElementTypeIdConst)]
public partial class AlphaOutset : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10061;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Radius.</para>
    /// <para>Represents the following attribute in the schema: rad </para>
    /// </summary>
    [SchemaAttr(0, "rad")]
    [Index(0)]
    public Int64Value Radius { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AlphaOutset class.
    /// </summary>
    public AlphaOutset():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOutset>(deep);

}
/// <summary>
/// <para>Alpha Replace Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:alphaRepl.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "alphaRepl")]
[Id(ElementTypeIdConst)]
public partial class AlphaReplace : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10062;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Alpha.</para>
    /// <para>Represents the following attribute in the schema: a </para>
    /// </summary>
    [SchemaAttr(0, "a")]
    [Index(0)]
    public Int32Value Alpha { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AlphaReplace class.
    /// </summary>
    public AlphaReplace():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaReplace>(deep);

}
/// <summary>
/// <para>Defines the BiLevel Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:biLevel.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "biLevel")]
[Id(ElementTypeIdConst)]
public partial class BiLevel : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10063;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Threshold.</para>
    /// <para>Represents the following attribute in the schema: thresh </para>
    /// </summary>
    [SchemaAttr(0, "thresh")]
    [Index(0)]
    public Int32Value Threshold { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BiLevel class.
    /// </summary>
    public BiLevel():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiLevel>(deep);

}
/// <summary>
/// <para>Blend Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blend.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectContainer &lt;a:cont></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectContainer))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "blend")]
[Id(ElementTypeIdConst)]
public partial class Blend : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10064;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Blend Mode.</para>
    /// <para>Represents the following attribute in the schema: blend </para>
    /// </summary>
    [SchemaAttr(0, "blend")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues> BlendMode { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Blend class.
    /// </summary>
    public Blend():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Blend class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Blend(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Blend class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Blend(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Blend class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Blend(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Effect to blend.</para>
    /// <para> Represents the following element tag in the schema: a:cont </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public EffectContainer EffectContainer
	{
        get => GetElement<EffectContainer>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blend>(deep);

}
/// <summary>
/// <para>Defines the Blur Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blur.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "blur")]
[Id(ElementTypeIdConst)]
public partial class Blur : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10065;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Radius.</para>
    /// <para>Represents the following attribute in the schema: rad </para>
    /// </summary>
    [SchemaAttr(0, "rad")]
    [Index(0)]
    public Int64Value Radius { get; set; }
	
    /// <summary>
    /// <para> Grow Bounds.</para>
    /// <para>Represents the following attribute in the schema: grow </para>
    /// </summary>
    [SchemaAttr(0, "grow")]
    [Index(1)]
    public BooleanValue Grow { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Blur class.
    /// </summary>
    public Blur():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blur>(deep);

}
/// <summary>
/// <para>Color Change Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrChange.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ColorFrom &lt;a:clrFrom></description></item>
///<item><description>ColorTo &lt;a:clrTo></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ColorFrom))]
    [ChildElementInfo(typeof(ColorTo))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "clrChange")]
[Id(ElementTypeIdConst)]
public partial class ColorChange : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10066;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Consider Alpha Values.</para>
    /// <para>Represents the following attribute in the schema: useA </para>
    /// </summary>
    [SchemaAttr(0, "useA")]
    [Index(0)]
    public BooleanValue UseAlpha { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ColorChange class.
    /// </summary>
    public ColorChange():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorChange class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorChange(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorChange class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorChange(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorChange class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorChange(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Change Color From.</para>
    /// <para> Represents the following element tag in the schema: a:clrFrom </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ColorFrom ColorFrom
	{
        get => GetElement<ColorFrom>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Change Color To.</para>
    /// <para> Represents the following element tag in the schema: a:clrTo </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ColorTo ColorTo
	{
        get => GetElement<ColorTo>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorChange>(deep);

}
/// <summary>
/// <para>Defines the ColorReplacement Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrRepl.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "clrRepl")]
[Id(ElementTypeIdConst)]
public partial class ColorReplacement : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10067;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ColorReplacement class.
    /// </summary>
    public ColorReplacement():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorReplacement class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorReplacement(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorReplacement class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorReplacement(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorReplacement class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorReplacement(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorReplacement>(deep);

}
/// <summary>
/// <para>Duotone Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:duotone.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "duotone")]
[Id(ElementTypeIdConst)]
public partial class Duotone : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10068;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Duotone class.
    /// </summary>
    public Duotone():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Duotone class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Duotone(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Duotone class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Duotone(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Duotone class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Duotone(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Duotone>(deep);

}
/// <summary>
/// <para>Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fill")]
[Id(ElementTypeIdConst)]
public partial class Fill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10069;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Fill class.
    /// </summary>
    public Fill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Fill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Fill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Fill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Fill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> NoFill.</para>
    /// <para> Represents the following element tag in the schema: a:noFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NoFill NoFill
	{
        get => GetElement<NoFill>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> SolidFill.</para>
    /// <para> Represents the following element tag in the schema: a:solidFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SolidFill SolidFill
	{
        get => GetElement<SolidFill>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> GradientFill.</para>
    /// <para> Represents the following element tag in the schema: a:gradFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public GradientFill GradientFill
	{
        get => GetElement<GradientFill>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> BlipFill.</para>
    /// <para> Represents the following element tag in the schema: a:blipFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BlipFill BlipFill
	{
        get => GetElement<BlipFill>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Pattern Fill.</para>
    /// <para> Represents the following element tag in the schema: a:pattFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public PatternFill PatternFill
	{
        get => GetElement<PatternFill>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Group Fill.</para>
    /// <para> Represents the following element tag in the schema: a:grpFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public GroupFill GroupFill
	{
        get => GetElement<GroupFill>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fill>(deep);

}
/// <summary>
/// <para>Fill Overlay Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fillOverlay.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fillOverlay")]
[Id(ElementTypeIdConst)]
public partial class FillOverlay : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10070;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Blend.</para>
    /// <para>Represents the following attribute in the schema: blend </para>
    /// </summary>
    [SchemaAttr(0, "blend")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BlendModeValues> Blend { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the FillOverlay class.
    /// </summary>
    public FillOverlay():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FillOverlay class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillOverlay(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FillOverlay class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillOverlay(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FillOverlay class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FillOverlay(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> NoFill.</para>
    /// <para> Represents the following element tag in the schema: a:noFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NoFill NoFill
	{
        get => GetElement<NoFill>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> SolidFill.</para>
    /// <para> Represents the following element tag in the schema: a:solidFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SolidFill SolidFill
	{
        get => GetElement<SolidFill>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> GradientFill.</para>
    /// <para> Represents the following element tag in the schema: a:gradFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public GradientFill GradientFill
	{
        get => GetElement<GradientFill>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> BlipFill.</para>
    /// <para> Represents the following element tag in the schema: a:blipFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BlipFill BlipFill
	{
        get => GetElement<BlipFill>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Pattern Fill.</para>
    /// <para> Represents the following element tag in the schema: a:pattFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public PatternFill PatternFill
	{
        get => GetElement<PatternFill>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Group Fill.</para>
    /// <para> Represents the following element tag in the schema: a:grpFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public GroupFill GroupFill
	{
        get => GetElement<GroupFill>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillOverlay>(deep);

}
/// <summary>
/// <para>Glow Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:glow.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "glow")]
[Id(ElementTypeIdConst)]
public partial class Glow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10071;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Radius.</para>
    /// <para>Represents the following attribute in the schema: rad </para>
    /// </summary>
    [SchemaAttr(0, "rad")]
    [Index(0)]
    public Int64Value Radius { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Glow class.
    /// </summary>
    public Glow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Glow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Glow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Glow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Glow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Glow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Glow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Glow>(deep);

}
/// <summary>
/// <para>Gray Scale Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:grayscl.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "grayscl")]
[Id(ElementTypeIdConst)]
public partial class Grayscale : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10072;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Grayscale class.
    /// </summary>
    public Grayscale():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Grayscale>(deep);

}
/// <summary>
/// <para>Hue Saturation Luminance Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hsl.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "hsl")]
[Id(ElementTypeIdConst)]
public partial class Hsl : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10073;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Hue.</para>
    /// <para>Represents the following attribute in the schema: hue </para>
    /// </summary>
    [SchemaAttr(0, "hue")]
    [Index(0)]
    public Int32Value Hue { get; set; }
	
    /// <summary>
    /// <para> Saturation.</para>
    /// <para>Represents the following attribute in the schema: sat </para>
    /// </summary>
    [SchemaAttr(0, "sat")]
    [Index(1)]
    public Int32Value Saturation { get; set; }
	
    /// <summary>
    /// <para> Luminance.</para>
    /// <para>Represents the following attribute in the schema: lum </para>
    /// </summary>
    [SchemaAttr(0, "lum")]
    [Index(2)]
    public Int32Value Luminance { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Hsl class.
    /// </summary>
    public Hsl():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hsl>(deep);

}
/// <summary>
/// <para>Inner Shadow Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:innerShdw.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "innerShdw")]
[Id(ElementTypeIdConst)]
public partial class InnerShadow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10074;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Blur Radius.</para>
    /// <para>Represents the following attribute in the schema: blurRad </para>
    /// </summary>
    [SchemaAttr(0, "blurRad")]
    [Index(0)]
    public Int64Value BlurRadius { get; set; }
	
    /// <summary>
    /// <para> Distance.</para>
    /// <para>Represents the following attribute in the schema: dist </para>
    /// </summary>
    [SchemaAttr(0, "dist")]
    [Index(1)]
    public Int64Value Distance { get; set; }
	
    /// <summary>
    /// <para> Direction.</para>
    /// <para>Represents the following attribute in the schema: dir </para>
    /// </summary>
    [SchemaAttr(0, "dir")]
    [Index(2)]
    public Int32Value Direction { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the InnerShadow class.
    /// </summary>
    public InnerShadow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the InnerShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InnerShadow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the InnerShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InnerShadow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the InnerShadow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public InnerShadow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InnerShadow>(deep);

}
/// <summary>
/// <para>Luminance.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lum.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lum")]
[Id(ElementTypeIdConst)]
public partial class LuminanceEffect : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10075;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Brightness.</para>
    /// <para>Represents the following attribute in the schema: bright </para>
    /// </summary>
    [SchemaAttr(0, "bright")]
    [Index(0)]
    public Int32Value Brightness { get; set; }
	
    /// <summary>
    /// <para> Contrast.</para>
    /// <para>Represents the following attribute in the schema: contrast </para>
    /// </summary>
    [SchemaAttr(0, "contrast")]
    [Index(1)]
    public Int32Value Contrast { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the LuminanceEffect class.
    /// </summary>
    public LuminanceEffect():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceEffect>(deep);

}
/// <summary>
/// <para>Outer Shadow Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:outerShdw.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "outerShdw")]
[Id(ElementTypeIdConst)]
public partial class OuterShadow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10076;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Blur Radius.</para>
    /// <para>Represents the following attribute in the schema: blurRad </para>
    /// </summary>
    [SchemaAttr(0, "blurRad")]
    [Index(0)]
    public Int64Value BlurRadius { get; set; }
	
    /// <summary>
    /// <para> Shadow Offset Distance.</para>
    /// <para>Represents the following attribute in the schema: dist </para>
    /// </summary>
    [SchemaAttr(0, "dist")]
    [Index(1)]
    public Int64Value Distance { get; set; }
	
    /// <summary>
    /// <para> Shadow Direction.</para>
    /// <para>Represents the following attribute in the schema: dir </para>
    /// </summary>
    [SchemaAttr(0, "dir")]
    [Index(2)]
    public Int32Value Direction { get; set; }
	
    /// <summary>
    /// <para> Horizontal Scaling Factor.</para>
    /// <para>Represents the following attribute in the schema: sx </para>
    /// </summary>
    [SchemaAttr(0, "sx")]
    [Index(3)]
    public Int32Value HorizontalRatio { get; set; }
	
    /// <summary>
    /// <para> Vertical Scaling Factor.</para>
    /// <para>Represents the following attribute in the schema: sy </para>
    /// </summary>
    [SchemaAttr(0, "sy")]
    [Index(4)]
    public Int32Value VerticalRatio { get; set; }
	
    /// <summary>
    /// <para> Horizontal Skew.</para>
    /// <para>Represents the following attribute in the schema: kx </para>
    /// </summary>
    [SchemaAttr(0, "kx")]
    [Index(5)]
    public Int32Value HorizontalSkew { get; set; }
	
    /// <summary>
    /// <para> Vertical Skew.</para>
    /// <para>Represents the following attribute in the schema: ky </para>
    /// </summary>
    [SchemaAttr(0, "ky")]
    [Index(6)]
    public Int32Value VerticalSkew { get; set; }
	
    /// <summary>
    /// <para> Shadow Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(7)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment { get; set; }
	
    /// <summary>
    /// <para> Rotate With Shape.</para>
    /// <para>Represents the following attribute in the schema: rotWithShape </para>
    /// </summary>
    [SchemaAttr(0, "rotWithShape")]
    [Index(8)]
    public BooleanValue RotateWithShape { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the OuterShadow class.
    /// </summary>
    public OuterShadow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OuterShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OuterShadow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OuterShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OuterShadow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OuterShadow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OuterShadow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OuterShadow>(deep);

}
/// <summary>
/// <para>Preset Shadow.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:prstShdw.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "prstShdw")]
[Id(ElementTypeIdConst)]
public partial class PresetShadow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10077;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Shadow.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetShadowValues> Preset { get; set; }
	
    /// <summary>
    /// <para> Distance.</para>
    /// <para>Represents the following attribute in the schema: dist </para>
    /// </summary>
    [SchemaAttr(0, "dist")]
    [Index(1)]
    public Int64Value Distance { get; set; }
	
    /// <summary>
    /// <para> Direction.</para>
    /// <para>Represents the following attribute in the schema: dir </para>
    /// </summary>
    [SchemaAttr(0, "dir")]
    [Index(2)]
    public Int32Value Direction { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PresetShadow class.
    /// </summary>
    public PresetShadow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PresetShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetShadow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetShadow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetShadow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetShadow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PresetShadow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetShadow>(deep);

}
/// <summary>
/// <para>Reflection Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:reflection.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "reflection")]
[Id(ElementTypeIdConst)]
public partial class Reflection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10078;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Blur Radius.</para>
    /// <para>Represents the following attribute in the schema: blurRad </para>
    /// </summary>
    [SchemaAttr(0, "blurRad")]
    [Index(0)]
    public Int64Value BlurRadius { get; set; }
	
    /// <summary>
    /// <para> Start Opacity.</para>
    /// <para>Represents the following attribute in the schema: stA </para>
    /// </summary>
    [SchemaAttr(0, "stA")]
    [Index(1)]
    public Int32Value StartOpacity { get; set; }
	
    /// <summary>
    /// <para> Start Position.</para>
    /// <para>Represents the following attribute in the schema: stPos </para>
    /// </summary>
    [SchemaAttr(0, "stPos")]
    [Index(2)]
    public Int32Value StartPosition { get; set; }
	
    /// <summary>
    /// <para> End Alpha.</para>
    /// <para>Represents the following attribute in the schema: endA </para>
    /// </summary>
    [SchemaAttr(0, "endA")]
    [Index(3)]
    public Int32Value EndAlpha { get; set; }
	
    /// <summary>
    /// <para> End Position.</para>
    /// <para>Represents the following attribute in the schema: endPos </para>
    /// </summary>
    [SchemaAttr(0, "endPos")]
    [Index(4)]
    public Int32Value EndPosition { get; set; }
	
    /// <summary>
    /// <para> Distance.</para>
    /// <para>Represents the following attribute in the schema: dist </para>
    /// </summary>
    [SchemaAttr(0, "dist")]
    [Index(5)]
    public Int64Value Distance { get; set; }
	
    /// <summary>
    /// <para> Direction.</para>
    /// <para>Represents the following attribute in the schema: dir </para>
    /// </summary>
    [SchemaAttr(0, "dir")]
    [Index(6)]
    public Int32Value Direction { get; set; }
	
    /// <summary>
    /// <para> Fade Direction.</para>
    /// <para>Represents the following attribute in the schema: fadeDir </para>
    /// </summary>
    [SchemaAttr(0, "fadeDir")]
    [Index(7)]
    public Int32Value FadeDirection { get; set; }
	
    /// <summary>
    /// <para> Horizontal Ratio.</para>
    /// <para>Represents the following attribute in the schema: sx </para>
    /// </summary>
    [SchemaAttr(0, "sx")]
    [Index(8)]
    public Int32Value HorizontalRatio { get; set; }
	
    /// <summary>
    /// <para> Vertical Ratio.</para>
    /// <para>Represents the following attribute in the schema: sy </para>
    /// </summary>
    [SchemaAttr(0, "sy")]
    [Index(9)]
    public Int32Value VerticalRatio { get; set; }
	
    /// <summary>
    /// <para> Horizontal Skew.</para>
    /// <para>Represents the following attribute in the schema: kx </para>
    /// </summary>
    [SchemaAttr(0, "kx")]
    [Index(10)]
    public Int32Value HorizontalSkew { get; set; }
	
    /// <summary>
    /// <para> Vertical Skew.</para>
    /// <para>Represents the following attribute in the schema: ky </para>
    /// </summary>
    [SchemaAttr(0, "ky")]
    [Index(11)]
    public Int32Value VerticalSkew { get; set; }
	
    /// <summary>
    /// <para> Shadow Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(12)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues> Alignment { get; set; }
	
    /// <summary>
    /// <para> Rotate With Shape.</para>
    /// <para>Represents the following attribute in the schema: rotWithShape </para>
    /// </summary>
    [SchemaAttr(0, "rotWithShape")]
    [Index(13)]
    public BooleanValue RotateWithShape { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Reflection class.
    /// </summary>
    public Reflection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reflection>(deep);

}
/// <summary>
/// <para>Relative Offset Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:relOff.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "relOff")]
[Id(ElementTypeIdConst)]
public partial class RelativeOffset : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10079;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Offset X.</para>
    /// <para>Represents the following attribute in the schema: tx </para>
    /// </summary>
    [SchemaAttr(0, "tx")]
    [Index(0)]
    public Int32Value OffsetX { get; set; }
	
    /// <summary>
    /// <para> Offset Y.</para>
    /// <para>Represents the following attribute in the schema: ty </para>
    /// </summary>
    [SchemaAttr(0, "ty")]
    [Index(1)]
    public Int32Value OffsetY { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the RelativeOffset class.
    /// </summary>
    public RelativeOffset():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelativeOffset>(deep);

}
/// <summary>
/// <para>Soft Edge Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:softEdge.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "softEdge")]
[Id(ElementTypeIdConst)]
public partial class SoftEdge : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10080;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Radius.</para>
    /// <para>Represents the following attribute in the schema: rad </para>
    /// </summary>
    [SchemaAttr(0, "rad")]
    [Index(0)]
    public Int64Value Radius { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SoftEdge class.
    /// </summary>
    public SoftEdge():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoftEdge>(deep);

}
/// <summary>
/// <para>Defines the TintEffect Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tint.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tint")]
[Id(ElementTypeIdConst)]
public partial class TintEffect : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10081;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Hue.</para>
    /// <para>Represents the following attribute in the schema: hue </para>
    /// </summary>
    [SchemaAttr(0, "hue")]
    [Index(0)]
    public Int32Value Hue { get; set; }
	
    /// <summary>
    /// <para> Amount.</para>
    /// <para>Represents the following attribute in the schema: amt </para>
    /// </summary>
    [SchemaAttr(0, "amt")]
    [Index(1)]
    public Int32Value Amount { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TintEffect class.
    /// </summary>
    public TintEffect():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TintEffect>(deep);

}
/// <summary>
/// <para>Transform Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:xfrm.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "xfrm")]
[Id(ElementTypeIdConst)]
public partial class TransformEffect : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10082;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Horizontal Ratio.</para>
    /// <para>Represents the following attribute in the schema: sx </para>
    /// </summary>
    [SchemaAttr(0, "sx")]
    [Index(0)]
    public Int32Value HorizontalRatio { get; set; }
	
    /// <summary>
    /// <para> Vertical Ratio.</para>
    /// <para>Represents the following attribute in the schema: sy </para>
    /// </summary>
    [SchemaAttr(0, "sy")]
    [Index(1)]
    public Int32Value VerticalRatio { get; set; }
	
    /// <summary>
    /// <para> Horizontal Skew.</para>
    /// <para>Represents the following attribute in the schema: kx </para>
    /// </summary>
    [SchemaAttr(0, "kx")]
    [Index(2)]
    public Int32Value HorizontalSkew { get; set; }
	
    /// <summary>
    /// <para> Vertical Skew.</para>
    /// <para>Represents the following attribute in the schema: ky </para>
    /// </summary>
    [SchemaAttr(0, "ky")]
    [Index(3)]
    public Int32Value VerticalSkew { get; set; }
	
    /// <summary>
    /// <para> Horizontal Shift.</para>
    /// <para>Represents the following attribute in the schema: tx </para>
    /// </summary>
    [SchemaAttr(0, "tx")]
    [Index(4)]
    public Int64Value HorizontalShift { get; set; }
	
    /// <summary>
    /// <para> Vertical Shift.</para>
    /// <para>Represents the following attribute in the schema: ty </para>
    /// </summary>
    [SchemaAttr(0, "ty")]
    [Index(5)]
    public Int64Value VerticalShift { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TransformEffect class.
    /// </summary>
    public TransformEffect():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformEffect>(deep);

}
/// <summary>
/// <para>Effect Container.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effectLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Blur &lt;a:blur></description></item>
///<item><description>FillOverlay &lt;a:fillOverlay></description></item>
///<item><description>Glow &lt;a:glow></description></item>
///<item><description>InnerShadow &lt;a:innerShdw></description></item>
///<item><description>OuterShadow &lt;a:outerShdw></description></item>
///<item><description>PresetShadow &lt;a:prstShdw></description></item>
///<item><description>Reflection &lt;a:reflection></description></item>
///<item><description>SoftEdge &lt;a:softEdge></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Blur))]
    [ChildElementInfo(typeof(FillOverlay))]
    [ChildElementInfo(typeof(Glow))]
    [ChildElementInfo(typeof(InnerShadow))]
    [ChildElementInfo(typeof(OuterShadow))]
    [ChildElementInfo(typeof(PresetShadow))]
    [ChildElementInfo(typeof(Reflection))]
    [ChildElementInfo(typeof(SoftEdge))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "effectLst")]
[Id(ElementTypeIdConst)]
public partial class EffectList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10083;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the EffectList class.
    /// </summary>
    public EffectList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the EffectList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Blur Effect.</para>
    /// <para> Represents the following element tag in the schema: a:blur </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Blur Blur
	{
        get => GetElement<Blur>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> FillOverlay.</para>
    /// <para> Represents the following element tag in the schema: a:fillOverlay </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public FillOverlay FillOverlay
	{
        get => GetElement<FillOverlay>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Glow.</para>
    /// <para> Represents the following element tag in the schema: a:glow </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Glow Glow
	{
        get => GetElement<Glow>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> InnerShadow.</para>
    /// <para> Represents the following element tag in the schema: a:innerShdw </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public InnerShadow InnerShadow
	{
        get => GetElement<InnerShadow>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> OuterShadow.</para>
    /// <para> Represents the following element tag in the schema: a:outerShdw </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public OuterShadow OuterShadow
	{
        get => GetElement<OuterShadow>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> PresetShadow.</para>
    /// <para> Represents the following element tag in the schema: a:prstShdw </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetShadow PresetShadow
	{
        get => GetElement<PresetShadow>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> Reflection.</para>
    /// <para> Represents the following element tag in the schema: a:reflection </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public Reflection Reflection
	{
        get => GetElement<Reflection>(6);
        set => SetElement(6, value);
	}
    
    /// <summary>
    /// <para> SoftEdge.</para>
    /// <para> Represents the following element tag in the schema: a:softEdge </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(7)]
    public SoftEdge SoftEdge
	{
        get => GetElement<SoftEdge>(7);
        set => SetElement(7, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectList>(deep);

}
/// <summary>
/// <para>Custom geometry.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:custGeom.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AdjustValueList &lt;a:avLst></description></item>
///<item><description>ShapeGuideList &lt;a:gdLst></description></item>
///<item><description>AdjustHandleList &lt;a:ahLst></description></item>
///<item><description>ConnectionSiteList &lt;a:cxnLst></description></item>
///<item><description>Rectangle &lt;a:rect></description></item>
///<item><description>PathList &lt;a:pathLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AdjustValueList))]
    [ChildElementInfo(typeof(ShapeGuideList))]
    [ChildElementInfo(typeof(AdjustHandleList))]
    [ChildElementInfo(typeof(ConnectionSiteList))]
    [ChildElementInfo(typeof(Rectangle))]
    [ChildElementInfo(typeof(PathList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "custGeom")]
[Id(ElementTypeIdConst)]
public partial class CustomGeometry : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10085;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomGeometry class.
    /// </summary>
    public CustomGeometry():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomGeometry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomGeometry(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomGeometry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomGeometry(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomGeometry class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomGeometry(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Adjust Value List.</para>
    /// <para> Represents the following element tag in the schema: a:avLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public AdjustValueList AdjustValueList
	{
        get => GetElement<AdjustValueList>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> List of Shape Guides.</para>
    /// <para> Represents the following element tag in the schema: a:gdLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ShapeGuideList ShapeGuideList
	{
        get => GetElement<ShapeGuideList>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> List of Shape Adjust Handles.</para>
    /// <para> Represents the following element tag in the schema: a:ahLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public AdjustHandleList AdjustHandleList
	{
        get => GetElement<AdjustHandleList>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> List of Shape Connection Sites.</para>
    /// <para> Represents the following element tag in the schema: a:cxnLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ConnectionSiteList ConnectionSiteList
	{
        get => GetElement<ConnectionSiteList>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Shape Text Rectangle.</para>
    /// <para> Represents the following element tag in the schema: a:rect </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public Rectangle Rectangle
	{
        get => GetElement<Rectangle>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> List of Shape Paths.</para>
    /// <para> Represents the following element tag in the schema: a:pathLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PathList PathList
	{
        get => GetElement<PathList>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomGeometry>(deep);

}
/// <summary>
/// <para>Preset geometry.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:prstGeom.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AdjustValueList &lt;a:avLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AdjustValueList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "prstGeom")]
[Id(ElementTypeIdConst)]
public partial class PresetGeometry : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10086;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Shape.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ShapeTypeValues> Preset { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PresetGeometry class.
    /// </summary>
    public PresetGeometry():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PresetGeometry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetGeometry(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetGeometry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetGeometry(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetGeometry class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PresetGeometry(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> List of Shape Adjust Values.</para>
    /// <para> Represents the following element tag in the schema: a:avLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public AdjustValueList AdjustValueList
	{
        get => GetElement<AdjustValueList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetGeometry>(deep);

}
/// <summary>
/// <para>Preset Text Warp.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:prstTxWarp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AdjustValueList &lt;a:avLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AdjustValueList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "prstTxWarp")]
[Id(ElementTypeIdConst)]
public partial class PresetTextWrap : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10087;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Warp Shape.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextShapeValues> Preset { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PresetTextWrap class.
    /// </summary>
    public PresetTextWrap():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PresetTextWrap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetTextWrap(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetTextWrap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PresetTextWrap(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PresetTextWrap class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PresetTextWrap(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Adjust Value List.</para>
    /// <para> Represents the following element tag in the schema: a:avLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public AdjustValueList AdjustValueList
	{
        get => GetElement<AdjustValueList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetTextWrap>(deep);

}
/// <summary>
/// <para>Round Line Join.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:round.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "round")]
[Id(ElementTypeIdConst)]
public partial class Round : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10088;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Round class.
    /// </summary>
    public Round():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Round>(deep);

}
/// <summary>
/// <para>Line Join Bevel.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bevel.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "bevel")]
[Id(ElementTypeIdConst)]
public partial class LineJoinBevel : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10089;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the LineJoinBevel class.
    /// </summary>
    public LineJoinBevel():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineJoinBevel>(deep);

}
/// <summary>
/// <para>Miter Line Join.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:miter.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "miter")]
[Id(ElementTypeIdConst)]
public partial class Miter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10090;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Miter Join Limit.</para>
    /// <para>Represents the following attribute in the schema: lim </para>
    /// </summary>
    [SchemaAttr(0, "lim")]
    [Index(0)]
    public Int32Value Limit { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Miter class.
    /// </summary>
    public Miter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Miter>(deep);

}
/// <summary>
/// <para>Preset Dash.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:prstDash.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "prstDash")]
[Id(ElementTypeIdConst)]
public partial class PresetDash : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10091;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetLineDashValues> Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PresetDash class.
    /// </summary>
    public PresetDash():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetDash>(deep);

}
/// <summary>
/// <para>Custom Dash.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:custDash.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DashStop &lt;a:ds></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DashStop))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "custDash")]
[Id(ElementTypeIdConst)]
public partial class CustomDash : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10092;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomDash class.
    /// </summary>
    public CustomDash():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomDash class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomDash(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomDash class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomDash(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomDash class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomDash(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomDash>(deep);

}
/// <summary>
/// <para>Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fill")]
[Id(ElementTypeIdConst)]
public partial class FillProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10093;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the FillProperties class.
    /// </summary>
    public FillProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FillProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FillProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FillProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FillProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> NoFill.</para>
    /// <para> Represents the following element tag in the schema: a:noFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NoFill NoFill
	{
        get => GetElement<NoFill>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> SolidFill.</para>
    /// <para> Represents the following element tag in the schema: a:solidFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SolidFill SolidFill
	{
        get => GetElement<SolidFill>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> GradientFill.</para>
    /// <para> Represents the following element tag in the schema: a:gradFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public GradientFill GradientFill
	{
        get => GetElement<GradientFill>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> BlipFill.</para>
    /// <para> Represents the following element tag in the schema: a:blipFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BlipFill BlipFill
	{
        get => GetElement<BlipFill>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Pattern Fill.</para>
    /// <para> Represents the following element tag in the schema: a:pattFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public PatternFill PatternFill
	{
        get => GetElement<PatternFill>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Group Fill.</para>
    /// <para> Represents the following element tag in the schema: a:grpFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public GroupFill GroupFill
	{
        get => GetElement<GroupFill>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillProperties>(deep);

}
/// <summary>
/// <para>Fill Reference.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fillRef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "fillRef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FillReference : StyleMatrixReferenceType
{
    internal const int ElementTypeIdConst = 10094;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FillReference class.
    /// </summary>
    public FillReference():base(){}
        /// <summary>
    ///Initializes a new instance of the FillReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillReference(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FillReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillReference(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FillReference class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FillReference(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillReference>(deep);

}
/// <summary>
/// <para>Effect Reference.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effectRef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "effectRef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EffectReference : StyleMatrixReferenceType
{
    internal const int ElementTypeIdConst = 10096;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EffectReference class.
    /// </summary>
    public EffectReference():base(){}
        /// <summary>
    ///Initializes a new instance of the EffectReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectReference(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectReference(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectReference class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectReference(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectReference>(deep);

}
/// <summary>
/// <para>Defines the LineReference Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnRef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnRef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LineReference : StyleMatrixReferenceType
{
    internal const int ElementTypeIdConst = 10236;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LineReference class.
    /// </summary>
    public LineReference():base(){}
        /// <summary>
    ///Initializes a new instance of the LineReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineReference(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LineReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineReference(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LineReference class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LineReference(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineReference>(deep);

}
/// <summary>
/// Defines the StyleMatrixReferenceType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

public abstract partial class StyleMatrixReferenceType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Style Matrix Index.</para>
    /// <para>Represents the following attribute in the schema: idx </para>
    /// </summary>
    [SchemaAttr(0, "idx")]
    [Index(0)]
    public UInt32Value Index { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the StyleMatrixReferenceType class.
    /// </summary>
    protected StyleMatrixReferenceType(){}
    
        /// <summary>
    ///Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected StyleMatrixReferenceType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected StyleMatrixReferenceType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the StyleMatrixReferenceType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected StyleMatrixReferenceType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Effect.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effect.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "effect")]
[Id(ElementTypeIdConst)]
public partial class EffectPropertiesType : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10095;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the EffectPropertiesType class.
    /// </summary>
    public EffectPropertiesType():base(){}
    
        /// <summary>
    ///Initializes a new instance of the EffectPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectPropertiesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectPropertiesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectPropertiesType(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Effect Container.</para>
    /// <para> Represents the following element tag in the schema: a:effectLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public EffectList EffectList
	{
        get => GetElement<EffectList>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Effect Container.</para>
    /// <para> Represents the following element tag in the schema: a:effectDag </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public EffectDag EffectDag
	{
        get => GetElement<EffectDag>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectPropertiesType>(deep);

}
/// <summary>
/// <para>Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:font.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SupplementalFont &lt;a:font></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "font")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Fonts : FontCollectionType
{
    internal const int ElementTypeIdConst = 10097;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Fonts class.
    /// </summary>
    public Fonts():base(){}
        /// <summary>
    ///Initializes a new instance of the Fonts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fonts(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Fonts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fonts(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Fonts class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Fonts(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);

}
/// <summary>
/// <para>Major Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:majorFont.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SupplementalFont &lt;a:font></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "majorFont")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MajorFont : FontCollectionType
{
    internal const int ElementTypeIdConst = 10136;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the MajorFont class.
    /// </summary>
    public MajorFont():base(){}
        /// <summary>
    ///Initializes a new instance of the MajorFont class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MajorFont(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MajorFont class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MajorFont(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MajorFont class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MajorFont(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MajorFont>(deep);

}
/// <summary>
/// <para>Minor fonts.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:minorFont.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SupplementalFont &lt;a:font></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "minorFont")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MinorFont : FontCollectionType
{
    internal const int ElementTypeIdConst = 10137;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the MinorFont class.
    /// </summary>
    public MinorFont():base(){}
        /// <summary>
    ///Initializes a new instance of the MinorFont class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MinorFont(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MinorFont class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MinorFont(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MinorFont class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MinorFont(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MinorFont>(deep);

}
/// <summary>
/// Defines the FontCollectionType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SupplementalFont &lt;a:font></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(LatinFont))]
    [ChildElementInfo(typeof(EastAsianFont))]
    [ChildElementInfo(typeof(ComplexScriptFont))]
    [ChildElementInfo(typeof(SupplementalFont))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class FontCollectionType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Latin Font.</para>
    /// <para> Represents the following element tag in the schema: a:latin </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public LatinFont LatinFont
	{
        get => GetElement<LatinFont>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> East Asian Font.</para>
    /// <para> Represents the following element tag in the schema: a:ea </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public EastAsianFont EastAsianFont
	{
        get => GetElement<EastAsianFont>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Complex Script Font.</para>
    /// <para> Represents the following element tag in the schema: a:cs </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ComplexScriptFont ComplexScriptFont
	{
        get => GetElement<ComplexScriptFont>(2);
        set => SetElement(2, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the FontCollectionType class.
    /// </summary>
    protected FontCollectionType(){}
    
        /// <summary>
    ///Initializes a new instance of the FontCollectionType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected FontCollectionType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FontCollectionType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected FontCollectionType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FontCollectionType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected FontCollectionType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Defines the FontReference Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fontRef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fontRef")]
[Id(ElementTypeIdConst)]
public partial class FontReference : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10098;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Identifier.</para>
    /// <para>Represents the following attribute in the schema: idx </para>
    /// </summary>
    [SchemaAttr(0, "idx")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.FontCollectionIndexValues> Index { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the FontReference class.
    /// </summary>
    public FontReference():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FontReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FontReference(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FontReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FontReference(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FontReference class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FontReference(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontReference>(deep);

}
/// <summary>
/// <para>No AutoFit.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:noAutofit.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "noAutofit")]
[Id(ElementTypeIdConst)]
public partial class NoAutoFit : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10099;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NoAutoFit class.
    /// </summary>
    public NoAutoFit():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoAutoFit>(deep);

}
/// <summary>
/// <para>Normal AutoFit.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:normAutofit.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "normAutofit")]
[Id(ElementTypeIdConst)]
public partial class NormalAutoFit : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10100;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Font Scale.</para>
    /// <para>Represents the following attribute in the schema: fontScale </para>
    /// </summary>
    [SchemaAttr(0, "fontScale")]
    [Index(0)]
    public Int32Value FontScale { get; set; }
	
    /// <summary>
    /// <para> Line Space Reduction.</para>
    /// <para>Represents the following attribute in the schema: lnSpcReduction </para>
    /// </summary>
    [SchemaAttr(0, "lnSpcReduction")]
    [Index(1)]
    public Int32Value LineSpaceReduction { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NormalAutoFit class.
    /// </summary>
    public NormalAutoFit():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NormalAutoFit>(deep);

}
/// <summary>
/// <para>Shape AutoFit.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spAutoFit.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "spAutoFit")]
[Id(ElementTypeIdConst)]
public partial class ShapeAutoFit : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10101;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ShapeAutoFit class.
    /// </summary>
    public ShapeAutoFit():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeAutoFit>(deep);

}
/// <summary>
/// <para>Follow Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buClrTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buClrTx")]
[Id(ElementTypeIdConst)]
public partial class BulletColorText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10102;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BulletColorText class.
    /// </summary>
    public BulletColorText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColorText>(deep);

}
/// <summary>
/// <para>Color Specified.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "buClr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BulletColor : ColorType
{
    internal const int ElementTypeIdConst = 10103;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BulletColor class.
    /// </summary>
    public BulletColor():base(){}
        /// <summary>
    ///Initializes a new instance of the BulletColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BulletColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BulletColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BulletColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BulletColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BulletColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColor>(deep);

}
/// <summary>
/// <para>Extrusion Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extrusionClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "extrusionClr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ExtrusionColor : ColorType
{
    internal const int ElementTypeIdConst = 10201;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ExtrusionColor class.
    /// </summary>
    public ExtrusionColor():base(){}
        /// <summary>
    ///Initializes a new instance of the ExtrusionColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtrusionColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtrusionColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtrusionColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtrusionColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExtrusionColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtrusionColor>(deep);

}
/// <summary>
/// <para>Contour Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:contourClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "contourClr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ContourColor : ColorType
{
    internal const int ElementTypeIdConst = 10202;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ContourColor class.
    /// </summary>
    public ContourColor():base(){}
        /// <summary>
    ///Initializes a new instance of the ContourColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ContourColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ContourColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ContourColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ContourColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ContourColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContourColor>(deep);

}
/// <summary>
/// <para>Change Color From.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrFrom.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "clrFrom")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ColorFrom : ColorType
{
    internal const int ElementTypeIdConst = 10203;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ColorFrom class.
    /// </summary>
    public ColorFrom():base(){}
        /// <summary>
    ///Initializes a new instance of the ColorFrom class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorFrom(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorFrom class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorFrom(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorFrom class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorFrom(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorFrom>(deep);

}
/// <summary>
/// <para>Change Color To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrTo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "clrTo")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ColorTo : ColorType
{
    internal const int ElementTypeIdConst = 10204;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ColorTo class.
    /// </summary>
    public ColorTo():base(){}
        /// <summary>
    ///Initializes a new instance of the ColorTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorTo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorTo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorTo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorTo(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorTo>(deep);

}
/// <summary>
/// <para>Foreground color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fgClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "fgClr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ForegroundColor : ColorType
{
    internal const int ElementTypeIdConst = 10211;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ForegroundColor class.
    /// </summary>
    public ForegroundColor():base(){}
        /// <summary>
    ///Initializes a new instance of the ForegroundColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ForegroundColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ForegroundColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ForegroundColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ForegroundColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ForegroundColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForegroundColor>(deep);

}
/// <summary>
/// <para>Background color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bgClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "bgClr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BackgroundColor : ColorType
{
    internal const int ElementTypeIdConst = 10212;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BackgroundColor class.
    /// </summary>
    public BackgroundColor():base(){}
        /// <summary>
    ///Initializes a new instance of the BackgroundColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BackgroundColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BackgroundColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BackgroundColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BackgroundColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BackgroundColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundColor>(deep);

}
/// <summary>
/// <para>Defines the Highlight Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:highlight.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "highlight")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Highlight : ColorType
{
    internal const int ElementTypeIdConst = 10341;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Highlight class.
    /// </summary>
    public Highlight():base(){}
        /// <summary>
    ///Initializes a new instance of the Highlight class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Highlight(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Highlight class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Highlight(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Highlight class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Highlight(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Highlight>(deep);

}
/// <summary>
/// Defines the ColorType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

public abstract partial class ColorType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the ColorType class.
    /// </summary>
    protected ColorType(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ColorType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ColorType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected ColorType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Bullet Size Follows Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buSzTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buSzTx")]
[Id(ElementTypeIdConst)]
public partial class BulletSizeText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10104;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BulletSizeText class.
    /// </summary>
    public BulletSizeText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizeText>(deep);

}
/// <summary>
/// <para>Bullet Size Percentage.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buSzPct.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buSzPct")]
[Id(ElementTypeIdConst)]
public partial class BulletSizePercentage : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10105;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BulletSizePercentage class.
    /// </summary>
    public BulletSizePercentage():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePercentage>(deep);

}
/// <summary>
/// <para>Bullet Size Points.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buSzPts.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buSzPts")]
[Id(ElementTypeIdConst)]
public partial class BulletSizePoints : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10106;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BulletSizePoints class.
    /// </summary>
    public BulletSizePoints():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePoints>(deep);

}
/// <summary>
/// <para>Follow text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buFontTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buFontTx")]
[Id(ElementTypeIdConst)]
public partial class BulletFontText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10107;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BulletFontText class.
    /// </summary>
    public BulletFontText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFontText>(deep);

}
/// <summary>
/// <para>Specified.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buFont.</para>
/// </summary>

[SchemaAttr(10, "buFont")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BulletFont : TextFontType
{
    internal const int ElementTypeIdConst = 10108;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BulletFont class.
    /// </summary>
    public BulletFont():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFont>(deep);

}
/// <summary>
/// <para>Latin Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:latin.</para>
/// </summary>

[SchemaAttr(10, "latin")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LatinFont : TextFontType
{
    internal const int ElementTypeIdConst = 10131;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LatinFont class.
    /// </summary>
    public LatinFont():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatinFont>(deep);

}
/// <summary>
/// <para>East Asian Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ea.</para>
/// </summary>

[SchemaAttr(10, "ea")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EastAsianFont : TextFontType
{
    internal const int ElementTypeIdConst = 10132;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EastAsianFont class.
    /// </summary>
    public EastAsianFont():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EastAsianFont>(deep);

}
/// <summary>
/// <para>Complex Script Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cs.</para>
/// </summary>

[SchemaAttr(10, "cs")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ComplexScriptFont : TextFontType
{
    internal const int ElementTypeIdConst = 10133;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ComplexScriptFont class.
    /// </summary>
    public ComplexScriptFont():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ComplexScriptFont>(deep);

}
/// <summary>
/// <para>Defines the SymbolFont Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sym.</para>
/// </summary>

[SchemaAttr(10, "sym")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SymbolFont : TextFontType
{
    internal const int ElementTypeIdConst = 10342;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SymbolFont class.
    /// </summary>
    public SymbolFont():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SymbolFont>(deep);

}
/// <summary>
/// Defines the TextFontType class.
/// </summary>


public abstract partial class TextFontType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Text Typeface.</para>
    /// <para>Represents the following attribute in the schema: typeface </para>
    /// </summary>
    [SchemaAttr(0, "typeface")]
    [Index(0)]
    public StringValue Typeface { get; set; }
	
    /// <summary>
    /// <para> Panose Setting.</para>
    /// <para>Represents the following attribute in the schema: panose </para>
    /// </summary>
    [SchemaAttr(0, "panose")]
    [Index(1)]
    public HexBinaryValue Panose { get; set; }
	
    /// <summary>
    /// <para> Similar Font Family.</para>
    /// <para>Represents the following attribute in the schema: pitchFamily </para>
    /// </summary>
    [SchemaAttr(0, "pitchFamily")]
    [Index(2)]
    public SByteValue PitchFamily { get; set; }
	
    /// <summary>
    /// <para> Similar Character Set.</para>
    /// <para>Represents the following attribute in the schema: charset </para>
    /// </summary>
    [SchemaAttr(0, "charset")]
    [Index(3)]
    public SByteValue CharacterSet { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the TextFontType class.
    /// </summary>
    protected TextFontType(){}
    
    
    
}
/// <summary>
/// <para>No Bullet.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buNone.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buNone")]
[Id(ElementTypeIdConst)]
public partial class NoBullet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10109;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NoBullet class.
    /// </summary>
    public NoBullet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBullet>(deep);

}
/// <summary>
/// <para>Auto-Numbered Bullet.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buAutoNum.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buAutoNum")]
[Id(ElementTypeIdConst)]
public partial class AutoNumberedBullet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10110;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Bullet Autonumbering Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextAutoNumberSchemeValues> Type { get; set; }
	
    /// <summary>
    /// <para> Start Numbering At.</para>
    /// <para>Represents the following attribute in the schema: startAt </para>
    /// </summary>
    [SchemaAttr(0, "startAt")]
    [Index(1)]
    public Int32Value StartAt { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AutoNumberedBullet class.
    /// </summary>
    public AutoNumberedBullet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoNumberedBullet>(deep);

}
/// <summary>
/// <para>Character Bullet.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buChar.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buChar")]
[Id(ElementTypeIdConst)]
public partial class CharacterBullet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10111;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Bullet Character.</para>
    /// <para>Represents the following attribute in the schema: char </para>
    /// </summary>
    [SchemaAttr(0, "char")]
    [Index(0)]
    public StringValue Char { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the CharacterBullet class.
    /// </summary>
    public CharacterBullet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterBullet>(deep);

}
/// <summary>
/// <para>Picture Bullet.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:buBlip.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Blip &lt;a:blip></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Blip))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "buBlip")]
[Id(ElementTypeIdConst)]
public partial class PictureBullet : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10112;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PictureBullet class.
    /// </summary>
    public PictureBullet():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PictureBullet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PictureBullet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PictureBullet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PictureBullet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PictureBullet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PictureBullet(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Blip.</para>
    /// <para> Represents the following element tag in the schema: a:blip </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Blip Blip
	{
        get => GetElement<Blip>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureBullet>(deep);

}
/// <summary>
/// <para>Underline Follows Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:uLnTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "uLnTx")]
[Id(ElementTypeIdConst)]
public partial class UnderlineFollowsText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10113;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the UnderlineFollowsText class.
    /// </summary>
    public UnderlineFollowsText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFollowsText>(deep);

}
/// <summary>
/// <para>Underline Stroke.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:uLn.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "uLn")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Underline : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10114;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Underline class.
    /// </summary>
    public Underline():base(){}
        /// <summary>
    ///Initializes a new instance of the Underline class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Underline(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Underline class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Underline(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Underline class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Underline(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);

}
/// <summary>
/// <para>Defines the Outline Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ln.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "ln")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Outline : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10138;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Outline class.
    /// </summary>
    public Outline():base(){}
        /// <summary>
    ///Initializes a new instance of the Outline class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Outline(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Outline class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Outline(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Outline class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Outline(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);

}
/// <summary>
/// <para>Left Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnL.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnL")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LeftBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10247;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LeftBorderLineProperties class.
    /// </summary>
    public LeftBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LeftBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorderLineProperties>(deep);

}
/// <summary>
/// <para>Right Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnR.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnR")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RightBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10248;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the RightBorderLineProperties class.
    /// </summary>
    public RightBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RightBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorderLineProperties>(deep);

}
/// <summary>
/// <para>Top Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnT.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnT")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10249;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TopBorderLineProperties class.
    /// </summary>
    public TopBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorderLineProperties>(deep);

}
/// <summary>
/// <para>Bottom Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnB.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnB")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BottomBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10250;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BottomBorderLineProperties class.
    /// </summary>
    public BottomBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BottomBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorderLineProperties>(deep);

}
/// <summary>
/// <para>Top-Left to Bottom-Right Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnTlToBr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnTlToBr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopLeftToBottomRightBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10251;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class.
    /// </summary>
    public TopLeftToBottomRightBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopLeftToBottomRightBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopLeftToBottomRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopLeftToBottomRightBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorderLineProperties>(deep);

}
/// <summary>
/// <para>Bottom-Left to Top-Right Border Line Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnBlToTr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnBlToTr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BottomLeftToTopRightBorderLineProperties : LinePropertiesType
{
    internal const int ElementTypeIdConst = 10252;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class.
    /// </summary>
    public BottomLeftToTopRightBorderLineProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomLeftToTopRightBorderLineProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomLeftToTopRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BottomLeftToTopRightBorderLineProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomLeftToTopRightBorderLineProperties>(deep);

}
/// <summary>
/// Defines the LinePropertiesType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>PresetDash &lt;a:prstDash></description></item>
///<item><description>CustomDash &lt;a:custDash></description></item>
///<item><description>Round &lt;a:round></description></item>
///<item><description>LineJoinBevel &lt;a:bevel></description></item>
///<item><description>Miter &lt;a:miter></description></item>
///<item><description>HeadEnd &lt;a:headEnd></description></item>
///<item><description>TailEnd &lt;a:tailEnd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(PresetDash))]
    [ChildElementInfo(typeof(CustomDash))]
    [ChildElementInfo(typeof(Round))]
    [ChildElementInfo(typeof(LineJoinBevel))]
    [ChildElementInfo(typeof(Miter))]
    [ChildElementInfo(typeof(HeadEnd))]
    [ChildElementInfo(typeof(TailEnd))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class LinePropertiesType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Line Width.</para>
    /// <para>Represents the following attribute in the schema: w </para>
    /// </summary>
    [SchemaAttr(0, "w")]
    [Index(0)]
    public Int32Value Width { get; set; }
	
    /// <summary>
    /// <para> Line Ending Cap Type.</para>
    /// <para>Represents the following attribute in the schema: cap </para>
    /// </summary>
    [SchemaAttr(0, "cap")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LineCapValues> CapType { get; set; }
	
    /// <summary>
    /// <para> Compound Line Type.</para>
    /// <para>Represents the following attribute in the schema: cmpd </para>
    /// </summary>
    [SchemaAttr(0, "cmpd")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.CompoundLineValues> CompoundLineType { get; set; }
	
    /// <summary>
    /// <para> Stroke Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(3)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PenAlignmentValues> Alignment { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the LinePropertiesType class.
    /// </summary>
    protected LinePropertiesType(){}
    
        /// <summary>
    ///Initializes a new instance of the LinePropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected LinePropertiesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LinePropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected LinePropertiesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LinePropertiesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected LinePropertiesType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Underline Fill Properties Follow Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:uFillTx.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "uFillTx")]
[Id(ElementTypeIdConst)]
public partial class UnderlineFillText : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10115;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the UnderlineFillText class.
    /// </summary>
    public UnderlineFillText():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFillText>(deep);

}
/// <summary>
/// <para>Underline Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:uFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "uFill")]
[Id(ElementTypeIdConst)]
public partial class UnderlineFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10116;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the UnderlineFill class.
    /// </summary>
    public UnderlineFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the UnderlineFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public UnderlineFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the UnderlineFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public UnderlineFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the UnderlineFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public UnderlineFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> NoFill.</para>
    /// <para> Represents the following element tag in the schema: a:noFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NoFill NoFill
	{
        get => GetElement<NoFill>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> SolidFill.</para>
    /// <para> Represents the following element tag in the schema: a:solidFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SolidFill SolidFill
	{
        get => GetElement<SolidFill>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> GradientFill.</para>
    /// <para> Represents the following element tag in the schema: a:gradFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public GradientFill GradientFill
	{
        get => GetElement<GradientFill>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> BlipFill.</para>
    /// <para> Represents the following element tag in the schema: a:blipFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BlipFill BlipFill
	{
        get => GetElement<BlipFill>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Pattern Fill.</para>
    /// <para> Represents the following element tag in the schema: a:pattFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public PatternFill PatternFill
	{
        get => GetElement<PatternFill>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Group Fill.</para>
    /// <para> Represents the following element tag in the schema: a:grpFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public GroupFill GroupFill
	{
        get => GetElement<GroupFill>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFill>(deep);

}
/// <summary>
/// <para>Text Run.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:r.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RunProperties &lt;a:rPr></description></item>
///<item><description>Text &lt;a:t></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(Text))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "r")]
[Id(ElementTypeIdConst)]
public partial class Run : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10117;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Run class.
    /// </summary>
    public Run():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Run class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Run(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Run class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Run(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Run class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Run(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text Character Properties.</para>
    /// <para> Represents the following element tag in the schema: a:rPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RunProperties RunProperties
	{
        get => GetElement<RunProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Text String.</para>
    /// <para> Represents the following element tag in the schema: a:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Text Text
	{
        get => GetElement<Text>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);

}
/// <summary>
/// <para>Text Line Break.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:br.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RunProperties &lt;a:rPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RunProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "br")]
[Id(ElementTypeIdConst)]
public partial class Break : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10118;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Break class.
    /// </summary>
    public Break():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Break class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Break(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Break class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Break(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Break class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Break(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text Run Properties.</para>
    /// <para> Represents the following element tag in the schema: a:rPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RunProperties RunProperties
	{
        get => GetElement<RunProperties>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);

}
/// <summary>
/// <para>Text Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fld.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RunProperties &lt;a:rPr></description></item>
///<item><description>ParagraphProperties &lt;a:pPr></description></item>
///<item><description>Text &lt;a:t></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(ParagraphProperties))]
    [ChildElementInfo(typeof(Text))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fld")]
[Id(ElementTypeIdConst)]
public partial class Field : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10119;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Field ID.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id")]
    [Index(0)]
    public StringValue Id { get; set; }
	
    /// <summary>
    /// <para> Field Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type")]
    [Index(1)]
    public StringValue Type { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Field class.
    /// </summary>
    public Field():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Field class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Field(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Field class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Field(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Field class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Field(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text Character Properties.</para>
    /// <para> Represents the following element tag in the schema: a:rPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RunProperties RunProperties
	{
        get => GetElement<RunProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Text Paragraph Properties.</para>
    /// <para> Represents the following element tag in the schema: a:pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ParagraphProperties ParagraphProperties
	{
        get => GetElement<ParagraphProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Text.</para>
    /// <para> Represents the following element tag in the schema: a:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Text Text
	{
        get => GetElement<Text>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Field>(deep);

}
/// <summary>
/// <para>Graphic Object.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:graphic.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GraphicData &lt;a:graphicData></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GraphicData))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "graphic")]
[Id(ElementTypeIdConst)]
public partial class Graphic : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10120;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Graphic class.
    /// </summary>
    public Graphic():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Graphic class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Graphic(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Graphic class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Graphic(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Graphic class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Graphic(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Graphic Object Data.</para>
    /// <para> Represents the following element tag in the schema: a:graphicData </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public GraphicData GraphicData
	{
        get => GetElement<GraphicData>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Graphic>(deep);

}
/// <summary>
/// <para>Defines the Blip Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:blip.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AlphaBiLevel &lt;a:alphaBiLevel></description></item>
///<item><description>AlphaCeiling &lt;a:alphaCeiling></description></item>
///<item><description>AlphaFloor &lt;a:alphaFloor></description></item>
///<item><description>AlphaInverse &lt;a:alphaInv></description></item>
///<item><description>AlphaModulationEffect &lt;a:alphaMod></description></item>
///<item><description>AlphaModulationFixed &lt;a:alphaModFix></description></item>
///<item><description>AlphaReplace &lt;a:alphaRepl></description></item>
///<item><description>BiLevel &lt;a:biLevel></description></item>
///<item><description>Blur &lt;a:blur></description></item>
///<item><description>ColorChange &lt;a:clrChange></description></item>
///<item><description>ColorReplacement &lt;a:clrRepl></description></item>
///<item><description>Duotone &lt;a:duotone></description></item>
///<item><description>FillOverlay &lt;a:fillOverlay></description></item>
///<item><description>Grayscale &lt;a:grayscl></description></item>
///<item><description>Hsl &lt;a:hsl></description></item>
///<item><description>LuminanceEffect &lt;a:lum></description></item>
///<item><description>TintEffect &lt;a:tint></description></item>
///<item><description>BlipExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AlphaBiLevel))]
    [ChildElementInfo(typeof(AlphaCeiling))]
    [ChildElementInfo(typeof(AlphaFloor))]
    [ChildElementInfo(typeof(AlphaInverse))]
    [ChildElementInfo(typeof(AlphaModulationEffect))]
    [ChildElementInfo(typeof(AlphaModulationFixed))]
    [ChildElementInfo(typeof(AlphaReplace))]
    [ChildElementInfo(typeof(BiLevel))]
    [ChildElementInfo(typeof(Blur))]
    [ChildElementInfo(typeof(ColorChange))]
    [ChildElementInfo(typeof(ColorReplacement))]
    [ChildElementInfo(typeof(Duotone))]
    [ChildElementInfo(typeof(FillOverlay))]
    [ChildElementInfo(typeof(Grayscale))]
    [ChildElementInfo(typeof(Hsl))]
    [ChildElementInfo(typeof(LuminanceEffect))]
    [ChildElementInfo(typeof(TintEffect))]
    [ChildElementInfo(typeof(BlipExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "blip")]
[Id(ElementTypeIdConst)]
public partial class Blip : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10121;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Embedded Picture Reference.</para>
    /// <para>Represents the following attribute in the schema: r:embed </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "embed")]
    [Index(0)]
    public StringValue Embed { get; set; }
	
    /// <summary>
    /// <para> Linked Picture Reference.</para>
    /// <para>Represents the following attribute in the schema: r:link </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "link")]
    [Index(1)]
    public StringValue Link { get; set; }
	
    /// <summary>
    /// <para> cstate.</para>
    /// <para>Represents the following attribute in the schema: cstate </para>
    /// </summary>
    [SchemaAttr(0, "cstate")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BlipCompressionValues> CompressionState { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Blip class.
    /// </summary>
    public Blip():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Blip class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Blip(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Blip class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Blip(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Blip class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Blip(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blip>(deep);

}
/// <summary>
/// <para>Theme. The root element of ThemePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:theme.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ThemeElements &lt;a:themeElements></description></item>
///<item><description>ObjectDefaults &lt;a:objectDefaults></description></item>
///<item><description>ExtraColorSchemeList &lt;a:extraClrSchemeLst></description></item>
///<item><description>CustomColorList &lt;a:custClrLst></description></item>
///<item><description>OfficeStyleSheetExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ThemeElements))]
    [ChildElementInfo(typeof(ObjectDefaults))]
    [ChildElementInfo(typeof(ExtraColorSchemeList))]
    [ChildElementInfo(typeof(CustomColorList))]
    [ChildElementInfo(typeof(OfficeStyleSheetExtensionList))]

[SchemaAttr(10, "theme")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Theme : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 10122;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	
    /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: thm15:id </para>
    /// </summary>
///<remark> xmlns:thm15=http://schemas.microsoft.com/office/thememl/2012/main
///</remark>
    [SchemaAttr(73, "id")]
    [Index(1)]
    public StringValue ThemeId { get; set; }
	

    
	internal Theme(ThemePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the ThemePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(ThemePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the ThemePart associated with this element.
    /// </summary>
    public ThemePart ThemePart
    {
		get => OpenXmlPart as ThemePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Theme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Theme(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Theme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Theme(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Theme class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Theme(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Theme class.
    /// </summary>
    public Theme():base(){}
    
    /// <summary>
    /// Saves the DOM into the ThemePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(ThemePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ThemeElements.</para>
    /// <para> Represents the following element tag in the schema: a:themeElements </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ThemeElements ThemeElements
	{
        get => GetElement<ThemeElements>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> ObjectDefaults.</para>
    /// <para> Represents the following element tag in the schema: a:objectDefaults </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ObjectDefaults ObjectDefaults
	{
        get => GetElement<ObjectDefaults>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ExtraColorSchemeList.</para>
    /// <para> Represents the following element tag in the schema: a:extraClrSchemeLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtraColorSchemeList ExtraColorSchemeList
	{
        get => GetElement<ExtraColorSchemeList>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> CustomColorList.</para>
    /// <para> Represents the following element tag in the schema: a:custClrLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public CustomColorList CustomColorList
	{
        get => GetElement<CustomColorList>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> OfficeStyleSheetExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public OfficeStyleSheetExtensionList OfficeStyleSheetExtensionList
	{
        get => GetElement<OfficeStyleSheetExtensionList>(4);
        set => SetElement(4, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Theme>(deep);

}
/// <summary>
/// <para>Theme Override. The root element of ThemeOverridePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:themeOverride.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ColorScheme &lt;a:clrScheme></description></item>
///<item><description>FontScheme &lt;a:fontScheme></description></item>
///<item><description>FormatScheme &lt;a:fmtScheme></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ColorScheme))]
    [ChildElementInfo(typeof(FontScheme))]
    [ChildElementInfo(typeof(FormatScheme))]

[SchemaAttr(10, "themeOverride")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ThemeOverride : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 10123;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    
	internal ThemeOverride(ThemeOverridePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the ThemeOverridePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(ThemeOverridePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the ThemeOverridePart associated with this element.
    /// </summary>
    public ThemeOverridePart ThemeOverridePart
    {
		get => OpenXmlPart as ThemeOverridePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the ThemeOverride class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ThemeOverride(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeOverride class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ThemeOverride(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeOverride class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ThemeOverride(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the ThemeOverride class.
    /// </summary>
    public ThemeOverride():base(){}
    
    /// <summary>
    /// Saves the DOM into the ThemeOverridePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(ThemeOverridePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Color Scheme.</para>
    /// <para> Represents the following element tag in the schema: a:clrScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ColorScheme ColorScheme
	{
        get => GetElement<ColorScheme>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> FontScheme.</para>
    /// <para> Represents the following element tag in the schema: a:fontScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public FontScheme FontScheme
	{
        get => GetElement<FontScheme>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> FormatScheme.</para>
    /// <para> Represents the following element tag in the schema: a:fmtScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public FormatScheme FormatScheme
	{
        get => GetElement<FormatScheme>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeOverride>(deep);

}
/// <summary>
/// <para>Theme Manager.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:themeManager.</para>
/// </summary>

[SchemaAttr(10, "themeManager")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ThemeManager : EmptyType
{
    internal const int ElementTypeIdConst = 10124;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ThemeManager class.
    /// </summary>
    public ThemeManager():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeManager>(deep);

}
/// <summary>
/// <para>Master Color Mapping.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:masterClrMapping.</para>
/// </summary>

[SchemaAttr(10, "masterClrMapping")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MasterColorMapping : EmptyType
{
    internal const int ElementTypeIdConst = 10242;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the MasterColorMapping class.
    /// </summary>
    public MasterColorMapping():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MasterColorMapping>(deep);

}
/// <summary>
/// Defines the EmptyType class.
/// </summary>


public abstract partial class EmptyType : OpenXmlLeafElement
{
        
    
    
    
    
    /// <summary>
    /// Initializes a new instance of the EmptyType class.
    /// </summary>
    protected EmptyType(){}
    
    
    
}
/// <summary>
/// <para>Table.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tbl.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableProperties &lt;a:tblPr></description></item>
///<item><description>TableGrid &lt;a:tblGrid></description></item>
///<item><description>TableRow &lt;a:tr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableProperties))]
    [ChildElementInfo(typeof(TableGrid))]
    [ChildElementInfo(typeof(TableRow))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tbl")]
[Id(ElementTypeIdConst)]
public partial class Table : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10125;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Table class.
    /// </summary>
    public Table():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Table class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Table(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Table class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Table(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Table class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Table(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Table Properties.</para>
    /// <para> Represents the following element tag in the schema: a:tblPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TableProperties TableProperties
	{
        get => GetElement<TableProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Table Grid.</para>
    /// <para> Represents the following element tag in the schema: a:tblGrid </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public TableGrid TableGrid
	{
        get => GetElement<TableGrid>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);

}
/// <summary>
/// <para>Table Style List. The root element of TableStylesPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tblStyleLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableStyleEntry &lt;a:tblStyle></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableStyleEntry))]

[SchemaAttr(10, "tblStyleLst")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TableStyleList : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 10126;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Default.</para>
    /// <para>Represents the following attribute in the schema: def </para>
    /// </summary>
    [SchemaAttr(0, "def")]
    [Index(0)]
    public StringValue Default { get; set; }
	

    
	internal TableStyleList(TableStylesPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the TableStylesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(TableStylesPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the TableStylesPart associated with this element.
    /// </summary>
    public TableStylesPart TableStylesPart
    {
		get => OpenXmlPart as TableStylesPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the TableStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableStyleList(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the TableStyleList class.
    /// </summary>
    public TableStyleList():base(){}
    
    /// <summary>
    /// Saves the DOM into the TableStylesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(TableStylesPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleList>(deep);

}
/// <summary>
/// <para>Defines the ExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Extension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Extension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class ExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10127;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class.
    /// </summary>
    public ExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtensionList>(deep);

}
/// <summary>
/// <para>Audio Start Time.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:st.</para>
/// </summary>

[SchemaAttr(10, "st")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class StartTime : AudioCDTimeType
{
    internal const int ElementTypeIdConst = 10128;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the StartTime class.
    /// </summary>
    public StartTime():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartTime>(deep);

}
/// <summary>
/// <para>Audio End Time.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:end.</para>
/// </summary>

[SchemaAttr(10, "end")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EndTime : AudioCDTimeType
{
    internal const int ElementTypeIdConst = 10129;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EndTime class.
    /// </summary>
    public EndTime():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndTime>(deep);

}
/// <summary>
/// Defines the AudioCDTimeType class.
/// </summary>


public abstract partial class AudioCDTimeType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Track.</para>
    /// <para>Represents the following attribute in the schema: track </para>
    /// </summary>
    [SchemaAttr(0, "track")]
    [Index(0)]
    public ByteValue Track { get; set; }
	
    /// <summary>
    /// <para> Time.</para>
    /// <para>Represents the following attribute in the schema: time </para>
    /// </summary>
    [SchemaAttr(0, "time")]
    [Index(1)]
    public UInt32Value Time { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the AudioCDTimeType class.
    /// </summary>
    protected AudioCDTimeType(){}
    
    
    
}
/// <summary>
/// <para>Custom color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:custClr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "custClr")]
[Id(ElementTypeIdConst)]
public partial class CustomColor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10130;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the CustomColor class.
    /// </summary>
    public CustomColor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomColor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColor>(deep);

}
/// <summary>
/// <para>Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:font.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "font")]
[Id(ElementTypeIdConst)]
public partial class SupplementalFont : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10134;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Script.</para>
    /// <para>Represents the following attribute in the schema: script </para>
    /// </summary>
    [SchemaAttr(0, "script")]
    [Index(0)]
    public StringValue Script { get; set; }
	
    /// <summary>
    /// <para> Typeface.</para>
    /// <para>Represents the following attribute in the schema: typeface </para>
    /// </summary>
    [SchemaAttr(0, "typeface")]
    [Index(1)]
    public StringValue Typeface { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SupplementalFont class.
    /// </summary>
    public SupplementalFont():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SupplementalFont>(deep);

}
/// <summary>
/// <para>3D Scene Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:scene3d.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Camera &lt;a:camera></description></item>
///<item><description>LightRig &lt;a:lightRig></description></item>
///<item><description>Backdrop &lt;a:backdrop></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Camera))]
    [ChildElementInfo(typeof(LightRig))]
    [ChildElementInfo(typeof(Backdrop))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "scene3d")]
[Id(ElementTypeIdConst)]
public partial class Scene3DType : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10135;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Scene3DType class.
    /// </summary>
    public Scene3DType():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Scene3DType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scene3DType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Scene3DType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scene3DType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Scene3DType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Scene3DType(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Camera.</para>
    /// <para> Represents the following element tag in the schema: a:camera </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Camera Camera
	{
        get => GetElement<Camera>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Light Rig.</para>
    /// <para> Represents the following element tag in the schema: a:lightRig </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public LightRig LightRig
	{
        get => GetElement<LightRig>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Backdrop Plane.</para>
    /// <para> Represents the following element tag in the schema: a:backdrop </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Backdrop Backdrop
	{
        get => GetElement<Backdrop>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Scene3DType>(deep);

}
/// <summary>
/// <para>Effect Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effectStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Scene3DType &lt;a:scene3d></description></item>
///<item><description>Shape3DType &lt;a:sp3d></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]
    [ChildElementInfo(typeof(Scene3DType))]
    [ChildElementInfo(typeof(Shape3DType))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "effectStyle")]
[Id(ElementTypeIdConst)]
public partial class EffectStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10139;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the EffectStyle class.
    /// </summary>
    public EffectStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the EffectStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyle>(deep);

}
/// <summary>
/// <para>Fill Style List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fillStyleLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fillStyleLst")]
[Id(ElementTypeIdConst)]
public partial class FillStyleList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10140;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the FillStyleList class.
    /// </summary>
    public FillStyleList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FillStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillStyleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FillStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FillStyleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FillStyleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FillStyleList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillStyleList>(deep);

}
/// <summary>
/// <para>Line Style List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnStyleLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Outline))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lnStyleLst")]
[Id(ElementTypeIdConst)]
public partial class LineStyleList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10141;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the LineStyleList class.
    /// </summary>
    public LineStyleList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the LineStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineStyleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LineStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineStyleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LineStyleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LineStyleList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineStyleList>(deep);

}
/// <summary>
/// <para>Effect Style List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:effectStyleLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EffectStyle &lt;a:effectStyle></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EffectStyle))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "effectStyleLst")]
[Id(ElementTypeIdConst)]
public partial class EffectStyleList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10142;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the EffectStyleList class.
    /// </summary>
    public EffectStyleList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the EffectStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectStyleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EffectStyleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EffectStyleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EffectStyleList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyleList>(deep);

}
/// <summary>
/// <para>Background Fill Style List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bgFillStyleLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "bgFillStyleLst")]
[Id(ElementTypeIdConst)]
public partial class BackgroundFillStyleList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10143;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BackgroundFillStyleList class.
    /// </summary>
    public BackgroundFillStyleList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BackgroundFillStyleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BackgroundFillStyleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BackgroundFillStyleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BackgroundFillStyleList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundFillStyleList>(deep);

}
/// <summary>
/// <para>Defines the ColorScheme Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrScheme.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Dark1Color &lt;a:dk1></description></item>
///<item><description>Light1Color &lt;a:lt1></description></item>
///<item><description>Dark2Color &lt;a:dk2></description></item>
///<item><description>Light2Color &lt;a:lt2></description></item>
///<item><description>Accent1Color &lt;a:accent1></description></item>
///<item><description>Accent2Color &lt;a:accent2></description></item>
///<item><description>Accent3Color &lt;a:accent3></description></item>
///<item><description>Accent4Color &lt;a:accent4></description></item>
///<item><description>Accent5Color &lt;a:accent5></description></item>
///<item><description>Accent6Color &lt;a:accent6></description></item>
///<item><description>Hyperlink &lt;a:hlink></description></item>
///<item><description>FollowedHyperlinkColor &lt;a:folHlink></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Dark1Color))]
    [ChildElementInfo(typeof(Light1Color))]
    [ChildElementInfo(typeof(Dark2Color))]
    [ChildElementInfo(typeof(Light2Color))]
    [ChildElementInfo(typeof(Accent1Color))]
    [ChildElementInfo(typeof(Accent2Color))]
    [ChildElementInfo(typeof(Accent3Color))]
    [ChildElementInfo(typeof(Accent4Color))]
    [ChildElementInfo(typeof(Accent5Color))]
    [ChildElementInfo(typeof(Accent6Color))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(FollowedHyperlinkColor))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "clrScheme")]
[Id(ElementTypeIdConst)]
public partial class ColorScheme : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10144;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ColorScheme class.
    /// </summary>
    public ColorScheme():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorScheme(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorScheme(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorScheme class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorScheme(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Dark 1.</para>
    /// <para> Represents the following element tag in the schema: a:dk1 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Dark1Color Dark1Color
	{
        get => GetElement<Dark1Color>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Light 1.</para>
    /// <para> Represents the following element tag in the schema: a:lt1 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Light1Color Light1Color
	{
        get => GetElement<Light1Color>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Dark 2.</para>
    /// <para> Represents the following element tag in the schema: a:dk2 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Dark2Color Dark2Color
	{
        get => GetElement<Dark2Color>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Light 2.</para>
    /// <para> Represents the following element tag in the schema: a:lt2 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public Light2Color Light2Color
	{
        get => GetElement<Light2Color>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Accent 1.</para>
    /// <para> Represents the following element tag in the schema: a:accent1 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public Accent1Color Accent1Color
	{
        get => GetElement<Accent1Color>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Accent 2.</para>
    /// <para> Represents the following element tag in the schema: a:accent2 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public Accent2Color Accent2Color
	{
        get => GetElement<Accent2Color>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> Accent 3.</para>
    /// <para> Represents the following element tag in the schema: a:accent3 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public Accent3Color Accent3Color
	{
        get => GetElement<Accent3Color>(6);
        set => SetElement(6, value);
	}
    
    /// <summary>
    /// <para> Accent 4.</para>
    /// <para> Represents the following element tag in the schema: a:accent4 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(7)]
    public Accent4Color Accent4Color
	{
        get => GetElement<Accent4Color>(7);
        set => SetElement(7, value);
	}
    
    /// <summary>
    /// <para> Accent 5.</para>
    /// <para> Represents the following element tag in the schema: a:accent5 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(8)]
    public Accent5Color Accent5Color
	{
        get => GetElement<Accent5Color>(8);
        set => SetElement(8, value);
	}
    
    /// <summary>
    /// <para> Accent 6.</para>
    /// <para> Represents the following element tag in the schema: a:accent6 </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(9)]
    public Accent6Color Accent6Color
	{
        get => GetElement<Accent6Color>(9);
        set => SetElement(9, value);
	}
    
    /// <summary>
    /// <para> Hyperlink.</para>
    /// <para> Represents the following element tag in the schema: a:hlink </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(10)]
    public Hyperlink Hyperlink
	{
        get => GetElement<Hyperlink>(10);
        set => SetElement(10, value);
	}
    
    /// <summary>
    /// <para> Followed Hyperlink.</para>
    /// <para> Represents the following element tag in the schema: a:folHlink </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(11)]
    public FollowedHyperlinkColor FollowedHyperlinkColor
	{
        get => GetElement<FollowedHyperlinkColor>(11);
        set => SetElement(11, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(12)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(12);
        set => SetElement(12, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorScheme>(deep);

}
/// <summary>
/// <para>Font Scheme.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fontScheme.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MajorFont &lt;a:majorFont></description></item>
///<item><description>MinorFont &lt;a:minorFont></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MajorFont))]
    [ChildElementInfo(typeof(MinorFont))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fontScheme")]
[Id(ElementTypeIdConst)]
public partial class FontScheme : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10145;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the FontScheme class.
    /// </summary>
    public FontScheme():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FontScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FontScheme(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FontScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FontScheme(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FontScheme class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FontScheme(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Major Font.</para>
    /// <para> Represents the following element tag in the schema: a:majorFont </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public MajorFont MajorFont
	{
        get => GetElement<MajorFont>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Minor fonts.</para>
    /// <para> Represents the following element tag in the schema: a:minorFont </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public MinorFont MinorFont
	{
        get => GetElement<MinorFont>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontScheme>(deep);

}
/// <summary>
/// <para>Format Scheme.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fmtScheme.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FillStyleList &lt;a:fillStyleLst></description></item>
///<item><description>LineStyleList &lt;a:lnStyleLst></description></item>
///<item><description>EffectStyleList &lt;a:effectStyleLst></description></item>
///<item><description>BackgroundFillStyleList &lt;a:bgFillStyleLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FillStyleList))]
    [ChildElementInfo(typeof(LineStyleList))]
    [ChildElementInfo(typeof(EffectStyleList))]
    [ChildElementInfo(typeof(BackgroundFillStyleList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "fmtScheme")]
[Id(ElementTypeIdConst)]
public partial class FormatScheme : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10146;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the FormatScheme class.
    /// </summary>
    public FormatScheme():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FormatScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FormatScheme(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FormatScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FormatScheme(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FormatScheme class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FormatScheme(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Fill Style List.</para>
    /// <para> Represents the following element tag in the schema: a:fillStyleLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public FillStyleList FillStyleList
	{
        get => GetElement<FillStyleList>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Line Style List.</para>
    /// <para> Represents the following element tag in the schema: a:lnStyleLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public LineStyleList LineStyleList
	{
        get => GetElement<LineStyleList>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Effect Style List.</para>
    /// <para> Represents the following element tag in the schema: a:effectStyleLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public EffectStyleList EffectStyleList
	{
        get => GetElement<EffectStyleList>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Background Fill Style List.</para>
    /// <para> Represents the following element tag in the schema: a:bgFillStyleLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BackgroundFillStyleList BackgroundFillStyleList
	{
        get => GetElement<BackgroundFillStyleList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormatScheme>(deep);

}
/// <summary>
/// <para>Dark 1.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:dk1.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "dk1")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Dark1Color : Color2Type
{
    internal const int ElementTypeIdConst = 10147;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Dark1Color class.
    /// </summary>
    public Dark1Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Dark1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dark1Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Dark1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dark1Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Dark1Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Dark1Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark1Color>(deep);

}
/// <summary>
/// <para>Light 1.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lt1.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lt1")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Light1Color : Color2Type
{
    internal const int ElementTypeIdConst = 10148;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Light1Color class.
    /// </summary>
    public Light1Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Light1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Light1Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Light1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Light1Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Light1Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Light1Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light1Color>(deep);

}
/// <summary>
/// <para>Dark 2.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:dk2.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "dk2")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Dark2Color : Color2Type
{
    internal const int ElementTypeIdConst = 10149;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Dark2Color class.
    /// </summary>
    public Dark2Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Dark2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dark2Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Dark2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dark2Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Dark2Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Dark2Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark2Color>(deep);

}
/// <summary>
/// <para>Light 2.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lt2.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lt2")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Light2Color : Color2Type
{
    internal const int ElementTypeIdConst = 10150;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Light2Color class.
    /// </summary>
    public Light2Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Light2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Light2Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Light2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Light2Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Light2Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Light2Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light2Color>(deep);

}
/// <summary>
/// <para>Accent 1.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent1.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent1")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent1Color : Color2Type
{
    internal const int ElementTypeIdConst = 10151;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent1Color class.
    /// </summary>
    public Accent1Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent1Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent1Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent1Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent1Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent1Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent1Color>(deep);

}
/// <summary>
/// <para>Accent 2.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent2.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent2")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent2Color : Color2Type
{
    internal const int ElementTypeIdConst = 10152;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent2Color class.
    /// </summary>
    public Accent2Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent2Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent2Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent2Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent2Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent2Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent2Color>(deep);

}
/// <summary>
/// <para>Accent 3.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent3.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent3")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent3Color : Color2Type
{
    internal const int ElementTypeIdConst = 10153;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent3Color class.
    /// </summary>
    public Accent3Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent3Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent3Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent3Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent3Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent3Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent3Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent3Color>(deep);

}
/// <summary>
/// <para>Accent 4.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent4.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent4")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent4Color : Color2Type
{
    internal const int ElementTypeIdConst = 10154;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent4Color class.
    /// </summary>
    public Accent4Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent4Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent4Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent4Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent4Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent4Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent4Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent4Color>(deep);

}
/// <summary>
/// <para>Accent 5.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent5.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent5")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent5Color : Color2Type
{
    internal const int ElementTypeIdConst = 10155;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent5Color class.
    /// </summary>
    public Accent5Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent5Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent5Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent5Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent5Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent5Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent5Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent5Color>(deep);

}
/// <summary>
/// <para>Accent 6.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:accent6.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "accent6")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Accent6Color : Color2Type
{
    internal const int ElementTypeIdConst = 10156;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Accent6Color class.
    /// </summary>
    public Accent6Color():base(){}
        /// <summary>
    ///Initializes a new instance of the Accent6Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent6Color(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent6Color class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Accent6Color(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Accent6Color class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Accent6Color(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent6Color>(deep);

}
/// <summary>
/// <para>Hyperlink.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hlink.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "hlink")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Hyperlink : Color2Type
{
    internal const int ElementTypeIdConst = 10157;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Hyperlink class.
    /// </summary>
    public Hyperlink():base(){}
        /// <summary>
    ///Initializes a new instance of the Hyperlink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Hyperlink(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Hyperlink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Hyperlink(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Hyperlink class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Hyperlink(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);

}
/// <summary>
/// <para>Followed Hyperlink.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:folHlink.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "folHlink")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FollowedHyperlinkColor : Color2Type
{
    internal const int ElementTypeIdConst = 10158;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FollowedHyperlinkColor class.
    /// </summary>
    public FollowedHyperlinkColor():base(){}
        /// <summary>
    ///Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FollowedHyperlinkColor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FollowedHyperlinkColor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FollowedHyperlinkColor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FollowedHyperlinkColor(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FollowedHyperlinkColor>(deep);

}
/// <summary>
/// Defines the Color2Type class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(PresetColor))]

public abstract partial class Color2Type : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(4);
        set => SetElement(4, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the Color2Type class.
    /// </summary>
    protected Color2Type(){}
    
        /// <summary>
    ///Initializes a new instance of the Color2Type class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected Color2Type(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Color2Type class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected Color2Type(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Color2Type class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected Color2Type(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Horizontal Ratio.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sx.</para>
/// </summary>

[SchemaAttr(10, "sx")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ScaleX : RatioType
{
    internal const int ElementTypeIdConst = 10159;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ScaleX class.
    /// </summary>
    public ScaleX():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleX>(deep);

}
/// <summary>
/// <para>Vertical Ratio.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sy.</para>
/// </summary>

[SchemaAttr(10, "sy")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ScaleY : RatioType
{
    internal const int ElementTypeIdConst = 10160;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ScaleY class.
    /// </summary>
    public ScaleY():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleY>(deep);

}
/// <summary>
/// Defines the RatioType class.
/// </summary>


public abstract partial class RatioType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Numerator.</para>
    /// <para>Represents the following attribute in the schema: n </para>
    /// </summary>
    [SchemaAttr(0, "n")]
    [Index(0)]
    public Int32Value Numerator { get; set; }
	
    /// <summary>
    /// <para> Denominator.</para>
    /// <para>Represents the following attribute in the schema: d </para>
    /// </summary>
    [SchemaAttr(0, "d")]
    [Index(1)]
    public Int32Value Denominator { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the RatioType class.
    /// </summary>
    protected RatioType(){}
    
    
    
}
/// <summary>
/// <para>Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:off.</para>
/// </summary>

[SchemaAttr(10, "off")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Offset : Point2DType
{
    internal const int ElementTypeIdConst = 10161;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Offset class.
    /// </summary>
    public Offset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Offset>(deep);

}
/// <summary>
/// <para>Child Offset.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:chOff.</para>
/// </summary>

[SchemaAttr(10, "chOff")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ChildOffset : Point2DType
{
    internal const int ElementTypeIdConst = 10163;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ChildOffset class.
    /// </summary>
    public ChildOffset():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildOffset>(deep);

}
/// <summary>
/// Defines the Point2DType class.
/// </summary>


public abstract partial class Point2DType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> X-Axis Coordinate.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x")]
    [Index(0)]
    public Int64Value X { get; set; }
	
    /// <summary>
    /// <para> Y-Axis Coordinate.</para>
    /// <para>Represents the following attribute in the schema: y </para>
    /// </summary>
    [SchemaAttr(0, "y")]
    [Index(1)]
    public Int64Value Y { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the Point2DType class.
    /// </summary>
    protected Point2DType(){}
    
    
    
}
/// <summary>
/// <para>Extents.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>

[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Extents : PositiveSize2DType
{
    internal const int ElementTypeIdConst = 10162;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Extents class.
    /// </summary>
    public Extents():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extents>(deep);

}
/// <summary>
/// <para>Child Extents.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:chExt.</para>
/// </summary>

[SchemaAttr(10, "chExt")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ChildExtents : PositiveSize2DType
{
    internal const int ElementTypeIdConst = 10164;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ChildExtents class.
    /// </summary>
    public ChildExtents():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildExtents>(deep);

}
/// <summary>
/// Defines the PositiveSize2DType class.
/// </summary>


public abstract partial class PositiveSize2DType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Extent Length.</para>
    /// <para>Represents the following attribute in the schema: cx </para>
    /// </summary>
    [SchemaAttr(0, "cx")]
    [Index(0)]
    public Int64Value Cx { get; set; }
	
    /// <summary>
    /// <para> Extent Width.</para>
    /// <para>Represents the following attribute in the schema: cy </para>
    /// </summary>
    [SchemaAttr(0, "cy")]
    [Index(1)]
    public Int64Value Cy { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the PositiveSize2DType class.
    /// </summary>
    protected PositiveSize2DType(){}
    
    
    
}
/// <summary>
/// <para>Shape Locks.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spLocks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "spLocks")]
[Id(ElementTypeIdConst)]
public partial class ShapeLocks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10166;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Disallow Shape Grouping.</para>
    /// <para>Represents the following attribute in the schema: noGrp </para>
    /// </summary>
    [SchemaAttr(0, "noGrp")]
    [Index(0)]
    public BooleanValue NoGrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Selection.</para>
    /// <para>Represents the following attribute in the schema: noSelect </para>
    /// </summary>
    [SchemaAttr(0, "noSelect")]
    [Index(1)]
    public BooleanValue NoSelection { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Rotation.</para>
    /// <para>Represents the following attribute in the schema: noRot </para>
    /// </summary>
    [SchemaAttr(0, "noRot")]
    [Index(2)]
    public BooleanValue NoRotation { get; set; }
	
    /// <summary>
    /// <para> Disallow Aspect Ratio Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeAspect </para>
    /// </summary>
    [SchemaAttr(0, "noChangeAspect")]
    [Index(3)]
    public BooleanValue NoChangeAspect { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Movement.</para>
    /// <para>Represents the following attribute in the schema: noMove </para>
    /// </summary>
    [SchemaAttr(0, "noMove")]
    [Index(4)]
    public BooleanValue NoMove { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Resize.</para>
    /// <para>Represents the following attribute in the schema: noResize </para>
    /// </summary>
    [SchemaAttr(0, "noResize")]
    [Index(5)]
    public BooleanValue NoResize { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Point Editing.</para>
    /// <para>Represents the following attribute in the schema: noEditPoints </para>
    /// </summary>
    [SchemaAttr(0, "noEditPoints")]
    [Index(6)]
    public BooleanValue NoEditPoints { get; set; }
	
    /// <summary>
    /// <para> Disallow Showing Adjust Handles.</para>
    /// <para>Represents the following attribute in the schema: noAdjustHandles </para>
    /// </summary>
    [SchemaAttr(0, "noAdjustHandles")]
    [Index(7)]
    public BooleanValue NoAdjustHandles { get; set; }
	
    /// <summary>
    /// <para> Disallow Arrowhead Changes.</para>
    /// <para>Represents the following attribute in the schema: noChangeArrowheads </para>
    /// </summary>
    [SchemaAttr(0, "noChangeArrowheads")]
    [Index(8)]
    public BooleanValue NoChangeArrowheads { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Type Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeShapeType </para>
    /// </summary>
    [SchemaAttr(0, "noChangeShapeType")]
    [Index(9)]
    public BooleanValue NoChangeShapeType { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Text Editing.</para>
    /// <para>Represents the following attribute in the schema: noTextEdit </para>
    /// </summary>
    [SchemaAttr(0, "noTextEdit")]
    [Index(10)]
    public BooleanValue NoTextEdit { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ShapeLocks class.
    /// </summary>
    public ShapeLocks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeLocks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeLocks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapeLocks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeLocks>(deep);

}
/// <summary>
/// <para>Connection Shape Locks.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cxnSpLocks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConnectorLockingExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConnectorLockingExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cxnSpLocks")]
[Id(ElementTypeIdConst)]
public partial class ConnectionShapeLocks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10167;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Disallow Shape Grouping.</para>
    /// <para>Represents the following attribute in the schema: noGrp </para>
    /// </summary>
    [SchemaAttr(0, "noGrp")]
    [Index(0)]
    public BooleanValue NoGrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Selection.</para>
    /// <para>Represents the following attribute in the schema: noSelect </para>
    /// </summary>
    [SchemaAttr(0, "noSelect")]
    [Index(1)]
    public BooleanValue NoSelection { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Rotation.</para>
    /// <para>Represents the following attribute in the schema: noRot </para>
    /// </summary>
    [SchemaAttr(0, "noRot")]
    [Index(2)]
    public BooleanValue NoRotation { get; set; }
	
    /// <summary>
    /// <para> Disallow Aspect Ratio Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeAspect </para>
    /// </summary>
    [SchemaAttr(0, "noChangeAspect")]
    [Index(3)]
    public BooleanValue NoChangeAspect { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Movement.</para>
    /// <para>Represents the following attribute in the schema: noMove </para>
    /// </summary>
    [SchemaAttr(0, "noMove")]
    [Index(4)]
    public BooleanValue NoMove { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Resize.</para>
    /// <para>Represents the following attribute in the schema: noResize </para>
    /// </summary>
    [SchemaAttr(0, "noResize")]
    [Index(5)]
    public BooleanValue NoResize { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Point Editing.</para>
    /// <para>Represents the following attribute in the schema: noEditPoints </para>
    /// </summary>
    [SchemaAttr(0, "noEditPoints")]
    [Index(6)]
    public BooleanValue NoEditPoints { get; set; }
	
    /// <summary>
    /// <para> Disallow Showing Adjust Handles.</para>
    /// <para>Represents the following attribute in the schema: noAdjustHandles </para>
    /// </summary>
    [SchemaAttr(0, "noAdjustHandles")]
    [Index(7)]
    public BooleanValue NoAdjustHandles { get; set; }
	
    /// <summary>
    /// <para> Disallow Arrowhead Changes.</para>
    /// <para>Represents the following attribute in the schema: noChangeArrowheads </para>
    /// </summary>
    [SchemaAttr(0, "noChangeArrowheads")]
    [Index(8)]
    public BooleanValue NoChangeArrowheads { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Type Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeShapeType </para>
    /// </summary>
    [SchemaAttr(0, "noChangeShapeType")]
    [Index(9)]
    public BooleanValue NoChangeShapeType { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ConnectionShapeLocks class.
    /// </summary>
    public ConnectionShapeLocks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionShapeLocks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionShapeLocks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionShapeLocks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ConnectorLockingExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ConnectorLockingExtensionList ConnectorLockingExtensionList
	{
        get => GetElement<ConnectorLockingExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShapeLocks>(deep);

}
/// <summary>
/// <para>Connection Start.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:stCxn.</para>
/// </summary>

[SchemaAttr(10, "stCxn")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class StartConnection : ConnectionType
{
    internal const int ElementTypeIdConst = 10168;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the StartConnection class.
    /// </summary>
    public StartConnection():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartConnection>(deep);

}
/// <summary>
/// <para>Connection End.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:endCxn.</para>
/// </summary>

[SchemaAttr(10, "endCxn")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EndConnection : ConnectionType
{
    internal const int ElementTypeIdConst = 10169;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EndConnection class.
    /// </summary>
    public EndConnection():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndConnection>(deep);

}
/// <summary>
/// Defines the ConnectionType class.
/// </summary>


public abstract partial class ConnectionType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Identifier.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id")]
    [Index(0)]
    public UInt32Value Id { get; set; }
	
    /// <summary>
    /// <para> Index.</para>
    /// <para>Represents the following attribute in the schema: idx </para>
    /// </summary>
    [SchemaAttr(0, "idx")]
    [Index(1)]
    public UInt32Value Index { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConnectionType class.
    /// </summary>
    protected ConnectionType(){}
    
    
    
}
/// <summary>
/// <para>Graphic Frame Locks.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:graphicFrameLocks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "graphicFrameLocks")]
[Id(ElementTypeIdConst)]
public partial class GraphicFrameLocks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10170;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Disallow Shape Grouping.</para>
    /// <para>Represents the following attribute in the schema: noGrp </para>
    /// </summary>
    [SchemaAttr(0, "noGrp")]
    [Index(0)]
    public BooleanValue NoGrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Selection of Child Shapes.</para>
    /// <para>Represents the following attribute in the schema: noDrilldown </para>
    /// </summary>
    [SchemaAttr(0, "noDrilldown")]
    [Index(1)]
    public BooleanValue NoDrilldown { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Selection.</para>
    /// <para>Represents the following attribute in the schema: noSelect </para>
    /// </summary>
    [SchemaAttr(0, "noSelect")]
    [Index(2)]
    public BooleanValue NoSelection { get; set; }
	
    /// <summary>
    /// <para> Disallow Aspect Ratio Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeAspect </para>
    /// </summary>
    [SchemaAttr(0, "noChangeAspect")]
    [Index(3)]
    public BooleanValue NoChangeAspect { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Movement.</para>
    /// <para>Represents the following attribute in the schema: noMove </para>
    /// </summary>
    [SchemaAttr(0, "noMove")]
    [Index(4)]
    public BooleanValue NoMove { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Resize.</para>
    /// <para>Represents the following attribute in the schema: noResize </para>
    /// </summary>
    [SchemaAttr(0, "noResize")]
    [Index(5)]
    public BooleanValue NoResize { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GraphicFrameLocks class.
    /// </summary>
    public GraphicFrameLocks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicFrameLocks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicFrameLocks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicFrameLocks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GraphicFrameLocks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrameLocks>(deep);

}
/// <summary>
/// <para>Graphic Object Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:graphicData.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Graphic &lt;a:graphic></description></item>
///<item><description>Blip &lt;a:blip></description></item>
///<item><description>Theme &lt;a:theme></description></item>
///<item><description>ThemeOverride &lt;a:themeOverride></description></item>
///<item><description>ThemeManager &lt;a:themeManager></description></item>
///<item><description>Table &lt;a:tbl></description></item>
///<item><description>TableStyleList &lt;a:tblStyleLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty &lt;wp15:webVideoPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily &lt;thm15:themeFamily></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties &lt;a15:backgroundPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties &lt;a15:nonVisualGroupProps></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties &lt;a15:objectPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine &lt;a15:signatureLine></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.CameraTool &lt;a14:cameraTool></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension &lt;a14:compatExt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas &lt;a14:isCanvas></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart &lt;a14:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured &lt;a14:shadowObscured></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties &lt;a14:hiddenFill></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties &lt;a14:hiddenLine></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties &lt;a14:hiddenEffects></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D &lt;a14:hiddenScene3d></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D &lt;a14:hiddenSp3d></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties &lt;a14:imgProps></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi &lt;a14:useLocalDpi></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.TextMath &lt;a14:m></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties &lt;dgm14:cNvPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages &lt;dgm14:recolorImg></description></item>
///<item><description>DocumentFormat.OpenXml.Office.Drawing.Drawing &lt;dsp:drawing></description></item>
///<item><description>DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock &lt;dsp:dataModelExt></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinition &lt;dgm:colorsDef></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeader &lt;dgm:colorsDefHdr></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeaderList &lt;dgm:colorsDefHdrLst></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.DataModelRoot &lt;dgm:dataModel></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinition &lt;dgm:layoutDef></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeader &lt;dgm:layoutDefHdr></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeaderList &lt;dgm:layoutDefHdrLst></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.RelationshipIds &lt;dgm:relIds></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinition &lt;dgm:styleDef></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader &lt;dgm:styleDefHdr></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeaderList &lt;dgm:styleDefHdrLst></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Charts.ChartSpace &lt;c:chartSpace></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Charts.UserShapes &lt;c:userShapes></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Charts.ChartReference &lt;c:chart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.PivotSource &lt;c15:pivotSource></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.NumberingFormat &lt;c15:numFmt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShapeProperties &lt;c15:spPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.Layout &lt;c15:layout></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FullReference &lt;c15:fullRef></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.LevelReference &lt;c15:levelRef></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FormulaReference &lt;c15:formulaRef></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSeriesTitle &lt;c15:filteredSeriesTitle></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredCategoryTitle &lt;c15:filteredCategoryTitle></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredAreaSeries &lt;c15:filteredAreaSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBarSeries &lt;c15:filteredBarSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBubbleSeries &lt;c15:filteredBubbleSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredLineSeriesExtension &lt;c15:filteredLineSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredPieSeries &lt;c15:filteredPieSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredRadarSeries &lt;c15:filteredRadarSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredScatterSeries &lt;c15:filteredScatterSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSurfaceSeries &lt;c15:filteredSurfaceSeries></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelsRange &lt;c15:datalabelsRange></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.CategoryFilterExceptions &lt;c15:categoryFilterExceptions></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelFieldTable &lt;c15:dlblFieldTable></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ExceptionForSave &lt;c15:xForSave></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowDataLabelsRange &lt;c15:showDataLabelsRange></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ChartText &lt;c15:tx></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowLeaderLines &lt;c15:showLeaderLines></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.LeaderLines &lt;c15:leaderLines></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.Chart.AutoGeneneratedCategories &lt;c15:autoCat></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.PivotOptions &lt;c14:pivotOptions></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.SketchOptions &lt;c14:sketchOptions></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.InvertSolidFillFormat &lt;c14:invertSolidFillFmt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Charts.Style &lt;c14:style></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.ChartDrawing.ContentPart &lt;cdr14:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.LegacyCompatibility.LegacyDrawing &lt;comp:legacyDrawing></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.LockedCanvas.LockedCanvas &lt;lc:lockedCanvas></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline &lt;wp:inline></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor &lt;wp:anchor></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionHeightOffset &lt;wp14:pctPosHOffset></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionVerticalOffset &lt;wp14:pctPosVOffset></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeWidth &lt;wp14:sizeRelH></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeHeight &lt;wp14:sizeRelV></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Pictures.Picture &lt;pic:pic></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Pictures.ShapeStyle &lt;pic14:style></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Pictures.OfficeArtExtensionList &lt;pic14:extLst></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing &lt;xdr:wsDr></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ContentPart &lt;xdr:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.Drawing.ContentPart &lt;xdr14:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.CommentAuthorList &lt;p:cmAuthorLst></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.CommentList &lt;p:cmLst></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.OleObject &lt;p:oleObj></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.Presentation &lt;p:presentation></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.PresentationProperties &lt;p:presentationPr></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.Slide &lt;p:sld></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.SlideLayout &lt;p:sldLayout></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.SlideMaster &lt;p:sldMaster></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.HandoutMaster &lt;p:handoutMaster></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.NotesMaster &lt;p:notesMaster></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.NotesSlide &lt;p:notes></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.SlideSyncProperties &lt;p:sldSyncPr></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.TagList &lt;p:tagLst></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.ViewProperties &lt;p:viewPr></description></item>
///<item><description>DocumentFormat.OpenXml.Presentation.ContentPart &lt;p:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.PresetTransition &lt;p15:prstTrans></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.PresenceInfo &lt;p15:presenceInfo></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.ThreadingInfo &lt;p15:threadingInfo></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.SlideGuideList &lt;p15:sldGuideLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.NotesGuideList &lt;p15:notesGuideLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.PowerPoint.ChartTrackingReferenceBased &lt;p15:chartTrackingRefBased></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.NonVisualContentPartProperties &lt;p14:nvContentPartPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.Transform2D &lt;p14:xfrm></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ExtensionListModify &lt;p14:extLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.Media &lt;p14:media></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.VortexTransition &lt;p14:vortex></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SwitchTransition &lt;p14:switch></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlipTransition &lt;p14:flip></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.RippleTransition &lt;p14:ripple></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.HoneycombTransition &lt;p14:honeycomb></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.PrismTransition &lt;p14:prism></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DoorsTransition &lt;p14:doors></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WindowTransition &lt;p14:window></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FerrisTransition &lt;p14:ferris></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.GalleryTransition &lt;p14:gallery></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ConveyorTransition &lt;p14:conveyor></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.PanTransition &lt;p14:pan></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.GlitterTransition &lt;p14:glitter></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WarpTransition &lt;p14:warp></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlythroughTransition &lt;p14:flythrough></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.FlashTransition &lt;p14:flash></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShredTransition &lt;p14:shred></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.RevealTransition &lt;p14:reveal></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.WheelReverseTransition &lt;p14:wheelReverse></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget &lt;p14:bmkTgt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SectionProperties &lt;p14:sectionPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.SectionList &lt;p14:sectionLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BrowseMode &lt;p14:browseMode></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.LaserColor &lt;p14:laserClr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DefaultImageDpi &lt;p14:defaultImageDpi></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.DiscardImageEditData &lt;p14:discardImageEditData></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShowMediaControls &lt;p14:showMediaCtrls></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.LaserTraceList &lt;p14:laserTraceLst></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.CreationId &lt;p14:creationId></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ModificationId &lt;p14:modId></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.ShowEventRecordList &lt;p14:showEvtLst></description></item>
///<item><description>DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary &lt;sl:schemaLibrary></description></item>
///<item><description>DocumentFormat.OpenXml.Math.MathProperties &lt;m:mathPr></description></item>
///<item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
///<item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Recipients &lt;w:recipients></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.TextBoxContent &lt;w:txbxContent></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Comments &lt;w:comments></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Footnotes &lt;w:footnotes></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Endnotes &lt;w:endnotes></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Header &lt;w:hdr></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Footer &lt;w:ftr></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Settings &lt;w:settings></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.WebSettings &lt;w:webSettings></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Fonts &lt;w:fonts></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Numbering &lt;w:numbering></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Styles &lt;w:styles></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.Document &lt;w:document></description></item>
///<item><description>DocumentFormat.OpenXml.Wordprocessing.GlossaryDocument &lt;w:glossaryDocument></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.Color &lt;w15:color></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.DataBinding &lt;w15:dataBinding></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.Appearance &lt;w15:appearance></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.CommentsEx &lt;w15:commentsEx></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.People &lt;w15:people></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection &lt;w15:repeatingSection></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem &lt;w15:repeatingSectionItem></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased &lt;w15:chartTrackingRefBased></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.DefaultCollapsed &lt;w15:collapsed></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId &lt;w15:docId></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns &lt;w15:footnoteColumns></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked &lt;w15:webExtensionLinked></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated &lt;w15:webExtensionCreated></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.ContentPart &lt;w14:contentPart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DocumentId &lt;w14:docId></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictMode &lt;w14:conflictMode></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData &lt;w14:discardImageEditingData></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi &lt;w14:defaultImageDpi></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty &lt;w14:entityPicker></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox &lt;w14:checkbox></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Shape &lt;v:shape></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Shapetype &lt;v:shapetype></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Group &lt;v:group></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Background &lt;v:background></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Fill &lt;v:fill></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Formulas &lt;v:formulas></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.ShapeHandles &lt;v:handles></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.ImageData &lt;v:imagedata></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Path &lt;v:path></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.TextBox &lt;v:textbox></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Shadow &lt;v:shadow></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Stroke &lt;v:stroke></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.TextPath &lt;v:textpath></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Arc &lt;v:arc></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Curve &lt;v:curve></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.ImageFile &lt;v:image></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Line &lt;v:line></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Oval &lt;v:oval></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.PolyLine &lt;v:polyline></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Rectangle &lt;v:rect></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.RoundRectangle &lt;v:roundrect></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.ShapeDefaults &lt;o:shapedefaults></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.ShapeLayout &lt;o:shapelayout></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.SignatureLine &lt;o:signatureline></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Ink &lt;o:ink></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Diagram &lt;o:diagram></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Skew &lt;o:skew></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Extrusion &lt;o:extrusion></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Callout &lt;o:callout></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Lock &lt;o:lock></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.OleObject &lt;o:OLEObject></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.Complex &lt;o:complex></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.LeftStroke &lt;o:left></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.TopStroke &lt;o:top></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.RightStroke &lt;o:right></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.BottomStroke &lt;o:bottom></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.ColumnStroke &lt;o:column></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.ClipPath &lt;o:clippath></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Office.FillExtendedProperties &lt;o:fill></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.TopBorder &lt;w10:bordertop></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.LeftBorder &lt;w10:borderleft></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.RightBorder &lt;w10:borderright></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.BottomBorder &lt;w10:borderbottom></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.TextWrap &lt;w10:wrap></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Wordprocessing.AnchorLock &lt;w10:anchorlock></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Spreadsheet.ClientData &lt;xvml:ClientData></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Presentation.InkAnnotationFlag &lt;pvml:iscomment></description></item>
///<item><description>DocumentFormat.OpenXml.Vml.Presentation.TextData &lt;pvml:textdata></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingCanvas.WordprocessingCanvas &lt;wpc:wpc></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingGroup.WordprocessingGroup &lt;wpg:wgp></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Word.DrawingShape.WordprocessingShape &lt;wps:wsp></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Slicer.Slicer &lt;sle:slicer></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ColorStyle &lt;cs:colorStyle></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ChartStyle &lt;cs:chartStyle></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.WebExtension.WebExtension &lt;we:webextension></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.WebExtension.WebExtensionReference &lt;we:webextensionref></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.TimeSlicer.TimeSlicer &lt;tsle:timeslicer></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Graphic))]
    [ChildElementInfo(typeof(Blip))]
    [ChildElementInfo(typeof(Theme))]
    [ChildElementInfo(typeof(ThemeOverride))]
    [ChildElementInfo(typeof(ThemeManager))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(TableStyleList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CameraTool), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.TextMath), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office.Drawing.Drawing))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinition))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeader))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.ColorsDefinitionHeaderList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.DataModelRoot))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinition))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeader))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.LayoutDefinitionHeaderList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.RelationshipIds))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinition))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeaderList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Charts.ChartSpace))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Charts.UserShapes))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Charts.ChartReference))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.PivotSource), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.NumberingFormat), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShapeProperties), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.Layout), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FullReference), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.LevelReference), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FormulaReference), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSeriesTitle), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredCategoryTitle), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredAreaSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBarSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredBubbleSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredLineSeriesExtension), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredPieSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredRadarSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredScatterSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.FilteredSurfaceSeries), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelsRange), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.CategoryFilterExceptions), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.DataLabelFieldTable), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.ExceptionForSave), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowDataLabelsRange), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.ChartText), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.ShowLeaderLines), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.LeaderLines), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.Chart.AutoGeneneratedCategories), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Charts.PivotOptions), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Charts.SketchOptions), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Charts.InvertSolidFillFormat), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Charts.Style), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ChartDrawing.ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.LegacyCompatibility.LegacyDrawing))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.LockedCanvas.LockedCanvas))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionHeightOffset), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Drawing.PercentagePositionVerticalOffset), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeWidth), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Drawing.RelativeHeight), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Pictures.Picture))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Pictures.ShapeStyle), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Pictures.OfficeArtExtensionList), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.Drawing.ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.CommentAuthorList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.CommentList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.OleObject))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.Presentation))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.PresentationProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.Slide))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.SlideLayout))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.SlideMaster))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.HandoutMaster))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.NotesMaster))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.NotesSlide))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.SlideSyncProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.TagList))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.ViewProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.PresetTransition), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.PresenceInfo), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.ThreadingInfo), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.SlideGuideList), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.NotesGuideList), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.PowerPoint.ChartTrackingReferenceBased), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.NonVisualContentPartProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.Transform2D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ExtensionListModify), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.Media), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.VortexTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.SwitchTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.FlipTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.RippleTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.HoneycombTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.PrismTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.DoorsTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.WindowTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.FerrisTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.GalleryTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ConveyorTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.PanTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.GlitterTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.WarpTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.FlythroughTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.FlashTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ShredTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.RevealTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.WheelReverseTransition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.SectionProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.SectionList), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.BrowseMode), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.LaserColor), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.DefaultImageDpi), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.DiscardImageEditData), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ShowMediaControls), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.LaserTraceList), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.CreationId), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ModificationId), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.ShowEventRecordList), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Recipients))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxContent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Comments))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Footnotes))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Endnotes))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Header))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Footer))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Settings))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.WebSettings))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Fonts))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Numbering))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Styles))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.Document))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Wordprocessing.GlossaryDocument))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Color), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.DataBinding), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Appearance), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.CommentsEx), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.People), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.DefaultCollapsed), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DocumentId), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictMode), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shape))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shapetype))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Group))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Background))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Fill))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Formulas))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ShapeHandles))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ImageData))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Path))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.TextBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shadow))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Stroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.TextPath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Arc))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Curve))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ImageFile))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Line))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Oval))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.PolyLine))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Rectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.SignatureLine))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Ink))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Diagram))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Skew))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Extrusion))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Callout))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Lock))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.Complex))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.LeftStroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.TopStroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.RightStroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.BottomStroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ColumnStroke))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ClipPath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.FillExtendedProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.TopBorder))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.LeftBorder))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.RightBorder))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.BottomBorder))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.TextWrap))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Wordprocessing.AnchorLock))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Spreadsheet.ClientData))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Presentation.InkAnnotationFlag))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Presentation.TextData))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DrawingCanvas.WordprocessingCanvas), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DrawingGroup.WordprocessingGroup), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DrawingShape.WordprocessingShape), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Slicer.Slicer), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ColorStyle), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.ChartStyle.ChartStyle), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.WebExtension.WebExtension), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.WebExtension.WebExtensionReference), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.TimeSlicer.TimeSlicer), FileFormatVersions.Office2013)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "graphicData")]
[Id(ElementTypeIdConst)]
public partial class GraphicData : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10171;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Uniform Resource Identifier.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GraphicData class.
    /// </summary>
    public GraphicData():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GraphicData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicData(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicData(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicData class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GraphicData(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicData>(deep);

}
/// <summary>
/// <para>Diagram to Animate.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:dgm.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "dgm")]
[Id(ElementTypeIdConst)]
public partial class Diagram : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10172;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Identifier.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id")]
    [Index(0)]
    public StringValue Id { get; set; }
	
    /// <summary>
    /// <para> Animation Build Step.</para>
    /// <para>Represents the following attribute in the schema: bldStep </para>
    /// </summary>
    [SchemaAttr(0, "bldStep")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.DiagramBuildStepValues> BuildStep { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Diagram class.
    /// </summary>
    public Diagram():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Diagram>(deep);

}
/// <summary>
/// <para>Chart to Animate.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:chart.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "chart")]
[Id(ElementTypeIdConst)]
public partial class Chart : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10173;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Series Index.</para>
    /// <para>Represents the following attribute in the schema: seriesIdx </para>
    /// </summary>
    [SchemaAttr(0, "seriesIdx")]
    [Index(0)]
    public Int32Value SeriesIndex { get; set; }
	
    /// <summary>
    /// <para> Category Index.</para>
    /// <para>Represents the following attribute in the schema: categoryIdx </para>
    /// </summary>
    [SchemaAttr(0, "categoryIdx")]
    [Index(1)]
    public Int32Value CategoryIndex { get; set; }
	
    /// <summary>
    /// <para> Animation Build Step.</para>
    /// <para>Represents the following attribute in the schema: bldStep </para>
    /// </summary>
    [SchemaAttr(0, "bldStep")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ChartBuildStepValues> BuildStep { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Chart class.
    /// </summary>
    public Chart():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Chart>(deep);

}
/// <summary>
/// <para>Build Diagram.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bldDgm.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "bldDgm")]
[Id(ElementTypeIdConst)]
public partial class BuildDiagram : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10174;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Build.</para>
    /// <para>Represents the following attribute in the schema: bld </para>
    /// </summary>
    [SchemaAttr(0, "bld")]
    [Index(0)]
    public StringValue Build { get; set; }
	
    /// <summary>
    /// <para> Reverse Animation.</para>
    /// <para>Represents the following attribute in the schema: rev </para>
    /// </summary>
    [SchemaAttr(0, "rev")]
    [Index(1)]
    public BooleanValue ReverseAnimation { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BuildDiagram class.
    /// </summary>
    public BuildDiagram():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildDiagram>(deep);

}
/// <summary>
/// <para>Build Chart.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bldChart.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "bldChart")]
[Id(ElementTypeIdConst)]
public partial class BuildChart : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10175;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Build.</para>
    /// <para>Represents the following attribute in the schema: bld </para>
    /// </summary>
    [SchemaAttr(0, "bld")]
    [Index(0)]
    public StringValue Build { get; set; }
	
    /// <summary>
    /// <para> Animate Background.</para>
    /// <para>Represents the following attribute in the schema: animBg </para>
    /// </summary>
    [SchemaAttr(0, "animBg")]
    [Index(1)]
    public BooleanValue AnimateBackground { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BuildChart class.
    /// </summary>
    public BuildChart():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildChart>(deep);

}
/// <summary>
/// <para>Shape Text Body.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:txBody.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>BodyProperties &lt;a:bodyPr></description></item>
///<item><description>ListStyle &lt;a:lstStyle></description></item>
///<item><description>Paragraph &lt;a:p></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(BodyProperties))]
    [ChildElementInfo(typeof(ListStyle))]
    [ChildElementInfo(typeof(Paragraph))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "txBody")]
[Id(ElementTypeIdConst)]
public partial class TextBody : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10176;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TextBody class.
    /// </summary>
    public TextBody():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TextBody class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextBody(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextBody class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextBody(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextBody class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TextBody(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Body Properties.</para>
    /// <para> Represents the following element tag in the schema: a:bodyPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public BodyProperties BodyProperties
	{
        get => GetElement<BodyProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Text List Styles.</para>
    /// <para> Represents the following element tag in the schema: a:lstStyle </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ListStyle ListStyle
	{
        get => GetElement<ListStyle>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBody>(deep);

}
/// <summary>
/// <para>Use Shape Text Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:useSpRect.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "useSpRect")]
[Id(ElementTypeIdConst)]
public partial class UseShapeRectangle : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10177;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the UseShapeRectangle class.
    /// </summary>
    public UseShapeRectangle():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseShapeRectangle>(deep);

}
/// <summary>
/// <para>Defines the Transform2D Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:xfrm.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Offset &lt;a:off></description></item>
///<item><description>Extents &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Offset))]
    [ChildElementInfo(typeof(Extents))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "xfrm")]
[Id(ElementTypeIdConst)]
public partial class Transform2D : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10178;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Rotation.</para>
    /// <para>Represents the following attribute in the schema: rot </para>
    /// </summary>
    [SchemaAttr(0, "rot")]
    [Index(0)]
    public Int32Value Rotation { get; set; }
	
    /// <summary>
    /// <para> Horizontal Flip.</para>
    /// <para>Represents the following attribute in the schema: flipH </para>
    /// </summary>
    [SchemaAttr(0, "flipH")]
    [Index(1)]
    public BooleanValue HorizontalFlip { get; set; }
	
    /// <summary>
    /// <para> Vertical Flip.</para>
    /// <para>Represents the following attribute in the schema: flipV </para>
    /// </summary>
    [SchemaAttr(0, "flipV")]
    [Index(2)]
    public BooleanValue VerticalFlip { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Transform2D class.
    /// </summary>
    public Transform2D():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Transform2D class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Transform2D(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Transform2D class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Transform2D(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Transform2D class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Transform2D(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Offset.</para>
    /// <para> Represents the following element tag in the schema: a:off </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Offset Offset
	{
        get => GetElement<Offset>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Extents.</para>
    /// <para> Represents the following element tag in the schema: a:ext </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Extents Extents
	{
        get => GetElement<Extents>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Transform2D>(deep);

}
/// <summary>
/// <para>Defines the NonVisualDrawingProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
///<item><description>HyperlinkOnHover &lt;a:hlinkHover></description></item>
///<item><description>NonVisualDrawingPropertiesExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(HyperlinkOnClick))]
    [ChildElementInfo(typeof(HyperlinkOnHover))]
    [ChildElementInfo(typeof(NonVisualDrawingPropertiesExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10179;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id")]
    [Index(0)]
    public UInt32Value Id { get; set; }
	
    /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(1)]
    public StringValue Name { get; set; }
	
    /// <summary>
    /// <para> descr.</para>
    /// <para>Represents the following attribute in the schema: descr </para>
    /// </summary>
    [SchemaAttr(0, "descr")]
    [Index(2)]
    public StringValue Description { get; set; }
	
    /// <summary>
    /// <para> hidden.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden")]
    [Index(3)]
    public BooleanValue Hidden { get; set; }
	
    /// <summary>
    /// <para> title.</para>
    /// <para>Represents the following attribute in the schema: title </para>
    /// </summary>
    [SchemaAttr(0, "title")]
    [Index(4)]
    public StringValue Title { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingProperties class.
    /// </summary>
    public NonVisualDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> HyperlinkOnClick.</para>
    /// <para> Represents the following element tag in the schema: a:hlinkClick </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public HyperlinkOnClick HyperlinkOnClick
	{
        get => GetElement<HyperlinkOnClick>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> HyperlinkOnHover.</para>
    /// <para> Represents the following element tag in the schema: a:hlinkHover </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public HyperlinkOnHover HyperlinkOnHover
	{
        get => GetElement<HyperlinkOnHover>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> NonVisualDrawingPropertiesExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public NonVisualDrawingPropertiesExtensionList NonVisualDrawingPropertiesExtensionList
	{
        get => GetElement<NonVisualDrawingPropertiesExtensionList>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Shape Drawing Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeLocks &lt;a:spLocks></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ShapeLocks))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualShapeDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10180;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Text Box.</para>
    /// <para>Represents the following attribute in the schema: txBox </para>
    /// </summary>
    [SchemaAttr(0, "txBox")]
    [Index(0)]
    public BooleanValue TextBox { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualShapeDrawingProperties class.
    /// </summary>
    public NonVisualShapeDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualShapeDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualShapeDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualShapeDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Shape Locks.</para>
    /// <para> Represents the following element tag in the schema: a:spLocks </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ShapeLocks ShapeLocks
	{
        get => GetElement<ShapeLocks>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeDrawingProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Properties for a Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nvSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
///<item><description>NonVisualShapeDrawingProperties &lt;a:cNvSpPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingProperties))]
    [ChildElementInfo(typeof(NonVisualShapeDrawingProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "nvSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualShapeProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10181;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualShapeProperties class.
    /// </summary>
    public NonVisualShapeProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualShapeProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualShapeProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualShapeProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> NonVisualDrawingProperties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualDrawingProperties NonVisualDrawingProperties
	{
        get => GetElement<NonVisualDrawingProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Non-Visual Shape Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualShapeDrawingProperties NonVisualShapeDrawingProperties
	{
        get => GetElement<NonVisualShapeDrawingProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeProperties>(deep);

}
/// <summary>
/// <para>Visual Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Transform2D &lt;a:xfrm></description></item>
///<item><description>CustomGeometry &lt;a:custGeom></description></item>
///<item><description>PresetGeometry &lt;a:prstGeom></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Scene3DType &lt;a:scene3d></description></item>
///<item><description>Shape3DType &lt;a:sp3d></description></item>
///<item><description>ShapePropertiesExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Transform2D))]
    [ChildElementInfo(typeof(CustomGeometry))]
    [ChildElementInfo(typeof(PresetGeometry))]
    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]
    [ChildElementInfo(typeof(Scene3DType))]
    [ChildElementInfo(typeof(Shape3DType))]
    [ChildElementInfo(typeof(ShapePropertiesExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "spPr")]
[Id(ElementTypeIdConst)]
public partial class ShapeProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10182;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Black and White Mode.</para>
    /// <para>Represents the following attribute in the schema: bwMode </para>
    /// </summary>
    [SchemaAttr(0, "bwMode")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues> BlackWhiteMode { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ShapeProperties class.
    /// </summary>
    public ShapeProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapeProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> 2D Transform for Individual Objects.</para>
    /// <para> Represents the following element tag in the schema: a:xfrm </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Transform2D Transform2D
	{
        get => GetElement<Transform2D>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeProperties>(deep);

}
/// <summary>
/// <para>Text Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:txSp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TextBody &lt;a:txBody></description></item>
///<item><description>UseShapeRectangle &lt;a:useSpRect></description></item>
///<item><description>Transform2D &lt;a:xfrm></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TextBody))]
    [ChildElementInfo(typeof(UseShapeRectangle))]
    [ChildElementInfo(typeof(Transform2D))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "txSp")]
[Id(ElementTypeIdConst)]
public partial class TextShape : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10183;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TextShape class.
    /// </summary>
    public TextShape():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TextShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextShape(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextShape(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextShape class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TextShape(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Shape Text Body.</para>
    /// <para> Represents the following element tag in the schema: a:txBody </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TextBody TextBody
	{
        get => GetElement<TextBody>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextShape>(deep);

}
/// <summary>
/// <para>Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:style.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineReference &lt;a:lnRef></description></item>
///<item><description>FillReference &lt;a:fillRef></description></item>
///<item><description>EffectReference &lt;a:effectRef></description></item>
///<item><description>FontReference &lt;a:fontRef></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(LineReference))]
    [ChildElementInfo(typeof(FillReference))]
    [ChildElementInfo(typeof(EffectReference))]
    [ChildElementInfo(typeof(FontReference))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "style")]
[Id(ElementTypeIdConst)]
public partial class ShapeStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10184;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ShapeStyle class.
    /// </summary>
    public ShapeStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ShapeStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapeStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> LineReference.</para>
    /// <para> Represents the following element tag in the schema: a:lnRef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public LineReference LineReference
	{
        get => GetElement<LineReference>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> FillReference.</para>
    /// <para> Represents the following element tag in the schema: a:fillRef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public FillReference FillReference
	{
        get => GetElement<FillReference>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> EffectReference.</para>
    /// <para> Represents the following element tag in the schema: a:effectRef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public EffectReference EffectReference
	{
        get => GetElement<EffectReference>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Font Reference.</para>
    /// <para> Represents the following element tag in the schema: a:fontRef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public FontReference FontReference
	{
        get => GetElement<FontReference>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeStyle>(deep);

}
/// <summary>
/// <para>Non-Visual Connector Shape Drawing Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvCxnSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConnectionShapeLocks &lt;a:cxnSpLocks></description></item>
///<item><description>StartConnection &lt;a:stCxn></description></item>
///<item><description>EndConnection &lt;a:endCxn></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConnectionShapeLocks))]
    [ChildElementInfo(typeof(StartConnection))]
    [ChildElementInfo(typeof(EndConnection))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvCxnSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualConnectorShapeDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10185;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class.
    /// </summary>
    public NonVisualConnectorShapeDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualConnectorShapeDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualConnectorShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualConnectorShapeDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Connection Shape Locks.</para>
    /// <para> Represents the following element tag in the schema: a:cxnSpLocks </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ConnectionShapeLocks ConnectionShapeLocks
	{
        get => GetElement<ConnectionShapeLocks>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Connection Start.</para>
    /// <para> Represents the following element tag in the schema: a:stCxn </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public StartConnection StartConnection
	{
        get => GetElement<StartConnection>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Connection End.</para>
    /// <para> Represents the following element tag in the schema: a:endCxn </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public EndConnection EndConnection
	{
        get => GetElement<EndConnection>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectorShapeDrawingProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Properties for a Connection Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nvCxnSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
///<item><description>NonVisualConnectorShapeDrawingProperties &lt;a:cNvCxnSpPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingProperties))]
    [ChildElementInfo(typeof(NonVisualConnectorShapeDrawingProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "nvCxnSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualConnectionShapeProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10186;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectionShapeProperties class.
    /// </summary>
    public NonVisualConnectionShapeProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualConnectionShapeProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualConnectionShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualConnectionShapeProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualConnectionShapeProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualDrawingProperties NonVisualDrawingProperties
	{
        get => GetElement<NonVisualDrawingProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Non-Visual Connector Shape Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvCxnSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualConnectorShapeDrawingProperties NonVisualConnectorShapeDrawingProperties
	{
        get => GetElement<NonVisualConnectorShapeDrawingProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectionShapeProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Picture Drawing Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvPicPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PictureLocks &lt;a:picLocks></description></item>
///<item><description>NonVisualPicturePropertiesExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PictureLocks))]
    [ChildElementInfo(typeof(NonVisualPicturePropertiesExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvPicPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualPictureDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10187;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> preferRelativeResize.</para>
    /// <para>Represents the following attribute in the schema: preferRelativeResize </para>
    /// </summary>
    [SchemaAttr(0, "preferRelativeResize")]
    [Index(0)]
    public BooleanValue PreferRelativeResize { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualPictureDrawingProperties class.
    /// </summary>
    public NonVisualPictureDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPictureDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPictureDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPictureDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualPictureDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> PictureLocks.</para>
    /// <para> Represents the following element tag in the schema: a:picLocks </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public PictureLocks PictureLocks
	{
        get => GetElement<PictureLocks>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> NonVisualPicturePropertiesExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualPicturePropertiesExtensionList NonVisualPicturePropertiesExtensionList
	{
        get => GetElement<NonVisualPicturePropertiesExtensionList>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureDrawingProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Properties for a Picture.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nvPicPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
///<item><description>NonVisualPictureDrawingProperties &lt;a:cNvPicPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingProperties))]
    [ChildElementInfo(typeof(NonVisualPictureDrawingProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "nvPicPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualPictureProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10188;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPictureProperties class.
    /// </summary>
    public NonVisualPictureProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPictureProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPictureProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPictureProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualPictureProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> NonVisualDrawingProperties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualDrawingProperties NonVisualDrawingProperties
	{
        get => GetElement<NonVisualDrawingProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Non-Visual Picture Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPicPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualPictureDrawingProperties NonVisualPictureDrawingProperties
	{
        get => GetElement<NonVisualPictureDrawingProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Graphic Frame Drawing Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvGraphicFramePr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GraphicFrameLocks &lt;a:graphicFrameLocks></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GraphicFrameLocks))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvGraphicFramePr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGraphicFrameDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10189;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class.
    /// </summary>
    public NonVisualGraphicFrameDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGraphicFrameDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGraphicFrameDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGraphicFrameDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Graphic Frame Locks.</para>
    /// <para> Represents the following element tag in the schema: a:graphicFrameLocks </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public GraphicFrameLocks GraphicFrameLocks
	{
        get => GetElement<GraphicFrameLocks>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameDrawingProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Properties for a Graphic Frame.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nvGraphicFramePr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
///<item><description>NonVisualGraphicFrameDrawingProperties &lt;a:cNvGraphicFramePr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingProperties))]
    [ChildElementInfo(typeof(NonVisualGraphicFrameDrawingProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "nvGraphicFramePr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGraphicFrameProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10190;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameProperties class.
    /// </summary>
    public NonVisualGraphicFrameProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGraphicFrameProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGraphicFrameProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGraphicFrameProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGraphicFrameProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> NonVisualDrawingProperties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualDrawingProperties NonVisualDrawingProperties
	{
        get => GetElement<NonVisualDrawingProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Non-Visual Graphic Frame Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvGraphicFramePr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualGraphicFrameDrawingProperties NonVisualGraphicFrameDrawingProperties
	{
        get => GetElement<NonVisualGraphicFrameDrawingProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameProperties>(deep);

}
/// <summary>
/// <para>Non-Visual Group Shape Drawing Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cNvGrpSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GroupShapeLocks &lt;a:grpSpLocks></description></item>
///<item><description>NonVisualGroupDrawingShapePropsExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GroupShapeLocks))]
    [ChildElementInfo(typeof(NonVisualGroupDrawingShapePropsExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cNvGrpSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGroupShapeDrawingProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10191;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class.
    /// </summary>
    public NonVisualGroupShapeDrawingProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupShapeDrawingProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGroupShapeDrawingProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> GroupShapeLocks.</para>
    /// <para> Represents the following element tag in the schema: a:grpSpLocks </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public GroupShapeLocks GroupShapeLocks
	{
        get => GetElement<GroupShapeLocks>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> NonVisualGroupDrawingShapePropsExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualGroupDrawingShapePropsExtensionList NonVisualGroupDrawingShapePropsExtensionList
	{
        get => GetElement<NonVisualGroupDrawingShapePropsExtensionList>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeDrawingProperties>(deep);

}
/// <summary>
/// <para>Rotation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:rot.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "rot")]
[Id(ElementTypeIdConst)]
public partial class Rotation : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10192;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Latitude.</para>
    /// <para>Represents the following attribute in the schema: lat </para>
    /// </summary>
    [SchemaAttr(0, "lat")]
    [Index(0)]
    public Int32Value Latitude { get; set; }
	
    /// <summary>
    /// <para> Longitude.</para>
    /// <para>Represents the following attribute in the schema: lon </para>
    /// </summary>
    [SchemaAttr(0, "lon")]
    [Index(1)]
    public Int32Value Longitude { get; set; }
	
    /// <summary>
    /// <para> Revolution.</para>
    /// <para>Represents the following attribute in the schema: rev </para>
    /// </summary>
    [SchemaAttr(0, "rev")]
    [Index(2)]
    public Int32Value Revolution { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Rotation class.
    /// </summary>
    public Rotation():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rotation>(deep);

}
/// <summary>
/// <para>Camera.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:camera.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Rotation &lt;a:rot></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Rotation))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "camera")]
[Id(ElementTypeIdConst)]
public partial class Camera : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10193;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Camera Type.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetCameraValues> Preset { get; set; }
	
    /// <summary>
    /// <para> Field of View.</para>
    /// <para>Represents the following attribute in the schema: fov </para>
    /// </summary>
    [SchemaAttr(0, "fov")]
    [Index(1)]
    public Int32Value FieldOfView { get; set; }
	
    /// <summary>
    /// <para> Zoom.</para>
    /// <para>Represents the following attribute in the schema: zoom </para>
    /// </summary>
    [SchemaAttr(0, "zoom")]
    [Index(2)]
    public Int32Value Zoom { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Camera class.
    /// </summary>
    public Camera():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Camera class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Camera(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Camera class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Camera(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Camera class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Camera(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Rotation.</para>
    /// <para> Represents the following element tag in the schema: a:rot </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Rotation Rotation
	{
        get => GetElement<Rotation>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Camera>(deep);

}
/// <summary>
/// <para>Light Rig.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lightRig.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Rotation &lt;a:rot></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Rotation))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lightRig")]
[Id(ElementTypeIdConst)]
public partial class LightRig : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10194;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Rig Preset.</para>
    /// <para>Represents the following attribute in the schema: rig </para>
    /// </summary>
    [SchemaAttr(0, "rig")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LightRigValues> Rig { get; set; }
	
    /// <summary>
    /// <para> Direction.</para>
    /// <para>Represents the following attribute in the schema: dir </para>
    /// </summary>
    [SchemaAttr(0, "dir")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LightRigDirectionValues> Direction { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the LightRig class.
    /// </summary>
    public LightRig():base(){}
    
        /// <summary>
    ///Initializes a new instance of the LightRig class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LightRig(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LightRig class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LightRig(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LightRig class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LightRig(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Rotation.</para>
    /// <para> Represents the following element tag in the schema: a:rot </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Rotation Rotation
	{
        get => GetElement<Rotation>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LightRig>(deep);

}
/// <summary>
/// <para>Backdrop Plane.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:backdrop.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Anchor &lt;a:anchor></description></item>
///<item><description>Normal &lt;a:norm></description></item>
///<item><description>UpVector &lt;a:up></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Anchor))]
    [ChildElementInfo(typeof(Normal))]
    [ChildElementInfo(typeof(UpVector))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "backdrop")]
[Id(ElementTypeIdConst)]
public partial class Backdrop : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10195;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Backdrop class.
    /// </summary>
    public Backdrop():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Backdrop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Backdrop(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Backdrop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Backdrop(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Backdrop class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Backdrop(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Anchor Point.</para>
    /// <para> Represents the following element tag in the schema: a:anchor </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Anchor Anchor
	{
        get => GetElement<Anchor>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Normal.</para>
    /// <para> Represents the following element tag in the schema: a:norm </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Normal Normal
	{
        get => GetElement<Normal>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Up Vector.</para>
    /// <para> Represents the following element tag in the schema: a:up </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public UpVector UpVector
	{
        get => GetElement<UpVector>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Backdrop>(deep);

}
/// <summary>
/// <para>Anchor Point.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:anchor.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "anchor")]
[Id(ElementTypeIdConst)]
public partial class Anchor : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10196;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> X-Coordinate in 3D.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x")]
    [Index(0)]
    public Int64Value X { get; set; }
	
    /// <summary>
    /// <para> Y-Coordinate in 3D.</para>
    /// <para>Represents the following attribute in the schema: y </para>
    /// </summary>
    [SchemaAttr(0, "y")]
    [Index(1)]
    public Int64Value Y { get; set; }
	
    /// <summary>
    /// <para> Z-Coordinate in 3D.</para>
    /// <para>Represents the following attribute in the schema: z </para>
    /// </summary>
    [SchemaAttr(0, "z")]
    [Index(2)]
    public Int64Value Z { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Anchor class.
    /// </summary>
    public Anchor():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Anchor>(deep);

}
/// <summary>
/// <para>Normal.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:norm.</para>
/// </summary>

[SchemaAttr(10, "norm")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Normal : Vector3DType
{
    internal const int ElementTypeIdConst = 10197;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Normal class.
    /// </summary>
    public Normal():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Normal>(deep);

}
/// <summary>
/// <para>Up Vector.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:up.</para>
/// </summary>

[SchemaAttr(10, "up")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class UpVector : Vector3DType
{
    internal const int ElementTypeIdConst = 10198;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the UpVector class.
    /// </summary>
    public UpVector():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UpVector>(deep);

}
/// <summary>
/// Defines the Vector3DType class.
/// </summary>


public abstract partial class Vector3DType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Distance along X-axis in 3D.</para>
    /// <para>Represents the following attribute in the schema: dx </para>
    /// </summary>
    [SchemaAttr(0, "dx")]
    [Index(0)]
    public Int64Value Dx { get; set; }
	
    /// <summary>
    /// <para> Distance along Y-axis in 3D.</para>
    /// <para>Represents the following attribute in the schema: dy </para>
    /// </summary>
    [SchemaAttr(0, "dy")]
    [Index(1)]
    public Int64Value Dy { get; set; }
	
    /// <summary>
    /// <para> Distance along Z-axis in 3D.</para>
    /// <para>Represents the following attribute in the schema: dz </para>
    /// </summary>
    [SchemaAttr(0, "dz")]
    [Index(2)]
    public Int64Value Dz { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the Vector3DType class.
    /// </summary>
    protected Vector3DType(){}
    
    
    
}
/// <summary>
/// <para>Top Bevel.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bevelT.</para>
/// </summary>

[SchemaAttr(10, "bevelT")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BevelTop : BevelType
{
    internal const int ElementTypeIdConst = 10199;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BevelTop class.
    /// </summary>
    public BevelTop():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelTop>(deep);

}
/// <summary>
/// <para>Bottom Bevel.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bevelB.</para>
/// </summary>

[SchemaAttr(10, "bevelB")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BevelBottom : BevelType
{
    internal const int ElementTypeIdConst = 10200;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BevelBottom class.
    /// </summary>
    public BevelBottom():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelBottom>(deep);

}
/// <summary>
/// <para>Bevel.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bevel.</para>
/// </summary>

[SchemaAttr(10, "bevel")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Bevel : BevelType
{
    internal const int ElementTypeIdConst = 10262;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Bevel class.
    /// </summary>
    public Bevel():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bevel>(deep);

}
/// <summary>
/// Defines the BevelType class.
/// </summary>


public abstract partial class BevelType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Width.</para>
    /// <para>Represents the following attribute in the schema: w </para>
    /// </summary>
    [SchemaAttr(0, "w")]
    [Index(0)]
    public Int64Value Width { get; set; }
	
    /// <summary>
    /// <para> Height.</para>
    /// <para>Represents the following attribute in the schema: h </para>
    /// </summary>
    [SchemaAttr(0, "h")]
    [Index(1)]
    public Int64Value Height { get; set; }
	
    /// <summary>
    /// <para> Preset Bevel.</para>
    /// <para>Represents the following attribute in the schema: prst </para>
    /// </summary>
    [SchemaAttr(0, "prst")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BevelPresetValues> Preset { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the BevelType class.
    /// </summary>
    protected BevelType(){}
    
    
    
}
/// <summary>
/// <para>Fill To Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fillToRect.</para>
/// </summary>

[SchemaAttr(10, "fillToRect")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FillToRectangle : RelativeRectangleType
{
    internal const int ElementTypeIdConst = 10205;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FillToRectangle class.
    /// </summary>
    public FillToRectangle():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillToRectangle>(deep);

}
/// <summary>
/// <para>Tile Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tileRect.</para>
/// </summary>

[SchemaAttr(10, "tileRect")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TileRectangle : RelativeRectangleType
{
    internal const int ElementTypeIdConst = 10208;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TileRectangle class.
    /// </summary>
    public TileRectangle():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TileRectangle>(deep);

}
/// <summary>
/// <para>Fill Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:fillRect.</para>
/// </summary>

[SchemaAttr(10, "fillRect")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FillRectangle : RelativeRectangleType
{
    internal const int ElementTypeIdConst = 10209;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FillRectangle class.
    /// </summary>
    public FillRectangle():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillRectangle>(deep);

}
/// <summary>
/// <para>Source Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:srcRect.</para>
/// </summary>

[SchemaAttr(10, "srcRect")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SourceRectangle : RelativeRectangleType
{
    internal const int ElementTypeIdConst = 10210;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SourceRectangle class.
    /// </summary>
    public SourceRectangle():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceRectangle>(deep);

}
/// <summary>
/// Defines the RelativeRectangleType class.
/// </summary>


public abstract partial class RelativeRectangleType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Left Offset.</para>
    /// <para>Represents the following attribute in the schema: l </para>
    /// </summary>
    [SchemaAttr(0, "l")]
    [Index(0)]
    public Int32Value Left { get; set; }
	
    /// <summary>
    /// <para> Top Offset.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t")]
    [Index(1)]
    public Int32Value Top { get; set; }
	
    /// <summary>
    /// <para> Right Offset.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r")]
    [Index(2)]
    public Int32Value Right { get; set; }
	
    /// <summary>
    /// <para> Bottom Offset.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b")]
    [Index(3)]
    public Int32Value Bottom { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the RelativeRectangleType class.
    /// </summary>
    protected RelativeRectangleType(){}
    
    
    
}
/// <summary>
/// <para>Gradient stops.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gs.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gs")]
[Id(ElementTypeIdConst)]
public partial class GradientStop : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10206;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Position.</para>
    /// <para>Represents the following attribute in the schema: pos </para>
    /// </summary>
    [SchemaAttr(0, "pos")]
    [Index(0)]
    public Int32Value Position { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GradientStop class.
    /// </summary>
    public GradientStop():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GradientStop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStop(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStop(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStop class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GradientStop(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> RGB Color Model - Percentage Variant.</para>
    /// <para> Represents the following element tag in the schema: a:scrgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public RgbColorModelPercentage RgbColorModelPercentage
	{
        get => GetElement<RgbColorModelPercentage>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> RGB Color Model - Hex Variant.</para>
    /// <para> Represents the following element tag in the schema: a:srgbClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RgbColorModelHex RgbColorModelHex
	{
        get => GetElement<RgbColorModelHex>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Hue, Saturation, Luminance Color Model.</para>
    /// <para> Represents the following element tag in the schema: a:hslClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public HslColor HslColor
	{
        get => GetElement<HslColor>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> System Color.</para>
    /// <para> Represents the following element tag in the schema: a:sysClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public SystemColor SystemColor
	{
        get => GetElement<SystemColor>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Scheme Color.</para>
    /// <para> Represents the following element tag in the schema: a:schemeClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public SchemeColor SchemeColor
	{
        get => GetElement<SchemeColor>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Preset Color.</para>
    /// <para> Represents the following element tag in the schema: a:prstClr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public PresetColor PresetColor
	{
        get => GetElement<PresetColor>(5);
        set => SetElement(5, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStop>(deep);

}
/// <summary>
/// <para>Gradient Stop List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gsLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GradientStop &lt;a:gs></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GradientStop))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gsLst")]
[Id(ElementTypeIdConst)]
public partial class GradientStopList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10207;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the GradientStopList class.
    /// </summary>
    public GradientStopList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GradientStopList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStopList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStopList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStopList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStopList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GradientStopList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStopList>(deep);

}
/// <summary>
/// <para>Shape Guide.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gd.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gd")]
[Id(ElementTypeIdConst)]
public partial class ShapeGuide : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10213;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Shape Guide Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name")]
    [Index(0)]
    public StringValue Name { get; set; }
	
    /// <summary>
    /// <para> Shape Guide Formula.</para>
    /// <para>Represents the following attribute in the schema: fmla </para>
    /// </summary>
    [SchemaAttr(0, "fmla")]
    [Index(1)]
    public StringValue Formula { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ShapeGuide class.
    /// </summary>
    public ShapeGuide():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuide>(deep);

}
/// <summary>
/// <para>Position.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pos.</para>
/// </summary>

[SchemaAttr(10, "pos")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Position : AdjustPoint2DType
{
    internal const int ElementTypeIdConst = 10214;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Position class.
    /// </summary>
    public Position():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Position>(deep);

}
/// <summary>
/// <para>Move end point.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pt.</para>
/// </summary>

[SchemaAttr(10, "pt")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Point : AdjustPoint2DType
{
    internal const int ElementTypeIdConst = 10218;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Point class.
    /// </summary>
    public Point():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Point>(deep);

}
/// <summary>
/// Defines the AdjustPoint2DType class.
/// </summary>


public abstract partial class AdjustPoint2DType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> X-Coordinate.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x")]
    [Index(0)]
    public StringValue X { get; set; }
	
    /// <summary>
    /// <para> Y-Coordinate.</para>
    /// <para>Represents the following attribute in the schema: y </para>
    /// </summary>
    [SchemaAttr(0, "y")]
    [Index(1)]
    public StringValue Y { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the AdjustPoint2DType class.
    /// </summary>
    protected AdjustPoint2DType(){}
    
    
    
}
/// <summary>
/// <para>XY Adjust Handle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ahXY.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Position &lt;a:pos></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Position))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ahXY")]
[Id(ElementTypeIdConst)]
public partial class AdjustHandleXY : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10215;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Horizontal Adjustment Guide.</para>
    /// <para>Represents the following attribute in the schema: gdRefX </para>
    /// </summary>
    [SchemaAttr(0, "gdRefX")]
    [Index(0)]
    public StringValue XAdjustmentGuide { get; set; }
	
    /// <summary>
    /// <para> Minimum Horizontal Adjustment.</para>
    /// <para>Represents the following attribute in the schema: minX </para>
    /// </summary>
    [SchemaAttr(0, "minX")]
    [Index(1)]
    public StringValue MinX { get; set; }
	
    /// <summary>
    /// <para> Maximum Horizontal Adjustment.</para>
    /// <para>Represents the following attribute in the schema: maxX </para>
    /// </summary>
    [SchemaAttr(0, "maxX")]
    [Index(2)]
    public StringValue MaxX { get; set; }
	
    /// <summary>
    /// <para> Vertical Adjustment Guide.</para>
    /// <para>Represents the following attribute in the schema: gdRefY </para>
    /// </summary>
    [SchemaAttr(0, "gdRefY")]
    [Index(3)]
    public StringValue YAdjustmentGuide { get; set; }
	
    /// <summary>
    /// <para> Minimum Vertical Adjustment.</para>
    /// <para>Represents the following attribute in the schema: minY </para>
    /// </summary>
    [SchemaAttr(0, "minY")]
    [Index(4)]
    public StringValue MinY { get; set; }
	
    /// <summary>
    /// <para> Maximum Vertical Adjustment.</para>
    /// <para>Represents the following attribute in the schema: maxY </para>
    /// </summary>
    [SchemaAttr(0, "maxY")]
    [Index(5)]
    public StringValue MaxY { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AdjustHandleXY class.
    /// </summary>
    public AdjustHandleXY():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AdjustHandleXY class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandleXY(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandleXY class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandleXY(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandleXY class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AdjustHandleXY(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Position.</para>
    /// <para> Represents the following element tag in the schema: a:pos </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Position Position
	{
        get => GetElement<Position>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleXY>(deep);

}
/// <summary>
/// <para>Polar Adjust Handle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ahPolar.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Position &lt;a:pos></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Position))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ahPolar")]
[Id(ElementTypeIdConst)]
public partial class AdjustHandlePolar : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10216;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Radial Adjustment Guide.</para>
    /// <para>Represents the following attribute in the schema: gdRefR </para>
    /// </summary>
    [SchemaAttr(0, "gdRefR")]
    [Index(0)]
    public StringValue RadialAdjustmentGuide { get; set; }
	
    /// <summary>
    /// <para> Minimum Radial Adjustment.</para>
    /// <para>Represents the following attribute in the schema: minR </para>
    /// </summary>
    [SchemaAttr(0, "minR")]
    [Index(1)]
    public StringValue MinRadial { get; set; }
	
    /// <summary>
    /// <para> Maximum Radial Adjustment.</para>
    /// <para>Represents the following attribute in the schema: maxR </para>
    /// </summary>
    [SchemaAttr(0, "maxR")]
    [Index(2)]
    public StringValue MaxRadial { get; set; }
	
    /// <summary>
    /// <para> Angle Adjustment Guide.</para>
    /// <para>Represents the following attribute in the schema: gdRefAng </para>
    /// </summary>
    [SchemaAttr(0, "gdRefAng")]
    [Index(3)]
    public StringValue AngleAdjustmentGuide { get; set; }
	
    /// <summary>
    /// <para> Minimum Angle Adjustment.</para>
    /// <para>Represents the following attribute in the schema: minAng </para>
    /// </summary>
    [SchemaAttr(0, "minAng")]
    [Index(4)]
    public StringValue MinAngle { get; set; }
	
    /// <summary>
    /// <para> Maximum Angle Adjustment.</para>
    /// <para>Represents the following attribute in the schema: maxAng </para>
    /// </summary>
    [SchemaAttr(0, "maxAng")]
    [Index(5)]
    public StringValue MaxAngle { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the AdjustHandlePolar class.
    /// </summary>
    public AdjustHandlePolar():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandlePolar(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandlePolar(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandlePolar class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AdjustHandlePolar(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Shape Position Coordinate.</para>
    /// <para> Represents the following element tag in the schema: a:pos </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Position Position
	{
        get => GetElement<Position>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandlePolar>(deep);

}
/// <summary>
/// <para>Shape Connection Site.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cxn.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Position &lt;a:pos></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Position))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cxn")]
[Id(ElementTypeIdConst)]
public partial class ConnectionSite : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10217;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Connection Site Angle.</para>
    /// <para>Represents the following attribute in the schema: ang </para>
    /// </summary>
    [SchemaAttr(0, "ang")]
    [Index(0)]
    public StringValue Angle { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ConnectionSite class.
    /// </summary>
    public ConnectionSite():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionSite class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionSite(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionSite class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionSite(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionSite class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionSite(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Position.</para>
    /// <para> Represents the following element tag in the schema: a:pos </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Position Position
	{
        get => GetElement<Position>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSite>(deep);

}
/// <summary>
/// <para>Close Shape Path.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:close.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "close")]
[Id(ElementTypeIdConst)]
public partial class CloseShapePath : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10219;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CloseShapePath class.
    /// </summary>
    public CloseShapePath():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CloseShapePath>(deep);

}
/// <summary>
/// <para>Move Path To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:moveTo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Point &lt;a:pt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Point))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "moveTo")]
[Id(ElementTypeIdConst)]
public partial class MoveTo : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10220;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the MoveTo class.
    /// </summary>
    public MoveTo():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MoveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MoveTo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MoveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MoveTo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MoveTo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MoveTo(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Move end point.</para>
    /// <para> Represents the following element tag in the schema: a:pt </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Point Point
	{
        get => GetElement<Point>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveTo>(deep);

}
/// <summary>
/// <para>Draw Line To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnTo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Point &lt;a:pt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Point))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lnTo")]
[Id(ElementTypeIdConst)]
public partial class LineTo : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10221;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the LineTo class.
    /// </summary>
    public LineTo():base(){}
    
        /// <summary>
    ///Initializes a new instance of the LineTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineTo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LineTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineTo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LineTo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LineTo(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Line end point.</para>
    /// <para> Represents the following element tag in the schema: a:pt </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Point Point
	{
        get => GetElement<Point>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineTo>(deep);

}
/// <summary>
/// <para>Draw Arc To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:arcTo.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "arcTo")]
[Id(ElementTypeIdConst)]
public partial class ArcTo : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10222;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Shape Arc Width Radius.</para>
    /// <para>Represents the following attribute in the schema: wR </para>
    /// </summary>
    [SchemaAttr(0, "wR")]
    [Index(0)]
    public StringValue WidthRadius { get; set; }
	
    /// <summary>
    /// <para> Shape Arc Height Radius.</para>
    /// <para>Represents the following attribute in the schema: hR </para>
    /// </summary>
    [SchemaAttr(0, "hR")]
    [Index(1)]
    public StringValue HeightRadius { get; set; }
	
    /// <summary>
    /// <para> Shape Arc Start Angle.</para>
    /// <para>Represents the following attribute in the schema: stAng </para>
    /// </summary>
    [SchemaAttr(0, "stAng")]
    [Index(2)]
    public StringValue StartAngle { get; set; }
	
    /// <summary>
    /// <para> Shape Arc Swing Angle.</para>
    /// <para>Represents the following attribute in the schema: swAng </para>
    /// </summary>
    [SchemaAttr(0, "swAng")]
    [Index(3)]
    public StringValue SwingAngle { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ArcTo class.
    /// </summary>
    public ArcTo():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ArcTo>(deep);

}
/// <summary>
/// <para>Draw Quadratic Bezier Curve To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:quadBezTo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Point &lt;a:pt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Point))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "quadBezTo")]
[Id(ElementTypeIdConst)]
public partial class QuadraticBezierCurveTo : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10223;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the QuadraticBezierCurveTo class.
    /// </summary>
    public QuadraticBezierCurveTo():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QuadraticBezierCurveTo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QuadraticBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QuadraticBezierCurveTo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QuadraticBezierCurveTo(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuadraticBezierCurveTo>(deep);

}
/// <summary>
/// <para>Draw Cubic Bezier Curve To.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cubicBezTo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Point &lt;a:pt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Point))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cubicBezTo")]
[Id(ElementTypeIdConst)]
public partial class CubicBezierCurveTo : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10224;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CubicBezierCurveTo class.
    /// </summary>
    public CubicBezierCurveTo():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CubicBezierCurveTo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CubicBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CubicBezierCurveTo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CubicBezierCurveTo(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CubicBezierCurveTo>(deep);

}
/// <summary>
/// <para>Shape Path.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:path.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CloseShapePath &lt;a:close></description></item>
///<item><description>MoveTo &lt;a:moveTo></description></item>
///<item><description>LineTo &lt;a:lnTo></description></item>
///<item><description>ArcTo &lt;a:arcTo></description></item>
///<item><description>QuadraticBezierCurveTo &lt;a:quadBezTo></description></item>
///<item><description>CubicBezierCurveTo &lt;a:cubicBezTo></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CloseShapePath))]
    [ChildElementInfo(typeof(MoveTo))]
    [ChildElementInfo(typeof(LineTo))]
    [ChildElementInfo(typeof(ArcTo))]
    [ChildElementInfo(typeof(QuadraticBezierCurveTo))]
    [ChildElementInfo(typeof(CubicBezierCurveTo))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "path")]
[Id(ElementTypeIdConst)]
public partial class Path : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10225;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Path Width.</para>
    /// <para>Represents the following attribute in the schema: w </para>
    /// </summary>
    [SchemaAttr(0, "w")]
    [Index(0)]
    public Int64Value Width { get; set; }
	
    /// <summary>
    /// <para> Path Height.</para>
    /// <para>Represents the following attribute in the schema: h </para>
    /// </summary>
    [SchemaAttr(0, "h")]
    [Index(1)]
    public Int64Value Height { get; set; }
	
    /// <summary>
    /// <para> Path Fill.</para>
    /// <para>Represents the following attribute in the schema: fill </para>
    /// </summary>
    [SchemaAttr(0, "fill")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PathFillModeValues> Fill { get; set; }
	
    /// <summary>
    /// <para> Path Stroke.</para>
    /// <para>Represents the following attribute in the schema: stroke </para>
    /// </summary>
    [SchemaAttr(0, "stroke")]
    [Index(3)]
    public BooleanValue Stroke { get; set; }
	
    /// <summary>
    /// <para> 3D Extrusion Allowed.</para>
    /// <para>Represents the following attribute in the schema: extrusionOk </para>
    /// </summary>
    [SchemaAttr(0, "extrusionOk")]
    [Index(4)]
    public BooleanValue ExtrusionOk { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Path class.
    /// </summary>
    public Path():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Path class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Path(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Path class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Path(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Path class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Path(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Path>(deep);

}
/// <summary>
/// <para>List of Shape Adjust Values.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:avLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeGuide &lt;a:gd></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "avLst")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class AdjustValueList : GeometryGuideListType
{
    internal const int ElementTypeIdConst = 10226;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the AdjustValueList class.
    /// </summary>
    public AdjustValueList():base(){}
        /// <summary>
    ///Initializes a new instance of the AdjustValueList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustValueList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustValueList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustValueList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustValueList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AdjustValueList(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustValueList>(deep);

}
/// <summary>
/// <para>List of Shape Guides.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gdLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeGuide &lt;a:gd></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "gdLst")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ShapeGuideList : GeometryGuideListType
{
    internal const int ElementTypeIdConst = 10227;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ShapeGuideList class.
    /// </summary>
    public ShapeGuideList():base(){}
        /// <summary>
    ///Initializes a new instance of the ShapeGuideList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeGuideList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeGuideList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeGuideList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeGuideList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapeGuideList(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuideList>(deep);

}
/// <summary>
/// Defines the GeometryGuideListType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeGuide &lt;a:gd></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ShapeGuide))]

public abstract partial class GeometryGuideListType : OpenXmlCompositeElement
{
        
    
    
    
    
    /// <summary>
    /// Initializes a new instance of the GeometryGuideListType class.
    /// </summary>
    protected GeometryGuideListType(){}
    
        /// <summary>
    ///Initializes a new instance of the GeometryGuideListType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected GeometryGuideListType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GeometryGuideListType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected GeometryGuideListType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GeometryGuideListType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected GeometryGuideListType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>List of Shape Adjust Handles.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ahLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AdjustHandleXY &lt;a:ahXY></description></item>
///<item><description>AdjustHandlePolar &lt;a:ahPolar></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AdjustHandleXY))]
    [ChildElementInfo(typeof(AdjustHandlePolar))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ahLst")]
[Id(ElementTypeIdConst)]
public partial class AdjustHandleList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10228;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandleList class.
    /// </summary>
    public AdjustHandleList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AdjustHandleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandleList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandleList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AdjustHandleList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AdjustHandleList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AdjustHandleList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleList>(deep);

}
/// <summary>
/// <para>List of Shape Connection Sites.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cxnLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConnectionSite &lt;a:cxn></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConnectionSite))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cxnLst")]
[Id(ElementTypeIdConst)]
public partial class ConnectionSiteList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10229;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConnectionSiteList class.
    /// </summary>
    public ConnectionSiteList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionSiteList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionSiteList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionSiteList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionSiteList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionSiteList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionSiteList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSiteList>(deep);

}
/// <summary>
/// <para>Shape Text Rectangle.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:rect.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "rect")]
[Id(ElementTypeIdConst)]
public partial class Rectangle : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10230;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Left.</para>
    /// <para>Represents the following attribute in the schema: l </para>
    /// </summary>
    [SchemaAttr(0, "l")]
    [Index(0)]
    public StringValue Left { get; set; }
	
    /// <summary>
    /// <para> Top.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t")]
    [Index(1)]
    public StringValue Top { get; set; }
	
    /// <summary>
    /// <para> Right.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r")]
    [Index(2)]
    public StringValue Right { get; set; }
	
    /// <summary>
    /// <para> Bottom Position.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b")]
    [Index(3)]
    public StringValue Bottom { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Rectangle class.
    /// </summary>
    public Rectangle():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rectangle>(deep);

}
/// <summary>
/// <para>List of Shape Paths.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pathLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Path &lt;a:path></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Path))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "pathLst")]
[Id(ElementTypeIdConst)]
public partial class PathList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10231;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PathList class.
    /// </summary>
    public PathList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PathList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PathList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PathList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PathList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PathList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PathList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathList>(deep);

}
/// <summary>
/// <para>Dash Stop.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ds.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ds")]
[Id(ElementTypeIdConst)]
public partial class DashStop : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10232;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Dash Length.</para>
    /// <para>Represents the following attribute in the schema: d </para>
    /// </summary>
    [SchemaAttr(0, "d")]
    [Index(0)]
    public Int32Value DashLength { get; set; }
	
    /// <summary>
    /// <para> Space Length.</para>
    /// <para>Represents the following attribute in the schema: sp </para>
    /// </summary>
    [SchemaAttr(0, "sp")]
    [Index(1)]
    public Int32Value SpaceLength { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the DashStop class.
    /// </summary>
    public DashStop():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DashStop>(deep);

}
/// <summary>
/// <para>Line Head/End Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:headEnd.</para>
/// </summary>

[SchemaAttr(10, "headEnd")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HeadEnd : LineEndPropertiesType
{
    internal const int ElementTypeIdConst = 10233;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HeadEnd class.
    /// </summary>
    public HeadEnd():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeadEnd>(deep);

}
/// <summary>
/// <para>Tail line end style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tailEnd.</para>
/// </summary>

[SchemaAttr(10, "tailEnd")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TailEnd : LineEndPropertiesType
{
    internal const int ElementTypeIdConst = 10234;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TailEnd class.
    /// </summary>
    public TailEnd():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TailEnd>(deep);

}
/// <summary>
/// Defines the LineEndPropertiesType class.
/// </summary>


public abstract partial class LineEndPropertiesType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Line Head/End Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndValues> Type { get; set; }
	
    /// <summary>
    /// <para> Width of Head/End.</para>
    /// <para>Represents the following attribute in the schema: w </para>
    /// </summary>
    [SchemaAttr(0, "w")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndWidthValues> Width { get; set; }
	
    /// <summary>
    /// <para> Length of Head/End.</para>
    /// <para>Represents the following attribute in the schema: len </para>
    /// </summary>
    [SchemaAttr(0, "len")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.LineEndLengthValues> Length { get; set; }
	

    
    
    
    /// <summary>
    /// Initializes a new instance of the LineEndPropertiesType class.
    /// </summary>
    protected LineEndPropertiesType(){}
    
    
    
}
/// <summary>
/// <para>2D Transform for Grouped Objects.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:xfrm.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Offset &lt;a:off></description></item>
///<item><description>Extents &lt;a:ext></description></item>
///<item><description>ChildOffset &lt;a:chOff></description></item>
///<item><description>ChildExtents &lt;a:chExt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Offset))]
    [ChildElementInfo(typeof(Extents))]
    [ChildElementInfo(typeof(ChildOffset))]
    [ChildElementInfo(typeof(ChildExtents))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "xfrm")]
[Id(ElementTypeIdConst)]
public partial class TransformGroup : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10235;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Rotation.</para>
    /// <para>Represents the following attribute in the schema: rot </para>
    /// </summary>
    [SchemaAttr(0, "rot")]
    [Index(0)]
    public Int32Value Rotation { get; set; }
	
    /// <summary>
    /// <para> Horizontal Flip.</para>
    /// <para>Represents the following attribute in the schema: flipH </para>
    /// </summary>
    [SchemaAttr(0, "flipH")]
    [Index(1)]
    public BooleanValue HorizontalFlip { get; set; }
	
    /// <summary>
    /// <para> Vertical Flip.</para>
    /// <para>Represents the following attribute in the schema: flipV </para>
    /// </summary>
    [SchemaAttr(0, "flipV")]
    [Index(2)]
    public BooleanValue VerticalFlip { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TransformGroup class.
    /// </summary>
    public TransformGroup():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TransformGroup class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TransformGroup(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TransformGroup class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TransformGroup(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TransformGroup class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TransformGroup(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Offset.</para>
    /// <para> Represents the following element tag in the schema: a:off </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Offset Offset
	{
        get => GetElement<Offset>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Extents.</para>
    /// <para> Represents the following element tag in the schema: a:ext </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Extents Extents
	{
        get => GetElement<Extents>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Child Offset.</para>
    /// <para> Represents the following element tag in the schema: a:chOff </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ChildOffset ChildOffset
	{
        get => GetElement<ChildOffset>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Child Extents.</para>
    /// <para> Represents the following element tag in the schema: a:chExt </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ChildExtents ChildExtents
	{
        get => GetElement<ChildExtents>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformGroup>(deep);

}
/// <summary>
/// <para>Defines the BodyProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bodyPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PresetTextWrap &lt;a:prstTxWarp></description></item>
///<item><description>NoAutoFit &lt;a:noAutofit></description></item>
///<item><description>NormalAutoFit &lt;a:normAutofit></description></item>
///<item><description>ShapeAutoFit &lt;a:spAutoFit></description></item>
///<item><description>Scene3DType &lt;a:scene3d></description></item>
///<item><description>Shape3DType &lt;a:sp3d></description></item>
///<item><description>FlatText &lt;a:flatTx></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PresetTextWrap))]
    [ChildElementInfo(typeof(NoAutoFit))]
    [ChildElementInfo(typeof(NormalAutoFit))]
    [ChildElementInfo(typeof(ShapeAutoFit))]
    [ChildElementInfo(typeof(Scene3DType))]
    [ChildElementInfo(typeof(Shape3DType))]
    [ChildElementInfo(typeof(FlatText))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "bodyPr")]
[Id(ElementTypeIdConst)]
public partial class BodyProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10237;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Rotation.</para>
    /// <para>Represents the following attribute in the schema: rot </para>
    /// </summary>
    [SchemaAttr(0, "rot")]
    [Index(0)]
    public Int32Value Rotation { get; set; }
	
    /// <summary>
    /// <para> Paragraph Spacing.</para>
    /// <para>Represents the following attribute in the schema: spcFirstLastPara </para>
    /// </summary>
    [SchemaAttr(0, "spcFirstLastPara")]
    [Index(1)]
    public BooleanValue UseParagraphSpacing { get; set; }
	
    /// <summary>
    /// <para> Text Vertical Overflow.</para>
    /// <para>Represents the following attribute in the schema: vertOverflow </para>
    /// </summary>
    [SchemaAttr(0, "vertOverflow")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues> VerticalOverflow { get; set; }
	
    /// <summary>
    /// <para> Text Horizontal Overflow.</para>
    /// <para>Represents the following attribute in the schema: horzOverflow </para>
    /// </summary>
    [SchemaAttr(0, "horzOverflow")]
    [Index(3)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues> HorizontalOverflow { get; set; }
	
    /// <summary>
    /// <para> Vertical Text.</para>
    /// <para>Represents the following attribute in the schema: vert </para>
    /// </summary>
    [SchemaAttr(0, "vert")]
    [Index(4)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues> Vertical { get; set; }
	
    /// <summary>
    /// <para> Text Wrapping Type.</para>
    /// <para>Represents the following attribute in the schema: wrap </para>
    /// </summary>
    [SchemaAttr(0, "wrap")]
    [Index(5)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextWrappingValues> Wrap { get; set; }
	
    /// <summary>
    /// <para> Left Inset.</para>
    /// <para>Represents the following attribute in the schema: lIns </para>
    /// </summary>
    [SchemaAttr(0, "lIns")]
    [Index(6)]
    public Int32Value LeftInset { get; set; }
	
    /// <summary>
    /// <para> Top Inset.</para>
    /// <para>Represents the following attribute in the schema: tIns </para>
    /// </summary>
    [SchemaAttr(0, "tIns")]
    [Index(7)]
    public Int32Value TopInset { get; set; }
	
    /// <summary>
    /// <para> Right Inset.</para>
    /// <para>Represents the following attribute in the schema: rIns </para>
    /// </summary>
    [SchemaAttr(0, "rIns")]
    [Index(8)]
    public Int32Value RightInset { get; set; }
	
    /// <summary>
    /// <para> Bottom Inset.</para>
    /// <para>Represents the following attribute in the schema: bIns </para>
    /// </summary>
    [SchemaAttr(0, "bIns")]
    [Index(9)]
    public Int32Value BottomInset { get; set; }
	
    /// <summary>
    /// <para> Number of Columns.</para>
    /// <para>Represents the following attribute in the schema: numCol </para>
    /// </summary>
    [SchemaAttr(0, "numCol")]
    [Index(10)]
    public Int32Value ColumnCount { get; set; }
	
    /// <summary>
    /// <para> Space Between Columns.</para>
    /// <para>Represents the following attribute in the schema: spcCol </para>
    /// </summary>
    [SchemaAttr(0, "spcCol")]
    [Index(11)]
    public Int32Value ColumnSpacing { get; set; }
	
    /// <summary>
    /// <para> Columns Right-To-Left.</para>
    /// <para>Represents the following attribute in the schema: rtlCol </para>
    /// </summary>
    [SchemaAttr(0, "rtlCol")]
    [Index(12)]
    public BooleanValue RightToLeftColumns { get; set; }
	
    /// <summary>
    /// <para> From WordArt.</para>
    /// <para>Represents the following attribute in the schema: fromWordArt </para>
    /// </summary>
    [SchemaAttr(0, "fromWordArt")]
    [Index(13)]
    public BooleanValue FromWordArt { get; set; }
	
    /// <summary>
    /// <para> Anchor.</para>
    /// <para>Represents the following attribute in the schema: anchor </para>
    /// </summary>
    [SchemaAttr(0, "anchor")]
    [Index(14)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues> Anchor { get; set; }
	
    /// <summary>
    /// <para> Anchor Center.</para>
    /// <para>Represents the following attribute in the schema: anchorCtr </para>
    /// </summary>
    [SchemaAttr(0, "anchorCtr")]
    [Index(15)]
    public BooleanValue AnchorCenter { get; set; }
	
    /// <summary>
    /// <para> Force Anti-Alias.</para>
    /// <para>Represents the following attribute in the schema: forceAA </para>
    /// </summary>
    [SchemaAttr(0, "forceAA")]
    [Index(16)]
    public BooleanValue ForceAntiAlias { get; set; }
	
    /// <summary>
    /// <para> Text Upright.</para>
    /// <para>Represents the following attribute in the schema: upright </para>
    /// </summary>
    [SchemaAttr(0, "upright")]
    [Index(17)]
    public BooleanValue UpRight { get; set; }
	
    /// <summary>
    /// <para> Compatible Line Spacing.</para>
    /// <para>Represents the following attribute in the schema: compatLnSpc </para>
    /// </summary>
    [SchemaAttr(0, "compatLnSpc")]
    [Index(18)]
    public BooleanValue CompatibleLineSpacing { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BodyProperties class.
    /// </summary>
    public BodyProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BodyProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BodyProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BodyProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BodyProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BodyProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BodyProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Preset Text Shape.</para>
    /// <para> Represents the following element tag in the schema: a:prstTxWarp </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public PresetTextWrap PresetTextWrap
	{
        get => GetElement<PresetTextWrap>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BodyProperties>(deep);

}
/// <summary>
/// <para>Defines the ListStyle Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lstStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DefaultParagraphProperties &lt;a:defPPr></description></item>
///<item><description>Level1ParagraphProperties &lt;a:lvl1pPr></description></item>
///<item><description>Level2ParagraphProperties &lt;a:lvl2pPr></description></item>
///<item><description>Level3ParagraphProperties &lt;a:lvl3pPr></description></item>
///<item><description>Level4ParagraphProperties &lt;a:lvl4pPr></description></item>
///<item><description>Level5ParagraphProperties &lt;a:lvl5pPr></description></item>
///<item><description>Level6ParagraphProperties &lt;a:lvl6pPr></description></item>
///<item><description>Level7ParagraphProperties &lt;a:lvl7pPr></description></item>
///<item><description>Level8ParagraphProperties &lt;a:lvl8pPr></description></item>
///<item><description>Level9ParagraphProperties &lt;a:lvl9pPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DefaultParagraphProperties))]
    [ChildElementInfo(typeof(Level1ParagraphProperties))]
    [ChildElementInfo(typeof(Level2ParagraphProperties))]
    [ChildElementInfo(typeof(Level3ParagraphProperties))]
    [ChildElementInfo(typeof(Level4ParagraphProperties))]
    [ChildElementInfo(typeof(Level5ParagraphProperties))]
    [ChildElementInfo(typeof(Level6ParagraphProperties))]
    [ChildElementInfo(typeof(Level7ParagraphProperties))]
    [ChildElementInfo(typeof(Level8ParagraphProperties))]
    [ChildElementInfo(typeof(Level9ParagraphProperties))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "lstStyle")]
[Id(ElementTypeIdConst)]
public partial class ListStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10238;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ListStyle class.
    /// </summary>
    public ListStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ListStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ListStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ListStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ListStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ListStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ListStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Default Paragraph Style.</para>
    /// <para> Represents the following element tag in the schema: a:defPPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public DefaultParagraphProperties DefaultParagraphProperties
	{
        get => GetElement<DefaultParagraphProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> List Level 1 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl1pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Level1ParagraphProperties Level1ParagraphProperties
	{
        get => GetElement<Level1ParagraphProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> List Level 2 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl2pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Level2ParagraphProperties Level2ParagraphProperties
	{
        get => GetElement<Level2ParagraphProperties>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> List Level 3 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl3pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public Level3ParagraphProperties Level3ParagraphProperties
	{
        get => GetElement<Level3ParagraphProperties>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> List Level 4 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl4pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public Level4ParagraphProperties Level4ParagraphProperties
	{
        get => GetElement<Level4ParagraphProperties>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> List Level 5 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl5pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public Level5ParagraphProperties Level5ParagraphProperties
	{
        get => GetElement<Level5ParagraphProperties>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> List Level 6 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl6pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public Level6ParagraphProperties Level6ParagraphProperties
	{
        get => GetElement<Level6ParagraphProperties>(6);
        set => SetElement(6, value);
	}
    
    /// <summary>
    /// <para> List Level 7 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl7pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(7)]
    public Level7ParagraphProperties Level7ParagraphProperties
	{
        get => GetElement<Level7ParagraphProperties>(7);
        set => SetElement(7, value);
	}
    
    /// <summary>
    /// <para> List Level 8 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl8pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(8)]
    public Level8ParagraphProperties Level8ParagraphProperties
	{
        get => GetElement<Level8ParagraphProperties>(8);
        set => SetElement(8, value);
	}
    
    /// <summary>
    /// <para> List Level 9 Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:lvl9pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(9)]
    public Level9ParagraphProperties Level9ParagraphProperties
	{
        get => GetElement<Level9ParagraphProperties>(9);
        set => SetElement(9, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(10)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(10);
        set => SetElement(10, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListStyle>(deep);

}
/// <summary>
/// <para>Shape Default.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spDef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>BodyProperties &lt;a:bodyPr></description></item>
///<item><description>ListStyle &lt;a:lstStyle></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "spDef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ShapeDefault : DefaultShapeDefinitionType
{
    internal const int ElementTypeIdConst = 10239;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ShapeDefault class.
    /// </summary>
    public ShapeDefault():base(){}
        /// <summary>
    ///Initializes a new instance of the ShapeDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeDefault(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapeDefault(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapeDefault class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapeDefault(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeDefault>(deep);

}
/// <summary>
/// <para>Line Default.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnDef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>BodyProperties &lt;a:bodyPr></description></item>
///<item><description>ListStyle &lt;a:lstStyle></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnDef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LineDefault : DefaultShapeDefinitionType
{
    internal const int ElementTypeIdConst = 10240;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LineDefault class.
    /// </summary>
    public LineDefault():base(){}
        /// <summary>
    ///Initializes a new instance of the LineDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineDefault(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LineDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineDefault(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LineDefault class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LineDefault(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineDefault>(deep);

}
/// <summary>
/// <para>Text Default.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:txDef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>BodyProperties &lt;a:bodyPr></description></item>
///<item><description>ListStyle &lt;a:lstStyle></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "txDef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TextDefault : DefaultShapeDefinitionType
{
    internal const int ElementTypeIdConst = 10241;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TextDefault class.
    /// </summary>
    public TextDefault():base(){}
        /// <summary>
    ///Initializes a new instance of the TextDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextDefault(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextDefault class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextDefault(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextDefault class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TextDefault(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextDefault>(deep);

}
/// <summary>
/// Defines the DefaultShapeDefinitionType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>BodyProperties &lt;a:bodyPr></description></item>
///<item><description>ListStyle &lt;a:lstStyle></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ShapeProperties))]
    [ChildElementInfo(typeof(BodyProperties))]
    [ChildElementInfo(typeof(ListStyle))]
    [ChildElementInfo(typeof(ShapeStyle))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class DefaultShapeDefinitionType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Visual Properties.</para>
    /// <para> Represents the following element tag in the schema: a:spPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ShapeProperties ShapeProperties
	{
        get => GetElement<ShapeProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> BodyProperties.</para>
    /// <para> Represents the following element tag in the schema: a:bodyPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public BodyProperties BodyProperties
	{
        get => GetElement<BodyProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ListStyle.</para>
    /// <para> Represents the following element tag in the schema: a:lstStyle </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ListStyle ListStyle
	{
        get => GetElement<ListStyle>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ShapeStyle.</para>
    /// <para> Represents the following element tag in the schema: a:style </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ShapeStyle ShapeStyle
	{
        get => GetElement<ShapeStyle>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the DefaultShapeDefinitionType class.
    /// </summary>
    protected DefaultShapeDefinitionType(){}
    
        /// <summary>
    ///Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected DefaultShapeDefinitionType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected DefaultShapeDefinitionType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultShapeDefinitionType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected DefaultShapeDefinitionType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Override Color Mapping.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:overrideClrMapping.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "overrideClrMapping")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OverrideColorMapping : ColorMappingType
{
    internal const int ElementTypeIdConst = 10243;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the OverrideColorMapping class.
    /// </summary>
    public OverrideColorMapping():base(){}
        /// <summary>
    ///Initializes a new instance of the OverrideColorMapping class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OverrideColorMapping(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OverrideColorMapping class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OverrideColorMapping(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OverrideColorMapping class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OverrideColorMapping(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OverrideColorMapping>(deep);

}
/// <summary>
/// <para>Defines the ColorMap Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:clrMap.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "clrMap")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ColorMap : ColorMappingType
{
    internal const int ElementTypeIdConst = 10244;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ColorMap class.
    /// </summary>
    public ColorMap():base(){}
        /// <summary>
    ///Initializes a new instance of the ColorMap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorMap(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorMap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorMap(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorMap class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorMap(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorMap>(deep);

}
/// <summary>
/// Defines the ColorMappingType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class ColorMappingType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Background 1.</para>
    /// <para>Represents the following attribute in the schema: bg1 </para>
    /// </summary>
    [SchemaAttr(0, "bg1")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Background1 { get; set; }
	
    /// <summary>
    /// <para> Text 1.</para>
    /// <para>Represents the following attribute in the schema: tx1 </para>
    /// </summary>
    [SchemaAttr(0, "tx1")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Text1 { get; set; }
	
    /// <summary>
    /// <para> Background 2.</para>
    /// <para>Represents the following attribute in the schema: bg2 </para>
    /// </summary>
    [SchemaAttr(0, "bg2")]
    [Index(2)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Background2 { get; set; }
	
    /// <summary>
    /// <para> Text 2.</para>
    /// <para>Represents the following attribute in the schema: tx2 </para>
    /// </summary>
    [SchemaAttr(0, "tx2")]
    [Index(3)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Text2 { get; set; }
	
    /// <summary>
    /// <para> Accent 1.</para>
    /// <para>Represents the following attribute in the schema: accent1 </para>
    /// </summary>
    [SchemaAttr(0, "accent1")]
    [Index(4)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent1 { get; set; }
	
    /// <summary>
    /// <para> Accent 2.</para>
    /// <para>Represents the following attribute in the schema: accent2 </para>
    /// </summary>
    [SchemaAttr(0, "accent2")]
    [Index(5)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent2 { get; set; }
	
    /// <summary>
    /// <para> Accent 3.</para>
    /// <para>Represents the following attribute in the schema: accent3 </para>
    /// </summary>
    [SchemaAttr(0, "accent3")]
    [Index(6)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent3 { get; set; }
	
    /// <summary>
    /// <para> Accent 4.</para>
    /// <para>Represents the following attribute in the schema: accent4 </para>
    /// </summary>
    [SchemaAttr(0, "accent4")]
    [Index(7)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent4 { get; set; }
	
    /// <summary>
    /// <para> Accent 5.</para>
    /// <para>Represents the following attribute in the schema: accent5 </para>
    /// </summary>
    [SchemaAttr(0, "accent5")]
    [Index(8)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent5 { get; set; }
	
    /// <summary>
    /// <para> Accent 6.</para>
    /// <para>Represents the following attribute in the schema: accent6 </para>
    /// </summary>
    [SchemaAttr(0, "accent6")]
    [Index(9)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Accent6 { get; set; }
	
    /// <summary>
    /// <para> Hyperlink.</para>
    /// <para>Represents the following attribute in the schema: hlink </para>
    /// </summary>
    [SchemaAttr(0, "hlink")]
    [Index(10)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> Hyperlink { get; set; }
	
    /// <summary>
    /// <para> Followed Hyperlink.</para>
    /// <para>Represents the following attribute in the schema: folHlink </para>
    /// </summary>
    [SchemaAttr(0, "folHlink")]
    [Index(11)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.ColorSchemeIndexValues> FollowedHyperlink { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the ColorMappingType class.
    /// </summary>
    protected ColorMappingType(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorMappingType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ColorMappingType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorMappingType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ColorMappingType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorMappingType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected ColorMappingType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Extra Color Scheme.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extraClrScheme.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ColorScheme &lt;a:clrScheme></description></item>
///<item><description>ColorMap &lt;a:clrMap></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ColorScheme))]
    [ChildElementInfo(typeof(ColorMap))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extraClrScheme")]
[Id(ElementTypeIdConst)]
public partial class ExtraColorScheme : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10245;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorScheme class.
    /// </summary>
    public ExtraColorScheme():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExtraColorScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtraColorScheme(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorScheme class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtraColorScheme(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorScheme class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExtraColorScheme(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ColorScheme.</para>
    /// <para> Represents the following element tag in the schema: a:clrScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ColorScheme ColorScheme
	{
        get => GetElement<ColorScheme>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> ColorMap.</para>
    /// <para> Represents the following element tag in the schema: a:clrMap </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ColorMap ColorMap
	{
        get => GetElement<ColorMap>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorScheme>(deep);

}
/// <summary>
/// <para>Defines the ThemeElements Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:themeElements.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ColorScheme &lt;a:clrScheme></description></item>
///<item><description>FontScheme &lt;a:fontScheme></description></item>
///<item><description>FormatScheme &lt;a:fmtScheme></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ColorScheme))]
    [ChildElementInfo(typeof(FontScheme))]
    [ChildElementInfo(typeof(FormatScheme))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "themeElements")]
[Id(ElementTypeIdConst)]
public partial class ThemeElements : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10246;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ThemeElements class.
    /// </summary>
    public ThemeElements():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ThemeElements class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ThemeElements(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeElements class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ThemeElements(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeElements class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ThemeElements(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ColorScheme.</para>
    /// <para> Represents the following element tag in the schema: a:clrScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ColorScheme ColorScheme
	{
        get => GetElement<ColorScheme>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Font Scheme.</para>
    /// <para> Represents the following element tag in the schema: a:fontScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public FontScheme FontScheme
	{
        get => GetElement<FontScheme>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Format Scheme.</para>
    /// <para> Represents the following element tag in the schema: a:fmtScheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public FormatScheme FormatScheme
	{
        get => GetElement<FormatScheme>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeElements>(deep);

}
/// <summary>
/// <para>Cell 3-D.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cell3D.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Bevel &lt;a:bevel></description></item>
///<item><description>LightRig &lt;a:lightRig></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Bevel))]
    [ChildElementInfo(typeof(LightRig))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cell3D")]
[Id(ElementTypeIdConst)]
public partial class Cell3DProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10253;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Preset Material.</para>
    /// <para>Represents the following attribute in the schema: prstMaterial </para>
    /// </summary>
    [SchemaAttr(0, "prstMaterial")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues> PresetMaterial { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the Cell3DProperties class.
    /// </summary>
    public Cell3DProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Cell3DProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Cell3DProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Cell3DProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Cell3DProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Cell3DProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Cell3DProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Bevel.</para>
    /// <para> Represents the following element tag in the schema: a:bevel </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Bevel Bevel
	{
        get => GetElement<Bevel>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Light Rig.</para>
    /// <para> Represents the following element tag in the schema: a:lightRig </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public LightRig LightRig
	{
        get => GetElement<LightRig>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Cell3DProperties>(deep);

}
/// <summary>
/// <para>Table Cell Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tcPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LeftBorderLineProperties &lt;a:lnL></description></item>
///<item><description>RightBorderLineProperties &lt;a:lnR></description></item>
///<item><description>TopBorderLineProperties &lt;a:lnT></description></item>
///<item><description>BottomBorderLineProperties &lt;a:lnB></description></item>
///<item><description>TopLeftToBottomRightBorderLineProperties &lt;a:lnTlToBr></description></item>
///<item><description>BottomLeftToTopRightBorderLineProperties &lt;a:lnBlToTr></description></item>
///<item><description>Cell3DProperties &lt;a:cell3D></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(LeftBorderLineProperties))]
    [ChildElementInfo(typeof(RightBorderLineProperties))]
    [ChildElementInfo(typeof(TopBorderLineProperties))]
    [ChildElementInfo(typeof(BottomBorderLineProperties))]
    [ChildElementInfo(typeof(TopLeftToBottomRightBorderLineProperties))]
    [ChildElementInfo(typeof(BottomLeftToTopRightBorderLineProperties))]
    [ChildElementInfo(typeof(Cell3DProperties))]
    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tcPr")]
[Id(ElementTypeIdConst)]
public partial class TableCellProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10254;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Left Margin.</para>
    /// <para>Represents the following attribute in the schema: marL </para>
    /// </summary>
    [SchemaAttr(0, "marL")]
    [Index(0)]
    public Int32Value LeftMargin { get; set; }
	
    /// <summary>
    /// <para> Right Margin.</para>
    /// <para>Represents the following attribute in the schema: marR </para>
    /// </summary>
    [SchemaAttr(0, "marR")]
    [Index(1)]
    public Int32Value RightMargin { get; set; }
	
    /// <summary>
    /// <para> Top Margin.</para>
    /// <para>Represents the following attribute in the schema: marT </para>
    /// </summary>
    [SchemaAttr(0, "marT")]
    [Index(2)]
    public Int32Value TopMargin { get; set; }
	
    /// <summary>
    /// <para> Bottom Margin.</para>
    /// <para>Represents the following attribute in the schema: marB </para>
    /// </summary>
    [SchemaAttr(0, "marB")]
    [Index(3)]
    public Int32Value BottomMargin { get; set; }
	
    /// <summary>
    /// <para> Text Direction.</para>
    /// <para>Represents the following attribute in the schema: vert </para>
    /// </summary>
    [SchemaAttr(0, "vert")]
    [Index(4)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextVerticalValues> Vertical { get; set; }
	
    /// <summary>
    /// <para> Anchor.</para>
    /// <para>Represents the following attribute in the schema: anchor </para>
    /// </summary>
    [SchemaAttr(0, "anchor")]
    [Index(5)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues> Anchor { get; set; }
	
    /// <summary>
    /// <para> Anchor Center.</para>
    /// <para>Represents the following attribute in the schema: anchorCtr </para>
    /// </summary>
    [SchemaAttr(0, "anchorCtr")]
    [Index(6)]
    public BooleanValue AnchorCenter { get; set; }
	
    /// <summary>
    /// <para> Horizontal Overflow.</para>
    /// <para>Represents the following attribute in the schema: horzOverflow </para>
    /// </summary>
    [SchemaAttr(0, "horzOverflow")]
    [Index(7)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues> HorizontalOverflow { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TableCellProperties class.
    /// </summary>
    public TableCellProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableCellProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableCellProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Left Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnL </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public LeftBorderLineProperties LeftBorderLineProperties
	{
        get => GetElement<LeftBorderLineProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Right Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnR </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RightBorderLineProperties RightBorderLineProperties
	{
        get => GetElement<RightBorderLineProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Top Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnT </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public TopBorderLineProperties TopBorderLineProperties
	{
        get => GetElement<TopBorderLineProperties>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Bottom Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnB </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BottomBorderLineProperties BottomBorderLineProperties
	{
        get => GetElement<BottomBorderLineProperties>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Top-Left to Bottom-Right Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnTlToBr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public TopLeftToBottomRightBorderLineProperties TopLeftToBottomRightBorderLineProperties
	{
        get => GetElement<TopLeftToBottomRightBorderLineProperties>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Bottom-Left to Top-Right Border Line Properties.</para>
    /// <para> Represents the following element tag in the schema: a:lnBlToTr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public BottomLeftToTopRightBorderLineProperties BottomLeftToTopRightBorderLineProperties
	{
        get => GetElement<BottomLeftToTopRightBorderLineProperties>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> Cell 3-D.</para>
    /// <para> Represents the following element tag in the schema: a:cell3D </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public Cell3DProperties Cell3DProperties
	{
        get => GetElement<Cell3DProperties>(6);
        set => SetElement(6, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellProperties>(deep);

}
/// <summary>
/// <para>Table Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TextBody &lt;a:txBody></description></item>
///<item><description>TableCellProperties &lt;a:tcPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TextBody))]
    [ChildElementInfo(typeof(TableCellProperties))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tc")]
[Id(ElementTypeIdConst)]
public partial class TableCell : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10255;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Row Span.</para>
    /// <para>Represents the following attribute in the schema: rowSpan </para>
    /// </summary>
    [SchemaAttr(0, "rowSpan")]
    [Index(0)]
    public Int32Value RowSpan { get; set; }
	
    /// <summary>
    /// <para> Grid Span.</para>
    /// <para>Represents the following attribute in the schema: gridSpan </para>
    /// </summary>
    [SchemaAttr(0, "gridSpan")]
    [Index(1)]
    public Int32Value GridSpan { get; set; }
	
    /// <summary>
    /// <para> Horizontal Merge.</para>
    /// <para>Represents the following attribute in the schema: hMerge </para>
    /// </summary>
    [SchemaAttr(0, "hMerge")]
    [Index(2)]
    public BooleanValue HorizontalMerge { get; set; }
	
    /// <summary>
    /// <para> Vertical Merge.</para>
    /// <para>Represents the following attribute in the schema: vMerge </para>
    /// </summary>
    [SchemaAttr(0, "vMerge")]
    [Index(3)]
    public BooleanValue VerticalMerge { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TableCell class.
    /// </summary>
    public TableCell():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableCell(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text Body.</para>
    /// <para> Represents the following element tag in the schema: a:txBody </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TextBody TextBody
	{
        get => GetElement<TextBody>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Table Cell Properties.</para>
    /// <para> Represents the following element tag in the schema: a:tcPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public TableCellProperties TableCellProperties
	{
        get => GetElement<TableCellProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCell>(deep);

}
/// <summary>
/// <para>Table Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tableStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableBackground &lt;a:tblBg></description></item>
///<item><description>WholeTable &lt;a:wholeTbl></description></item>
///<item><description>Band1Horizontal &lt;a:band1H></description></item>
///<item><description>Band2Horizontal &lt;a:band2H></description></item>
///<item><description>Band1Vertical &lt;a:band1V></description></item>
///<item><description>Band2Vertical &lt;a:band2V></description></item>
///<item><description>LastColumn &lt;a:lastCol></description></item>
///<item><description>FirstColumn &lt;a:firstCol></description></item>
///<item><description>LastRow &lt;a:lastRow></description></item>
///<item><description>SoutheastCell &lt;a:seCell></description></item>
///<item><description>SouthwestCell &lt;a:swCell></description></item>
///<item><description>FirstRow &lt;a:firstRow></description></item>
///<item><description>NortheastCell &lt;a:neCell></description></item>
///<item><description>NorthwestCell &lt;a:nwCell></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "tableStyle")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TableStyle : TableStyleType
{
    internal const int ElementTypeIdConst = 10256;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TableStyle class.
    /// </summary>
    public TableStyle():base(){}
        /// <summary>
    ///Initializes a new instance of the TableStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableStyle(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);

}
/// <summary>
/// <para>Table Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tblStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableBackground &lt;a:tblBg></description></item>
///<item><description>WholeTable &lt;a:wholeTbl></description></item>
///<item><description>Band1Horizontal &lt;a:band1H></description></item>
///<item><description>Band2Horizontal &lt;a:band2H></description></item>
///<item><description>Band1Vertical &lt;a:band1V></description></item>
///<item><description>Band2Vertical &lt;a:band2V></description></item>
///<item><description>LastColumn &lt;a:lastCol></description></item>
///<item><description>FirstColumn &lt;a:firstCol></description></item>
///<item><description>LastRow &lt;a:lastRow></description></item>
///<item><description>SoutheastCell &lt;a:seCell></description></item>
///<item><description>SouthwestCell &lt;a:swCell></description></item>
///<item><description>FirstRow &lt;a:firstRow></description></item>
///<item><description>NortheastCell &lt;a:neCell></description></item>
///<item><description>NorthwestCell &lt;a:nwCell></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "tblStyle")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TableStyleEntry : TableStyleType
{
    internal const int ElementTypeIdConst = 10288;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TableStyleEntry class.
    /// </summary>
    public TableStyleEntry():base(){}
        /// <summary>
    ///Initializes a new instance of the TableStyleEntry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyleEntry(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleEntry class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyleEntry(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleEntry class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableStyleEntry(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleEntry>(deep);

}
/// <summary>
/// Defines the TableStyleType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableBackground &lt;a:tblBg></description></item>
///<item><description>WholeTable &lt;a:wholeTbl></description></item>
///<item><description>Band1Horizontal &lt;a:band1H></description></item>
///<item><description>Band2Horizontal &lt;a:band2H></description></item>
///<item><description>Band1Vertical &lt;a:band1V></description></item>
///<item><description>Band2Vertical &lt;a:band2V></description></item>
///<item><description>LastColumn &lt;a:lastCol></description></item>
///<item><description>FirstColumn &lt;a:firstCol></description></item>
///<item><description>LastRow &lt;a:lastRow></description></item>
///<item><description>SoutheastCell &lt;a:seCell></description></item>
///<item><description>SouthwestCell &lt;a:swCell></description></item>
///<item><description>FirstRow &lt;a:firstRow></description></item>
///<item><description>NortheastCell &lt;a:neCell></description></item>
///<item><description>NorthwestCell &lt;a:nwCell></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableBackground))]
    [ChildElementInfo(typeof(WholeTable))]
    [ChildElementInfo(typeof(Band1Horizontal))]
    [ChildElementInfo(typeof(Band2Horizontal))]
    [ChildElementInfo(typeof(Band1Vertical))]
    [ChildElementInfo(typeof(Band2Vertical))]
    [ChildElementInfo(typeof(LastColumn))]
    [ChildElementInfo(typeof(FirstColumn))]
    [ChildElementInfo(typeof(LastRow))]
    [ChildElementInfo(typeof(SoutheastCell))]
    [ChildElementInfo(typeof(SouthwestCell))]
    [ChildElementInfo(typeof(FirstRow))]
    [ChildElementInfo(typeof(NortheastCell))]
    [ChildElementInfo(typeof(NorthwestCell))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class TableStyleType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Style ID.</para>
    /// <para>Represents the following attribute in the schema: styleId </para>
    /// </summary>
    [SchemaAttr(0, "styleId")]
    [Index(0)]
    public StringValue StyleId { get; set; }
	
    /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: styleName </para>
    /// </summary>
    [SchemaAttr(0, "styleName")]
    [Index(1)]
    public StringValue StyleName { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Table Background.</para>
    /// <para> Represents the following element tag in the schema: a:tblBg </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TableBackground TableBackground
	{
        get => GetElement<TableBackground>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Whole Table.</para>
    /// <para> Represents the following element tag in the schema: a:wholeTbl </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public WholeTable WholeTable
	{
        get => GetElement<WholeTable>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Band 1 Horizontal.</para>
    /// <para> Represents the following element tag in the schema: a:band1H </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Band1Horizontal Band1Horizontal
	{
        get => GetElement<Band1Horizontal>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Band 2 Horizontal.</para>
    /// <para> Represents the following element tag in the schema: a:band2H </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public Band2Horizontal Band2Horizontal
	{
        get => GetElement<Band2Horizontal>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Band 1 Vertical.</para>
    /// <para> Represents the following element tag in the schema: a:band1V </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public Band1Vertical Band1Vertical
	{
        get => GetElement<Band1Vertical>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Band 2 Vertical.</para>
    /// <para> Represents the following element tag in the schema: a:band2V </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public Band2Vertical Band2Vertical
	{
        get => GetElement<Band2Vertical>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> Last Column.</para>
    /// <para> Represents the following element tag in the schema: a:lastCol </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public LastColumn LastColumn
	{
        get => GetElement<LastColumn>(6);
        set => SetElement(6, value);
	}
    
    /// <summary>
    /// <para> First Column.</para>
    /// <para> Represents the following element tag in the schema: a:firstCol </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(7)]
    public FirstColumn FirstColumn
	{
        get => GetElement<FirstColumn>(7);
        set => SetElement(7, value);
	}
    
    /// <summary>
    /// <para> Last Row.</para>
    /// <para> Represents the following element tag in the schema: a:lastRow </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(8)]
    public LastRow LastRow
	{
        get => GetElement<LastRow>(8);
        set => SetElement(8, value);
	}
    
    /// <summary>
    /// <para> Southeast Cell.</para>
    /// <para> Represents the following element tag in the schema: a:seCell </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(9)]
    public SoutheastCell SoutheastCell
	{
        get => GetElement<SoutheastCell>(9);
        set => SetElement(9, value);
	}
    
    /// <summary>
    /// <para> Southwest Cell.</para>
    /// <para> Represents the following element tag in the schema: a:swCell </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(10)]
    public SouthwestCell SouthwestCell
	{
        get => GetElement<SouthwestCell>(10);
        set => SetElement(10, value);
	}
    
    /// <summary>
    /// <para> First Row.</para>
    /// <para> Represents the following element tag in the schema: a:firstRow </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(11)]
    public FirstRow FirstRow
	{
        get => GetElement<FirstRow>(11);
        set => SetElement(11, value);
	}
    
    /// <summary>
    /// <para> Northeast Cell.</para>
    /// <para> Represents the following element tag in the schema: a:neCell </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(12)]
    public NortheastCell NortheastCell
	{
        get => GetElement<NortheastCell>(12);
        set => SetElement(12, value);
	}
    
    /// <summary>
    /// <para> Northwest Cell.</para>
    /// <para> Represents the following element tag in the schema: a:nwCell </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(13)]
    public NorthwestCell NorthwestCell
	{
        get => GetElement<NorthwestCell>(13);
        set => SetElement(13, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(14)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(14);
        set => SetElement(14, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the TableStyleType class.
    /// </summary>
    protected TableStyleType(){}
    
        /// <summary>
    ///Initializes a new instance of the TableStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TableStyleType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TableStyleType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyleType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TableStyleType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Table Style ID.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tableStyleId.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tableStyleId")]
[Id(ElementTypeIdConst)]
public partial class TableStyleId : OpenXmlLeafTextElement
{
    internal const int ElementTypeIdConst = 10257;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableStyleId class.
    /// </summary>
    public TableStyleId():base(){}
    
      
        /// <summary>
    /// Initializes a new instance of the TableStyleId class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public TableStyleId(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    
 
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleId>(deep);

}
/// <summary>
/// <para>Table Grid Column.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:gridCol.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "gridCol")]
[Id(ElementTypeIdConst)]
public partial class GridColumn : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10258;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Width.</para>
    /// <para>Represents the following attribute in the schema: w </para>
    /// </summary>
    [SchemaAttr(0, "w")]
    [Index(0)]
    public Int64Value Width { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GridColumn class.
    /// </summary>
    public GridColumn():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GridColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GridColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GridColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GridColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GridColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GridColumn(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridColumn>(deep);

}
/// <summary>
/// <para>Table Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tblPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>TableStyle &lt;a:tableStyle></description></item>
///<item><description>TableStyleId &lt;a:tableStyleId></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]
    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]
    [ChildElementInfo(typeof(TableStyle))]
    [ChildElementInfo(typeof(TableStyleId))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tblPr")]
[Id(ElementTypeIdConst)]
public partial class TableProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10259;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Right-to-Left.</para>
    /// <para>Represents the following attribute in the schema: rtl </para>
    /// </summary>
    [SchemaAttr(0, "rtl")]
    [Index(0)]
    public BooleanValue RightToLeft { get; set; }
	
    /// <summary>
    /// <para> First Row.</para>
    /// <para>Represents the following attribute in the schema: firstRow </para>
    /// </summary>
    [SchemaAttr(0, "firstRow")]
    [Index(1)]
    public BooleanValue FirstRow { get; set; }
	
    /// <summary>
    /// <para> First Column.</para>
    /// <para>Represents the following attribute in the schema: firstCol </para>
    /// </summary>
    [SchemaAttr(0, "firstCol")]
    [Index(2)]
    public BooleanValue FirstColumn { get; set; }
	
    /// <summary>
    /// <para> Last Row.</para>
    /// <para>Represents the following attribute in the schema: lastRow </para>
    /// </summary>
    [SchemaAttr(0, "lastRow")]
    [Index(3)]
    public BooleanValue LastRow { get; set; }
	
    /// <summary>
    /// <para> Last Column.</para>
    /// <para>Represents the following attribute in the schema: lastCol </para>
    /// </summary>
    [SchemaAttr(0, "lastCol")]
    [Index(4)]
    public BooleanValue LastColumn { get; set; }
	
    /// <summary>
    /// <para> Banded Rows.</para>
    /// <para>Represents the following attribute in the schema: bandRow </para>
    /// </summary>
    [SchemaAttr(0, "bandRow")]
    [Index(5)]
    public BooleanValue BandRow { get; set; }
	
    /// <summary>
    /// <para> Banded Columns.</para>
    /// <para>Represents the following attribute in the schema: bandCol </para>
    /// </summary>
    [SchemaAttr(0, "bandCol")]
    [Index(6)]
    public BooleanValue BandColumn { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TableProperties class.
    /// </summary>
    public TableProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableProperties>(deep);

}
/// <summary>
/// <para>Table Grid.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tblGrid.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GridColumn &lt;a:gridCol></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GridColumn))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tblGrid")]
[Id(ElementTypeIdConst)]
public partial class TableGrid : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10260;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableGrid class.
    /// </summary>
    public TableGrid():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableGrid class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableGrid(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableGrid class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableGrid(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableGrid class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableGrid(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGrid>(deep);

}
/// <summary>
/// <para>Table Row.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCell &lt;a:tc></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableCell))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tr")]
[Id(ElementTypeIdConst)]
public partial class TableRow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10261;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Height.</para>
    /// <para>Represents the following attribute in the schema: h </para>
    /// </summary>
    [SchemaAttr(0, "h")]
    [Index(0)]
    public Int64Value Height { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TableRow class.
    /// </summary>
    public TableRow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableRow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableRow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableRow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableRow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRow>(deep);

}
/// <summary>
/// <para>Left Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:left.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "left")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LeftBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10263;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LeftBorder class.
    /// </summary>
    public LeftBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the LeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LeftBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);

}
/// <summary>
/// <para>Right Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:right.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "right")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RightBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10264;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the RightBorder class.
    /// </summary>
    public RightBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the RightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RightBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);

}
/// <summary>
/// <para>Top Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:top.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "top")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10265;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TopBorder class.
    /// </summary>
    public TopBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the TopBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);

}
/// <summary>
/// <para>Bottom Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:bottom.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "bottom")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BottomBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10266;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the BottomBorder class.
    /// </summary>
    public BottomBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the BottomBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BottomBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);

}
/// <summary>
/// <para>Inside Horizontal Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:insideH.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "insideH")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class InsideHorizontalBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10267;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the InsideHorizontalBorder class.
    /// </summary>
    public InsideHorizontalBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InsideHorizontalBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InsideHorizontalBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the InsideHorizontalBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public InsideHorizontalBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideHorizontalBorder>(deep);

}
/// <summary>
/// <para>Inside Vertical Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:insideV.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "insideV")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class InsideVerticalBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10268;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the InsideVerticalBorder class.
    /// </summary>
    public InsideVerticalBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InsideVerticalBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InsideVerticalBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the InsideVerticalBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public InsideVerticalBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideVerticalBorder>(deep);

}
/// <summary>
/// <para>Top Left to Bottom Right Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tl2br.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "tl2br")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopLeftToBottomRightBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10269;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorder class.
    /// </summary>
    public TopLeftToBottomRightBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopLeftToBottomRightBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopLeftToBottomRightBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopLeftToBottomRightBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopLeftToBottomRightBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorder>(deep);

}
/// <summary>
/// <para>Top Right to Bottom Left Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tr2bl.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "tr2bl")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopRightToBottomLeftBorder : ThemeableLineStyleType
{
    internal const int ElementTypeIdConst = 10270;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the TopRightToBottomLeftBorder class.
    /// </summary>
    public TopRightToBottomLeftBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopRightToBottomLeftBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopRightToBottomLeftBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopRightToBottomLeftBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopRightToBottomLeftBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopRightToBottomLeftBorder>(deep);

}
/// <summary>
/// Defines the ThemeableLineStyleType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>LineReference &lt;a:lnRef></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(LineReference))]

public abstract partial class ThemeableLineStyleType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Outline.</para>
    /// <para> Represents the following element tag in the schema: a:ln </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Outline Outline
	{
        get => GetElement<Outline>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Line Reference.</para>
    /// <para> Represents the following element tag in the schema: a:lnRef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public LineReference LineReference
	{
        get => GetElement<LineReference>(1);
        set => SetElement(1, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the ThemeableLineStyleType class.
    /// </summary>
    protected ThemeableLineStyleType(){}
    
        /// <summary>
    ///Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ThemeableLineStyleType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected ThemeableLineStyleType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ThemeableLineStyleType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected ThemeableLineStyleType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Table Cell Borders.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tcBdr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LeftBorder &lt;a:left></description></item>
///<item><description>RightBorder &lt;a:right></description></item>
///<item><description>TopBorder &lt;a:top></description></item>
///<item><description>BottomBorder &lt;a:bottom></description></item>
///<item><description>InsideHorizontalBorder &lt;a:insideH></description></item>
///<item><description>InsideVerticalBorder &lt;a:insideV></description></item>
///<item><description>TopLeftToBottomRightBorder &lt;a:tl2br></description></item>
///<item><description>TopRightToBottomLeftBorder &lt;a:tr2bl></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(InsideHorizontalBorder))]
    [ChildElementInfo(typeof(InsideVerticalBorder))]
    [ChildElementInfo(typeof(TopLeftToBottomRightBorder))]
    [ChildElementInfo(typeof(TopRightToBottomLeftBorder))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tcBdr")]
[Id(ElementTypeIdConst)]
public partial class TableCellBorders : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10271;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableCellBorders class.
    /// </summary>
    public TableCellBorders():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableCellBorders class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellBorders(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellBorders class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellBorders(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellBorders class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableCellBorders(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Left Border.</para>
    /// <para> Represents the following element tag in the schema: a:left </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public LeftBorder LeftBorder
	{
        get => GetElement<LeftBorder>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Right Border.</para>
    /// <para> Represents the following element tag in the schema: a:right </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public RightBorder RightBorder
	{
        get => GetElement<RightBorder>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Top Border.</para>
    /// <para> Represents the following element tag in the schema: a:top </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public TopBorder TopBorder
	{
        get => GetElement<TopBorder>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Bottom Border.</para>
    /// <para> Represents the following element tag in the schema: a:bottom </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public BottomBorder BottomBorder
	{
        get => GetElement<BottomBorder>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> Inside Horizontal Border.</para>
    /// <para> Represents the following element tag in the schema: a:insideH </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public InsideHorizontalBorder InsideHorizontalBorder
	{
        get => GetElement<InsideHorizontalBorder>(4);
        set => SetElement(4, value);
	}
    
    /// <summary>
    /// <para> Inside Vertical Border.</para>
    /// <para> Represents the following element tag in the schema: a:insideV </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(5)]
    public InsideVerticalBorder InsideVerticalBorder
	{
        get => GetElement<InsideVerticalBorder>(5);
        set => SetElement(5, value);
	}
    
    /// <summary>
    /// <para> Top Left to Bottom Right Border.</para>
    /// <para> Represents the following element tag in the schema: a:tl2br </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(6)]
    public TopLeftToBottomRightBorder TopLeftToBottomRightBorder
	{
        get => GetElement<TopLeftToBottomRightBorder>(6);
        set => SetElement(6, value);
	}
    
    /// <summary>
    /// <para> Top Right to Bottom Left Border.</para>
    /// <para> Represents the following element tag in the schema: a:tr2bl </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(7)]
    public TopRightToBottomLeftBorder TopRightToBottomLeftBorder
	{
        get => GetElement<TopRightToBottomLeftBorder>(7);
        set => SetElement(7, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(8)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(8);
        set => SetElement(8, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellBorders>(deep);

}
/// <summary>
/// <para>Table Cell Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tcTxStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Fonts &lt;a:font></description></item>
///<item><description>FontReference &lt;a:fontRef></description></item>
///<item><description>RgbColorModelPercentage &lt;a:scrgbClr></description></item>
///<item><description>RgbColorModelHex &lt;a:srgbClr></description></item>
///<item><description>HslColor &lt;a:hslClr></description></item>
///<item><description>SystemColor &lt;a:sysClr></description></item>
///<item><description>SchemeColor &lt;a:schemeClr></description></item>
///<item><description>PresetColor &lt;a:prstClr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Fonts))]
    [ChildElementInfo(typeof(FontReference))]
    [ChildElementInfo(typeof(RgbColorModelPercentage))]
    [ChildElementInfo(typeof(RgbColorModelHex))]
    [ChildElementInfo(typeof(HslColor))]
    [ChildElementInfo(typeof(SystemColor))]
    [ChildElementInfo(typeof(SchemeColor))]
    [ChildElementInfo(typeof(PresetColor))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tcTxStyle")]
[Id(ElementTypeIdConst)]
public partial class TableCellTextStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10272;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Bold.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues> Bold { get; set; }
	
    /// <summary>
    /// <para> Italic.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BooleanStyleValues> Italic { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TableCellTextStyle class.
    /// </summary>
    public TableCellTextStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableCellTextStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellTextStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellTextStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellTextStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellTextStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableCellTextStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellTextStyle>(deep);

}
/// <summary>
/// <para>Table Cell Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tcStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellBorders &lt;a:tcBdr></description></item>
///<item><description>FillProperties &lt;a:fill></description></item>
///<item><description>FillReference &lt;a:fillRef></description></item>
///<item><description>Cell3DProperties &lt;a:cell3D></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableCellBorders))]
    [ChildElementInfo(typeof(FillProperties))]
    [ChildElementInfo(typeof(FillReference))]
    [ChildElementInfo(typeof(Cell3DProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tcStyle")]
[Id(ElementTypeIdConst)]
public partial class TableCellStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10273;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableCellStyle class.
    /// </summary>
    public TableCellStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableCellStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableCellStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableCellStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableCellStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Table Cell Borders.</para>
    /// <para> Represents the following element tag in the schema: a:tcBdr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TableCellBorders TableCellBorders
	{
        get => GetElement<TableCellBorders>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellStyle>(deep);

}
/// <summary>
/// <para>Table Background.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tblBg.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FillProperties &lt;a:fill></description></item>
///<item><description>FillReference &lt;a:fillRef></description></item>
///<item><description>EffectPropertiesType &lt;a:effect></description></item>
///<item><description>EffectReference &lt;a:effectRef></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FillProperties))]
    [ChildElementInfo(typeof(FillReference))]
    [ChildElementInfo(typeof(EffectPropertiesType))]
    [ChildElementInfo(typeof(EffectReference))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tblBg")]
[Id(ElementTypeIdConst)]
public partial class TableBackground : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10274;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableBackground class.
    /// </summary>
    public TableBackground():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableBackground class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableBackground(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableBackground class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableBackground(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableBackground class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableBackground(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableBackground>(deep);

}
/// <summary>
/// <para>Whole Table.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:wholeTbl.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "wholeTbl")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class WholeTable : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10275;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the WholeTable class.
    /// </summary>
    public WholeTable():base(){}
        /// <summary>
    ///Initializes a new instance of the WholeTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WholeTable(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WholeTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WholeTable(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WholeTable class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WholeTable(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WholeTable>(deep);

}
/// <summary>
/// <para>Band 1 Horizontal.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:band1H.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "band1H")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Band1Horizontal : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10276;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Band1Horizontal class.
    /// </summary>
    public Band1Horizontal():base(){}
        /// <summary>
    ///Initializes a new instance of the Band1Horizontal class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band1Horizontal(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Band1Horizontal class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band1Horizontal(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Band1Horizontal class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Band1Horizontal(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Horizontal>(deep);

}
/// <summary>
/// <para>Band 2 Horizontal.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:band2H.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "band2H")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Band2Horizontal : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10277;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Band2Horizontal class.
    /// </summary>
    public Band2Horizontal():base(){}
        /// <summary>
    ///Initializes a new instance of the Band2Horizontal class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band2Horizontal(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Band2Horizontal class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band2Horizontal(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Band2Horizontal class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Band2Horizontal(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Horizontal>(deep);

}
/// <summary>
/// <para>Band 1 Vertical.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:band1V.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "band1V")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Band1Vertical : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10278;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Band1Vertical class.
    /// </summary>
    public Band1Vertical():base(){}
        /// <summary>
    ///Initializes a new instance of the Band1Vertical class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band1Vertical(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Band1Vertical class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band1Vertical(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Band1Vertical class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Band1Vertical(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Vertical>(deep);

}
/// <summary>
/// <para>Band 2 Vertical.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:band2V.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "band2V")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Band2Vertical : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10279;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Band2Vertical class.
    /// </summary>
    public Band2Vertical():base(){}
        /// <summary>
    ///Initializes a new instance of the Band2Vertical class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band2Vertical(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Band2Vertical class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Band2Vertical(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Band2Vertical class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Band2Vertical(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Vertical>(deep);

}
/// <summary>
/// <para>Last Column.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lastCol.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lastCol")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LastColumn : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10280;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LastColumn class.
    /// </summary>
    public LastColumn():base(){}
        /// <summary>
    ///Initializes a new instance of the LastColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LastColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LastColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LastColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LastColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LastColumn(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastColumn>(deep);

}
/// <summary>
/// <para>First Column.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:firstCol.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "firstCol")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FirstColumn : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10281;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FirstColumn class.
    /// </summary>
    public FirstColumn():base(){}
        /// <summary>
    ///Initializes a new instance of the FirstColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FirstColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FirstColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FirstColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FirstColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FirstColumn(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstColumn>(deep);

}
/// <summary>
/// <para>Last Row.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lastRow.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lastRow")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LastRow : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10282;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LastRow class.
    /// </summary>
    public LastRow():base(){}
        /// <summary>
    ///Initializes a new instance of the LastRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LastRow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LastRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LastRow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LastRow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LastRow(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastRow>(deep);

}
/// <summary>
/// <para>Southeast Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:seCell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "seCell")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SoutheastCell : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10283;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SoutheastCell class.
    /// </summary>
    public SoutheastCell():base(){}
        /// <summary>
    ///Initializes a new instance of the SoutheastCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SoutheastCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SoutheastCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SoutheastCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SoutheastCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SoutheastCell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoutheastCell>(deep);

}
/// <summary>
/// <para>Southwest Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:swCell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "swCell")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SouthwestCell : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10284;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SouthwestCell class.
    /// </summary>
    public SouthwestCell():base(){}
        /// <summary>
    ///Initializes a new instance of the SouthwestCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SouthwestCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SouthwestCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SouthwestCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SouthwestCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SouthwestCell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SouthwestCell>(deep);

}
/// <summary>
/// <para>First Row.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:firstRow.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "firstRow")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FirstRow : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10285;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the FirstRow class.
    /// </summary>
    public FirstRow():base(){}
        /// <summary>
    ///Initializes a new instance of the FirstRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FirstRow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FirstRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FirstRow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FirstRow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FirstRow(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstRow>(deep);

}
/// <summary>
/// <para>Northeast Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:neCell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "neCell")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class NortheastCell : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10286;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the NortheastCell class.
    /// </summary>
    public NortheastCell():base(){}
        /// <summary>
    ///Initializes a new instance of the NortheastCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NortheastCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NortheastCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NortheastCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NortheastCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NortheastCell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NortheastCell>(deep);

}
/// <summary>
/// <para>Northwest Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nwCell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "nwCell")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class NorthwestCell : TablePartStyleType
{
    internal const int ElementTypeIdConst = 10287;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the NorthwestCell class.
    /// </summary>
    public NorthwestCell():base(){}
        /// <summary>
    ///Initializes a new instance of the NorthwestCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NorthwestCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NorthwestCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NorthwestCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NorthwestCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NorthwestCell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NorthwestCell>(deep);

}
/// <summary>
/// Defines the TablePartStyleType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableCellTextStyle &lt;a:tcTxStyle></description></item>
///<item><description>TableCellStyle &lt;a:tcStyle></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableCellTextStyle))]
    [ChildElementInfo(typeof(TableCellStyle))]

public abstract partial class TablePartStyleType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Table Cell Text Style.</para>
    /// <para> Represents the following element tag in the schema: a:tcTxStyle </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TableCellTextStyle TableCellTextStyle
	{
        get => GetElement<TableCellTextStyle>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Table Cell Style.</para>
    /// <para> Represents the following element tag in the schema: a:tcStyle </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public TableCellStyle TableCellStyle
	{
        get => GetElement<TableCellStyle>(1);
        set => SetElement(1, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the TablePartStyleType class.
    /// </summary>
    protected TablePartStyleType(){}
    
        /// <summary>
    ///Initializes a new instance of the TablePartStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TablePartStyleType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TablePartStyleType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TablePartStyleType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TablePartStyleType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TablePartStyleType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Text Paragraph Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10289;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the ParagraphProperties class.
    /// </summary>
    public ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphProperties>(deep);

}
/// <summary>
/// <para>Default Paragraph Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:defPPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "defPPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DefaultParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10291;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the DefaultParagraphProperties class.
    /// </summary>
    public DefaultParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefaultParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefaultParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DefaultParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 1 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl1pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl1pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level1ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10292;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level1ParagraphProperties class.
    /// </summary>
    public Level1ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level1ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level1ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level1ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level1ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level1ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 2 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl2pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl2pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level2ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10293;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level2ParagraphProperties class.
    /// </summary>
    public Level2ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level2ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level2ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level2ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level2ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level2ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 3 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl3pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl3pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level3ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10294;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level3ParagraphProperties class.
    /// </summary>
    public Level3ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level3ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level3ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level3ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level3ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level3ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 4 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl4pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl4pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level4ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10295;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level4ParagraphProperties class.
    /// </summary>
    public Level4ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level4ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level4ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level4ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level4ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level4ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 5 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl5pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl5pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level5ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10296;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level5ParagraphProperties class.
    /// </summary>
    public Level5ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level5ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level5ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level5ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level5ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level5ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 6 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl6pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl6pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level6ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10297;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level6ParagraphProperties class.
    /// </summary>
    public Level6ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level6ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level6ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level6ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level6ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level6ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 7 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl7pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl7pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level7ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10298;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level7ParagraphProperties class.
    /// </summary>
    public Level7ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level7ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level7ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level7ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level7ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level7ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 8 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl8pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl8pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level8ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10299;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level8ParagraphProperties class.
    /// </summary>
    public Level8ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level8ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level8ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level8ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level8ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level8ParagraphProperties>(deep);

}
/// <summary>
/// <para>List Level 9 Text Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lvl9pPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lvl9pPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Level9ParagraphProperties : TextParagraphPropertiesType
{
    internal const int ElementTypeIdConst = 10300;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the Level9ParagraphProperties class.
    /// </summary>
    public Level9ParagraphProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level9ParagraphProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Level9ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Level9ParagraphProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Level9ParagraphProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level9ParagraphProperties>(deep);

}
/// <summary>
/// Defines the TextParagraphPropertiesType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>LineSpacing &lt;a:lnSpc></description></item>
///<item><description>SpaceBefore &lt;a:spcBef></description></item>
///<item><description>SpaceAfter &lt;a:spcAft></description></item>
///<item><description>BulletColorText &lt;a:buClrTx></description></item>
///<item><description>BulletColor &lt;a:buClr></description></item>
///<item><description>BulletSizeText &lt;a:buSzTx></description></item>
///<item><description>BulletSizePercentage &lt;a:buSzPct></description></item>
///<item><description>BulletSizePoints &lt;a:buSzPts></description></item>
///<item><description>BulletFontText &lt;a:buFontTx></description></item>
///<item><description>BulletFont &lt;a:buFont></description></item>
///<item><description>NoBullet &lt;a:buNone></description></item>
///<item><description>AutoNumberedBullet &lt;a:buAutoNum></description></item>
///<item><description>CharacterBullet &lt;a:buChar></description></item>
///<item><description>PictureBullet &lt;a:buBlip></description></item>
///<item><description>TabStopList &lt;a:tabLst></description></item>
///<item><description>DefaultRunProperties &lt;a:defRPr></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(LineSpacing))]
    [ChildElementInfo(typeof(SpaceBefore))]
    [ChildElementInfo(typeof(SpaceAfter))]
    [ChildElementInfo(typeof(BulletColorText))]
    [ChildElementInfo(typeof(BulletColor))]
    [ChildElementInfo(typeof(BulletSizeText))]
    [ChildElementInfo(typeof(BulletSizePercentage))]
    [ChildElementInfo(typeof(BulletSizePoints))]
    [ChildElementInfo(typeof(BulletFontText))]
    [ChildElementInfo(typeof(BulletFont))]
    [ChildElementInfo(typeof(NoBullet))]
    [ChildElementInfo(typeof(AutoNumberedBullet))]
    [ChildElementInfo(typeof(CharacterBullet))]
    [ChildElementInfo(typeof(PictureBullet))]
    [ChildElementInfo(typeof(TabStopList))]
    [ChildElementInfo(typeof(DefaultRunProperties))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class TextParagraphPropertiesType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Left Margin.</para>
    /// <para>Represents the following attribute in the schema: marL </para>
    /// </summary>
    [SchemaAttr(0, "marL")]
    [Index(0)]
    public Int32Value LeftMargin { get; set; }
	
    /// <summary>
    /// <para> Right Margin.</para>
    /// <para>Represents the following attribute in the schema: marR </para>
    /// </summary>
    [SchemaAttr(0, "marR")]
    [Index(1)]
    public Int32Value RightMargin { get; set; }
	
    /// <summary>
    /// <para> Level.</para>
    /// <para>Represents the following attribute in the schema: lvl </para>
    /// </summary>
    [SchemaAttr(0, "lvl")]
    [Index(2)]
    public Int32Value Level { get; set; }
	
    /// <summary>
    /// <para> Indent.</para>
    /// <para>Represents the following attribute in the schema: indent </para>
    /// </summary>
    [SchemaAttr(0, "indent")]
    [Index(3)]
    public Int32Value Indent { get; set; }
	
    /// <summary>
    /// <para> Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(4)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextAlignmentTypeValues> Alignment { get; set; }
	
    /// <summary>
    /// <para> Default Tab Size.</para>
    /// <para>Represents the following attribute in the schema: defTabSz </para>
    /// </summary>
    [SchemaAttr(0, "defTabSz")]
    [Index(5)]
    public Int32Value DefaultTabSize { get; set; }
	
    /// <summary>
    /// <para> Right To Left.</para>
    /// <para>Represents the following attribute in the schema: rtl </para>
    /// </summary>
    [SchemaAttr(0, "rtl")]
    [Index(6)]
    public BooleanValue RightToLeft { get; set; }
	
    /// <summary>
    /// <para> East Asian Line Break.</para>
    /// <para>Represents the following attribute in the schema: eaLnBrk </para>
    /// </summary>
    [SchemaAttr(0, "eaLnBrk")]
    [Index(7)]
    public BooleanValue EastAsianLineBreak { get; set; }
	
    /// <summary>
    /// <para> Font Alignment.</para>
    /// <para>Represents the following attribute in the schema: fontAlgn </para>
    /// </summary>
    [SchemaAttr(0, "fontAlgn")]
    [Index(8)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextFontAlignmentValues> FontAlignment { get; set; }
	
    /// <summary>
    /// <para> Latin Line Break.</para>
    /// <para>Represents the following attribute in the schema: latinLnBrk </para>
    /// </summary>
    [SchemaAttr(0, "latinLnBrk")]
    [Index(9)]
    public BooleanValue LatinLineBreak { get; set; }
	
    /// <summary>
    /// <para> Hanging Punctuation.</para>
    /// <para>Represents the following attribute in the schema: hangingPunct </para>
    /// </summary>
    [SchemaAttr(0, "hangingPunct")]
    [Index(10)]
    public BooleanValue Height { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Line Spacing.</para>
    /// <para> Represents the following element tag in the schema: a:lnSpc </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public LineSpacing LineSpacing
	{
        get => GetElement<LineSpacing>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Space Before.</para>
    /// <para> Represents the following element tag in the schema: a:spcBef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SpaceBefore SpaceBefore
	{
        get => GetElement<SpaceBefore>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Space After.</para>
    /// <para> Represents the following element tag in the schema: a:spcAft </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public SpaceAfter SpaceAfter
	{
        get => GetElement<SpaceAfter>(2);
        set => SetElement(2, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the TextParagraphPropertiesType class.
    /// </summary>
    protected TextParagraphPropertiesType(){}
    
        /// <summary>
    ///Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextParagraphPropertiesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextParagraphPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextParagraphPropertiesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TextParagraphPropertiesType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>End Paragraph Run Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:endParaRPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Highlight &lt;a:highlight></description></item>
///<item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
///<item><description>Underline &lt;a:uLn></description></item>
///<item><description>UnderlineFillText &lt;a:uFillTx></description></item>
///<item><description>UnderlineFill &lt;a:uFill></description></item>
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SymbolFont &lt;a:sym></description></item>
///<item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
///<item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
///<item><description>RightToLeft &lt;a:rtl></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "endParaRPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EndParagraphRunProperties : TextCharacterPropertiesType
{
    internal const int ElementTypeIdConst = 10290;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the EndParagraphRunProperties class.
    /// </summary>
    public EndParagraphRunProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EndParagraphRunProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EndParagraphRunProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EndParagraphRunProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EndParagraphRunProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndParagraphRunProperties>(deep);

}
/// <summary>
/// <para>Text Run Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:rPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Highlight &lt;a:highlight></description></item>
///<item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
///<item><description>Underline &lt;a:uLn></description></item>
///<item><description>UnderlineFillText &lt;a:uFillTx></description></item>
///<item><description>UnderlineFill &lt;a:uFill></description></item>
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SymbolFont &lt;a:sym></description></item>
///<item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
///<item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
///<item><description>RightToLeft &lt;a:rtl></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "rPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RunProperties : TextCharacterPropertiesType
{
    internal const int ElementTypeIdConst = 10303;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the RunProperties class.
    /// </summary>
    public RunProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the RunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RunProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RunProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RunProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);

}
/// <summary>
/// <para>Default Text Run Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:defRPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Highlight &lt;a:highlight></description></item>
///<item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
///<item><description>Underline &lt;a:uLn></description></item>
///<item><description>UnderlineFillText &lt;a:uFillTx></description></item>
///<item><description>UnderlineFill &lt;a:uFill></description></item>
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SymbolFont &lt;a:sym></description></item>
///<item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
///<item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
///<item><description>RightToLeft &lt;a:rtl></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "defRPr")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DefaultRunProperties : TextCharacterPropertiesType
{
    internal const int ElementTypeIdConst = 10310;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the DefaultRunProperties class.
    /// </summary>
    public DefaultRunProperties():base(){}
        /// <summary>
    ///Initializes a new instance of the DefaultRunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefaultRunProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultRunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefaultRunProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DefaultRunProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DefaultRunProperties(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultRunProperties>(deep);

}
/// <summary>
/// Defines the TextCharacterPropertiesType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Outline &lt;a:ln></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Highlight &lt;a:highlight></description></item>
///<item><description>UnderlineFollowsText &lt;a:uLnTx></description></item>
///<item><description>Underline &lt;a:uLn></description></item>
///<item><description>UnderlineFillText &lt;a:uFillTx></description></item>
///<item><description>UnderlineFill &lt;a:uFill></description></item>
///<item><description>LatinFont &lt;a:latin></description></item>
///<item><description>EastAsianFont &lt;a:ea></description></item>
///<item><description>ComplexScriptFont &lt;a:cs></description></item>
///<item><description>SymbolFont &lt;a:sym></description></item>
///<item><description>HyperlinkOnClick &lt;a:hlinkClick></description></item>
///<item><description>HyperlinkOnMouseOver &lt;a:hlinkMouseOver></description></item>
///<item><description>RightToLeft &lt;a:rtl></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]
    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]
    [ChildElementInfo(typeof(Highlight))]
    [ChildElementInfo(typeof(UnderlineFollowsText))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(UnderlineFillText))]
    [ChildElementInfo(typeof(UnderlineFill))]
    [ChildElementInfo(typeof(LatinFont))]
    [ChildElementInfo(typeof(EastAsianFont))]
    [ChildElementInfo(typeof(ComplexScriptFont))]
    [ChildElementInfo(typeof(SymbolFont))]
    [ChildElementInfo(typeof(HyperlinkOnClick))]
    [ChildElementInfo(typeof(HyperlinkOnMouseOver))]
    [ChildElementInfo(typeof(RightToLeft))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class TextCharacterPropertiesType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> kumimoji.</para>
    /// <para>Represents the following attribute in the schema: kumimoji </para>
    /// </summary>
    [SchemaAttr(0, "kumimoji")]
    [Index(0)]
    public BooleanValue Kumimoji { get; set; }
	
    /// <summary>
    /// <para> lang.</para>
    /// <para>Represents the following attribute in the schema: lang </para>
    /// </summary>
    [SchemaAttr(0, "lang")]
    [Index(1)]
    public StringValue Language { get; set; }
	
    /// <summary>
    /// <para> altLang.</para>
    /// <para>Represents the following attribute in the schema: altLang </para>
    /// </summary>
    [SchemaAttr(0, "altLang")]
    [Index(2)]
    public StringValue AlternativeLanguage { get; set; }
	
    /// <summary>
    /// <para> sz.</para>
    /// <para>Represents the following attribute in the schema: sz </para>
    /// </summary>
    [SchemaAttr(0, "sz")]
    [Index(3)]
    public Int32Value FontSize { get; set; }
	
    /// <summary>
    /// <para> b.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b")]
    [Index(4)]
    public BooleanValue Bold { get; set; }
	
    /// <summary>
    /// <para> i.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i")]
    [Index(5)]
    public BooleanValue Italic { get; set; }
	
    /// <summary>
    /// <para> u.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u")]
    [Index(6)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextUnderlineValues> Underline { get; set; }
	
    /// <summary>
    /// <para> strike.</para>
    /// <para>Represents the following attribute in the schema: strike </para>
    /// </summary>
    [SchemaAttr(0, "strike")]
    [Index(7)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextStrikeValues> Strike { get; set; }
	
    /// <summary>
    /// <para> kern.</para>
    /// <para>Represents the following attribute in the schema: kern </para>
    /// </summary>
    [SchemaAttr(0, "kern")]
    [Index(8)]
    public Int32Value Kerning { get; set; }
	
    /// <summary>
    /// <para> cap.</para>
    /// <para>Represents the following attribute in the schema: cap </para>
    /// </summary>
    [SchemaAttr(0, "cap")]
    [Index(9)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextCapsValues> Capital { get; set; }
	
    /// <summary>
    /// <para> spc.</para>
    /// <para>Represents the following attribute in the schema: spc </para>
    /// </summary>
    [SchemaAttr(0, "spc")]
    [Index(10)]
    public Int32Value Spacing { get; set; }
	
    /// <summary>
    /// <para> normalizeH.</para>
    /// <para>Represents the following attribute in the schema: normalizeH </para>
    /// </summary>
    [SchemaAttr(0, "normalizeH")]
    [Index(11)]
    public BooleanValue NormalizeHeight { get; set; }
	
    /// <summary>
    /// <para> baseline.</para>
    /// <para>Represents the following attribute in the schema: baseline </para>
    /// </summary>
    [SchemaAttr(0, "baseline")]
    [Index(12)]
    public Int32Value Baseline { get; set; }
	
    /// <summary>
    /// <para> noProof.</para>
    /// <para>Represents the following attribute in the schema: noProof </para>
    /// </summary>
    [SchemaAttr(0, "noProof")]
    [Index(13)]
    public BooleanValue NoProof { get; set; }
	
    /// <summary>
    /// <para> dirty.</para>
    /// <para>Represents the following attribute in the schema: dirty </para>
    /// </summary>
    [SchemaAttr(0, "dirty")]
    [Index(14)]
    public BooleanValue Dirty { get; set; }
	
    /// <summary>
    /// <para> err.</para>
    /// <para>Represents the following attribute in the schema: err </para>
    /// </summary>
    [SchemaAttr(0, "err")]
    [Index(15)]
    public BooleanValue SpellingError { get; set; }
	
    /// <summary>
    /// <para> bmk.</para>
    /// <para>Represents the following attribute in the schema: bmk </para>
    /// </summary>
    [SchemaAttr(0, "bmk")]
    [Index(16)]
    public StringValue Bookmark { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Outline.</para>
    /// <para> Represents the following element tag in the schema: a:ln </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public Outline Outline
	{
        get => GetElement<Outline>(0);
        set => SetElement(0, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the TextCharacterPropertiesType class.
    /// </summary>
    protected TextCharacterPropertiesType(){}
    
        /// <summary>
    ///Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextCharacterPropertiesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextCharacterPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextCharacterPropertiesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TextCharacterPropertiesType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Text Paragraphs.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:p.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ParagraphProperties &lt;a:pPr></description></item>
///<item><description>Run &lt;a:r></description></item>
///<item><description>Break &lt;a:br></description></item>
///<item><description>Field &lt;a:fld></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.TextMath &lt;a14:m></description></item>
///<item><description>EndParagraphRunProperties &lt;a:endParaRPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ParagraphProperties))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(Break))]
    [ChildElementInfo(typeof(Field))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.TextMath), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(EndParagraphRunProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "p")]
[Id(ElementTypeIdConst)]
public partial class Paragraph : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10301;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Paragraph class.
    /// </summary>
    public Paragraph():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Paragraph class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Paragraph(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Paragraph class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Paragraph(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Paragraph class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Paragraph(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text Paragraph Properties.</para>
    /// <para> Represents the following element tag in the schema: a:pPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ParagraphProperties ParagraphProperties
	{
        get => GetElement<ParagraphProperties>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraph>(deep);

}
/// <summary>
/// <para>Tab Stop.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tab.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tab")]
[Id(ElementTypeIdConst)]
public partial class TabStop : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10302;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Tab Position.</para>
    /// <para>Represents the following attribute in the schema: pos </para>
    /// </summary>
    [SchemaAttr(0, "pos")]
    [Index(0)]
    public Int32Value Position { get; set; }
	
    /// <summary>
    /// <para> Tab Alignment.</para>
    /// <para>Represents the following attribute in the schema: algn </para>
    /// </summary>
    [SchemaAttr(0, "algn")]
    [Index(1)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.TextTabAlignmentValues> Alignment { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the TabStop class.
    /// </summary>
    public TabStop():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStop>(deep);

}
/// <summary>
/// <para>Spacing Percent.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spcPct.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "spcPct")]
[Id(ElementTypeIdConst)]
public partial class SpacingPercent : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10304;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SpacingPercent class.
    /// </summary>
    public SpacingPercent():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPercent>(deep);

}
/// <summary>
/// <para>Spacing Points.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spcPts.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "spcPts")]
[Id(ElementTypeIdConst)]
public partial class SpacingPoints : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10305;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public Int32Value Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the SpacingPoints class.
    /// </summary>
    public SpacingPoints():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPoints>(deep);

}
/// <summary>
/// <para>Line Spacing.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:lnSpc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SpacingPercent &lt;a:spcPct></description></item>
///<item><description>SpacingPoints &lt;a:spcPts></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "lnSpc")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LineSpacing : TextSpacingType
{
    internal const int ElementTypeIdConst = 10306;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the LineSpacing class.
    /// </summary>
    public LineSpacing():base(){}
        /// <summary>
    ///Initializes a new instance of the LineSpacing class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineSpacing(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LineSpacing class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LineSpacing(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LineSpacing class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LineSpacing(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineSpacing>(deep);

}
/// <summary>
/// <para>Space Before.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spcBef.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SpacingPercent &lt;a:spcPct></description></item>
///<item><description>SpacingPoints &lt;a:spcPts></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "spcBef")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SpaceBefore : TextSpacingType
{
    internal const int ElementTypeIdConst = 10307;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SpaceBefore class.
    /// </summary>
    public SpaceBefore():base(){}
        /// <summary>
    ///Initializes a new instance of the SpaceBefore class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SpaceBefore(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SpaceBefore class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SpaceBefore(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SpaceBefore class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SpaceBefore(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceBefore>(deep);

}
/// <summary>
/// <para>Space After.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:spcAft.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SpacingPercent &lt;a:spcPct></description></item>
///<item><description>SpacingPoints &lt;a:spcPts></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "spcAft")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SpaceAfter : TextSpacingType
{
    internal const int ElementTypeIdConst = 10308;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the SpaceAfter class.
    /// </summary>
    public SpaceAfter():base(){}
        /// <summary>
    ///Initializes a new instance of the SpaceAfter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SpaceAfter(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SpaceAfter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SpaceAfter(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SpaceAfter class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SpaceAfter(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceAfter>(deep);

}
/// <summary>
/// Defines the TextSpacingType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SpacingPercent &lt;a:spcPct></description></item>
///<item><description>SpacingPoints &lt;a:spcPts></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SpacingPercent))]
    [ChildElementInfo(typeof(SpacingPoints))]

public abstract partial class TextSpacingType : OpenXmlCompositeElement
{
        
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Spacing Percent.</para>
    /// <para> Represents the following element tag in the schema: a:spcPct </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public SpacingPercent SpacingPercent
	{
        get => GetElement<SpacingPercent>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Spacing Points.</para>
    /// <para> Represents the following element tag in the schema: a:spcPts </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public SpacingPoints SpacingPoints
	{
        get => GetElement<SpacingPoints>(1);
        set => SetElement(1, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the TextSpacingType class.
    /// </summary>
    protected TextSpacingType(){}
    
        /// <summary>
    ///Initializes a new instance of the TextSpacingType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextSpacingType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextSpacingType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TextSpacingType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextSpacingType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TextSpacingType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Tab List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:tabLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TabStop &lt;a:tab></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TabStop))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "tabLst")]
[Id(ElementTypeIdConst)]
public partial class TabStopList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10309;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TabStopList class.
    /// </summary>
    public TabStopList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TabStopList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TabStopList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TabStopList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TabStopList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TabStopList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TabStopList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStopList>(deep);

}
/// <summary>
/// <para>Defines the Text Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:t.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "t")]
[Id(ElementTypeIdConst)]
public partial class Text : OpenXmlLeafTextElement
{
    internal const int ElementTypeIdConst = 10311;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Text class.
    /// </summary>
    public Text():base(){}
    
      
        /// <summary>
    /// Initializes a new instance of the Text class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Text(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    
 
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);

}
/// <summary>
/// <para>Defines the ShapePropertiesExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties &lt;a14:hiddenFill></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties &lt;a14:hiddenLine></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties &lt;a14:hiddenEffects></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D &lt;a14:hiddenScene3d></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D &lt;a14:hiddenSp3d></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured &lt;a14:shadowObscured></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenFillProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenLineProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenEffectsProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenScene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.HiddenShape3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ShadowObscured), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class ShapePropertiesExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10312;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtension class.
    /// </summary>
    public ShapePropertiesExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapePropertiesExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapePropertiesExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtension>(deep);

}
/// <summary>
/// <para>Defines the GvmlGroupShapeExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas &lt;a14:isCanvas></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.IsCanvas), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class GvmlGroupShapeExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10313;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtension class.
    /// </summary>
    public GvmlGroupShapeExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GvmlGroupShapeExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GvmlGroupShapeExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GvmlGroupShapeExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtension>(deep);

}
/// <summary>
/// <para>Defines the ShapePropertiesExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapePropertiesExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ShapePropertiesExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class ShapePropertiesExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10314;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtensionList class.
    /// </summary>
    public ShapePropertiesExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapePropertiesExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ShapePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ShapePropertiesExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ShapePropertiesExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtensionList>(deep);

}
/// <summary>
/// <para>Non-Visual Properties for a Group Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:nvGrpSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingProperties &lt;a:cNvPr></description></item>
///<item><description>NonVisualGroupShapeDrawingProperties &lt;a:cNvGrpSpPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingProperties))]
    [ChildElementInfo(typeof(NonVisualGroupShapeDrawingProperties))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "nvGrpSpPr")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGroupShapeProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10315;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeProperties class.
    /// </summary>
    public NonVisualGroupShapeProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupShapeProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupShapeProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGroupShapeProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> NonVisualDrawingProperties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualDrawingProperties NonVisualDrawingProperties
	{
        get => GetElement<NonVisualDrawingProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Non-Visual Group Shape Drawing Properties.</para>
    /// <para> Represents the following element tag in the schema: a:cNvGrpSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public NonVisualGroupShapeDrawingProperties NonVisualGroupShapeDrawingProperties
	{
        get => GetElement<NonVisualGroupShapeDrawingProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeProperties>(deep);

}
/// <summary>
/// <para>Visual Group Shape Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:grpSpPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TransformGroup &lt;a:xfrm></description></item>
///<item><description>NoFill &lt;a:noFill></description></item>
///<item><description>SolidFill &lt;a:solidFill></description></item>
///<item><description>GradientFill &lt;a:gradFill></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>PatternFill &lt;a:pattFill></description></item>
///<item><description>GroupFill &lt;a:grpFill></description></item>
///<item><description>EffectList &lt;a:effectLst></description></item>
///<item><description>EffectDag &lt;a:effectDag></description></item>
///<item><description>Scene3DType &lt;a:scene3d></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TransformGroup))]
    [ChildElementInfo(typeof(NoFill))]
    [ChildElementInfo(typeof(SolidFill))]
    [ChildElementInfo(typeof(GradientFill))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GroupFill))]
    [ChildElementInfo(typeof(EffectList))]
    [ChildElementInfo(typeof(EffectDag))]
    [ChildElementInfo(typeof(Scene3DType))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "grpSpPr")]
[Id(ElementTypeIdConst)]
public partial class VisualGroupShapeProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10316;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Black and White Mode.</para>
    /// <para>Represents the following attribute in the schema: bwMode </para>
    /// </summary>
    [SchemaAttr(0, "bwMode")]
    [Index(0)]
    public EnumValue<DocumentFormat.OpenXml.Drawing.BlackWhiteModeValues> BlackWhiteMode { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the VisualGroupShapeProperties class.
    /// </summary>
    public VisualGroupShapeProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VisualGroupShapeProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the VisualGroupShapeProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public VisualGroupShapeProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> 2D Transform for Grouped Objects.</para>
    /// <para> Represents the following element tag in the schema: a:xfrm </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public TransformGroup TransformGroup
	{
        get => GetElement<TransformGroup>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VisualGroupShapeProperties>(deep);

}
/// <summary>
/// <para>Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:sp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualShapeProperties &lt;a:nvSpPr></description></item>
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>TextShape &lt;a:txSp></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualShapeProperties))]
    [ChildElementInfo(typeof(ShapeProperties))]
    [ChildElementInfo(typeof(TextShape))]
    [ChildElementInfo(typeof(ShapeStyle))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "sp")]
[Id(ElementTypeIdConst)]
public partial class Shape : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10317;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Shape class.
    /// </summary>
    public Shape():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Shape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Shape(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Shape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Shape(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Shape class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Shape(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Properties for a Shape.</para>
    /// <para> Represents the following element tag in the schema: a:nvSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualShapeProperties NonVisualShapeProperties
	{
        get => GetElement<NonVisualShapeProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Visual Properties.</para>
    /// <para> Represents the following element tag in the schema: a:spPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ShapeProperties ShapeProperties
	{
        get => GetElement<ShapeProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Text Shape.</para>
    /// <para> Represents the following element tag in the schema: a:txSp </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public TextShape TextShape
	{
        get => GetElement<TextShape>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> Style.</para>
    /// <para> Represents the following element tag in the schema: a:style </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ShapeStyle ShapeStyle
	{
        get => GetElement<ShapeStyle>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape>(deep);

}
/// <summary>
/// <para>Connection Shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:cxnSp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualConnectionShapeProperties &lt;a:nvCxnSpPr></description></item>
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualConnectionShapeProperties))]
    [ChildElementInfo(typeof(ShapeProperties))]
    [ChildElementInfo(typeof(ShapeStyle))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "cxnSp")]
[Id(ElementTypeIdConst)]
public partial class ConnectionShape : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10318;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConnectionShape class.
    /// </summary>
    public ConnectionShape():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionShape(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionShape(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionShape class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionShape(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Properties for a Connection Shape.</para>
    /// <para> Represents the following element tag in the schema: a:nvCxnSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualConnectionShapeProperties NonVisualConnectionShapeProperties
	{
        get => GetElement<NonVisualConnectionShapeProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Visual Properties.</para>
    /// <para> Represents the following element tag in the schema: a:spPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ShapeProperties ShapeProperties
	{
        get => GetElement<ShapeProperties>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Shape Style.</para>
    /// <para> Represents the following element tag in the schema: a:style </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ShapeStyle ShapeStyle
	{
        get => GetElement<ShapeStyle>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShape>(deep);

}
/// <summary>
/// <para>Picture.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:pic.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualPictureProperties &lt;a:nvPicPr></description></item>
///<item><description>BlipFill &lt;a:blipFill></description></item>
///<item><description>ShapeProperties &lt;a:spPr></description></item>
///<item><description>ShapeStyle &lt;a:style></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualPictureProperties))]
    [ChildElementInfo(typeof(BlipFill))]
    [ChildElementInfo(typeof(ShapeProperties))]
    [ChildElementInfo(typeof(ShapeStyle))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "pic")]
[Id(ElementTypeIdConst)]
public partial class Picture : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10319;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Picture class.
    /// </summary>
    public Picture():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Picture class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Picture(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Picture class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Picture(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Picture class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Picture(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Properties for a Picture.</para>
    /// <para> Represents the following element tag in the schema: a:nvPicPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualPictureProperties NonVisualPictureProperties
	{
        get => GetElement<NonVisualPictureProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Picture Fill.</para>
    /// <para> Represents the following element tag in the schema: a:blipFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public BlipFill BlipFill
	{
        get => GetElement<BlipFill>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Shape Properties.</para>
    /// <para> Represents the following element tag in the schema: a:spPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public ShapeProperties ShapeProperties
	{
        get => GetElement<ShapeProperties>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ShapeStyle.</para>
    /// <para> Represents the following element tag in the schema: a:style </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ShapeStyle ShapeStyle
	{
        get => GetElement<ShapeStyle>(3);
        set => SetElement(3, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(4)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);

}
/// <summary>
/// <para>Graphic Frame.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:graphicFrame.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualGraphicFrameProperties &lt;a:nvGraphicFramePr></description></item>
///<item><description>Graphic &lt;a:graphic></description></item>
///<item><description>Transform2D &lt;a:xfrm></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualGraphicFrameProperties))]
    [ChildElementInfo(typeof(Graphic))]
    [ChildElementInfo(typeof(Transform2D))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "graphicFrame")]
[Id(ElementTypeIdConst)]
public partial class GraphicFrame : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10320;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the GraphicFrame class.
    /// </summary>
    public GraphicFrame():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GraphicFrame class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicFrame(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicFrame class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GraphicFrame(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GraphicFrame class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GraphicFrame(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Properties for a Graphic Frame.</para>
    /// <para> Represents the following element tag in the schema: a:nvGraphicFramePr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualGraphicFrameProperties NonVisualGraphicFrameProperties
	{
        get => GetElement<NonVisualGraphicFrameProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Graphic.</para>
    /// <para> Represents the following element tag in the schema: a:graphic </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public Graphic Graphic
	{
        get => GetElement<Graphic>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Transform2D.</para>
    /// <para> Represents the following element tag in the schema: a:xfrm </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public Transform2D Transform2D
	{
        get => GetElement<Transform2D>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrame>(deep);

}
/// <summary>
/// <para>Group shape.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:grpSp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualGroupShapeProperties &lt;a:nvGrpSpPr></description></item>
///<item><description>VisualGroupShapeProperties &lt;a:grpSpPr></description></item>
///<item><description>TextShape &lt;a:txSp></description></item>
///<item><description>Shape &lt;a:sp></description></item>
///<item><description>ConnectionShape &lt;a:cxnSp></description></item>
///<item><description>Picture &lt;a:pic></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart &lt;a14:contentPart></description></item>
///<item><description>GraphicFrame &lt;a:graphicFrame></description></item>
///<item><description>GroupShape &lt;a:grpSp></description></item>
///<item><description>GvmlGroupShapeExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualGroupShapeProperties))]
    [ChildElementInfo(typeof(VisualGroupShapeProperties))]
    [ChildElementInfo(typeof(TextShape))]
    [ChildElementInfo(typeof(Shape))]
    [ChildElementInfo(typeof(ConnectionShape))]
    [ChildElementInfo(typeof(Picture))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.GvmlContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(GraphicFrame))]
    [ChildElementInfo(typeof(GroupShape))]
    [ChildElementInfo(typeof(GvmlGroupShapeExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "grpSp")]
[Id(ElementTypeIdConst)]
public partial class GroupShape : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10321;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the GroupShape class.
    /// </summary>
    public GroupShape():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupShape(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupShape class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupShape(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupShape class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupShape(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Non-Visual Properties for a Group Shape.</para>
    /// <para> Represents the following element tag in the schema: a:nvGrpSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public NonVisualGroupShapeProperties NonVisualGroupShapeProperties
	{
        get => GetElement<NonVisualGroupShapeProperties>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Visual Group Shape Properties.</para>
    /// <para> Represents the following element tag in the schema: a:grpSpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public VisualGroupShapeProperties VisualGroupShapeProperties
	{
        get => GetElement<VisualGroupShapeProperties>(1);
        set => SetElement(1, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShape>(deep);

}
/// <summary>
/// <para>Defines the GvmlGroupShapeExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GvmlGroupShapeExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GvmlGroupShapeExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class GvmlGroupShapeExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10322;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtensionList class.
    /// </summary>
    public GvmlGroupShapeExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GvmlGroupShapeExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GvmlGroupShapeExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GvmlGroupShapeExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GvmlGroupShapeExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtensionList>(deep);

}
/// <summary>
/// <para>Defines the NonVisualGroupDrawingShapePropsExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties &lt;a15:nonVisualGroupProps></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.NonVisualGroupProperties), FileFormatVersions.Office2013)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGroupDrawingShapePropsExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10323;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class.
    /// </summary>
    public NonVisualGroupDrawingShapePropsExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupDrawingShapePropsExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupDrawingShapePropsExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGroupDrawingShapePropsExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtension>(deep);

}
/// <summary>
/// <para>Defines the OfficeStyleSheetExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily &lt;thm15:themeFamily></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Theme.ThemeFamily), FileFormatVersions.Office2013)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class OfficeStyleSheetExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10324;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtension class.
    /// </summary>
    public OfficeStyleSheetExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OfficeStyleSheetExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OfficeStyleSheetExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OfficeStyleSheetExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtension>(deep);

}
/// <summary>
/// <para>Defines the ConnectorLockingExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Graphic &lt;a:graphic></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Graphic), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class ConnectorLockingExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10325;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtension class.
    /// </summary>
    public ConnectorLockingExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectorLockingExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectorLockingExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectorLockingExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtension>(deep);

}
/// <summary>
/// <para>Defines the HyperlinkOnClick Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hlinkClick.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>HyperlinkSound &lt;a:snd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "hlinkClick")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HyperlinkOnClick : HyperlinkType
{
    internal const int ElementTypeIdConst = 10326;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HyperlinkOnClick class.
    /// </summary>
    public HyperlinkOnClick():base(){}
        /// <summary>
    ///Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnClick(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnClick(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnClick class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HyperlinkOnClick(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnClick>(deep);

}
/// <summary>
/// <para>Defines the HyperlinkOnHover Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hlinkHover.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>HyperlinkSound &lt;a:snd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "hlinkHover")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HyperlinkOnHover : HyperlinkType
{
    internal const int ElementTypeIdConst = 10327;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HyperlinkOnHover class.
    /// </summary>
    public HyperlinkOnHover():base(){}
        /// <summary>
    ///Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnHover(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnHover(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnHover class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HyperlinkOnHover(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnHover>(deep);

}
/// <summary>
/// <para>Defines the HyperlinkOnMouseOver Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:hlinkMouseOver.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>HyperlinkSound &lt;a:snd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

[SchemaAttr(10, "hlinkMouseOver")]
[Id(ElementTypeIdConst)]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HyperlinkOnMouseOver : HyperlinkType
{
    internal const int ElementTypeIdConst = 10343;
    internal override int ElementTypeId => ElementTypeIdConst;

    /// <summary>
    /// Initializes a new instance of the HyperlinkOnMouseOver class.
    /// </summary>
    public HyperlinkOnMouseOver():base(){}
        /// <summary>
    ///Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnMouseOver(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HyperlinkOnMouseOver(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkOnMouseOver class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HyperlinkOnMouseOver(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnMouseOver>(deep);

}
/// <summary>
/// Defines the HyperlinkType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>HyperlinkSound &lt;a:snd></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(HyperlinkSound))]
    [ChildElementInfo(typeof(ExtensionList))]

public abstract partial class HyperlinkType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Drawing Object Hyperlink Target.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id")]
    [Index(0)]
    public StringValue Id { get; set; }
	
    /// <summary>
    /// <para> Invalid URL.</para>
    /// <para>Represents the following attribute in the schema: invalidUrl </para>
    /// </summary>
    [SchemaAttr(0, "invalidUrl")]
    [Index(1)]
    public StringValue InvalidUrl { get; set; }
	
    /// <summary>
    /// <para> Action Setting.</para>
    /// <para>Represents the following attribute in the schema: action </para>
    /// </summary>
    [SchemaAttr(0, "action")]
    [Index(2)]
    public StringValue Action { get; set; }
	
    /// <summary>
    /// <para> Target Frame.</para>
    /// <para>Represents the following attribute in the schema: tgtFrame </para>
    /// </summary>
    [SchemaAttr(0, "tgtFrame")]
    [Index(3)]
    public StringValue TargetFrame { get; set; }
	
    /// <summary>
    /// <para> Hyperlink Tooltip.</para>
    /// <para>Represents the following attribute in the schema: tooltip </para>
    /// </summary>
    [SchemaAttr(0, "tooltip")]
    [Index(4)]
    public StringValue Tooltip { get; set; }
	
    /// <summary>
    /// <para> Add Hyperlink to Page History.</para>
    /// <para>Represents the following attribute in the schema: history </para>
    /// </summary>
    [SchemaAttr(0, "history")]
    [Index(5)]
    public BooleanValue History { get; set; }
	
    /// <summary>
    /// <para> Highlight Click.</para>
    /// <para>Represents the following attribute in the schema: highlightClick </para>
    /// </summary>
    [SchemaAttr(0, "highlightClick")]
    [Index(6)]
    public BooleanValue HighlightClick { get; set; }
	
    /// <summary>
    /// <para> End Sounds.</para>
    /// <para>Represents the following attribute in the schema: endSnd </para>
    /// </summary>
    [SchemaAttr(0, "endSnd")]
    [Index(7)]
    public BooleanValue EndSound { get; set; }
	

    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Hyperlink Sound.</para>
    /// <para> Represents the following element tag in the schema: a:snd </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public HyperlinkSound HyperlinkSound
	{
        get => GetElement<HyperlinkSound>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
	}
    


    
    /// <summary>
    /// Initializes a new instance of the HyperlinkType class.
    /// </summary>
    protected HyperlinkType(){}
    
        /// <summary>
    ///Initializes a new instance of the HyperlinkType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected HyperlinkType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected HyperlinkType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HyperlinkType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected HyperlinkType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Defines the NonVisualDrawingPropertiesExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualDrawingPropertiesExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualDrawingPropertiesExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class NonVisualDrawingPropertiesExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10328;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class.
    /// </summary>
    public NonVisualDrawingPropertiesExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingPropertiesExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingPropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualDrawingPropertiesExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtensionList>(deep);

}
/// <summary>
/// <para>Defines the NonVisualDrawingPropertiesExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension &lt;a14:compatExt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties &lt;a15:backgroundPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CompatExtension), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.BackgroundProperties), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class NonVisualDrawingPropertiesExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10329;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class.
    /// </summary>
    public NonVisualDrawingPropertiesExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingPropertiesExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualDrawingPropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualDrawingPropertiesExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtension>(deep);

}
/// <summary>
/// <para>Defines the PictureLocks Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:picLocks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "picLocks")]
[Id(ElementTypeIdConst)]
public partial class PictureLocks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10330;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Disallow Shape Grouping.</para>
    /// <para>Represents the following attribute in the schema: noGrp </para>
    /// </summary>
    [SchemaAttr(0, "noGrp")]
    [Index(0)]
    public BooleanValue NoGrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Selection.</para>
    /// <para>Represents the following attribute in the schema: noSelect </para>
    /// </summary>
    [SchemaAttr(0, "noSelect")]
    [Index(1)]
    public BooleanValue NoSelection { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Rotation.</para>
    /// <para>Represents the following attribute in the schema: noRot </para>
    /// </summary>
    [SchemaAttr(0, "noRot")]
    [Index(2)]
    public BooleanValue NoRotation { get; set; }
	
    /// <summary>
    /// <para> Disallow Aspect Ratio Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeAspect </para>
    /// </summary>
    [SchemaAttr(0, "noChangeAspect")]
    [Index(3)]
    public BooleanValue NoChangeAspect { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Movement.</para>
    /// <para>Represents the following attribute in the schema: noMove </para>
    /// </summary>
    [SchemaAttr(0, "noMove")]
    [Index(4)]
    public BooleanValue NoMove { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Resize.</para>
    /// <para>Represents the following attribute in the schema: noResize </para>
    /// </summary>
    [SchemaAttr(0, "noResize")]
    [Index(5)]
    public BooleanValue NoResize { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Point Editing.</para>
    /// <para>Represents the following attribute in the schema: noEditPoints </para>
    /// </summary>
    [SchemaAttr(0, "noEditPoints")]
    [Index(6)]
    public BooleanValue NoEditPoints { get; set; }
	
    /// <summary>
    /// <para> Disallow Showing Adjust Handles.</para>
    /// <para>Represents the following attribute in the schema: noAdjustHandles </para>
    /// </summary>
    [SchemaAttr(0, "noAdjustHandles")]
    [Index(7)]
    public BooleanValue NoAdjustHandles { get; set; }
	
    /// <summary>
    /// <para> Disallow Arrowhead Changes.</para>
    /// <para>Represents the following attribute in the schema: noChangeArrowheads </para>
    /// </summary>
    [SchemaAttr(0, "noChangeArrowheads")]
    [Index(8)]
    public BooleanValue NoChangeArrowheads { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Type Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeShapeType </para>
    /// </summary>
    [SchemaAttr(0, "noChangeShapeType")]
    [Index(9)]
    public BooleanValue NoChangeShapeType { get; set; }
	
    /// <summary>
    /// <para> Disallow Crop Changes.</para>
    /// <para>Represents the following attribute in the schema: noCrop </para>
    /// </summary>
    [SchemaAttr(0, "noCrop")]
    [Index(10)]
    public BooleanValue NoCrop { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PictureLocks class.
    /// </summary>
    public PictureLocks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PictureLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PictureLocks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PictureLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PictureLocks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PictureLocks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PictureLocks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureLocks>(deep);

}
/// <summary>
/// <para>Defines the NonVisualPicturePropertiesExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualPicturePropertiesExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualPicturePropertiesExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class NonVisualPicturePropertiesExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10331;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class.
    /// </summary>
    public NonVisualPicturePropertiesExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPicturePropertiesExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPicturePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualPicturePropertiesExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtensionList>(deep);

}
/// <summary>
/// <para>Defines the NonVisualPicturePropertiesExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.CameraTool &lt;a14:cameraTool></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine &lt;a15:signatureLine></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties &lt;a15:objectPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.CameraTool), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.SignatureLine), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Drawing.ObjectProperties), FileFormatVersions.Office2013)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class NonVisualPicturePropertiesExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10332;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtension class.
    /// </summary>
    public NonVisualPicturePropertiesExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPicturePropertiesExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualPicturePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualPicturePropertiesExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualPicturePropertiesExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtension>(deep);

}
/// <summary>
/// <para>Defines the GroupShapeLocks Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:grpSpLocks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "grpSpLocks")]
[Id(ElementTypeIdConst)]
public partial class GroupShapeLocks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10333;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> Disallow Shape Grouping.</para>
    /// <para>Represents the following attribute in the schema: noGrp </para>
    /// </summary>
    [SchemaAttr(0, "noGrp")]
    [Index(0)]
    public BooleanValue NoGrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Ungrouping.</para>
    /// <para>Represents the following attribute in the schema: noUngrp </para>
    /// </summary>
    [SchemaAttr(0, "noUngrp")]
    [Index(1)]
    public BooleanValue NoUngrouping { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Selection.</para>
    /// <para>Represents the following attribute in the schema: noSelect </para>
    /// </summary>
    [SchemaAttr(0, "noSelect")]
    [Index(2)]
    public BooleanValue NoSelection { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Rotation.</para>
    /// <para>Represents the following attribute in the schema: noRot </para>
    /// </summary>
    [SchemaAttr(0, "noRot")]
    [Index(3)]
    public BooleanValue NoRotation { get; set; }
	
    /// <summary>
    /// <para> Disallow Aspect Ratio Change.</para>
    /// <para>Represents the following attribute in the schema: noChangeAspect </para>
    /// </summary>
    [SchemaAttr(0, "noChangeAspect")]
    [Index(4)]
    public BooleanValue NoChangeAspect { get; set; }
	
    /// <summary>
    /// <para> Disallow Moving Shape.</para>
    /// <para>Represents the following attribute in the schema: noMove </para>
    /// </summary>
    [SchemaAttr(0, "noMove")]
    [Index(5)]
    public BooleanValue NoMove { get; set; }
	
    /// <summary>
    /// <para> Disallow Shape Resizing.</para>
    /// <para>Represents the following attribute in the schema: noResize </para>
    /// </summary>
    [SchemaAttr(0, "noResize")]
    [Index(6)]
    public BooleanValue NoResize { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the GroupShapeLocks class.
    /// </summary>
    public GroupShapeLocks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupShapeLocks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupShapeLocks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupShapeLocks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupShapeLocks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShapeLocks>(deep);

}
/// <summary>
/// <para>Defines the NonVisualGroupDrawingShapePropsExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NonVisualGroupDrawingShapePropsExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NonVisualGroupDrawingShapePropsExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class NonVisualGroupDrawingShapePropsExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10334;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class.
    /// </summary>
    public NonVisualGroupDrawingShapePropsExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupDrawingShapePropsExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NonVisualGroupDrawingShapePropsExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NonVisualGroupDrawingShapePropsExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtensionList>(deep);

}
/// <summary>
/// <para>Defines the BlipExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>BlipExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(BlipExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class BlipExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10335;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BlipExtensionList class.
    /// </summary>
    public BlipExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BlipExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BlipExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtensionList>(deep);

}
/// <summary>
/// <para>Defines the BlipExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties &lt;a14:imgProps></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi &lt;a14:useLocalDpi></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty &lt;wp15:webVideoPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.ImageProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.UseLocalDpi), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Drawing.WebVideoProperty), FileFormatVersions.Office2013)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class BlipExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10336;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the BlipExtension class.
    /// </summary>
    public BlipExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BlipExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BlipExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BlipExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BlipExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtension>(deep);

}
/// <summary>
/// <para>Defines the ObjectDefaults Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:objectDefaults.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ShapeDefault &lt;a:spDef></description></item>
///<item><description>LineDefault &lt;a:lnDef></description></item>
///<item><description>TextDefault &lt;a:txDef></description></item>
///<item><description>ExtensionList &lt;a:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ShapeDefault))]
    [ChildElementInfo(typeof(LineDefault))]
    [ChildElementInfo(typeof(TextDefault))]
    [ChildElementInfo(typeof(ExtensionList))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "objectDefaults")]
[Id(ElementTypeIdConst)]
public partial class ObjectDefaults : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10337;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ObjectDefaults class.
    /// </summary>
    public ObjectDefaults():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ObjectDefaults class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ObjectDefaults(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ObjectDefaults class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ObjectDefaults(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ObjectDefaults class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ObjectDefaults(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Shape Default.</para>
    /// <para> Represents the following element tag in the schema: a:spDef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(0)]
    public ShapeDefault ShapeDefault
	{
        get => GetElement<ShapeDefault>(0);
        set => SetElement(0, value);
	}
    
    /// <summary>
    /// <para> Line Default.</para>
    /// <para> Represents the following element tag in the schema: a:lnDef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(1)]
    public LineDefault LineDefault
	{
        get => GetElement<LineDefault>(1);
        set => SetElement(1, value);
	}
    
    /// <summary>
    /// <para> Text Default.</para>
    /// <para> Represents the following element tag in the schema: a:txDef </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(2)]
    public TextDefault TextDefault
	{
        get => GetElement<TextDefault>(2);
        set => SetElement(2, value);
	}
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: a:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
    /// </remark>
	[Index(3)]
    public ExtensionList ExtensionList
	{
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
	}
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectDefaults>(deep);

}
/// <summary>
/// <para>Defines the ExtraColorSchemeList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extraClrSchemeLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtraColorScheme &lt;a:extraClrScheme></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtraColorScheme))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extraClrSchemeLst")]
[Id(ElementTypeIdConst)]
public partial class ExtraColorSchemeList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10338;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorSchemeList class.
    /// </summary>
    public ExtraColorSchemeList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtraColorSchemeList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtraColorSchemeList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtraColorSchemeList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExtraColorSchemeList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorSchemeList>(deep);

}
/// <summary>
/// <para>Defines the CustomColorList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:custClrLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomColor &lt;a:custClr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomColor))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "custClrLst")]
[Id(ElementTypeIdConst)]
public partial class CustomColorList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10339;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomColorList class.
    /// </summary>
    public CustomColorList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomColorList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomColorList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomColorList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomColorList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomColorList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomColorList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColorList>(deep);

}
/// <summary>
/// <para>Defines the OfficeStyleSheetExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OfficeStyleSheetExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OfficeStyleSheetExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class OfficeStyleSheetExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10340;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtensionList class.
    /// </summary>
    public OfficeStyleSheetExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OfficeStyleSheetExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OfficeStyleSheetExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OfficeStyleSheetExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OfficeStyleSheetExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtensionList>(deep);

}
/// <summary>
/// <para>Defines the RightToLeft Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:rtl.</para>
/// </summary>


[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "rtl")]
[Id(ElementTypeIdConst)]
public partial class RightToLeft : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 10344;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> val.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val")]
    [Index(0)]
    public BooleanValue Val { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the RightToLeft class.
    /// </summary>
    public RightToLeft():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightToLeft>(deep);

}
/// <summary>
/// <para>Defines the ConnectorLockingExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConnectorLockingExtension &lt;a:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConnectorLockingExtension))]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "extLst")]
[Id(ElementTypeIdConst)]
public partial class ConnectorLockingExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10345;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtensionList class.
    /// </summary>
    public ConnectorLockingExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectorLockingExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectorLockingExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectorLockingExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectorLockingExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtensionList>(deep);

}
/// <summary>
/// <para>Defines the DataModelExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock &lt;dsp:dataModelExt></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages &lt;dgm14:recolorImg></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office.Drawing.DataModelExtensionBlock), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.RecolorImages), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class DataModelExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10346;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the DataModelExtension class.
    /// </summary>
    public DataModelExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataModelExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataModelExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataModelExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataModelExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataModelExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataModelExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataModelExtension>(deep);

}
/// <summary>
/// <para>Defines the PtExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is a:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties &lt;dgm14:cNvPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Drawing.Diagram.NonVisualDrawingProperties), FileFormatVersions.Office2010)]

[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(10, "ext")]
[Id(ElementTypeIdConst)]
public partial class PtExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 10347;
    internal override int ElementTypeId => ElementTypeIdConst;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri")]
    [Index(0)]
    public StringValue Uri { get; set; }
	

    /// <summary>
    /// Initializes a new instance of the PtExtension class.
    /// </summary>
    public PtExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PtExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PtExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PtExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PtExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PtExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PtExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PtExtension>(deep);

}
/// <summary>
/// Font Collection Index 
/// </summary> 
public enum FontCollectionIndexValues
{  
	///<summary>
///Major Font.
///<para>When the item is serialized out as xml, its value is "major".</para>
///</summary>
[EnumString("major")]
Major,
///<summary>
///Minor Font.
///<para>When the item is serialized out as xml, its value is "minor".</para>
///</summary>
[EnumString("minor")]
Minor,
///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// Theme Color Reference 
/// </summary> 
public enum ColorSchemeIndexValues
{  
	///<summary>
///Dark 1.
///<para>When the item is serialized out as xml, its value is "dk1".</para>
///</summary>
[EnumString("dk1")]
Dark1,
///<summary>
///Light 1.
///<para>When the item is serialized out as xml, its value is "lt1".</para>
///</summary>
[EnumString("lt1")]
Light1,
///<summary>
///Dark 2.
///<para>When the item is serialized out as xml, its value is "dk2".</para>
///</summary>
[EnumString("dk2")]
Dark2,
///<summary>
///Light 2.
///<para>When the item is serialized out as xml, its value is "lt2".</para>
///</summary>
[EnumString("lt2")]
Light2,
///<summary>
///Accent 1.
///<para>When the item is serialized out as xml, its value is "accent1".</para>
///</summary>
[EnumString("accent1")]
Accent1,
///<summary>
///Accent 2.
///<para>When the item is serialized out as xml, its value is "accent2".</para>
///</summary>
[EnumString("accent2")]
Accent2,
///<summary>
///Accent 3.
///<para>When the item is serialized out as xml, its value is "accent3".</para>
///</summary>
[EnumString("accent3")]
Accent3,
///<summary>
///Accent 4.
///<para>When the item is serialized out as xml, its value is "accent4".</para>
///</summary>
[EnumString("accent4")]
Accent4,
///<summary>
///Accent 5.
///<para>When the item is serialized out as xml, its value is "accent5".</para>
///</summary>
[EnumString("accent5")]
Accent5,
///<summary>
///Accent 6.
///<para>When the item is serialized out as xml, its value is "accent6".</para>
///</summary>
[EnumString("accent6")]
Accent6,
///<summary>
///Hyperlink.
///<para>When the item is serialized out as xml, its value is "hlink".</para>
///</summary>
[EnumString("hlink")]
Hyperlink,
///<summary>
///Followed Hyperlink.
///<para>When the item is serialized out as xml, its value is "folHlink".</para>
///</summary>
[EnumString("folHlink")]
FollowedHyperlink,
 
}
/// <summary>
/// System Color Value 
/// </summary> 
public enum SystemColorValues
{  
	///<summary>
///Scroll Bar System Color.
///<para>When the item is serialized out as xml, its value is "scrollBar".</para>
///</summary>
[EnumString("scrollBar")]
ScrollBar,
///<summary>
///Background System Color.
///<para>When the item is serialized out as xml, its value is "background".</para>
///</summary>
[EnumString("background")]
Background,
///<summary>
///Active Caption System Color.
///<para>When the item is serialized out as xml, its value is "activeCaption".</para>
///</summary>
[EnumString("activeCaption")]
ActiveCaption,
///<summary>
///Inactive Caption System Color.
///<para>When the item is serialized out as xml, its value is "inactiveCaption".</para>
///</summary>
[EnumString("inactiveCaption")]
InactiveCaption,
///<summary>
///Menu System Color.
///<para>When the item is serialized out as xml, its value is "menu".</para>
///</summary>
[EnumString("menu")]
Menu,
///<summary>
///Window System Color.
///<para>When the item is serialized out as xml, its value is "window".</para>
///</summary>
[EnumString("window")]
Window,
///<summary>
///Window Frame System Color.
///<para>When the item is serialized out as xml, its value is "windowFrame".</para>
///</summary>
[EnumString("windowFrame")]
WindowFrame,
///<summary>
///Menu Text System Color.
///<para>When the item is serialized out as xml, its value is "menuText".</para>
///</summary>
[EnumString("menuText")]
MenuText,
///<summary>
///Window Text System Color.
///<para>When the item is serialized out as xml, its value is "windowText".</para>
///</summary>
[EnumString("windowText")]
WindowText,
///<summary>
///Caption Text System Color.
///<para>When the item is serialized out as xml, its value is "captionText".</para>
///</summary>
[EnumString("captionText")]
CaptionText,
///<summary>
///Active Border System Color.
///<para>When the item is serialized out as xml, its value is "activeBorder".</para>
///</summary>
[EnumString("activeBorder")]
ActiveBorder,
///<summary>
///Inactive Border System Color.
///<para>When the item is serialized out as xml, its value is "inactiveBorder".</para>
///</summary>
[EnumString("inactiveBorder")]
InactiveBorder,
///<summary>
///Application Workspace System Color.
///<para>When the item is serialized out as xml, its value is "appWorkspace".</para>
///</summary>
[EnumString("appWorkspace")]
ApplicationWorkspace,
///<summary>
///Highlight System Color.
///<para>When the item is serialized out as xml, its value is "highlight".</para>
///</summary>
[EnumString("highlight")]
Highlight,
///<summary>
///Highlight Text System Color.
///<para>When the item is serialized out as xml, its value is "highlightText".</para>
///</summary>
[EnumString("highlightText")]
HighlightText,
///<summary>
///Button Face System Color.
///<para>When the item is serialized out as xml, its value is "btnFace".</para>
///</summary>
[EnumString("btnFace")]
ButtonFace,
///<summary>
///Button Shadow System Color.
///<para>When the item is serialized out as xml, its value is "btnShadow".</para>
///</summary>
[EnumString("btnShadow")]
ButtonShadow,
///<summary>
///Gray Text System Color.
///<para>When the item is serialized out as xml, its value is "grayText".</para>
///</summary>
[EnumString("grayText")]
GrayText,
///<summary>
///Button Text System Color.
///<para>When the item is serialized out as xml, its value is "btnText".</para>
///</summary>
[EnumString("btnText")]
ButtonText,
///<summary>
///Inactive Caption Text System Color.
///<para>When the item is serialized out as xml, its value is "inactiveCaptionText".</para>
///</summary>
[EnumString("inactiveCaptionText")]
InactiveCaptionText,
///<summary>
///Button Highlight System Color.
///<para>When the item is serialized out as xml, its value is "btnHighlight".</para>
///</summary>
[EnumString("btnHighlight")]
ButtonHighlight,
///<summary>
///3D Dark System Color.
///<para>When the item is serialized out as xml, its value is "3dDkShadow".</para>
///</summary>
[EnumString("3dDkShadow")]
ThreeDDarkShadow,
///<summary>
///3D Light System Color.
///<para>When the item is serialized out as xml, its value is "3dLight".</para>
///</summary>
[EnumString("3dLight")]
ThreeDLight,
///<summary>
///Info Text System Color.
///<para>When the item is serialized out as xml, its value is "infoText".</para>
///</summary>
[EnumString("infoText")]
InfoText,
///<summary>
///Info Back System Color.
///<para>When the item is serialized out as xml, its value is "infoBk".</para>
///</summary>
[EnumString("infoBk")]
InfoBack,
///<summary>
///Hot Light System Color.
///<para>When the item is serialized out as xml, its value is "hotLight".</para>
///</summary>
[EnumString("hotLight")]
HotLight,
///<summary>
///Gradient Active Caption System Color.
///<para>When the item is serialized out as xml, its value is "gradientActiveCaption".</para>
///</summary>
[EnumString("gradientActiveCaption")]
GradientActiveCaption,
///<summary>
///Gradient Inactive Caption System Color.
///<para>When the item is serialized out as xml, its value is "gradientInactiveCaption".</para>
///</summary>
[EnumString("gradientInactiveCaption")]
GradientInactiveCaption,
///<summary>
///Menu Highlight System Color.
///<para>When the item is serialized out as xml, its value is "menuHighlight".</para>
///</summary>
[EnumString("menuHighlight")]
MenuHighlight,
///<summary>
///Menu Bar System Color.
///<para>When the item is serialized out as xml, its value is "menuBar".</para>
///</summary>
[EnumString("menuBar")]
MenuBar,
 
}
/// <summary>
/// Scheme Color 
/// </summary> 
public enum SchemeColorValues
{  
	///<summary>
///Background Color 1.
///<para>When the item is serialized out as xml, its value is "bg1".</para>
///</summary>
[EnumString("bg1")]
Background1,
///<summary>
///Text Color 1.
///<para>When the item is serialized out as xml, its value is "tx1".</para>
///</summary>
[EnumString("tx1")]
Text1,
///<summary>
///Background Color 2.
///<para>When the item is serialized out as xml, its value is "bg2".</para>
///</summary>
[EnumString("bg2")]
Background2,
///<summary>
///Text Color 2.
///<para>When the item is serialized out as xml, its value is "tx2".</para>
///</summary>
[EnumString("tx2")]
Text2,
///<summary>
///Accent Color 1.
///<para>When the item is serialized out as xml, its value is "accent1".</para>
///</summary>
[EnumString("accent1")]
Accent1,
///<summary>
///Accent Color 2.
///<para>When the item is serialized out as xml, its value is "accent2".</para>
///</summary>
[EnumString("accent2")]
Accent2,
///<summary>
///Accent Color 3.
///<para>When the item is serialized out as xml, its value is "accent3".</para>
///</summary>
[EnumString("accent3")]
Accent3,
///<summary>
///Accent Color 4.
///<para>When the item is serialized out as xml, its value is "accent4".</para>
///</summary>
[EnumString("accent4")]
Accent4,
///<summary>
///Accent Color 5.
///<para>When the item is serialized out as xml, its value is "accent5".</para>
///</summary>
[EnumString("accent5")]
Accent5,
///<summary>
///Accent Color 6.
///<para>When the item is serialized out as xml, its value is "accent6".</para>
///</summary>
[EnumString("accent6")]
Accent6,
///<summary>
///Hyperlink Color.
///<para>When the item is serialized out as xml, its value is "hlink".</para>
///</summary>
[EnumString("hlink")]
Hyperlink,
///<summary>
///Followed Hyperlink Color.
///<para>When the item is serialized out as xml, its value is "folHlink".</para>
///</summary>
[EnumString("folHlink")]
FollowedHyperlink,
///<summary>
///Style Color.
///<para>When the item is serialized out as xml, its value is "phClr".</para>
///</summary>
[EnumString("phClr")]
PhColor,
///<summary>
///Dark Color 1.
///<para>When the item is serialized out as xml, its value is "dk1".</para>
///</summary>
[EnumString("dk1")]
Dark1,
///<summary>
///Light Color 1.
///<para>When the item is serialized out as xml, its value is "lt1".</para>
///</summary>
[EnumString("lt1")]
Light1,
///<summary>
///Dark Color 2.
///<para>When the item is serialized out as xml, its value is "dk2".</para>
///</summary>
[EnumString("dk2")]
Dark2,
///<summary>
///Light Color 2.
///<para>When the item is serialized out as xml, its value is "lt2".</para>
///</summary>
[EnumString("lt2")]
Light2,
 
}
/// <summary>
/// Rectangle Alignments 
/// </summary> 
public enum RectangleAlignmentValues
{  
	///<summary>
///Rectangle Alignment Enum ( Top Left ).
///<para>When the item is serialized out as xml, its value is "tl".</para>
///</summary>
[EnumString("tl")]
TopLeft,
///<summary>
///Rectangle Alignment Enum ( Top ).
///<para>When the item is serialized out as xml, its value is "t".</para>
///</summary>
[EnumString("t")]
Top,
///<summary>
///Rectangle Alignment Enum ( Top Right ).
///<para>When the item is serialized out as xml, its value is "tr".</para>
///</summary>
[EnumString("tr")]
TopRight,
///<summary>
///Rectangle Alignment Enum ( Left ).
///<para>When the item is serialized out as xml, its value is "l".</para>
///</summary>
[EnumString("l")]
Left,
///<summary>
///Rectangle Alignment Enum ( Center ).
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Rectangle Alignment Enum ( Right ).
///<para>When the item is serialized out as xml, its value is "r".</para>
///</summary>
[EnumString("r")]
Right,
///<summary>
///Rectangle Alignment Enum ( Bottom Left ).
///<para>When the item is serialized out as xml, its value is "bl".</para>
///</summary>
[EnumString("bl")]
BottomLeft,
///<summary>
///Rectangle Alignment Enum ( Bottom ).
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Bottom,
///<summary>
///Rectangle Alignment Enum ( Bottom Right ).
///<para>When the item is serialized out as xml, its value is "br".</para>
///</summary>
[EnumString("br")]
BottomRight,
 
}
/// <summary>
/// Black and White Mode 
/// </summary> 
public enum BlackWhiteModeValues
{  
	///<summary>
///Color.
///<para>When the item is serialized out as xml, its value is "clr".</para>
///</summary>
[EnumString("clr")]
Color,
///<summary>
///Automatic.
///<para>When the item is serialized out as xml, its value is "auto".</para>
///</summary>
[EnumString("auto")]
Auto,
///<summary>
///Gray.
///<para>When the item is serialized out as xml, its value is "gray".</para>
///</summary>
[EnumString("gray")]
Gray,
///<summary>
///Light Gray.
///<para>When the item is serialized out as xml, its value is "ltGray".</para>
///</summary>
[EnumString("ltGray")]
LightGray,
///<summary>
///Inverse Gray.
///<para>When the item is serialized out as xml, its value is "invGray".</para>
///</summary>
[EnumString("invGray")]
InvGray,
///<summary>
///Gray and White.
///<para>When the item is serialized out as xml, its value is "grayWhite".</para>
///</summary>
[EnumString("grayWhite")]
GrayWhite,
///<summary>
///Black and Gray.
///<para>When the item is serialized out as xml, its value is "blackGray".</para>
///</summary>
[EnumString("blackGray")]
BlackGray,
///<summary>
///Black and White.
///<para>When the item is serialized out as xml, its value is "blackWhite".</para>
///</summary>
[EnumString("blackWhite")]
BlackWhite,
///<summary>
///Black.
///<para>When the item is serialized out as xml, its value is "black".</para>
///</summary>
[EnumString("black")]
Black,
///<summary>
///White.
///<para>When the item is serialized out as xml, its value is "white".</para>
///</summary>
[EnumString("white")]
White,
///<summary>
///Hidden.
///<para>When the item is serialized out as xml, its value is "hidden".</para>
///</summary>
[EnumString("hidden")]
Hidden,
 
}
/// <summary>
/// Chart Animation Build Step 
/// </summary> 
public enum ChartBuildStepValues
{  
	///<summary>
///Category.
///<para>When the item is serialized out as xml, its value is "category".</para>
///</summary>
[EnumString("category")]
Category,
///<summary>
///Category Points.
///<para>When the item is serialized out as xml, its value is "ptInCategory".</para>
///</summary>
[EnumString("ptInCategory")]
CategoryPoints,
///<summary>
///Series.
///<para>When the item is serialized out as xml, its value is "series".</para>
///</summary>
[EnumString("series")]
Series,
///<summary>
///Series Points.
///<para>When the item is serialized out as xml, its value is "ptInSeries".</para>
///</summary>
[EnumString("ptInSeries")]
SeriesPoints,
///<summary>
///All Points.
///<para>When the item is serialized out as xml, its value is "allPts".</para>
///</summary>
[EnumString("allPts")]
AllPoints,
///<summary>
///Grid and Legend.
///<para>When the item is serialized out as xml, its value is "gridLegend".</para>
///</summary>
[EnumString("gridLegend")]
GridLegend,
 
}
/// <summary>
/// Diagram Animation Build Steps 
/// </summary> 
public enum DiagramBuildStepValues
{  
	///<summary>
///Shape.
///<para>When the item is serialized out as xml, its value is "sp".</para>
///</summary>
[EnumString("sp")]
Shape,
///<summary>
///Background.
///<para>When the item is serialized out as xml, its value is "bg".</para>
///</summary>
[EnumString("bg")]
Background,
 
}
/// <summary>
/// Animation Build Type 
/// </summary> 
public enum AnimationBuildValues
{  
	///<summary>
///Animate At Once.
///<para>When the item is serialized out as xml, its value is "allAtOnce".</para>
///</summary>
[EnumString("allAtOnce")]
AllAtOnce,
 
}
/// <summary>
/// Diagram only Animation Types 
/// </summary> 
public enum AnimationDiagramOnlyBuildValues
{  
	///<summary>
///Elements One-by-One.
///<para>When the item is serialized out as xml, its value is "one".</para>
///</summary>
[EnumString("one")]
One,
///<summary>
///Level One-by-One.
///<para>When the item is serialized out as xml, its value is "lvlOne".</para>
///</summary>
[EnumString("lvlOne")]
LevelOne,
///<summary>
///Each Level at Once.
///<para>When the item is serialized out as xml, its value is "lvlAtOnce".</para>
///</summary>
[EnumString("lvlAtOnce")]
LevelAtOnce,
 
}
/// <summary>
/// Chart only Animation Types 
/// </summary> 
public enum AnimationChartOnlyBuildValues
{  
	///<summary>
///Series.
///<para>When the item is serialized out as xml, its value is "series".</para>
///</summary>
[EnumString("series")]
Series,
///<summary>
///Category.
///<para>When the item is serialized out as xml, its value is "category".</para>
///</summary>
[EnumString("category")]
Category,
///<summary>
///Series Element.
///<para>When the item is serialized out as xml, its value is "seriesEl".</para>
///</summary>
[EnumString("seriesEl")]
SeriesElement,
///<summary>
///Category Element.
///<para>When the item is serialized out as xml, its value is "categoryEl".</para>
///</summary>
[EnumString("categoryEl")]
CategoryElement,
 
}
/// <summary>
/// Preset Camera Type 
/// </summary> 
public enum PresetCameraValues
{  
	///<summary>
///Legacy Oblique Top Left.
///<para>When the item is serialized out as xml, its value is "legacyObliqueTopLeft".</para>
///</summary>
[EnumString("legacyObliqueTopLeft")]
LegacyObliqueTopLeft,
///<summary>
///Legacy Oblique Top.
///<para>When the item is serialized out as xml, its value is "legacyObliqueTop".</para>
///</summary>
[EnumString("legacyObliqueTop")]
LegacyObliqueTop,
///<summary>
///Legacy Oblique Top Right.
///<para>When the item is serialized out as xml, its value is "legacyObliqueTopRight".</para>
///</summary>
[EnumString("legacyObliqueTopRight")]
LegacyObliqueTopRight,
///<summary>
///Legacy Oblique Left.
///<para>When the item is serialized out as xml, its value is "legacyObliqueLeft".</para>
///</summary>
[EnumString("legacyObliqueLeft")]
LegacyObliqueLeft,
///<summary>
///Legacy Oblique Front.
///<para>When the item is serialized out as xml, its value is "legacyObliqueFront".</para>
///</summary>
[EnumString("legacyObliqueFront")]
LegacyObliqueFront,
///<summary>
///Legacy Oblique Right.
///<para>When the item is serialized out as xml, its value is "legacyObliqueRight".</para>
///</summary>
[EnumString("legacyObliqueRight")]
LegacyObliqueRight,
///<summary>
///Legacy Oblique Bottom Left.
///<para>When the item is serialized out as xml, its value is "legacyObliqueBottomLeft".</para>
///</summary>
[EnumString("legacyObliqueBottomLeft")]
LegacyObliqueBottomLeft,
///<summary>
///Legacy Oblique Bottom.
///<para>When the item is serialized out as xml, its value is "legacyObliqueBottom".</para>
///</summary>
[EnumString("legacyObliqueBottom")]
LegacyObliqueBottom,
///<summary>
///Legacy Oblique Bottom Right.
///<para>When the item is serialized out as xml, its value is "legacyObliqueBottomRight".</para>
///</summary>
[EnumString("legacyObliqueBottomRight")]
LegacyObliqueBottomRight,
///<summary>
///Legacy Perspective Top Left.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTopLeft".</para>
///</summary>
[EnumString("legacyPerspectiveTopLeft")]
LegacyPerspectiveTopLeft,
///<summary>
///Legacy Perspective Top.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTop".</para>
///</summary>
[EnumString("legacyPerspectiveTop")]
LegacyPerspectiveTop,
///<summary>
///Legacy Perspective Top Right.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveTopRight".</para>
///</summary>
[EnumString("legacyPerspectiveTopRight")]
LegacyPerspectiveTopRight,
///<summary>
///Legacy Perspective Left.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveLeft".</para>
///</summary>
[EnumString("legacyPerspectiveLeft")]
LegacyPerspectiveLeft,
///<summary>
///Legacy Perspective Front.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveFront".</para>
///</summary>
[EnumString("legacyPerspectiveFront")]
LegacyPerspectiveFront,
///<summary>
///Legacy Perspective Right.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveRight".</para>
///</summary>
[EnumString("legacyPerspectiveRight")]
LegacyPerspectiveRight,
///<summary>
///Legacy Perspective Bottom Left.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomLeft".</para>
///</summary>
[EnumString("legacyPerspectiveBottomLeft")]
LegacyPerspectiveBottomLeft,
///<summary>
///Legacy Perspective Bottom.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottom".</para>
///</summary>
[EnumString("legacyPerspectiveBottom")]
LegacyPerspectiveBottom,
///<summary>
///Legacy Perspective Bottom Right.
///<para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomRight".</para>
///</summary>
[EnumString("legacyPerspectiveBottomRight")]
LegacyPerspectiveBottomRight,
///<summary>
///Orthographic Front.
///<para>When the item is serialized out as xml, its value is "orthographicFront".</para>
///</summary>
[EnumString("orthographicFront")]
OrthographicFront,
///<summary>
///Isometric Top Up.
///<para>When the item is serialized out as xml, its value is "isometricTopUp".</para>
///</summary>
[EnumString("isometricTopUp")]
IsometricTopUp,
///<summary>
///Isometric Top Down.
///<para>When the item is serialized out as xml, its value is "isometricTopDown".</para>
///</summary>
[EnumString("isometricTopDown")]
IsometricTopDown,
///<summary>
///Isometric Bottom Up.
///<para>When the item is serialized out as xml, its value is "isometricBottomUp".</para>
///</summary>
[EnumString("isometricBottomUp")]
IsometricBottomUp,
///<summary>
///Isometric Bottom Down.
///<para>When the item is serialized out as xml, its value is "isometricBottomDown".</para>
///</summary>
[EnumString("isometricBottomDown")]
IsometricBottomDown,
///<summary>
///Isometric Left Up.
///<para>When the item is serialized out as xml, its value is "isometricLeftUp".</para>
///</summary>
[EnumString("isometricLeftUp")]
IsometricLeftUp,
///<summary>
///Isometric Left Down.
///<para>When the item is serialized out as xml, its value is "isometricLeftDown".</para>
///</summary>
[EnumString("isometricLeftDown")]
IsometricLeftDown,
///<summary>
///Isometric Right Up.
///<para>When the item is serialized out as xml, its value is "isometricRightUp".</para>
///</summary>
[EnumString("isometricRightUp")]
IsometricRightUp,
///<summary>
///Isometric Right Down.
///<para>When the item is serialized out as xml, its value is "isometricRightDown".</para>
///</summary>
[EnumString("isometricRightDown")]
IsometricRightDown,
///<summary>
///Isometric Off Axis 1 Left.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Left".</para>
///</summary>
[EnumString("isometricOffAxis1Left")]
IsometricOffAxis1Left,
///<summary>
///Isometric Off Axis 1 Right.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Right".</para>
///</summary>
[EnumString("isometricOffAxis1Right")]
IsometricOffAxis1Right,
///<summary>
///Isometric Off Axis 1 Top.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis1Top".</para>
///</summary>
[EnumString("isometricOffAxis1Top")]
IsometricOffAxis1Top,
///<summary>
///Isometric Off Axis 2 Left.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Left".</para>
///</summary>
[EnumString("isometricOffAxis2Left")]
IsometricOffAxis2Left,
///<summary>
///Isometric Off Axis 2 Right.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Right".</para>
///</summary>
[EnumString("isometricOffAxis2Right")]
IsometricOffAxis2Right,
///<summary>
///Isometric Off Axis 2 Top.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis2Top".</para>
///</summary>
[EnumString("isometricOffAxis2Top")]
IsometricOffAxis2Top,
///<summary>
///Isometric Off Axis 3 Left.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Left".</para>
///</summary>
[EnumString("isometricOffAxis3Left")]
IsometricOffAxis3Left,
///<summary>
///Isometric Off Axis 3 Right.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Right".</para>
///</summary>
[EnumString("isometricOffAxis3Right")]
IsometricOffAxis3Right,
///<summary>
///Isometric Off Axis 3 Bottom.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis3Bottom".</para>
///</summary>
[EnumString("isometricOffAxis3Bottom")]
IsometricOffAxis3Bottom,
///<summary>
///Isometric Off Axis 4 Left.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Left".</para>
///</summary>
[EnumString("isometricOffAxis4Left")]
IsometricOffAxis4Left,
///<summary>
///Isometric Off Axis 4 Right.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Right".</para>
///</summary>
[EnumString("isometricOffAxis4Right")]
IsometricOffAxis4Right,
///<summary>
///Isometric Off Axis 4 Bottom.
///<para>When the item is serialized out as xml, its value is "isometricOffAxis4Bottom".</para>
///</summary>
[EnumString("isometricOffAxis4Bottom")]
IsometricOffAxis4Bottom,
///<summary>
///Oblique Top Left.
///<para>When the item is serialized out as xml, its value is "obliqueTopLeft".</para>
///</summary>
[EnumString("obliqueTopLeft")]
ObliqueTopLeft,
///<summary>
///Oblique Top.
///<para>When the item is serialized out as xml, its value is "obliqueTop".</para>
///</summary>
[EnumString("obliqueTop")]
ObliqueTop,
///<summary>
///Oblique Top Right.
///<para>When the item is serialized out as xml, its value is "obliqueTopRight".</para>
///</summary>
[EnumString("obliqueTopRight")]
ObliqueTopRight,
///<summary>
///Oblique Left.
///<para>When the item is serialized out as xml, its value is "obliqueLeft".</para>
///</summary>
[EnumString("obliqueLeft")]
ObliqueLeft,
///<summary>
///Oblique Right.
///<para>When the item is serialized out as xml, its value is "obliqueRight".</para>
///</summary>
[EnumString("obliqueRight")]
ObliqueRight,
///<summary>
///Oblique Bottom Left.
///<para>When the item is serialized out as xml, its value is "obliqueBottomLeft".</para>
///</summary>
[EnumString("obliqueBottomLeft")]
ObliqueBottomLeft,
///<summary>
///Oblique Bottom.
///<para>When the item is serialized out as xml, its value is "obliqueBottom".</para>
///</summary>
[EnumString("obliqueBottom")]
ObliqueBottom,
///<summary>
///Oblique Bottom Right.
///<para>When the item is serialized out as xml, its value is "obliqueBottomRight".</para>
///</summary>
[EnumString("obliqueBottomRight")]
ObliqueBottomRight,
///<summary>
///Perspective Front.
///<para>When the item is serialized out as xml, its value is "perspectiveFront".</para>
///</summary>
[EnumString("perspectiveFront")]
PerspectiveFront,
///<summary>
///Perspective Left.
///<para>When the item is serialized out as xml, its value is "perspectiveLeft".</para>
///</summary>
[EnumString("perspectiveLeft")]
PerspectiveLeft,
///<summary>
///Perspective Right.
///<para>When the item is serialized out as xml, its value is "perspectiveRight".</para>
///</summary>
[EnumString("perspectiveRight")]
PerspectiveRight,
///<summary>
///Orthographic Above.
///<para>When the item is serialized out as xml, its value is "perspectiveAbove".</para>
///</summary>
[EnumString("perspectiveAbove")]
PerspectiveAbove,
///<summary>
///Perspective Below.
///<para>When the item is serialized out as xml, its value is "perspectiveBelow".</para>
///</summary>
[EnumString("perspectiveBelow")]
PerspectiveBelow,
///<summary>
///Perspective Above Left Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveAboveLeftFacing".</para>
///</summary>
[EnumString("perspectiveAboveLeftFacing")]
PerspectiveAboveLeftFacing,
///<summary>
///Perspective Above Right Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveAboveRightFacing".</para>
///</summary>
[EnumString("perspectiveAboveRightFacing")]
PerspectiveAboveRightFacing,
///<summary>
///Perspective Contrasting Left Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveContrastingLeftFacing".</para>
///</summary>
[EnumString("perspectiveContrastingLeftFacing")]
PerspectiveContrastingLeftFacing,
///<summary>
///Perspective Contrasting Right Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveContrastingRightFacing".</para>
///</summary>
[EnumString("perspectiveContrastingRightFacing")]
PerspectiveContrastingRightFacing,
///<summary>
///Perspective Heroic Left Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveHeroicLeftFacing".</para>
///</summary>
[EnumString("perspectiveHeroicLeftFacing")]
PerspectiveHeroicLeftFacing,
///<summary>
///Perspective Heroic Right Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveHeroicRightFacing".</para>
///</summary>
[EnumString("perspectiveHeroicRightFacing")]
PerspectiveHeroicRightFacing,
///<summary>
///Perspective Heroic Extreme Left Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeLeftFacing".</para>
///</summary>
[EnumString("perspectiveHeroicExtremeLeftFacing")]
PerspectiveHeroicExtremeLeftFacing,
///<summary>
///Perspective Heroic Extreme Right Facing.
///<para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeRightFacing".</para>
///</summary>
[EnumString("perspectiveHeroicExtremeRightFacing")]
PerspectiveHeroicExtremeRightFacing,
///<summary>
///Perspective Relaxed.
///<para>When the item is serialized out as xml, its value is "perspectiveRelaxed".</para>
///</summary>
[EnumString("perspectiveRelaxed")]
PerspectiveRelaxed,
///<summary>
///Perspective Relaxed Moderately.
///<para>When the item is serialized out as xml, its value is "perspectiveRelaxedModerately".</para>
///</summary>
[EnumString("perspectiveRelaxedModerately")]
PerspectiveRelaxedModerately,
 
}
/// <summary>
/// Light Rig Direction 
/// </summary> 
public enum LightRigDirectionValues
{  
	///<summary>
///Top Left.
///<para>When the item is serialized out as xml, its value is "tl".</para>
///</summary>
[EnumString("tl")]
TopLeft,
///<summary>
///Top.
///<para>When the item is serialized out as xml, its value is "t".</para>
///</summary>
[EnumString("t")]
Top,
///<summary>
///Top Right.
///<para>When the item is serialized out as xml, its value is "tr".</para>
///</summary>
[EnumString("tr")]
TopRight,
///<summary>
///Left.
///<para>When the item is serialized out as xml, its value is "l".</para>
///</summary>
[EnumString("l")]
Left,
///<summary>
///Right.
///<para>When the item is serialized out as xml, its value is "r".</para>
///</summary>
[EnumString("r")]
Right,
///<summary>
///Bottom Left.
///<para>When the item is serialized out as xml, its value is "bl".</para>
///</summary>
[EnumString("bl")]
BottomLeft,
///<summary>
///Bottom.
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Bottom,
///<summary>
///Bottom Right.
///<para>When the item is serialized out as xml, its value is "br".</para>
///</summary>
[EnumString("br")]
BottomRight,
 
}
/// <summary>
/// Light Rig Type 
/// </summary> 
public enum LightRigValues
{  
	///<summary>
///Legacy Flat 1.
///<para>When the item is serialized out as xml, its value is "legacyFlat1".</para>
///</summary>
[EnumString("legacyFlat1")]
LegacyFlat1,
///<summary>
///Legacy Flat 2.
///<para>When the item is serialized out as xml, its value is "legacyFlat2".</para>
///</summary>
[EnumString("legacyFlat2")]
LegacyFlat2,
///<summary>
///Legacy Flat 3.
///<para>When the item is serialized out as xml, its value is "legacyFlat3".</para>
///</summary>
[EnumString("legacyFlat3")]
LegacyFlat3,
///<summary>
///Legacy Flat 4.
///<para>When the item is serialized out as xml, its value is "legacyFlat4".</para>
///</summary>
[EnumString("legacyFlat4")]
LegacyFlat4,
///<summary>
///Legacy Normal 1.
///<para>When the item is serialized out as xml, its value is "legacyNormal1".</para>
///</summary>
[EnumString("legacyNormal1")]
LegacyNormal1,
///<summary>
///Legacy Normal 2.
///<para>When the item is serialized out as xml, its value is "legacyNormal2".</para>
///</summary>
[EnumString("legacyNormal2")]
LegacyNormal2,
///<summary>
///Legacy Normal 3.
///<para>When the item is serialized out as xml, its value is "legacyNormal3".</para>
///</summary>
[EnumString("legacyNormal3")]
LegacyNormal3,
///<summary>
///Legacy Normal 4.
///<para>When the item is serialized out as xml, its value is "legacyNormal4".</para>
///</summary>
[EnumString("legacyNormal4")]
LegacyNormal4,
///<summary>
///Legacy Harsh 1.
///<para>When the item is serialized out as xml, its value is "legacyHarsh1".</para>
///</summary>
[EnumString("legacyHarsh1")]
LegacyHarsh1,
///<summary>
///Legacy Harsh 2.
///<para>When the item is serialized out as xml, its value is "legacyHarsh2".</para>
///</summary>
[EnumString("legacyHarsh2")]
LegacyHarsh2,
///<summary>
///Legacy Harsh 3.
///<para>When the item is serialized out as xml, its value is "legacyHarsh3".</para>
///</summary>
[EnumString("legacyHarsh3")]
LegacyHarsh3,
///<summary>
///Legacy Harsh 4.
///<para>When the item is serialized out as xml, its value is "legacyHarsh4".</para>
///</summary>
[EnumString("legacyHarsh4")]
LegacyHarsh4,
///<summary>
///Three Point.
///<para>When the item is serialized out as xml, its value is "threePt".</para>
///</summary>
[EnumString("threePt")]
ThreePoints,
///<summary>
///Light Rig Enum ( Balanced ).
///<para>When the item is serialized out as xml, its value is "balanced".</para>
///</summary>
[EnumString("balanced")]
Balanced,
///<summary>
///Soft.
///<para>When the item is serialized out as xml, its value is "soft".</para>
///</summary>
[EnumString("soft")]
Soft,
///<summary>
///Harsh.
///<para>When the item is serialized out as xml, its value is "harsh".</para>
///</summary>
[EnumString("harsh")]
Harsh,
///<summary>
///Flood.
///<para>When the item is serialized out as xml, its value is "flood".</para>
///</summary>
[EnumString("flood")]
Flood,
///<summary>
///Contrasting.
///<para>When the item is serialized out as xml, its value is "contrasting".</para>
///</summary>
[EnumString("contrasting")]
Contrasting,
///<summary>
///Morning.
///<para>When the item is serialized out as xml, its value is "morning".</para>
///</summary>
[EnumString("morning")]
Morning,
///<summary>
///Sunrise.
///<para>When the item is serialized out as xml, its value is "sunrise".</para>
///</summary>
[EnumString("sunrise")]
Sunrise,
///<summary>
///Sunset.
///<para>When the item is serialized out as xml, its value is "sunset".</para>
///</summary>
[EnumString("sunset")]
Sunset,
///<summary>
///Chilly.
///<para>When the item is serialized out as xml, its value is "chilly".</para>
///</summary>
[EnumString("chilly")]
Chilly,
///<summary>
///Freezing.
///<para>When the item is serialized out as xml, its value is "freezing".</para>
///</summary>
[EnumString("freezing")]
Freezing,
///<summary>
///Flat.
///<para>When the item is serialized out as xml, its value is "flat".</para>
///</summary>
[EnumString("flat")]
Flat,
///<summary>
///Two Point.
///<para>When the item is serialized out as xml, its value is "twoPt".</para>
///</summary>
[EnumString("twoPt")]
TwoPoints,
///<summary>
///Glow.
///<para>When the item is serialized out as xml, its value is "glow".</para>
///</summary>
[EnumString("glow")]
Glow,
///<summary>
///Bright Room.
///<para>When the item is serialized out as xml, its value is "brightRoom".</para>
///</summary>
[EnumString("brightRoom")]
BrightRoom,
 
}
/// <summary>
/// Bevel Presets 
/// </summary> 
public enum BevelPresetValues
{  
	///<summary>
///Relaxed Inset.
///<para>When the item is serialized out as xml, its value is "relaxedInset".</para>
///</summary>
[EnumString("relaxedInset")]
RelaxedInset,
///<summary>
///Circle.
///<para>When the item is serialized out as xml, its value is "circle".</para>
///</summary>
[EnumString("circle")]
Circle,
///<summary>
///Slope.
///<para>When the item is serialized out as xml, its value is "slope".</para>
///</summary>
[EnumString("slope")]
Slope,
///<summary>
///Cross.
///<para>When the item is serialized out as xml, its value is "cross".</para>
///</summary>
[EnumString("cross")]
Cross,
///<summary>
///Angle.
///<para>When the item is serialized out as xml, its value is "angle".</para>
///</summary>
[EnumString("angle")]
Angle,
///<summary>
///Soft Round.
///<para>When the item is serialized out as xml, its value is "softRound".</para>
///</summary>
[EnumString("softRound")]
SoftRound,
///<summary>
///Convex.
///<para>When the item is serialized out as xml, its value is "convex".</para>
///</summary>
[EnumString("convex")]
Convex,
///<summary>
///Cool Slant.
///<para>When the item is serialized out as xml, its value is "coolSlant".</para>
///</summary>
[EnumString("coolSlant")]
CoolSlant,
///<summary>
///Divot.
///<para>When the item is serialized out as xml, its value is "divot".</para>
///</summary>
[EnumString("divot")]
Divot,
///<summary>
///Riblet.
///<para>When the item is serialized out as xml, its value is "riblet".</para>
///</summary>
[EnumString("riblet")]
Riblet,
///<summary>
///Hard Edge.
///<para>When the item is serialized out as xml, its value is "hardEdge".</para>
///</summary>
[EnumString("hardEdge")]
HardEdge,
///<summary>
///Art Deco.
///<para>When the item is serialized out as xml, its value is "artDeco".</para>
///</summary>
[EnumString("artDeco")]
ArtDeco,
 
}
/// <summary>
/// Preset Material Type 
/// </summary> 
public enum PresetMaterialTypeValues
{  
	///<summary>
///Legacy Matte.
///<para>When the item is serialized out as xml, its value is "legacyMatte".</para>
///</summary>
[EnumString("legacyMatte")]
LegacyMatte,
///<summary>
///Legacy Plastic.
///<para>When the item is serialized out as xml, its value is "legacyPlastic".</para>
///</summary>
[EnumString("legacyPlastic")]
LegacyPlastic,
///<summary>
///Legacy Metal.
///<para>When the item is serialized out as xml, its value is "legacyMetal".</para>
///</summary>
[EnumString("legacyMetal")]
LegacyMetal,
///<summary>
///Legacy Wireframe.
///<para>When the item is serialized out as xml, its value is "legacyWireframe".</para>
///</summary>
[EnumString("legacyWireframe")]
LegacyWireframe,
///<summary>
///Matte.
///<para>When the item is serialized out as xml, its value is "matte".</para>
///</summary>
[EnumString("matte")]
Matte,
///<summary>
///Plastic.
///<para>When the item is serialized out as xml, its value is "plastic".</para>
///</summary>
[EnumString("plastic")]
Plastic,
///<summary>
///Metal.
///<para>When the item is serialized out as xml, its value is "metal".</para>
///</summary>
[EnumString("metal")]
Metal,
///<summary>
///Warm Matte.
///<para>When the item is serialized out as xml, its value is "warmMatte".</para>
///</summary>
[EnumString("warmMatte")]
WarmMatte,
///<summary>
///Translucent Powder.
///<para>When the item is serialized out as xml, its value is "translucentPowder".</para>
///</summary>
[EnumString("translucentPowder")]
TranslucentPowder,
///<summary>
///Powder.
///<para>When the item is serialized out as xml, its value is "powder".</para>
///</summary>
[EnumString("powder")]
Powder,
///<summary>
///Dark Edge.
///<para>When the item is serialized out as xml, its value is "dkEdge".</para>
///</summary>
[EnumString("dkEdge")]
DarkEdge,
///<summary>
///Soft Edge.
///<para>When the item is serialized out as xml, its value is "softEdge".</para>
///</summary>
[EnumString("softEdge")]
SoftEdge,
///<summary>
///Clear.
///<para>When the item is serialized out as xml, its value is "clear".</para>
///</summary>
[EnumString("clear")]
Clear,
///<summary>
///Flat.
///<para>When the item is serialized out as xml, its value is "flat".</para>
///</summary>
[EnumString("flat")]
Flat,
///<summary>
///Soft Metal.
///<para>When the item is serialized out as xml, its value is "softmetal".</para>
///</summary>
[EnumString("softmetal")]
SoftMetal,
 
}
/// <summary>
/// Preset Shadow Type 
/// </summary> 
public enum PresetShadowValues
{  
	///<summary>
///Top Left Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw1".</para>
///</summary>
[EnumString("shdw1")]
TopLeftDropShadow,
///<summary>
///Top Right Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw2".</para>
///</summary>
[EnumString("shdw2")]
TopRightDropShadow,
///<summary>
///Back Left Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw3".</para>
///</summary>
[EnumString("shdw3")]
BackLeftPerspectiveShadow,
///<summary>
///Back Right Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw4".</para>
///</summary>
[EnumString("shdw4")]
BackRightPerspectiveShadow,
///<summary>
///Bottom Left Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw5".</para>
///</summary>
[EnumString("shdw5")]
BottomLeftDropShadow,
///<summary>
///Bottom Right Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw6".</para>
///</summary>
[EnumString("shdw6")]
BottomRightDropShadow,
///<summary>
///Front Left Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw7".</para>
///</summary>
[EnumString("shdw7")]
FrontLeftPerspectiveShadow,
///<summary>
///Front Right Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw8".</para>
///</summary>
[EnumString("shdw8")]
FrontRightPerspectiveShadow,
///<summary>
///Top Left Small Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw9".</para>
///</summary>
[EnumString("shdw9")]
TopLeftSmallDropShadow,
///<summary>
///Top Left Large Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw10".</para>
///</summary>
[EnumString("shdw10")]
TopLeftLargeDropShadow,
///<summary>
///Back Left Long Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw11".</para>
///</summary>
[EnumString("shdw11")]
BackLeftLongPerspectiveShadow,
///<summary>
///Back Right Long Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw12".</para>
///</summary>
[EnumString("shdw12")]
BackRightLongPerspectiveShadow,
///<summary>
///Top Left Double Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw13".</para>
///</summary>
[EnumString("shdw13")]
TopLeftDoubleDropShadow,
///<summary>
///Bottom Right Small Drop Shadow.
///<para>When the item is serialized out as xml, its value is "shdw14".</para>
///</summary>
[EnumString("shdw14")]
BottomRightSmallDropShadow,
///<summary>
///Front Left Long Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw15".</para>
///</summary>
[EnumString("shdw15")]
FrontLeftLongPerspectiveShadow,
///<summary>
///Front Right LongPerspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw16".</para>
///</summary>
[EnumString("shdw16")]
FrontRightLongPerspectiveShadow,
///<summary>
///3D Outer Box Shadow.
///<para>When the item is serialized out as xml, its value is "shdw17".</para>
///</summary>
[EnumString("shdw17")]
ThreeDimensionalOuterBoxShadow,
///<summary>
///3D Inner Box Shadow.
///<para>When the item is serialized out as xml, its value is "shdw18".</para>
///</summary>
[EnumString("shdw18")]
ThreeDimensionalInnerBoxShadow,
///<summary>
///Back Center Perspective Shadow.
///<para>When the item is serialized out as xml, its value is "shdw19".</para>
///</summary>
[EnumString("shdw19")]
BackCenterPerspectiveShadow,
///<summary>
///Front Bottom Shadow.
///<para>When the item is serialized out as xml, its value is "shdw20".</para>
///</summary>
[EnumString("shdw20")]
FrontBottomShadow,
 
}
/// <summary>
/// Path Shade Type 
/// </summary> 
public enum PathShadeValues
{  
	///<summary>
///Shape.
///<para>When the item is serialized out as xml, its value is "shape".</para>
///</summary>
[EnumString("shape")]
Shape,
///<summary>
///Circle.
///<para>When the item is serialized out as xml, its value is "circle".</para>
///</summary>
[EnumString("circle")]
Circle,
///<summary>
///Rectangle.
///<para>When the item is serialized out as xml, its value is "rect".</para>
///</summary>
[EnumString("rect")]
Rectangle,
 
}
/// <summary>
/// Tile Flip Mode 
/// </summary> 
public enum TileFlipValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Horizontal.
///<para>When the item is serialized out as xml, its value is "x".</para>
///</summary>
[EnumString("x")]
Horizontal,
///<summary>
///Vertical.
///<para>When the item is serialized out as xml, its value is "y".</para>
///</summary>
[EnumString("y")]
Vertical,
///<summary>
///Horizontal and Vertical.
///<para>When the item is serialized out as xml, its value is "xy".</para>
///</summary>
[EnumString("xy")]
HorizontalAndVertical,
 
}
/// <summary>
/// Blip Compression Type 
/// </summary> 
public enum BlipCompressionValues
{  
	///<summary>
///Email Compression.
///<para>When the item is serialized out as xml, its value is "email".</para>
///</summary>
[EnumString("email")]
Email,
///<summary>
///Screen Viewing Compression.
///<para>When the item is serialized out as xml, its value is "screen".</para>
///</summary>
[EnumString("screen")]
Screen,
///<summary>
///Printing Compression.
///<para>When the item is serialized out as xml, its value is "print".</para>
///</summary>
[EnumString("print")]
Print,
///<summary>
///High Quality Printing Compression.
///<para>When the item is serialized out as xml, its value is "hqprint".</para>
///</summary>
[EnumString("hqprint")]
HighQualityPrint,
///<summary>
///No Compression.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// Preset Pattern Value 
/// </summary> 
public enum PresetPatternValues
{  
	///<summary>
///5%.
///<para>When the item is serialized out as xml, its value is "pct5".</para>
///</summary>
[EnumString("pct5")]
Percent5,
///<summary>
///10%.
///<para>When the item is serialized out as xml, its value is "pct10".</para>
///</summary>
[EnumString("pct10")]
Percent10,
///<summary>
///20%.
///<para>When the item is serialized out as xml, its value is "pct20".</para>
///</summary>
[EnumString("pct20")]
Percent20,
///<summary>
///25%.
///<para>When the item is serialized out as xml, its value is "pct25".</para>
///</summary>
[EnumString("pct25")]
Percent25,
///<summary>
///30%.
///<para>When the item is serialized out as xml, its value is "pct30".</para>
///</summary>
[EnumString("pct30")]
Percent30,
///<summary>
///40%.
///<para>When the item is serialized out as xml, its value is "pct40".</para>
///</summary>
[EnumString("pct40")]
Percent40,
///<summary>
///50%.
///<para>When the item is serialized out as xml, its value is "pct50".</para>
///</summary>
[EnumString("pct50")]
Percent50,
///<summary>
///60%.
///<para>When the item is serialized out as xml, its value is "pct60".</para>
///</summary>
[EnumString("pct60")]
Percent60,
///<summary>
///70%.
///<para>When the item is serialized out as xml, its value is "pct70".</para>
///</summary>
[EnumString("pct70")]
Percent70,
///<summary>
///75%.
///<para>When the item is serialized out as xml, its value is "pct75".</para>
///</summary>
[EnumString("pct75")]
Percent75,
///<summary>
///80%.
///<para>When the item is serialized out as xml, its value is "pct80".</para>
///</summary>
[EnumString("pct80")]
Percent80,
///<summary>
///90%.
///<para>When the item is serialized out as xml, its value is "pct90".</para>
///</summary>
[EnumString("pct90")]
Percent90,
///<summary>
///Horizontal.
///<para>When the item is serialized out as xml, its value is "horz".</para>
///</summary>
[EnumString("horz")]
Horizontal,
///<summary>
///Vertical.
///<para>When the item is serialized out as xml, its value is "vert".</para>
///</summary>
[EnumString("vert")]
Vertical,
///<summary>
///Light Horizontal.
///<para>When the item is serialized out as xml, its value is "ltHorz".</para>
///</summary>
[EnumString("ltHorz")]
LightHorizontal,
///<summary>
///Light Vertical.
///<para>When the item is serialized out as xml, its value is "ltVert".</para>
///</summary>
[EnumString("ltVert")]
LightVertical,
///<summary>
///Dark Horizontal.
///<para>When the item is serialized out as xml, its value is "dkHorz".</para>
///</summary>
[EnumString("dkHorz")]
DarkHorizontal,
///<summary>
///Dark Vertical.
///<para>When the item is serialized out as xml, its value is "dkVert".</para>
///</summary>
[EnumString("dkVert")]
DarkVertical,
///<summary>
///Narrow Horizontal.
///<para>When the item is serialized out as xml, its value is "narHorz".</para>
///</summary>
[EnumString("narHorz")]
NarrowHorizontal,
///<summary>
///Narrow Vertical.
///<para>When the item is serialized out as xml, its value is "narVert".</para>
///</summary>
[EnumString("narVert")]
NarrowVertical,
///<summary>
///Dashed Horizontal.
///<para>When the item is serialized out as xml, its value is "dashHorz".</para>
///</summary>
[EnumString("dashHorz")]
DashedHorizontal,
///<summary>
///Dashed Vertical.
///<para>When the item is serialized out as xml, its value is "dashVert".</para>
///</summary>
[EnumString("dashVert")]
DashedVertical,
///<summary>
///Cross.
///<para>When the item is serialized out as xml, its value is "cross".</para>
///</summary>
[EnumString("cross")]
Cross,
///<summary>
///Downward Diagonal.
///<para>When the item is serialized out as xml, its value is "dnDiag".</para>
///</summary>
[EnumString("dnDiag")]
DownwardDiagonal,
///<summary>
///Upward Diagonal.
///<para>When the item is serialized out as xml, its value is "upDiag".</para>
///</summary>
[EnumString("upDiag")]
UpwardDiagonal,
///<summary>
///Light Downward Diagonal.
///<para>When the item is serialized out as xml, its value is "ltDnDiag".</para>
///</summary>
[EnumString("ltDnDiag")]
LightDownwardDiagonal,
///<summary>
///Light Upward Diagonal.
///<para>When the item is serialized out as xml, its value is "ltUpDiag".</para>
///</summary>
[EnumString("ltUpDiag")]
LightUpwardDiagonal,
///<summary>
///Dark Downward Diagonal.
///<para>When the item is serialized out as xml, its value is "dkDnDiag".</para>
///</summary>
[EnumString("dkDnDiag")]
DarkDownwardDiagonal,
///<summary>
///Dark Upward Diagonal.
///<para>When the item is serialized out as xml, its value is "dkUpDiag".</para>
///</summary>
[EnumString("dkUpDiag")]
DarkUpwardDiagonal,
///<summary>
///Wide Downward Diagonal.
///<para>When the item is serialized out as xml, its value is "wdDnDiag".</para>
///</summary>
[EnumString("wdDnDiag")]
WideDownwardDiagonal,
///<summary>
///Wide Upward Diagonal.
///<para>When the item is serialized out as xml, its value is "wdUpDiag".</para>
///</summary>
[EnumString("wdUpDiag")]
WideUpwardDiagonal,
///<summary>
///Dashed Downward Diagonal.
///<para>When the item is serialized out as xml, its value is "dashDnDiag".</para>
///</summary>
[EnumString("dashDnDiag")]
DashedDownwardDiagonal,
///<summary>
///Dashed Upward DIagonal.
///<para>When the item is serialized out as xml, its value is "dashUpDiag".</para>
///</summary>
[EnumString("dashUpDiag")]
DashedUpwardDiagonal,
///<summary>
///Diagonal Cross.
///<para>When the item is serialized out as xml, its value is "diagCross".</para>
///</summary>
[EnumString("diagCross")]
DiagonalCross,
///<summary>
///Small Checker Board.
///<para>When the item is serialized out as xml, its value is "smCheck".</para>
///</summary>
[EnumString("smCheck")]
SmallCheck,
///<summary>
///Large Checker Board.
///<para>When the item is serialized out as xml, its value is "lgCheck".</para>
///</summary>
[EnumString("lgCheck")]
LargeCheck,
///<summary>
///Small Grid.
///<para>When the item is serialized out as xml, its value is "smGrid".</para>
///</summary>
[EnumString("smGrid")]
SmallGrid,
///<summary>
///Large Grid.
///<para>When the item is serialized out as xml, its value is "lgGrid".</para>
///</summary>
[EnumString("lgGrid")]
LargeGrid,
///<summary>
///Dotted Grid.
///<para>When the item is serialized out as xml, its value is "dotGrid".</para>
///</summary>
[EnumString("dotGrid")]
DotGrid,
///<summary>
///Small Confetti.
///<para>When the item is serialized out as xml, its value is "smConfetti".</para>
///</summary>
[EnumString("smConfetti")]
SmallConfetti,
///<summary>
///Large Confetti.
///<para>When the item is serialized out as xml, its value is "lgConfetti".</para>
///</summary>
[EnumString("lgConfetti")]
LargeConfetti,
///<summary>
///Horizontal Brick.
///<para>When the item is serialized out as xml, its value is "horzBrick".</para>
///</summary>
[EnumString("horzBrick")]
HorizontalBrick,
///<summary>
///Diagonal Brick.
///<para>When the item is serialized out as xml, its value is "diagBrick".</para>
///</summary>
[EnumString("diagBrick")]
DiagonalBrick,
///<summary>
///Solid Diamond.
///<para>When the item is serialized out as xml, its value is "solidDmnd".</para>
///</summary>
[EnumString("solidDmnd")]
SolidDiamond,
///<summary>
///Open Diamond.
///<para>When the item is serialized out as xml, its value is "openDmnd".</para>
///</summary>
[EnumString("openDmnd")]
OpenDiamond,
///<summary>
///Dotted Diamond.
///<para>When the item is serialized out as xml, its value is "dotDmnd".</para>
///</summary>
[EnumString("dotDmnd")]
DottedDiamond,
///<summary>
///Plaid.
///<para>When the item is serialized out as xml, its value is "plaid".</para>
///</summary>
[EnumString("plaid")]
Plaid,
///<summary>
///Sphere.
///<para>When the item is serialized out as xml, its value is "sphere".</para>
///</summary>
[EnumString("sphere")]
Sphere,
///<summary>
///Weave.
///<para>When the item is serialized out as xml, its value is "weave".</para>
///</summary>
[EnumString("weave")]
Weave,
///<summary>
///Divot.
///<para>When the item is serialized out as xml, its value is "divot".</para>
///</summary>
[EnumString("divot")]
Divot,
///<summary>
///Shingle.
///<para>When the item is serialized out as xml, its value is "shingle".</para>
///</summary>
[EnumString("shingle")]
Shingle,
///<summary>
///Wave.
///<para>When the item is serialized out as xml, its value is "wave".</para>
///</summary>
[EnumString("wave")]
Wave,
///<summary>
///Trellis.
///<para>When the item is serialized out as xml, its value is "trellis".</para>
///</summary>
[EnumString("trellis")]
Trellis,
///<summary>
///Zig Zag.
///<para>When the item is serialized out as xml, its value is "zigZag".</para>
///</summary>
[EnumString("zigZag")]
ZigZag,
 
}
/// <summary>
/// Blend Mode 
/// </summary> 
public enum BlendModeValues
{  
	///<summary>
///Overlay.
///<para>When the item is serialized out as xml, its value is "over".</para>
///</summary>
[EnumString("over")]
Overlay,
///<summary>
///Multiply.
///<para>When the item is serialized out as xml, its value is "mult".</para>
///</summary>
[EnumString("mult")]
Multiply,
///<summary>
///Screen.
///<para>When the item is serialized out as xml, its value is "screen".</para>
///</summary>
[EnumString("screen")]
Screen,
///<summary>
///Darken.
///<para>When the item is serialized out as xml, its value is "darken".</para>
///</summary>
[EnumString("darken")]
Darken,
///<summary>
///Lighten.
///<para>When the item is serialized out as xml, its value is "lighten".</para>
///</summary>
[EnumString("lighten")]
Lighten,
 
}
/// <summary>
/// Effect Container Type 
/// </summary> 
public enum EffectContainerValues
{  
	///<summary>
///Sibling.
///<para>When the item is serialized out as xml, its value is "sib".</para>
///</summary>
[EnumString("sib")]
Sibling,
///<summary>
///Tree.
///<para>When the item is serialized out as xml, its value is "tree".</para>
///</summary>
[EnumString("tree")]
Tree,
 
}
/// <summary>
/// Preset Shape Types 
/// </summary> 
public enum ShapeTypeValues
{  
	///<summary>
///Line Shape.
///<para>When the item is serialized out as xml, its value is "line".</para>
///</summary>
[EnumString("line")]
Line,
///<summary>
///Line Inverse Shape.
///<para>When the item is serialized out as xml, its value is "lineInv".</para>
///</summary>
[EnumString("lineInv")]
LineInverse,
///<summary>
///Triangle Shape.
///<para>When the item is serialized out as xml, its value is "triangle".</para>
///</summary>
[EnumString("triangle")]
Triangle,
///<summary>
///Right Triangle Shape.
///<para>When the item is serialized out as xml, its value is "rtTriangle".</para>
///</summary>
[EnumString("rtTriangle")]
RightTriangle,
///<summary>
///Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "rect".</para>
///</summary>
[EnumString("rect")]
Rectangle,
///<summary>
///Diamond Shape.
///<para>When the item is serialized out as xml, its value is "diamond".</para>
///</summary>
[EnumString("diamond")]
Diamond,
///<summary>
///Parallelogram Shape.
///<para>When the item is serialized out as xml, its value is "parallelogram".</para>
///</summary>
[EnumString("parallelogram")]
Parallelogram,
///<summary>
///Trapezoid Shape.
///<para>When the item is serialized out as xml, its value is "trapezoid".</para>
///</summary>
[EnumString("trapezoid")]
Trapezoid,
///<summary>
///Non-Isosceles Trapezoid Shape.
///<para>When the item is serialized out as xml, its value is "nonIsoscelesTrapezoid".</para>
///</summary>
[EnumString("nonIsoscelesTrapezoid")]
NonIsoscelesTrapezoid,
///<summary>
///Pentagon Shape.
///<para>When the item is serialized out as xml, its value is "pentagon".</para>
///</summary>
[EnumString("pentagon")]
Pentagon,
///<summary>
///Hexagon Shape.
///<para>When the item is serialized out as xml, its value is "hexagon".</para>
///</summary>
[EnumString("hexagon")]
Hexagon,
///<summary>
///Heptagon Shape.
///<para>When the item is serialized out as xml, its value is "heptagon".</para>
///</summary>
[EnumString("heptagon")]
Heptagon,
///<summary>
///Octagon Shape.
///<para>When the item is serialized out as xml, its value is "octagon".</para>
///</summary>
[EnumString("octagon")]
Octagon,
///<summary>
///Decagon Shape.
///<para>When the item is serialized out as xml, its value is "decagon".</para>
///</summary>
[EnumString("decagon")]
Decagon,
///<summary>
///Dodecagon Shape.
///<para>When the item is serialized out as xml, its value is "dodecagon".</para>
///</summary>
[EnumString("dodecagon")]
Dodecagon,
///<summary>
///Four Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star4".</para>
///</summary>
[EnumString("star4")]
Star4,
///<summary>
///Five Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star5".</para>
///</summary>
[EnumString("star5")]
Star5,
///<summary>
///Six Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star6".</para>
///</summary>
[EnumString("star6")]
Star6,
///<summary>
///Seven Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star7".</para>
///</summary>
[EnumString("star7")]
Star7,
///<summary>
///Eight Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star8".</para>
///</summary>
[EnumString("star8")]
Star8,
///<summary>
///Ten Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star10".</para>
///</summary>
[EnumString("star10")]
Star10,
///<summary>
///Twelve Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star12".</para>
///</summary>
[EnumString("star12")]
Star12,
///<summary>
///Sixteen Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star16".</para>
///</summary>
[EnumString("star16")]
Star16,
///<summary>
///Twenty Four Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star24".</para>
///</summary>
[EnumString("star24")]
Star24,
///<summary>
///Thirty Two Pointed Star Shape.
///<para>When the item is serialized out as xml, its value is "star32".</para>
///</summary>
[EnumString("star32")]
Star32,
///<summary>
///Round Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "roundRect".</para>
///</summary>
[EnumString("roundRect")]
RoundRectangle,
///<summary>
///One Round Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "round1Rect".</para>
///</summary>
[EnumString("round1Rect")]
Round1Rectangle,
///<summary>
///Two Same-side Round Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "round2SameRect".</para>
///</summary>
[EnumString("round2SameRect")]
Round2SameRectangle,
///<summary>
///Two Diagonal Round Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "round2DiagRect".</para>
///</summary>
[EnumString("round2DiagRect")]
Round2DiagonalRectangle,
///<summary>
///One Snip One Round Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "snipRoundRect".</para>
///</summary>
[EnumString("snipRoundRect")]
SnipRoundRectangle,
///<summary>
///One Snip Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "snip1Rect".</para>
///</summary>
[EnumString("snip1Rect")]
Snip1Rectangle,
///<summary>
///Two Same-side Snip Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "snip2SameRect".</para>
///</summary>
[EnumString("snip2SameRect")]
Snip2SameRectangle,
///<summary>
///Two Diagonal Snip Corner Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "snip2DiagRect".</para>
///</summary>
[EnumString("snip2DiagRect")]
Snip2DiagonalRectangle,
///<summary>
///Plaque Shape.
///<para>When the item is serialized out as xml, its value is "plaque".</para>
///</summary>
[EnumString("plaque")]
Plaque,
///<summary>
///Ellipse Shape.
///<para>When the item is serialized out as xml, its value is "ellipse".</para>
///</summary>
[EnumString("ellipse")]
Ellipse,
///<summary>
///Teardrop Shape.
///<para>When the item is serialized out as xml, its value is "teardrop".</para>
///</summary>
[EnumString("teardrop")]
Teardrop,
///<summary>
///Home Plate Shape.
///<para>When the item is serialized out as xml, its value is "homePlate".</para>
///</summary>
[EnumString("homePlate")]
HomePlate,
///<summary>
///Chevron Shape.
///<para>When the item is serialized out as xml, its value is "chevron".</para>
///</summary>
[EnumString("chevron")]
Chevron,
///<summary>
///Pie Wedge Shape.
///<para>When the item is serialized out as xml, its value is "pieWedge".</para>
///</summary>
[EnumString("pieWedge")]
PieWedge,
///<summary>
///Pie Shape.
///<para>When the item is serialized out as xml, its value is "pie".</para>
///</summary>
[EnumString("pie")]
Pie,
///<summary>
///Block Arc Shape.
///<para>When the item is serialized out as xml, its value is "blockArc".</para>
///</summary>
[EnumString("blockArc")]
BlockArc,
///<summary>
///Donut Shape.
///<para>When the item is serialized out as xml, its value is "donut".</para>
///</summary>
[EnumString("donut")]
Donut,
///<summary>
///No Smoking Shape.
///<para>When the item is serialized out as xml, its value is "noSmoking".</para>
///</summary>
[EnumString("noSmoking")]
NoSmoking,
///<summary>
///Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "rightArrow".</para>
///</summary>
[EnumString("rightArrow")]
RightArrow,
///<summary>
///Left Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftArrow".</para>
///</summary>
[EnumString("leftArrow")]
LeftArrow,
///<summary>
///Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "upArrow".</para>
///</summary>
[EnumString("upArrow")]
UpArrow,
///<summary>
///Down Arrow Shape.
///<para>When the item is serialized out as xml, its value is "downArrow".</para>
///</summary>
[EnumString("downArrow")]
DownArrow,
///<summary>
///Striped Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "stripedRightArrow".</para>
///</summary>
[EnumString("stripedRightArrow")]
StripedRightArrow,
///<summary>
///Notched Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "notchedRightArrow".</para>
///</summary>
[EnumString("notchedRightArrow")]
NotchedRightArrow,
///<summary>
///Bent Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "bentUpArrow".</para>
///</summary>
[EnumString("bentUpArrow")]
BentUpArrow,
///<summary>
///Left Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftRightArrow".</para>
///</summary>
[EnumString("leftRightArrow")]
LeftRightArrow,
///<summary>
///Up Down Arrow Shape.
///<para>When the item is serialized out as xml, its value is "upDownArrow".</para>
///</summary>
[EnumString("upDownArrow")]
UpDownArrow,
///<summary>
///Left Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftUpArrow".</para>
///</summary>
[EnumString("leftUpArrow")]
LeftUpArrow,
///<summary>
///Left Right Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftRightUpArrow".</para>
///</summary>
[EnumString("leftRightUpArrow")]
LeftRightUpArrow,
///<summary>
///Quad-Arrow Shape.
///<para>When the item is serialized out as xml, its value is "quadArrow".</para>
///</summary>
[EnumString("quadArrow")]
QuadArrow,
///<summary>
///Callout Left Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftArrowCallout".</para>
///</summary>
[EnumString("leftArrowCallout")]
LeftArrowCallout,
///<summary>
///Callout Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "rightArrowCallout".</para>
///</summary>
[EnumString("rightArrowCallout")]
RightArrowCallout,
///<summary>
///Callout Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "upArrowCallout".</para>
///</summary>
[EnumString("upArrowCallout")]
UpArrowCallout,
///<summary>
///Callout Down Arrow Shape.
///<para>When the item is serialized out as xml, its value is "downArrowCallout".</para>
///</summary>
[EnumString("downArrowCallout")]
DownArrowCallout,
///<summary>
///Callout Left Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftRightArrowCallout".</para>
///</summary>
[EnumString("leftRightArrowCallout")]
LeftRightArrowCallout,
///<summary>
///Callout Up Down Arrow Shape.
///<para>When the item is serialized out as xml, its value is "upDownArrowCallout".</para>
///</summary>
[EnumString("upDownArrowCallout")]
UpDownArrowCallout,
///<summary>
///Callout Quad-Arrow Shape.
///<para>When the item is serialized out as xml, its value is "quadArrowCallout".</para>
///</summary>
[EnumString("quadArrowCallout")]
QuadArrowCallout,
///<summary>
///Bent Arrow Shape.
///<para>When the item is serialized out as xml, its value is "bentArrow".</para>
///</summary>
[EnumString("bentArrow")]
BentArrow,
///<summary>
///U-Turn Arrow Shape.
///<para>When the item is serialized out as xml, its value is "uturnArrow".</para>
///</summary>
[EnumString("uturnArrow")]
UTurnArrow,
///<summary>
///Circular Arrow Shape.
///<para>When the item is serialized out as xml, its value is "circularArrow".</para>
///</summary>
[EnumString("circularArrow")]
CircularArrow,
///<summary>
///Left Circular Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftCircularArrow".</para>
///</summary>
[EnumString("leftCircularArrow")]
LeftCircularArrow,
///<summary>
///Left Right Circular Arrow Shape.
///<para>When the item is serialized out as xml, its value is "leftRightCircularArrow".</para>
///</summary>
[EnumString("leftRightCircularArrow")]
LeftRightCircularArrow,
///<summary>
///Curved Right Arrow Shape.
///<para>When the item is serialized out as xml, its value is "curvedRightArrow".</para>
///</summary>
[EnumString("curvedRightArrow")]
CurvedRightArrow,
///<summary>
///Curved Left Arrow Shape.
///<para>When the item is serialized out as xml, its value is "curvedLeftArrow".</para>
///</summary>
[EnumString("curvedLeftArrow")]
CurvedLeftArrow,
///<summary>
///Curved Up Arrow Shape.
///<para>When the item is serialized out as xml, its value is "curvedUpArrow".</para>
///</summary>
[EnumString("curvedUpArrow")]
CurvedUpArrow,
///<summary>
///Curved Down Arrow Shape.
///<para>When the item is serialized out as xml, its value is "curvedDownArrow".</para>
///</summary>
[EnumString("curvedDownArrow")]
CurvedDownArrow,
///<summary>
///Swoosh Arrow Shape.
///<para>When the item is serialized out as xml, its value is "swooshArrow".</para>
///</summary>
[EnumString("swooshArrow")]
SwooshArrow,
///<summary>
///Cube Shape.
///<para>When the item is serialized out as xml, its value is "cube".</para>
///</summary>
[EnumString("cube")]
Cube,
///<summary>
///Can Shape.
///<para>When the item is serialized out as xml, its value is "can".</para>
///</summary>
[EnumString("can")]
Can,
///<summary>
///Lightning Bolt Shape.
///<para>When the item is serialized out as xml, its value is "lightningBolt".</para>
///</summary>
[EnumString("lightningBolt")]
LightningBolt,
///<summary>
///Heart Shape.
///<para>When the item is serialized out as xml, its value is "heart".</para>
///</summary>
[EnumString("heart")]
Heart,
///<summary>
///Sun Shape.
///<para>When the item is serialized out as xml, its value is "sun".</para>
///</summary>
[EnumString("sun")]
Sun,
///<summary>
///Moon Shape.
///<para>When the item is serialized out as xml, its value is "moon".</para>
///</summary>
[EnumString("moon")]
Moon,
///<summary>
///Smiley Face Shape.
///<para>When the item is serialized out as xml, its value is "smileyFace".</para>
///</summary>
[EnumString("smileyFace")]
SmileyFace,
///<summary>
///Irregular Seal 1 Shape.
///<para>When the item is serialized out as xml, its value is "irregularSeal1".</para>
///</summary>
[EnumString("irregularSeal1")]
IrregularSeal1,
///<summary>
///Irregular Seal 2 Shape.
///<para>When the item is serialized out as xml, its value is "irregularSeal2".</para>
///</summary>
[EnumString("irregularSeal2")]
IrregularSeal2,
///<summary>
///Folded Corner Shape.
///<para>When the item is serialized out as xml, its value is "foldedCorner".</para>
///</summary>
[EnumString("foldedCorner")]
FoldedCorner,
///<summary>
///Bevel Shape.
///<para>When the item is serialized out as xml, its value is "bevel".</para>
///</summary>
[EnumString("bevel")]
Bevel,
///<summary>
///Frame Shape.
///<para>When the item is serialized out as xml, its value is "frame".</para>
///</summary>
[EnumString("frame")]
Frame,
///<summary>
///Half Frame Shape.
///<para>When the item is serialized out as xml, its value is "halfFrame".</para>
///</summary>
[EnumString("halfFrame")]
HalfFrame,
///<summary>
///Corner Shape.
///<para>When the item is serialized out as xml, its value is "corner".</para>
///</summary>
[EnumString("corner")]
Corner,
///<summary>
///Diagonal Stripe Shape.
///<para>When the item is serialized out as xml, its value is "diagStripe".</para>
///</summary>
[EnumString("diagStripe")]
DiagonalStripe,
///<summary>
///Chord Shape.
///<para>When the item is serialized out as xml, its value is "chord".</para>
///</summary>
[EnumString("chord")]
Chord,
///<summary>
///Curved Arc Shape.
///<para>When the item is serialized out as xml, its value is "arc".</para>
///</summary>
[EnumString("arc")]
Arc,
///<summary>
///Left Bracket Shape.
///<para>When the item is serialized out as xml, its value is "leftBracket".</para>
///</summary>
[EnumString("leftBracket")]
LeftBracket,
///<summary>
///Right Bracket Shape.
///<para>When the item is serialized out as xml, its value is "rightBracket".</para>
///</summary>
[EnumString("rightBracket")]
RightBracket,
///<summary>
///Left Brace Shape.
///<para>When the item is serialized out as xml, its value is "leftBrace".</para>
///</summary>
[EnumString("leftBrace")]
LeftBrace,
///<summary>
///Right Brace Shape.
///<para>When the item is serialized out as xml, its value is "rightBrace".</para>
///</summary>
[EnumString("rightBrace")]
RightBrace,
///<summary>
///Bracket Pair Shape.
///<para>When the item is serialized out as xml, its value is "bracketPair".</para>
///</summary>
[EnumString("bracketPair")]
BracketPair,
///<summary>
///Brace Pair Shape.
///<para>When the item is serialized out as xml, its value is "bracePair".</para>
///</summary>
[EnumString("bracePair")]
BracePair,
///<summary>
///Straight Connector 1 Shape.
///<para>When the item is serialized out as xml, its value is "straightConnector1".</para>
///</summary>
[EnumString("straightConnector1")]
StraightConnector1,
///<summary>
///Bent Connector 2 Shape.
///<para>When the item is serialized out as xml, its value is "bentConnector2".</para>
///</summary>
[EnumString("bentConnector2")]
BentConnector2,
///<summary>
///Bent Connector 3 Shape.
///<para>When the item is serialized out as xml, its value is "bentConnector3".</para>
///</summary>
[EnumString("bentConnector3")]
BentConnector3,
///<summary>
///Bent Connector 4 Shape.
///<para>When the item is serialized out as xml, its value is "bentConnector4".</para>
///</summary>
[EnumString("bentConnector4")]
BentConnector4,
///<summary>
///Bent Connector 5 Shape.
///<para>When the item is serialized out as xml, its value is "bentConnector5".</para>
///</summary>
[EnumString("bentConnector5")]
BentConnector5,
///<summary>
///Curved Connector 2 Shape.
///<para>When the item is serialized out as xml, its value is "curvedConnector2".</para>
///</summary>
[EnumString("curvedConnector2")]
CurvedConnector2,
///<summary>
///Curved Connector 3 Shape.
///<para>When the item is serialized out as xml, its value is "curvedConnector3".</para>
///</summary>
[EnumString("curvedConnector3")]
CurvedConnector3,
///<summary>
///Curved Connector 4 Shape.
///<para>When the item is serialized out as xml, its value is "curvedConnector4".</para>
///</summary>
[EnumString("curvedConnector4")]
CurvedConnector4,
///<summary>
///Curved Connector 5 Shape.
///<para>When the item is serialized out as xml, its value is "curvedConnector5".</para>
///</summary>
[EnumString("curvedConnector5")]
CurvedConnector5,
///<summary>
///Callout 1 Shape.
///<para>When the item is serialized out as xml, its value is "callout1".</para>
///</summary>
[EnumString("callout1")]
Callout1,
///<summary>
///Callout 2 Shape.
///<para>When the item is serialized out as xml, its value is "callout2".</para>
///</summary>
[EnumString("callout2")]
Callout2,
///<summary>
///Callout 3 Shape.
///<para>When the item is serialized out as xml, its value is "callout3".</para>
///</summary>
[EnumString("callout3")]
Callout3,
///<summary>
///Callout 1 Shape.
///<para>When the item is serialized out as xml, its value is "accentCallout1".</para>
///</summary>
[EnumString("accentCallout1")]
AccentCallout1,
///<summary>
///Callout 2 Shape.
///<para>When the item is serialized out as xml, its value is "accentCallout2".</para>
///</summary>
[EnumString("accentCallout2")]
AccentCallout2,
///<summary>
///Callout 3 Shape.
///<para>When the item is serialized out as xml, its value is "accentCallout3".</para>
///</summary>
[EnumString("accentCallout3")]
AccentCallout3,
///<summary>
///Callout 1 with Border Shape.
///<para>When the item is serialized out as xml, its value is "borderCallout1".</para>
///</summary>
[EnumString("borderCallout1")]
BorderCallout1,
///<summary>
///Callout 2 with Border Shape.
///<para>When the item is serialized out as xml, its value is "borderCallout2".</para>
///</summary>
[EnumString("borderCallout2")]
BorderCallout2,
///<summary>
///Callout 3 with Border Shape.
///<para>When the item is serialized out as xml, its value is "borderCallout3".</para>
///</summary>
[EnumString("borderCallout3")]
BorderCallout3,
///<summary>
///Callout 1 with Border and Accent Shape.
///<para>When the item is serialized out as xml, its value is "accentBorderCallout1".</para>
///</summary>
[EnumString("accentBorderCallout1")]
AccentBorderCallout1,
///<summary>
///Callout 2 with Border and Accent Shape.
///<para>When the item is serialized out as xml, its value is "accentBorderCallout2".</para>
///</summary>
[EnumString("accentBorderCallout2")]
AccentBorderCallout2,
///<summary>
///Callout 3 with Border and Accent Shape.
///<para>When the item is serialized out as xml, its value is "accentBorderCallout3".</para>
///</summary>
[EnumString("accentBorderCallout3")]
AccentBorderCallout3,
///<summary>
///Callout Wedge Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "wedgeRectCallout".</para>
///</summary>
[EnumString("wedgeRectCallout")]
WedgeRectangleCallout,
///<summary>
///Callout Wedge Round Rectangle Shape.
///<para>When the item is serialized out as xml, its value is "wedgeRoundRectCallout".</para>
///</summary>
[EnumString("wedgeRoundRectCallout")]
WedgeRoundRectangleCallout,
///<summary>
///Callout Wedge Ellipse Shape.
///<para>When the item is serialized out as xml, its value is "wedgeEllipseCallout".</para>
///</summary>
[EnumString("wedgeEllipseCallout")]
WedgeEllipseCallout,
///<summary>
///Callout Cloud Shape.
///<para>When the item is serialized out as xml, its value is "cloudCallout".</para>
///</summary>
[EnumString("cloudCallout")]
CloudCallout,
///<summary>
///Cloud Shape.
///<para>When the item is serialized out as xml, its value is "cloud".</para>
///</summary>
[EnumString("cloud")]
Cloud,
///<summary>
///Ribbon Shape.
///<para>When the item is serialized out as xml, its value is "ribbon".</para>
///</summary>
[EnumString("ribbon")]
Ribbon,
///<summary>
///Ribbon 2 Shape.
///<para>When the item is serialized out as xml, its value is "ribbon2".</para>
///</summary>
[EnumString("ribbon2")]
Ribbon2,
///<summary>
///Ellipse Ribbon Shape.
///<para>When the item is serialized out as xml, its value is "ellipseRibbon".</para>
///</summary>
[EnumString("ellipseRibbon")]
EllipseRibbon,
///<summary>
///Ellipse Ribbon 2 Shape.
///<para>When the item is serialized out as xml, its value is "ellipseRibbon2".</para>
///</summary>
[EnumString("ellipseRibbon2")]
EllipseRibbon2,
///<summary>
///Left Right Ribbon Shape.
///<para>When the item is serialized out as xml, its value is "leftRightRibbon".</para>
///</summary>
[EnumString("leftRightRibbon")]
LeftRightRibbon,
///<summary>
///Vertical Scroll Shape.
///<para>When the item is serialized out as xml, its value is "verticalScroll".</para>
///</summary>
[EnumString("verticalScroll")]
VerticalScroll,
///<summary>
///Horizontal Scroll Shape.
///<para>When the item is serialized out as xml, its value is "horizontalScroll".</para>
///</summary>
[EnumString("horizontalScroll")]
HorizontalScroll,
///<summary>
///Wave Shape.
///<para>When the item is serialized out as xml, its value is "wave".</para>
///</summary>
[EnumString("wave")]
Wave,
///<summary>
///Double Wave Shape.
///<para>When the item is serialized out as xml, its value is "doubleWave".</para>
///</summary>
[EnumString("doubleWave")]
DoubleWave,
///<summary>
///Plus Shape.
///<para>When the item is serialized out as xml, its value is "plus".</para>
///</summary>
[EnumString("plus")]
Plus,
///<summary>
///Process Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartProcess".</para>
///</summary>
[EnumString("flowChartProcess")]
FlowChartProcess,
///<summary>
///Decision Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartDecision".</para>
///</summary>
[EnumString("flowChartDecision")]
FlowChartDecision,
///<summary>
///Input Output Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartInputOutput".</para>
///</summary>
[EnumString("flowChartInputOutput")]
FlowChartInputOutput,
///<summary>
///Predefined Process Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartPredefinedProcess".</para>
///</summary>
[EnumString("flowChartPredefinedProcess")]
FlowChartPredefinedProcess,
///<summary>
///Internal Storage Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartInternalStorage".</para>
///</summary>
[EnumString("flowChartInternalStorage")]
FlowChartInternalStorage,
///<summary>
///Document Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartDocument".</para>
///</summary>
[EnumString("flowChartDocument")]
FlowChartDocument,
///<summary>
///Multi-Document Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartMultidocument".</para>
///</summary>
[EnumString("flowChartMultidocument")]
FlowChartMultidocument,
///<summary>
///Terminator Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartTerminator".</para>
///</summary>
[EnumString("flowChartTerminator")]
FlowChartTerminator,
///<summary>
///Preparation Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartPreparation".</para>
///</summary>
[EnumString("flowChartPreparation")]
FlowChartPreparation,
///<summary>
///Manual Input Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartManualInput".</para>
///</summary>
[EnumString("flowChartManualInput")]
FlowChartManualInput,
///<summary>
///Manual Operation Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartManualOperation".</para>
///</summary>
[EnumString("flowChartManualOperation")]
FlowChartManualOperation,
///<summary>
///Connector Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartConnector".</para>
///</summary>
[EnumString("flowChartConnector")]
FlowChartConnector,
///<summary>
///Punched Card Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartPunchedCard".</para>
///</summary>
[EnumString("flowChartPunchedCard")]
FlowChartPunchedCard,
///<summary>
///Punched Tape Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartPunchedTape".</para>
///</summary>
[EnumString("flowChartPunchedTape")]
FlowChartPunchedTape,
///<summary>
///Summing Junction Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartSummingJunction".</para>
///</summary>
[EnumString("flowChartSummingJunction")]
FlowChartSummingJunction,
///<summary>
///Or Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartOr".</para>
///</summary>
[EnumString("flowChartOr")]
FlowChartOr,
///<summary>
///Collate Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartCollate".</para>
///</summary>
[EnumString("flowChartCollate")]
FlowChartCollate,
///<summary>
///Sort Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartSort".</para>
///</summary>
[EnumString("flowChartSort")]
FlowChartSort,
///<summary>
///Extract Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartExtract".</para>
///</summary>
[EnumString("flowChartExtract")]
FlowChartExtract,
///<summary>
///Merge Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartMerge".</para>
///</summary>
[EnumString("flowChartMerge")]
FlowChartMerge,
///<summary>
///Offline Storage Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartOfflineStorage".</para>
///</summary>
[EnumString("flowChartOfflineStorage")]
FlowChartOfflineStorage,
///<summary>
///Online Storage Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartOnlineStorage".</para>
///</summary>
[EnumString("flowChartOnlineStorage")]
FlowChartOnlineStorage,
///<summary>
///Magnetic Tape Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartMagneticTape".</para>
///</summary>
[EnumString("flowChartMagneticTape")]
FlowChartMagneticTape,
///<summary>
///Magnetic Disk Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartMagneticDisk".</para>
///</summary>
[EnumString("flowChartMagneticDisk")]
FlowChartMagneticDisk,
///<summary>
///Magnetic Drum Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartMagneticDrum".</para>
///</summary>
[EnumString("flowChartMagneticDrum")]
FlowChartMagneticDrum,
///<summary>
///Display Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartDisplay".</para>
///</summary>
[EnumString("flowChartDisplay")]
FlowChartDisplay,
///<summary>
///Delay Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartDelay".</para>
///</summary>
[EnumString("flowChartDelay")]
FlowChartDelay,
///<summary>
///Alternate Process Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartAlternateProcess".</para>
///</summary>
[EnumString("flowChartAlternateProcess")]
FlowChartAlternateProcess,
///<summary>
///Off-Page Connector Flow Shape.
///<para>When the item is serialized out as xml, its value is "flowChartOffpageConnector".</para>
///</summary>
[EnumString("flowChartOffpageConnector")]
FlowChartOffpageConnector,
///<summary>
///Blank Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonBlank".</para>
///</summary>
[EnumString("actionButtonBlank")]
ActionButtonBlank,
///<summary>
///Home Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonHome".</para>
///</summary>
[EnumString("actionButtonHome")]
ActionButtonHome,
///<summary>
///Help Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonHelp".</para>
///</summary>
[EnumString("actionButtonHelp")]
ActionButtonHelp,
///<summary>
///Information Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonInformation".</para>
///</summary>
[EnumString("actionButtonInformation")]
ActionButtonInformation,
///<summary>
///Forward or Next Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonForwardNext".</para>
///</summary>
[EnumString("actionButtonForwardNext")]
ActionButtonForwardNext,
///<summary>
///Back or Previous Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonBackPrevious".</para>
///</summary>
[EnumString("actionButtonBackPrevious")]
ActionButtonBackPrevious,
///<summary>
///End Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonEnd".</para>
///</summary>
[EnumString("actionButtonEnd")]
ActionButtonEnd,
///<summary>
///Beginning Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonBeginning".</para>
///</summary>
[EnumString("actionButtonBeginning")]
ActionButtonBeginning,
///<summary>
///Return Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonReturn".</para>
///</summary>
[EnumString("actionButtonReturn")]
ActionButtonReturn,
///<summary>
///Document Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonDocument".</para>
///</summary>
[EnumString("actionButtonDocument")]
ActionButtonDocument,
///<summary>
///Sound Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonSound".</para>
///</summary>
[EnumString("actionButtonSound")]
ActionButtonSound,
///<summary>
///Movie Button Shape.
///<para>When the item is serialized out as xml, its value is "actionButtonMovie".</para>
///</summary>
[EnumString("actionButtonMovie")]
ActionButtonMovie,
///<summary>
///Gear 6 Shape.
///<para>When the item is serialized out as xml, its value is "gear6".</para>
///</summary>
[EnumString("gear6")]
Gear6,
///<summary>
///Gear 9 Shape.
///<para>When the item is serialized out as xml, its value is "gear9".</para>
///</summary>
[EnumString("gear9")]
Gear9,
///<summary>
///Funnel Shape.
///<para>When the item is serialized out as xml, its value is "funnel".</para>
///</summary>
[EnumString("funnel")]
Funnel,
///<summary>
///Plus Math Shape.
///<para>When the item is serialized out as xml, its value is "mathPlus".</para>
///</summary>
[EnumString("mathPlus")]
MathPlus,
///<summary>
///Minus Math Shape.
///<para>When the item is serialized out as xml, its value is "mathMinus".</para>
///</summary>
[EnumString("mathMinus")]
MathMinus,
///<summary>
///Multiply Math Shape.
///<para>When the item is serialized out as xml, its value is "mathMultiply".</para>
///</summary>
[EnumString("mathMultiply")]
MathMultiply,
///<summary>
///Divide Math Shape.
///<para>When the item is serialized out as xml, its value is "mathDivide".</para>
///</summary>
[EnumString("mathDivide")]
MathDivide,
///<summary>
///Equal Math Shape.
///<para>When the item is serialized out as xml, its value is "mathEqual".</para>
///</summary>
[EnumString("mathEqual")]
MathEqual,
///<summary>
///Not Equal Math Shape.
///<para>When the item is serialized out as xml, its value is "mathNotEqual".</para>
///</summary>
[EnumString("mathNotEqual")]
MathNotEqual,
///<summary>
///Corner Tabs Shape.
///<para>When the item is serialized out as xml, its value is "cornerTabs".</para>
///</summary>
[EnumString("cornerTabs")]
CornerTabs,
///<summary>
///Square Tabs Shape.
///<para>When the item is serialized out as xml, its value is "squareTabs".</para>
///</summary>
[EnumString("squareTabs")]
SquareTabs,
///<summary>
///Plaque Tabs Shape.
///<para>When the item is serialized out as xml, its value is "plaqueTabs".</para>
///</summary>
[EnumString("plaqueTabs")]
PlaqueTabs,
///<summary>
///Chart X Shape.
///<para>When the item is serialized out as xml, its value is "chartX".</para>
///</summary>
[EnumString("chartX")]
ChartX,
///<summary>
///Chart Star Shape.
///<para>When the item is serialized out as xml, its value is "chartStar".</para>
///</summary>
[EnumString("chartStar")]
ChartStar,
///<summary>
///Chart Plus Shape.
///<para>When the item is serialized out as xml, its value is "chartPlus".</para>
///</summary>
[EnumString("chartPlus")]
ChartPlus,
 
}
/// <summary>
/// Preset Text Shape Types 
/// </summary> 
public enum TextShapeValues
{  
	///<summary>
///No Text Shape.
///<para>When the item is serialized out as xml, its value is "textNoShape".</para>
///</summary>
[EnumString("textNoShape")]
TextNoShape,
///<summary>
///Plain Text Shape.
///<para>When the item is serialized out as xml, its value is "textPlain".</para>
///</summary>
[EnumString("textPlain")]
TextPlain,
///<summary>
///Stop Sign Text Shape.
///<para>When the item is serialized out as xml, its value is "textStop".</para>
///</summary>
[EnumString("textStop")]
TextStop,
///<summary>
///Triangle Text Shape.
///<para>When the item is serialized out as xml, its value is "textTriangle".</para>
///</summary>
[EnumString("textTriangle")]
TextTriangle,
///<summary>
///Inverted Triangle Text Shape.
///<para>When the item is serialized out as xml, its value is "textTriangleInverted".</para>
///</summary>
[EnumString("textTriangleInverted")]
TextTriangleInverted,
///<summary>
///Chevron Text Shape.
///<para>When the item is serialized out as xml, its value is "textChevron".</para>
///</summary>
[EnumString("textChevron")]
TextChevron,
///<summary>
///Inverted Chevron Text Shape.
///<para>When the item is serialized out as xml, its value is "textChevronInverted".</para>
///</summary>
[EnumString("textChevronInverted")]
TextChevronInverted,
///<summary>
///Inside Ring Text Shape.
///<para>When the item is serialized out as xml, its value is "textRingInside".</para>
///</summary>
[EnumString("textRingInside")]
TextRingInside,
///<summary>
///Outside Ring Text Shape.
///<para>When the item is serialized out as xml, its value is "textRingOutside".</para>
///</summary>
[EnumString("textRingOutside")]
TextRingOutside,
///<summary>
///Upward Arch Text Shape.
///<para>When the item is serialized out as xml, its value is "textArchUp".</para>
///</summary>
[EnumString("textArchUp")]
TextArchUp,
///<summary>
///Downward Arch Text Shape.
///<para>When the item is serialized out as xml, its value is "textArchDown".</para>
///</summary>
[EnumString("textArchDown")]
TextArchDown,
///<summary>
///Circle Text Shape.
///<para>When the item is serialized out as xml, its value is "textCircle".</para>
///</summary>
[EnumString("textCircle")]
TextCircle,
///<summary>
///Button Text Shape.
///<para>When the item is serialized out as xml, its value is "textButton".</para>
///</summary>
[EnumString("textButton")]
TextButton,
///<summary>
///Upward Pour Arch Text Shape.
///<para>When the item is serialized out as xml, its value is "textArchUpPour".</para>
///</summary>
[EnumString("textArchUpPour")]
TextArchUpPour,
///<summary>
///Downward Pour Arch Text Shape.
///<para>When the item is serialized out as xml, its value is "textArchDownPour".</para>
///</summary>
[EnumString("textArchDownPour")]
TextArchDownPour,
///<summary>
///Circle Pour Text Shape.
///<para>When the item is serialized out as xml, its value is "textCirclePour".</para>
///</summary>
[EnumString("textCirclePour")]
TextCirclePour,
///<summary>
///Button Pour Text Shape.
///<para>When the item is serialized out as xml, its value is "textButtonPour".</para>
///</summary>
[EnumString("textButtonPour")]
TextButtonPour,
///<summary>
///Upward Curve Text Shape.
///<para>When the item is serialized out as xml, its value is "textCurveUp".</para>
///</summary>
[EnumString("textCurveUp")]
TextCurveUp,
///<summary>
///Downward Curve Text Shape.
///<para>When the item is serialized out as xml, its value is "textCurveDown".</para>
///</summary>
[EnumString("textCurveDown")]
TextCurveDown,
///<summary>
///Upward Can Text Shape.
///<para>When the item is serialized out as xml, its value is "textCanUp".</para>
///</summary>
[EnumString("textCanUp")]
TextCanUp,
///<summary>
///Downward Can Text Shape.
///<para>When the item is serialized out as xml, its value is "textCanDown".</para>
///</summary>
[EnumString("textCanDown")]
TextCanDown,
///<summary>
///Wave 1 Text Shape.
///<para>When the item is serialized out as xml, its value is "textWave1".</para>
///</summary>
[EnumString("textWave1")]
TextWave1,
///<summary>
///Wave 2 Text Shape.
///<para>When the item is serialized out as xml, its value is "textWave2".</para>
///</summary>
[EnumString("textWave2")]
TextWave2,
///<summary>
///Double Wave 1 Text Shape.
///<para>When the item is serialized out as xml, its value is "textDoubleWave1".</para>
///</summary>
[EnumString("textDoubleWave1")]
TextDoubleWave1,
///<summary>
///Wave 4 Text Shape.
///<para>When the item is serialized out as xml, its value is "textWave4".</para>
///</summary>
[EnumString("textWave4")]
TextWave4,
///<summary>
///Inflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textInflate".</para>
///</summary>
[EnumString("textInflate")]
TextInflate,
///<summary>
///Deflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textDeflate".</para>
///</summary>
[EnumString("textDeflate")]
TextDeflate,
///<summary>
///Bottom Inflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textInflateBottom".</para>
///</summary>
[EnumString("textInflateBottom")]
TextInflateBottom,
///<summary>
///Bottom Deflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textDeflateBottom".</para>
///</summary>
[EnumString("textDeflateBottom")]
TextDeflateBottom,
///<summary>
///Top Inflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textInflateTop".</para>
///</summary>
[EnumString("textInflateTop")]
TextInflateTop,
///<summary>
///Top Deflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textDeflateTop".</para>
///</summary>
[EnumString("textDeflateTop")]
TextDeflateTop,
///<summary>
///Deflate-Inflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textDeflateInflate".</para>
///</summary>
[EnumString("textDeflateInflate")]
TextDeflateInflate,
///<summary>
///Deflate-Inflate-Deflate Text Shape.
///<para>When the item is serialized out as xml, its value is "textDeflateInflateDeflate".</para>
///</summary>
[EnumString("textDeflateInflateDeflate")]
TextDeflateInflateDeflate,
///<summary>
///Right Fade Text Shape.
///<para>When the item is serialized out as xml, its value is "textFadeRight".</para>
///</summary>
[EnumString("textFadeRight")]
TextFadeRight,
///<summary>
///Left Fade Text Shape.
///<para>When the item is serialized out as xml, its value is "textFadeLeft".</para>
///</summary>
[EnumString("textFadeLeft")]
TextFadeLeft,
///<summary>
///Upward Fade Text Shape.
///<para>When the item is serialized out as xml, its value is "textFadeUp".</para>
///</summary>
[EnumString("textFadeUp")]
TextFadeUp,
///<summary>
///Downward Fade Text Shape.
///<para>When the item is serialized out as xml, its value is "textFadeDown".</para>
///</summary>
[EnumString("textFadeDown")]
TextFadeDown,
///<summary>
///Upward Slant Text Shape.
///<para>When the item is serialized out as xml, its value is "textSlantUp".</para>
///</summary>
[EnumString("textSlantUp")]
TextSlantUp,
///<summary>
///Downward Slant Text Shape.
///<para>When the item is serialized out as xml, its value is "textSlantDown".</para>
///</summary>
[EnumString("textSlantDown")]
TextSlantDown,
///<summary>
///Upward Cascade Text Shape.
///<para>When the item is serialized out as xml, its value is "textCascadeUp".</para>
///</summary>
[EnumString("textCascadeUp")]
TextCascadeUp,
///<summary>
///Downward Cascade Text Shape.
///<para>When the item is serialized out as xml, its value is "textCascadeDown".</para>
///</summary>
[EnumString("textCascadeDown")]
TextCascadeDown,
 
}
/// <summary>
/// Path Fill Mode 
/// </summary> 
public enum PathFillModeValues
{  
	///<summary>
///No Path Fill.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Normal Path Fill.
///<para>When the item is serialized out as xml, its value is "norm".</para>
///</summary>
[EnumString("norm")]
Norm,
///<summary>
///Lighten Path Fill.
///<para>When the item is serialized out as xml, its value is "lighten".</para>
///</summary>
[EnumString("lighten")]
Lighten,
///<summary>
///Lighten Path Fill Less.
///<para>When the item is serialized out as xml, its value is "lightenLess".</para>
///</summary>
[EnumString("lightenLess")]
LightenLess,
///<summary>
///Darken Path Fill.
///<para>When the item is serialized out as xml, its value is "darken".</para>
///</summary>
[EnumString("darken")]
Darken,
///<summary>
///Darken Path Fill Less.
///<para>When the item is serialized out as xml, its value is "darkenLess".</para>
///</summary>
[EnumString("darkenLess")]
DarkenLess,
 
}
/// <summary>
/// Line End Type 
/// </summary> 
public enum LineEndValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Triangle Arrow Head.
///<para>When the item is serialized out as xml, its value is "triangle".</para>
///</summary>
[EnumString("triangle")]
Triangle,
///<summary>
///Stealth Arrow.
///<para>When the item is serialized out as xml, its value is "stealth".</para>
///</summary>
[EnumString("stealth")]
Stealth,
///<summary>
///Diamond.
///<para>When the item is serialized out as xml, its value is "diamond".</para>
///</summary>
[EnumString("diamond")]
Diamond,
///<summary>
///Oval.
///<para>When the item is serialized out as xml, its value is "oval".</para>
///</summary>
[EnumString("oval")]
Oval,
///<summary>
///Arrow Head.
///<para>When the item is serialized out as xml, its value is "arrow".</para>
///</summary>
[EnumString("arrow")]
Arrow,
 
}
/// <summary>
/// Line End Width 
/// </summary> 
public enum LineEndWidthValues
{  
	///<summary>
///Small.
///<para>When the item is serialized out as xml, its value is "sm".</para>
///</summary>
[EnumString("sm")]
Small,
///<summary>
///Medium.
///<para>When the item is serialized out as xml, its value is "med".</para>
///</summary>
[EnumString("med")]
Medium,
///<summary>
///Large.
///<para>When the item is serialized out as xml, its value is "lg".</para>
///</summary>
[EnumString("lg")]
Large,
 
}
/// <summary>
/// Line End Length 
/// </summary> 
public enum LineEndLengthValues
{  
	///<summary>
///Small.
///<para>When the item is serialized out as xml, its value is "sm".</para>
///</summary>
[EnumString("sm")]
Small,
///<summary>
///Medium.
///<para>When the item is serialized out as xml, its value is "med".</para>
///</summary>
[EnumString("med")]
Medium,
///<summary>
///Large.
///<para>When the item is serialized out as xml, its value is "lg".</para>
///</summary>
[EnumString("lg")]
Large,
 
}
/// <summary>
/// Preset Line Dash Value 
/// </summary> 
public enum PresetLineDashValues
{  
	///<summary>
///Solid.
///<para>When the item is serialized out as xml, its value is "solid".</para>
///</summary>
[EnumString("solid")]
Solid,
///<summary>
///Dot.
///<para>When the item is serialized out as xml, its value is "dot".</para>
///</summary>
[EnumString("dot")]
Dot,
///<summary>
///Dash.
///<para>When the item is serialized out as xml, its value is "dash".</para>
///</summary>
[EnumString("dash")]
Dash,
///<summary>
///Large Dash.
///<para>When the item is serialized out as xml, its value is "lgDash".</para>
///</summary>
[EnumString("lgDash")]
LargeDash,
///<summary>
///Dash Dot.
///<para>When the item is serialized out as xml, its value is "dashDot".</para>
///</summary>
[EnumString("dashDot")]
DashDot,
///<summary>
///Large Dash Dot.
///<para>When the item is serialized out as xml, its value is "lgDashDot".</para>
///</summary>
[EnumString("lgDashDot")]
LargeDashDot,
///<summary>
///Large Dash Dot Dot.
///<para>When the item is serialized out as xml, its value is "lgDashDotDot".</para>
///</summary>
[EnumString("lgDashDotDot")]
LargeDashDotDot,
///<summary>
///System Dash.
///<para>When the item is serialized out as xml, its value is "sysDash".</para>
///</summary>
[EnumString("sysDash")]
SystemDash,
///<summary>
///System Dot.
///<para>When the item is serialized out as xml, its value is "sysDot".</para>
///</summary>
[EnumString("sysDot")]
SystemDot,
///<summary>
///System Dash Dot.
///<para>When the item is serialized out as xml, its value is "sysDashDot".</para>
///</summary>
[EnumString("sysDashDot")]
SystemDashDot,
///<summary>
///System Dash Dot Dot.
///<para>When the item is serialized out as xml, its value is "sysDashDotDot".</para>
///</summary>
[EnumString("sysDashDotDot")]
SystemDashDotDot,
 
}
/// <summary>
/// End Line Cap 
/// </summary> 
public enum LineCapValues
{  
	///<summary>
///Round Line Cap.
///<para>When the item is serialized out as xml, its value is "rnd".</para>
///</summary>
[EnumString("rnd")]
Round,
///<summary>
///Square Line Cap.
///<para>When the item is serialized out as xml, its value is "sq".</para>
///</summary>
[EnumString("sq")]
Square,
///<summary>
///Flat Line Cap.
///<para>When the item is serialized out as xml, its value is "flat".</para>
///</summary>
[EnumString("flat")]
Flat,
 
}
/// <summary>
/// Alignment Type 
/// </summary> 
public enum PenAlignmentValues
{  
	///<summary>
///Center Alignment.
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Inset Alignment.
///<para>When the item is serialized out as xml, its value is "in".</para>
///</summary>
[EnumString("in")]
Insert,
 
}
/// <summary>
/// Compound Line Type 
/// </summary> 
public enum CompoundLineValues
{  
	///<summary>
///Single Line.
///<para>When the item is serialized out as xml, its value is "sng".</para>
///</summary>
[EnumString("sng")]
Single,
///<summary>
///Double Lines.
///<para>When the item is serialized out as xml, its value is "dbl".</para>
///</summary>
[EnumString("dbl")]
Double,
///<summary>
///Thick Thin Double Lines.
///<para>When the item is serialized out as xml, its value is "thickThin".</para>
///</summary>
[EnumString("thickThin")]
ThickThin,
///<summary>
///Thin Thick Double Lines.
///<para>When the item is serialized out as xml, its value is "thinThick".</para>
///</summary>
[EnumString("thinThick")]
ThinThick,
///<summary>
///Thin Thick Thin Triple Lines.
///<para>When the item is serialized out as xml, its value is "tri".</para>
///</summary>
[EnumString("tri")]
Triple,
 
}
/// <summary>
/// On/Off Style Type 
/// </summary> 
public enum BooleanStyleValues
{  
	///<summary>
///On.
///<para>When the item is serialized out as xml, its value is "on".</para>
///</summary>
[EnumString("on")]
On,
///<summary>
///Off.
///<para>When the item is serialized out as xml, its value is "off".</para>
///</summary>
[EnumString("off")]
Off,
///<summary>
///Default.
///<para>When the item is serialized out as xml, its value is "def".</para>
///</summary>
[EnumString("def")]
Default,
 
}
/// <summary>
/// Text Vertical Overflow 
/// </summary> 
public enum TextVerticalOverflowValues
{  
	///<summary>
///Text Overflow Enum ( Overflow ).
///<para>When the item is serialized out as xml, its value is "overflow".</para>
///</summary>
[EnumString("overflow")]
Overflow,
///<summary>
///Text Overflow Enum ( Ellipsis ).
///<para>When the item is serialized out as xml, its value is "ellipsis".</para>
///</summary>
[EnumString("ellipsis")]
Ellipsis,
///<summary>
///Text Overflow Enum ( Clip ).
///<para>When the item is serialized out as xml, its value is "clip".</para>
///</summary>
[EnumString("clip")]
Clip,
 
}
/// <summary>
/// Text Horizontal Overflow Types 
/// </summary> 
public enum TextHorizontalOverflowValues
{  
	///<summary>
///Text Horizontal Overflow Enum ( Overflow ).
///<para>When the item is serialized out as xml, its value is "overflow".</para>
///</summary>
[EnumString("overflow")]
Overflow,
///<summary>
///Text Horizontal Overflow Enum ( Clip ).
///<para>When the item is serialized out as xml, its value is "clip".</para>
///</summary>
[EnumString("clip")]
Clip,
 
}
/// <summary>
/// Vertical Text Types 
/// </summary> 
public enum TextVerticalValues
{  
	///<summary>
///Vertical Text Type Enum ( Horizontal ).
///<para>When the item is serialized out as xml, its value is "horz".</para>
///</summary>
[EnumString("horz")]
Horizontal,
///<summary>
///Vertical Text Type Enum ( Vertical ).
///<para>When the item is serialized out as xml, its value is "vert".</para>
///</summary>
[EnumString("vert")]
Vertical,
///<summary>
///Vertical Text Type Enum ( Vertical 270 ).
///<para>When the item is serialized out as xml, its value is "vert270".</para>
///</summary>
[EnumString("vert270")]
Vertical270,
///<summary>
///Vertical Text Type Enum ( WordArt Vertical ).
///<para>When the item is serialized out as xml, its value is "wordArtVert".</para>
///</summary>
[EnumString("wordArtVert")]
WordArtVertical,
///<summary>
///Vertical Text Type Enum ( East Asian Vertical ).
///<para>When the item is serialized out as xml, its value is "eaVert".</para>
///</summary>
[EnumString("eaVert")]
EastAsianVetical,
///<summary>
///Vertical Text Type Enum ( Mongolian Vertical ).
///<para>When the item is serialized out as xml, its value is "mongolianVert".</para>
///</summary>
[EnumString("mongolianVert")]
MongolianVertical,
///<summary>
///Vertical WordArt Right to Left.
///<para>When the item is serialized out as xml, its value is "wordArtVertRtl".</para>
///</summary>
[EnumString("wordArtVertRtl")]
WordArtLeftToRight,
 
}
/// <summary>
/// Text Wrapping Types 
/// </summary> 
public enum TextWrappingValues
{  
	///<summary>
///Text Wrapping Type Enum ( None ).
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Text Wrapping Type Enum ( Square ).
///<para>When the item is serialized out as xml, its value is "square".</para>
///</summary>
[EnumString("square")]
Square,
 
}
/// <summary>
/// Text Anchoring Types 
/// </summary> 
public enum TextAnchoringTypeValues
{  
	///<summary>
///Text Anchoring Type Enum ( Top ).
///<para>When the item is serialized out as xml, its value is "t".</para>
///</summary>
[EnumString("t")]
Top,
///<summary>
///Text Anchor Enum ( Center ).
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Text Anchor Enum ( Bottom ).
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Bottom,
 
}
/// <summary>
/// Text Auto-number Schemes 
/// </summary> 
public enum TextAutoNumberSchemeValues
{  
	///<summary>
///Autonumber Enum ( alphaLcParenBoth ).
///<para>When the item is serialized out as xml, its value is "alphaLcParenBoth".</para>
///</summary>
[EnumString("alphaLcParenBoth")]
AlphaLowerCharacterParenBoth,
///<summary>
///Autonumbering Enum ( alphaUcParenBoth ).
///<para>When the item is serialized out as xml, its value is "alphaUcParenBoth".</para>
///</summary>
[EnumString("alphaUcParenBoth")]
AlphaUpperCharacterParenBoth,
///<summary>
///Autonumbering Enum ( alphaLcParenR ).
///<para>When the item is serialized out as xml, its value is "alphaLcParenR".</para>
///</summary>
[EnumString("alphaLcParenR")]
AlphaLowerCharacterParenR,
///<summary>
///Autonumbering Enum ( alphaUcParenR ).
///<para>When the item is serialized out as xml, its value is "alphaUcParenR".</para>
///</summary>
[EnumString("alphaUcParenR")]
AlphaUpperCharacterParenR,
///<summary>
///Autonumbering Enum ( alphaLcPeriod ).
///<para>When the item is serialized out as xml, its value is "alphaLcPeriod".</para>
///</summary>
[EnumString("alphaLcPeriod")]
AlphaLowerCharacterPeriod,
///<summary>
///Autonumbering Enum ( alphaUcPeriod ).
///<para>When the item is serialized out as xml, its value is "alphaUcPeriod".</para>
///</summary>
[EnumString("alphaUcPeriod")]
AlphaUpperCharacterPeriod,
///<summary>
///Autonumbering Enum ( arabicParenBoth ).
///<para>When the item is serialized out as xml, its value is "arabicParenBoth".</para>
///</summary>
[EnumString("arabicParenBoth")]
ArabicParenBoth,
///<summary>
///Autonumbering Enum ( arabicParenR ).
///<para>When the item is serialized out as xml, its value is "arabicParenR".</para>
///</summary>
[EnumString("arabicParenR")]
ArabicParenR,
///<summary>
///Autonumbering Enum ( arabicPeriod ).
///<para>When the item is serialized out as xml, its value is "arabicPeriod".</para>
///</summary>
[EnumString("arabicPeriod")]
ArabicPeriod,
///<summary>
///Autonumbering Enum ( arabicPlain ).
///<para>When the item is serialized out as xml, its value is "arabicPlain".</para>
///</summary>
[EnumString("arabicPlain")]
ArabicPlain,
///<summary>
///Autonumbering Enum ( romanLcParenBoth ).
///<para>When the item is serialized out as xml, its value is "romanLcParenBoth".</para>
///</summary>
[EnumString("romanLcParenBoth")]
RomanLowerCharacterParenBoth,
///<summary>
///Autonumbering Enum ( romanUcParenBoth ).
///<para>When the item is serialized out as xml, its value is "romanUcParenBoth".</para>
///</summary>
[EnumString("romanUcParenBoth")]
RomanUpperCharacterParenBoth,
///<summary>
///Autonumbering Enum ( romanLcParenR ).
///<para>When the item is serialized out as xml, its value is "romanLcParenR".</para>
///</summary>
[EnumString("romanLcParenR")]
RomanLowerCharacterParenR,
///<summary>
///Autonumbering Enum ( romanUcParenR ).
///<para>When the item is serialized out as xml, its value is "romanUcParenR".</para>
///</summary>
[EnumString("romanUcParenR")]
RomanUpperCharacterParenR,
///<summary>
///Autonumbering Enum ( romanLcPeriod ).
///<para>When the item is serialized out as xml, its value is "romanLcPeriod".</para>
///</summary>
[EnumString("romanLcPeriod")]
RomanLowerCharacterPeriod,
///<summary>
///Autonumbering Enum ( romanUcPeriod ).
///<para>When the item is serialized out as xml, its value is "romanUcPeriod".</para>
///</summary>
[EnumString("romanUcPeriod")]
RomanUpperCharacterPeriod,
///<summary>
///Autonumbering Enum ( circleNumDbPlain ).
///<para>When the item is serialized out as xml, its value is "circleNumDbPlain".</para>
///</summary>
[EnumString("circleNumDbPlain")]
CircleNumberDoubleBytePlain,
///<summary>
///Autonumbering Enum ( circleNumWdBlackPlain ).
///<para>When the item is serialized out as xml, its value is "circleNumWdBlackPlain".</para>
///</summary>
[EnumString("circleNumWdBlackPlain")]
CircleNumberWingdingsBlackPlain,
///<summary>
///Autonumbering Enum ( circleNumWdWhitePlain ).
///<para>When the item is serialized out as xml, its value is "circleNumWdWhitePlain".</para>
///</summary>
[EnumString("circleNumWdWhitePlain")]
CircleNumberWingdingsWhitePlain,
///<summary>
///Autonumbering Enum ( arabicDbPeriod ).
///<para>When the item is serialized out as xml, its value is "arabicDbPeriod".</para>
///</summary>
[EnumString("arabicDbPeriod")]
ArabicDoubleBytePeriod,
///<summary>
///Autonumbering Enum ( arabicDbPlain ).
///<para>When the item is serialized out as xml, its value is "arabicDbPlain".</para>
///</summary>
[EnumString("arabicDbPlain")]
ArabicDoubleBytePlain,
///<summary>
///Autonumbering Enum ( ea1ChsPeriod ).
///<para>When the item is serialized out as xml, its value is "ea1ChsPeriod".</para>
///</summary>
[EnumString("ea1ChsPeriod")]
EastAsianSimplifiedChinesePeriod,
///<summary>
///Autonumbering Enum ( ea1ChsPlain ).
///<para>When the item is serialized out as xml, its value is "ea1ChsPlain".</para>
///</summary>
[EnumString("ea1ChsPlain")]
EastAsianSimplifiedChinesePlain,
///<summary>
///Autonumbering Enum ( ea1ChtPeriod ).
///<para>When the item is serialized out as xml, its value is "ea1ChtPeriod".</para>
///</summary>
[EnumString("ea1ChtPeriod")]
EastAsianTraditionalChinesePeriod,
///<summary>
///Autonumbering Enum ( ea1ChtPlain ).
///<para>When the item is serialized out as xml, its value is "ea1ChtPlain".</para>
///</summary>
[EnumString("ea1ChtPlain")]
EastAsianTraditionalChinesePlain,
///<summary>
///Autonumbering Enum ( ea1JpnChsDbPeriod ).
///<para>When the item is serialized out as xml, its value is "ea1JpnChsDbPeriod".</para>
///</summary>
[EnumString("ea1JpnChsDbPeriod")]
EastAsianJapaneseDoubleBytePeriod,
///<summary>
///Autonumbering Enum ( ea1JpnKorPlain ).
///<para>When the item is serialized out as xml, its value is "ea1JpnKorPlain".</para>
///</summary>
[EnumString("ea1JpnKorPlain")]
EastAsianJapaneseKoreanPlain,
///<summary>
///Autonumbering Enum ( ea1JpnKorPeriod ).
///<para>When the item is serialized out as xml, its value is "ea1JpnKorPeriod".</para>
///</summary>
[EnumString("ea1JpnKorPeriod")]
EastAsianJapaneseKoreanPeriod,
///<summary>
///Autonumbering Enum ( arabic1Minus ).
///<para>When the item is serialized out as xml, its value is "arabic1Minus".</para>
///</summary>
[EnumString("arabic1Minus")]
Arabic1Minus,
///<summary>
///Autonumbering Enum ( arabic2Minus ).
///<para>When the item is serialized out as xml, its value is "arabic2Minus".</para>
///</summary>
[EnumString("arabic2Minus")]
Arabic2Minus,
///<summary>
///Autonumbering Enum ( hebrew2Minus ).
///<para>When the item is serialized out as xml, its value is "hebrew2Minus".</para>
///</summary>
[EnumString("hebrew2Minus")]
Hebrew2Minus,
///<summary>
///Autonumbering Enum ( thaiAlphaPeriod ).
///<para>When the item is serialized out as xml, its value is "thaiAlphaPeriod".</para>
///</summary>
[EnumString("thaiAlphaPeriod")]
ThaiAlphaPeriod,
///<summary>
///Autonumbering Enum ( thaiAlphaParenR ).
///<para>When the item is serialized out as xml, its value is "thaiAlphaParenR".</para>
///</summary>
[EnumString("thaiAlphaParenR")]
ThaiAlphaParenthesisRight,
///<summary>
///Autonumbering Enum ( thaiAlphaParenBoth ).
///<para>When the item is serialized out as xml, its value is "thaiAlphaParenBoth".</para>
///</summary>
[EnumString("thaiAlphaParenBoth")]
ThaiAlphaParenthesisBoth,
///<summary>
///Autonumbering Enum ( thaiNumPeriod ).
///<para>When the item is serialized out as xml, its value is "thaiNumPeriod".</para>
///</summary>
[EnumString("thaiNumPeriod")]
ThaiNumberPeriod,
///<summary>
///Autonumbering Enum ( thaiNumParenR ).
///<para>When the item is serialized out as xml, its value is "thaiNumParenR".</para>
///</summary>
[EnumString("thaiNumParenR")]
ThaiNumberParenthesisRight,
///<summary>
///Autonumbering Enum ( thaiNumParenBoth ).
///<para>When the item is serialized out as xml, its value is "thaiNumParenBoth".</para>
///</summary>
[EnumString("thaiNumParenBoth")]
ThaiNumberParenthesisBoth,
///<summary>
///Autonumbering Enum ( hindiAlphaPeriod ).
///<para>When the item is serialized out as xml, its value is "hindiAlphaPeriod".</para>
///</summary>
[EnumString("hindiAlphaPeriod")]
HindiAlphaPeriod,
///<summary>
///Autonumbering Enum ( hindiNumPeriod ).
///<para>When the item is serialized out as xml, its value is "hindiNumPeriod".</para>
///</summary>
[EnumString("hindiNumPeriod")]
HindiNumPeriod,
///<summary>
///Autonumbering Enum ( hindiNumParenR ).
///<para>When the item is serialized out as xml, its value is "hindiNumParenR".</para>
///</summary>
[EnumString("hindiNumParenR")]
HindiNumberParenthesisRight,
///<summary>
///Autonumbering Enum ( hindiAlpha1Period ).
///<para>When the item is serialized out as xml, its value is "hindiAlpha1Period".</para>
///</summary>
[EnumString("hindiAlpha1Period")]
HindiAlpha1Period,
 
}
/// <summary>
/// Text Underline Types 
/// </summary> 
public enum TextUnderlineValues
{  
	///<summary>
///Text Underline Enum ( None ).
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Text Underline Enum ( Words ).
///<para>When the item is serialized out as xml, its value is "words".</para>
///</summary>
[EnumString("words")]
Words,
///<summary>
///Text Underline Enum ( Single ).
///<para>When the item is serialized out as xml, its value is "sng".</para>
///</summary>
[EnumString("sng")]
Single,
///<summary>
///Text Underline Enum ( Double ).
///<para>When the item is serialized out as xml, its value is "dbl".</para>
///</summary>
[EnumString("dbl")]
Double,
///<summary>
///Text Underline Enum ( Heavy ).
///<para>When the item is serialized out as xml, its value is "heavy".</para>
///</summary>
[EnumString("heavy")]
Heavy,
///<summary>
///Text Underline Enum ( Dotted ).
///<para>When the item is serialized out as xml, its value is "dotted".</para>
///</summary>
[EnumString("dotted")]
Dotted,
///<summary>
///Text Underline Enum ( Heavy Dotted  ).
///<para>When the item is serialized out as xml, its value is "dottedHeavy".</para>
///</summary>
[EnumString("dottedHeavy")]
HeavyDotted,
///<summary>
///Text Underline Enum ( Dashed ).
///<para>When the item is serialized out as xml, its value is "dash".</para>
///</summary>
[EnumString("dash")]
Dash,
///<summary>
///Text Underline Enum ( Heavy Dashed ).
///<para>When the item is serialized out as xml, its value is "dashHeavy".</para>
///</summary>
[EnumString("dashHeavy")]
DashHeavy,
///<summary>
///Text Underline Enum ( Long Dashed ).
///<para>When the item is serialized out as xml, its value is "dashLong".</para>
///</summary>
[EnumString("dashLong")]
DashLong,
///<summary>
///Text Underline Enum ( Heavy Long Dashed ).
///<para>When the item is serialized out as xml, its value is "dashLongHeavy".</para>
///</summary>
[EnumString("dashLongHeavy")]
DashLongHeavy,
///<summary>
///Text Underline Enum ( Dot Dash ).
///<para>When the item is serialized out as xml, its value is "dotDash".</para>
///</summary>
[EnumString("dotDash")]
DotDash,
///<summary>
///Text Underline Enum ( Heavy Dot Dash ).
///<para>When the item is serialized out as xml, its value is "dotDashHeavy".</para>
///</summary>
[EnumString("dotDashHeavy")]
DotDashHeavy,
///<summary>
///Text Underline Enum ( Dot Dot Dash ).
///<para>When the item is serialized out as xml, its value is "dotDotDash".</para>
///</summary>
[EnumString("dotDotDash")]
DotDotDash,
///<summary>
///Text Underline Enum ( Heavy Dot Dot Dash ).
///<para>When the item is serialized out as xml, its value is "dotDotDashHeavy".</para>
///</summary>
[EnumString("dotDotDashHeavy")]
DotDotDashHeavy,
///<summary>
///Text Underline Enum ( Wavy ).
///<para>When the item is serialized out as xml, its value is "wavy".</para>
///</summary>
[EnumString("wavy")]
Wavy,
///<summary>
///Text Underline Enum ( Heavy Wavy ).
///<para>When the item is serialized out as xml, its value is "wavyHeavy".</para>
///</summary>
[EnumString("wavyHeavy")]
WavyHeavy,
///<summary>
///Text Underline Enum ( Double Wavy ).
///<para>When the item is serialized out as xml, its value is "wavyDbl".</para>
///</summary>
[EnumString("wavyDbl")]
WavyDouble,
 
}
/// <summary>
/// Text Strike Type 
/// </summary> 
public enum TextStrikeValues
{  
	///<summary>
///Text Strike Enum ( No Strike ).
///<para>When the item is serialized out as xml, its value is "noStrike".</para>
///</summary>
[EnumString("noStrike")]
NoStrike,
///<summary>
///Text Strike Enum ( Single Strike ).
///<para>When the item is serialized out as xml, its value is "sngStrike".</para>
///</summary>
[EnumString("sngStrike")]
SingleStrike,
///<summary>
///Text Strike Enum ( Double Strike ).
///<para>When the item is serialized out as xml, its value is "dblStrike".</para>
///</summary>
[EnumString("dblStrike")]
DoubleStrike,
 
}
/// <summary>
/// Text Cap Types 
/// </summary> 
public enum TextCapsValues
{  
	///<summary>
///Text Caps Enum ( None ).
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Text Caps Enum ( Small ).
///<para>When the item is serialized out as xml, its value is "small".</para>
///</summary>
[EnumString("small")]
Small,
///<summary>
///Text Caps Enum ( All ).
///<para>When the item is serialized out as xml, its value is "all".</para>
///</summary>
[EnumString("all")]
All,
 
}
/// <summary>
/// Text Tab Alignment Types 
/// </summary> 
public enum TextTabAlignmentValues
{  
	///<summary>
///Text Tab Alignment Enum ( Left).
///<para>When the item is serialized out as xml, its value is "l".</para>
///</summary>
[EnumString("l")]
Left,
///<summary>
///Text Tab Alignment Enum ( Center ).
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Text Tab Alignment Enum ( Right ).
///<para>When the item is serialized out as xml, its value is "r".</para>
///</summary>
[EnumString("r")]
Right,
///<summary>
///Text Tab Alignment Enum ( Decimal ).
///<para>When the item is serialized out as xml, its value is "dec".</para>
///</summary>
[EnumString("dec")]
Decimal,
 
}
/// <summary>
/// Text Alignment Types 
/// </summary> 
public enum TextAlignmentTypeValues
{  
	///<summary>
///Text Alignment Enum ( Left ).
///<para>When the item is serialized out as xml, its value is "l".</para>
///</summary>
[EnumString("l")]
Left,
///<summary>
///Text Alignment Enum ( Center ).
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Text Alignment Enum ( Right ).
///<para>When the item is serialized out as xml, its value is "r".</para>
///</summary>
[EnumString("r")]
Right,
///<summary>
///Text Alignment Enum ( Justified ).
///<para>When the item is serialized out as xml, its value is "just".</para>
///</summary>
[EnumString("just")]
Justified,
///<summary>
///Text Alignment Enum ( Justified Low ).
///<para>When the item is serialized out as xml, its value is "justLow".</para>
///</summary>
[EnumString("justLow")]
JustifiedLow,
///<summary>
///Text Alignment Enum ( Distributed ).
///<para>When the item is serialized out as xml, its value is "dist".</para>
///</summary>
[EnumString("dist")]
Distributed,
///<summary>
///Text Alignment Enum ( Thai Distributed ).
///<para>When the item is serialized out as xml, its value is "thaiDist".</para>
///</summary>
[EnumString("thaiDist")]
ThaiDistributed,
 
}
/// <summary>
/// Font Alignment Types 
/// </summary> 
public enum TextFontAlignmentValues
{  
	///<summary>
///Font Alignment Enum ( Automatic ).
///<para>When the item is serialized out as xml, its value is "auto".</para>
///</summary>
[EnumString("auto")]
Automatic,
///<summary>
///Font Alignment Enum ( Top ).
///<para>When the item is serialized out as xml, its value is "t".</para>
///</summary>
[EnumString("t")]
Top,
///<summary>
///Font Alignment Enum ( Center ).
///<para>When the item is serialized out as xml, its value is "ctr".</para>
///</summary>
[EnumString("ctr")]
Center,
///<summary>
///Font Alignment Enum ( Baseline ).
///<para>When the item is serialized out as xml, its value is "base".</para>
///</summary>
[EnumString("base")]
Baseline,
///<summary>
///Font Alignment Enum ( Bottom ).
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Bottom,
 
}
/// <summary>
/// Preset Color Value 
/// </summary> 
public enum PresetColorValues
{  
	///<summary>
///Alice Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "aliceBlue".</para>
///</summary>
[EnumString("aliceBlue")]
AliceBlue,
///<summary>
///Antique White Preset Color.
///<para>When the item is serialized out as xml, its value is "antiqueWhite".</para>
///</summary>
[EnumString("antiqueWhite")]
AntiqueWhite,
///<summary>
///Aqua Preset Color.
///<para>When the item is serialized out as xml, its value is "aqua".</para>
///</summary>
[EnumString("aqua")]
Aqua,
///<summary>
///Aquamarine Preset Color.
///<para>When the item is serialized out as xml, its value is "aquamarine".</para>
///</summary>
[EnumString("aquamarine")]
Aquamarine,
///<summary>
///Azure Preset Color.
///<para>When the item is serialized out as xml, its value is "azure".</para>
///</summary>
[EnumString("azure")]
Azure,
///<summary>
///Beige Preset Color.
///<para>When the item is serialized out as xml, its value is "beige".</para>
///</summary>
[EnumString("beige")]
Beige,
///<summary>
///Bisque Preset Color.
///<para>When the item is serialized out as xml, its value is "bisque".</para>
///</summary>
[EnumString("bisque")]
Bisque,
///<summary>
///Black Preset Color.
///<para>When the item is serialized out as xml, its value is "black".</para>
///</summary>
[EnumString("black")]
Black,
///<summary>
///Blanched Almond Preset Color.
///<para>When the item is serialized out as xml, its value is "blanchedAlmond".</para>
///</summary>
[EnumString("blanchedAlmond")]
BlanchedAlmond,
///<summary>
///Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "blue".</para>
///</summary>
[EnumString("blue")]
Blue,
///<summary>
///Blue Violet Preset Color.
///<para>When the item is serialized out as xml, its value is "blueViolet".</para>
///</summary>
[EnumString("blueViolet")]
BlueViolet,
///<summary>
///Brown Preset Color.
///<para>When the item is serialized out as xml, its value is "brown".</para>
///</summary>
[EnumString("brown")]
Brown,
///<summary>
///Burly Wood Preset Color.
///<para>When the item is serialized out as xml, its value is "burlyWood".</para>
///</summary>
[EnumString("burlyWood")]
BurlyWood,
///<summary>
///Cadet Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "cadetBlue".</para>
///</summary>
[EnumString("cadetBlue")]
CadetBlue,
///<summary>
///Chartreuse Preset Color.
///<para>When the item is serialized out as xml, its value is "chartreuse".</para>
///</summary>
[EnumString("chartreuse")]
Chartreuse,
///<summary>
///Chocolate Preset Color.
///<para>When the item is serialized out as xml, its value is "chocolate".</para>
///</summary>
[EnumString("chocolate")]
Chocolate,
///<summary>
///Coral Preset Color.
///<para>When the item is serialized out as xml, its value is "coral".</para>
///</summary>
[EnumString("coral")]
Coral,
///<summary>
///Cornflower Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "cornflowerBlue".</para>
///</summary>
[EnumString("cornflowerBlue")]
CornflowerBlue,
///<summary>
///Cornsilk Preset Color.
///<para>When the item is serialized out as xml, its value is "cornsilk".</para>
///</summary>
[EnumString("cornsilk")]
Cornsilk,
///<summary>
///Crimson Preset Color.
///<para>When the item is serialized out as xml, its value is "crimson".</para>
///</summary>
[EnumString("crimson")]
Crimson,
///<summary>
///Cyan Preset Color.
///<para>When the item is serialized out as xml, its value is "cyan".</para>
///</summary>
[EnumString("cyan")]
Cyan,
///<summary>
///Dark Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "dkBlue".</para>
///</summary>
[EnumString("dkBlue")]
DarkBlue,
///<summary>
///Dark Cyan Preset Color.
///<para>When the item is serialized out as xml, its value is "dkCyan".</para>
///</summary>
[EnumString("dkCyan")]
DarkCyan,
///<summary>
///Dark Goldenrod Preset Color.
///<para>When the item is serialized out as xml, its value is "dkGoldenrod".</para>
///</summary>
[EnumString("dkGoldenrod")]
DarkGoldenrod,
///<summary>
///Dark Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "dkGray".</para>
///</summary>
[EnumString("dkGray")]
DarkGray,
///<summary>
///Dark Green Preset Color.
///<para>When the item is serialized out as xml, its value is "dkGreen".</para>
///</summary>
[EnumString("dkGreen")]
DarkGreen,
///<summary>
///Dark Khaki Preset Color.
///<para>When the item is serialized out as xml, its value is "dkKhaki".</para>
///</summary>
[EnumString("dkKhaki")]
DarkKhaki,
///<summary>
///Dark Magenta Preset Color.
///<para>When the item is serialized out as xml, its value is "dkMagenta".</para>
///</summary>
[EnumString("dkMagenta")]
DarkMagenta,
///<summary>
///Dark Olive Green Preset Color.
///<para>When the item is serialized out as xml, its value is "dkOliveGreen".</para>
///</summary>
[EnumString("dkOliveGreen")]
DarkOliveGreen,
///<summary>
///Dark Orange Preset Color.
///<para>When the item is serialized out as xml, its value is "dkOrange".</para>
///</summary>
[EnumString("dkOrange")]
DarkOrange,
///<summary>
///Dark Orchid Preset Color.
///<para>When the item is serialized out as xml, its value is "dkOrchid".</para>
///</summary>
[EnumString("dkOrchid")]
DarkOrchid,
///<summary>
///Dark Red Preset Color.
///<para>When the item is serialized out as xml, its value is "dkRed".</para>
///</summary>
[EnumString("dkRed")]
DarkRed,
///<summary>
///Dark Salmon Preset Color.
///<para>When the item is serialized out as xml, its value is "dkSalmon".</para>
///</summary>
[EnumString("dkSalmon")]
DarkSalmon,
///<summary>
///Dark Sea Green Preset Color.
///<para>When the item is serialized out as xml, its value is "dkSeaGreen".</para>
///</summary>
[EnumString("dkSeaGreen")]
DarkSeaGreen,
///<summary>
///Dark Slate Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "dkSlateBlue".</para>
///</summary>
[EnumString("dkSlateBlue")]
DarkSlateBlue,
///<summary>
///Dark Slate Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "dkSlateGray".</para>
///</summary>
[EnumString("dkSlateGray")]
DarkSlateGray,
///<summary>
///Dark Turquoise Preset Color.
///<para>When the item is serialized out as xml, its value is "dkTurquoise".</para>
///</summary>
[EnumString("dkTurquoise")]
DarkTurquoise,
///<summary>
///Dark Violet Preset Color.
///<para>When the item is serialized out as xml, its value is "dkViolet".</para>
///</summary>
[EnumString("dkViolet")]
DarkViolet,
///<summary>
///Deep Pink Preset Color.
///<para>When the item is serialized out as xml, its value is "deepPink".</para>
///</summary>
[EnumString("deepPink")]
DeepPink,
///<summary>
///Deep Sky Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "deepSkyBlue".</para>
///</summary>
[EnumString("deepSkyBlue")]
DeepSkyBlue,
///<summary>
///Dim Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "dimGray".</para>
///</summary>
[EnumString("dimGray")]
DimGray,
///<summary>
///Dodger Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "dodgerBlue".</para>
///</summary>
[EnumString("dodgerBlue")]
DodgerBlue,
///<summary>
///Firebrick Preset Color.
///<para>When the item is serialized out as xml, its value is "firebrick".</para>
///</summary>
[EnumString("firebrick")]
Firebrick,
///<summary>
///Floral White Preset Color.
///<para>When the item is serialized out as xml, its value is "floralWhite".</para>
///</summary>
[EnumString("floralWhite")]
FloralWhite,
///<summary>
///Forest Green Preset Color.
///<para>When the item is serialized out as xml, its value is "forestGreen".</para>
///</summary>
[EnumString("forestGreen")]
ForestGreen,
///<summary>
///Fuchsia Preset Color.
///<para>When the item is serialized out as xml, its value is "fuchsia".</para>
///</summary>
[EnumString("fuchsia")]
Fuchsia,
///<summary>
///Gainsboro Preset Color.
///<para>When the item is serialized out as xml, its value is "gainsboro".</para>
///</summary>
[EnumString("gainsboro")]
Gainsboro,
///<summary>
///Ghost White Preset Color.
///<para>When the item is serialized out as xml, its value is "ghostWhite".</para>
///</summary>
[EnumString("ghostWhite")]
GhostWhite,
///<summary>
///Gold Preset Color.
///<para>When the item is serialized out as xml, its value is "gold".</para>
///</summary>
[EnumString("gold")]
Gold,
///<summary>
///Goldenrod Preset Color.
///<para>When the item is serialized out as xml, its value is "goldenrod".</para>
///</summary>
[EnumString("goldenrod")]
Goldenrod,
///<summary>
///Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "gray".</para>
///</summary>
[EnumString("gray")]
Gray,
///<summary>
///Green Preset Color.
///<para>When the item is serialized out as xml, its value is "green".</para>
///</summary>
[EnumString("green")]
Green,
///<summary>
///Green Yellow Preset Color.
///<para>When the item is serialized out as xml, its value is "greenYellow".</para>
///</summary>
[EnumString("greenYellow")]
GreenYellow,
///<summary>
///Honeydew Preset Color.
///<para>When the item is serialized out as xml, its value is "honeydew".</para>
///</summary>
[EnumString("honeydew")]
Honeydew,
///<summary>
///Hot Pink Preset Color.
///<para>When the item is serialized out as xml, its value is "hotPink".</para>
///</summary>
[EnumString("hotPink")]
HotPink,
///<summary>
///Indian Red Preset Color.
///<para>When the item is serialized out as xml, its value is "indianRed".</para>
///</summary>
[EnumString("indianRed")]
IndianRed,
///<summary>
///Indigo Preset Color.
///<para>When the item is serialized out as xml, its value is "indigo".</para>
///</summary>
[EnumString("indigo")]
Indigo,
///<summary>
///Ivory Preset Color.
///<para>When the item is serialized out as xml, its value is "ivory".</para>
///</summary>
[EnumString("ivory")]
Ivory,
///<summary>
///Khaki Preset Color.
///<para>When the item is serialized out as xml, its value is "khaki".</para>
///</summary>
[EnumString("khaki")]
Khaki,
///<summary>
///Lavender Preset Color.
///<para>When the item is serialized out as xml, its value is "lavender".</para>
///</summary>
[EnumString("lavender")]
Lavender,
///<summary>
///Lavender Blush Preset Color.
///<para>When the item is serialized out as xml, its value is "lavenderBlush".</para>
///</summary>
[EnumString("lavenderBlush")]
LavenderBlush,
///<summary>
///Lawn Green Preset Color.
///<para>When the item is serialized out as xml, its value is "lawnGreen".</para>
///</summary>
[EnumString("lawnGreen")]
LawnGreen,
///<summary>
///Lemon Chiffon Preset Color.
///<para>When the item is serialized out as xml, its value is "lemonChiffon".</para>
///</summary>
[EnumString("lemonChiffon")]
LemonChiffon,
///<summary>
///Light Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "ltBlue".</para>
///</summary>
[EnumString("ltBlue")]
LightBlue,
///<summary>
///Light Coral Preset Color.
///<para>When the item is serialized out as xml, its value is "ltCoral".</para>
///</summary>
[EnumString("ltCoral")]
LightCoral,
///<summary>
///Light Cyan Preset Color.
///<para>When the item is serialized out as xml, its value is "ltCyan".</para>
///</summary>
[EnumString("ltCyan")]
LightCyan,
///<summary>
///Light Goldenrod Yellow Preset Color.
///<para>When the item is serialized out as xml, its value is "ltGoldenrodYellow".</para>
///</summary>
[EnumString("ltGoldenrodYellow")]
LightGoldenrodYellow,
///<summary>
///Light Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "ltGray".</para>
///</summary>
[EnumString("ltGray")]
LightGray,
///<summary>
///Light Green Preset Color.
///<para>When the item is serialized out as xml, its value is "ltGreen".</para>
///</summary>
[EnumString("ltGreen")]
LightGreen,
///<summary>
///Light Pink Preset Color.
///<para>When the item is serialized out as xml, its value is "ltPink".</para>
///</summary>
[EnumString("ltPink")]
LightPink,
///<summary>
///Light Salmon Preset Color.
///<para>When the item is serialized out as xml, its value is "ltSalmon".</para>
///</summary>
[EnumString("ltSalmon")]
LightSalmon,
///<summary>
///Light Sea Green Preset Color.
///<para>When the item is serialized out as xml, its value is "ltSeaGreen".</para>
///</summary>
[EnumString("ltSeaGreen")]
LightSeaGreen,
///<summary>
///Light Sky Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "ltSkyBlue".</para>
///</summary>
[EnumString("ltSkyBlue")]
LightSkyBlue,
///<summary>
///Light Slate Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "ltSlateGray".</para>
///</summary>
[EnumString("ltSlateGray")]
LightSlateGray,
///<summary>
///Light Steel Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "ltSteelBlue".</para>
///</summary>
[EnumString("ltSteelBlue")]
LightSteelBlue,
///<summary>
///Light Yellow Preset Color.
///<para>When the item is serialized out as xml, its value is "ltYellow".</para>
///</summary>
[EnumString("ltYellow")]
LightYellow,
///<summary>
///Lime Preset Color.
///<para>When the item is serialized out as xml, its value is "lime".</para>
///</summary>
[EnumString("lime")]
Lime,
///<summary>
///Lime Green Preset Color.
///<para>When the item is serialized out as xml, its value is "limeGreen".</para>
///</summary>
[EnumString("limeGreen")]
LimeGreen,
///<summary>
///Linen Preset Color.
///<para>When the item is serialized out as xml, its value is "linen".</para>
///</summary>
[EnumString("linen")]
Linen,
///<summary>
///Magenta Preset Color.
///<para>When the item is serialized out as xml, its value is "magenta".</para>
///</summary>
[EnumString("magenta")]
Magenta,
///<summary>
///Maroon Preset Color.
///<para>When the item is serialized out as xml, its value is "maroon".</para>
///</summary>
[EnumString("maroon")]
Maroon,
///<summary>
///Medium Aquamarine Preset Color.
///<para>When the item is serialized out as xml, its value is "medAquamarine".</para>
///</summary>
[EnumString("medAquamarine")]
MedAquamarine,
///<summary>
///Medium Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "medBlue".</para>
///</summary>
[EnumString("medBlue")]
MediumBlue,
///<summary>
///Medium Orchid Preset Color.
///<para>When the item is serialized out as xml, its value is "medOrchid".</para>
///</summary>
[EnumString("medOrchid")]
MediumOrchid,
///<summary>
///Medium Purple Preset Color.
///<para>When the item is serialized out as xml, its value is "medPurple".</para>
///</summary>
[EnumString("medPurple")]
MediumPurple,
///<summary>
///Medium Sea Green Preset Color.
///<para>When the item is serialized out as xml, its value is "medSeaGreen".</para>
///</summary>
[EnumString("medSeaGreen")]
MediumSeaGreen,
///<summary>
///Medium Slate Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "medSlateBlue".</para>
///</summary>
[EnumString("medSlateBlue")]
MediumSlateBlue,
///<summary>
///Medium Spring Green Preset Color.
///<para>When the item is serialized out as xml, its value is "medSpringGreen".</para>
///</summary>
[EnumString("medSpringGreen")]
MediumSpringGreen,
///<summary>
///Medium Turquoise Preset Color.
///<para>When the item is serialized out as xml, its value is "medTurquoise".</para>
///</summary>
[EnumString("medTurquoise")]
MediumTurquoise,
///<summary>
///Medium Violet Red Preset Color.
///<para>When the item is serialized out as xml, its value is "medVioletRed".</para>
///</summary>
[EnumString("medVioletRed")]
MediumVioletRed,
///<summary>
///Midnight Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "midnightBlue".</para>
///</summary>
[EnumString("midnightBlue")]
MidnightBlue,
///<summary>
///Mint Cream Preset Color.
///<para>When the item is serialized out as xml, its value is "mintCream".</para>
///</summary>
[EnumString("mintCream")]
MintCream,
///<summary>
///Misty Rose Preset Color.
///<para>When the item is serialized out as xml, its value is "mistyRose".</para>
///</summary>
[EnumString("mistyRose")]
MistyRose,
///<summary>
///Moccasin Preset Color.
///<para>When the item is serialized out as xml, its value is "moccasin".</para>
///</summary>
[EnumString("moccasin")]
Moccasin,
///<summary>
///Navajo White Preset Color.
///<para>When the item is serialized out as xml, its value is "navajoWhite".</para>
///</summary>
[EnumString("navajoWhite")]
NavajoWhite,
///<summary>
///Navy Preset Color.
///<para>When the item is serialized out as xml, its value is "navy".</para>
///</summary>
[EnumString("navy")]
Navy,
///<summary>
///Old Lace Preset Color.
///<para>When the item is serialized out as xml, its value is "oldLace".</para>
///</summary>
[EnumString("oldLace")]
OldLace,
///<summary>
///Olive Preset Color.
///<para>When the item is serialized out as xml, its value is "olive".</para>
///</summary>
[EnumString("olive")]
Olive,
///<summary>
///Olive Drab Preset Color.
///<para>When the item is serialized out as xml, its value is "oliveDrab".</para>
///</summary>
[EnumString("oliveDrab")]
OliveDrab,
///<summary>
///Orange Preset Color.
///<para>When the item is serialized out as xml, its value is "orange".</para>
///</summary>
[EnumString("orange")]
Orange,
///<summary>
///Orange Red Preset Color.
///<para>When the item is serialized out as xml, its value is "orangeRed".</para>
///</summary>
[EnumString("orangeRed")]
OrangeRed,
///<summary>
///Orchid Preset Color.
///<para>When the item is serialized out as xml, its value is "orchid".</para>
///</summary>
[EnumString("orchid")]
Orchid,
///<summary>
///Pale Goldenrod Preset Color.
///<para>When the item is serialized out as xml, its value is "paleGoldenrod".</para>
///</summary>
[EnumString("paleGoldenrod")]
PaleGoldenrod,
///<summary>
///Pale Green Preset Color.
///<para>When the item is serialized out as xml, its value is "paleGreen".</para>
///</summary>
[EnumString("paleGreen")]
PaleGreen,
///<summary>
///Pale Turquoise Preset Color.
///<para>When the item is serialized out as xml, its value is "paleTurquoise".</para>
///</summary>
[EnumString("paleTurquoise")]
PaleTurquoise,
///<summary>
///Pale Violet Red Preset Color.
///<para>When the item is serialized out as xml, its value is "paleVioletRed".</para>
///</summary>
[EnumString("paleVioletRed")]
PaleVioletRed,
///<summary>
///Papaya Whip Preset Color.
///<para>When the item is serialized out as xml, its value is "papayaWhip".</para>
///</summary>
[EnumString("papayaWhip")]
PapayaWhip,
///<summary>
///Peach Puff Preset Color.
///<para>When the item is serialized out as xml, its value is "peachPuff".</para>
///</summary>
[EnumString("peachPuff")]
PeachPuff,
///<summary>
///Peru Preset Color.
///<para>When the item is serialized out as xml, its value is "peru".</para>
///</summary>
[EnumString("peru")]
Peru,
///<summary>
///Pink Preset Color.
///<para>When the item is serialized out as xml, its value is "pink".</para>
///</summary>
[EnumString("pink")]
Pink,
///<summary>
///Plum Preset Color.
///<para>When the item is serialized out as xml, its value is "plum".</para>
///</summary>
[EnumString("plum")]
Plum,
///<summary>
///Powder Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "powderBlue".</para>
///</summary>
[EnumString("powderBlue")]
PowderBlue,
///<summary>
///Purple Preset Color.
///<para>When the item is serialized out as xml, its value is "purple".</para>
///</summary>
[EnumString("purple")]
Purple,
///<summary>
///Red Preset Color.
///<para>When the item is serialized out as xml, its value is "red".</para>
///</summary>
[EnumString("red")]
Red,
///<summary>
///Rosy Brown Preset Color.
///<para>When the item is serialized out as xml, its value is "rosyBrown".</para>
///</summary>
[EnumString("rosyBrown")]
RosyBrown,
///<summary>
///Royal Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "royalBlue".</para>
///</summary>
[EnumString("royalBlue")]
RoyalBlue,
///<summary>
///Saddle Brown Preset Color.
///<para>When the item is serialized out as xml, its value is "saddleBrown".</para>
///</summary>
[EnumString("saddleBrown")]
SaddleBrown,
///<summary>
///Salmon Preset Color.
///<para>When the item is serialized out as xml, its value is "salmon".</para>
///</summary>
[EnumString("salmon")]
Salmon,
///<summary>
///Sandy Brown Preset Color.
///<para>When the item is serialized out as xml, its value is "sandyBrown".</para>
///</summary>
[EnumString("sandyBrown")]
SandyBrown,
///<summary>
///Sea Green Preset Color.
///<para>When the item is serialized out as xml, its value is "seaGreen".</para>
///</summary>
[EnumString("seaGreen")]
SeaGreen,
///<summary>
///Sea Shell Preset Color.
///<para>When the item is serialized out as xml, its value is "seaShell".</para>
///</summary>
[EnumString("seaShell")]
SeaShell,
///<summary>
///Sienna Preset Color.
///<para>When the item is serialized out as xml, its value is "sienna".</para>
///</summary>
[EnumString("sienna")]
Sienna,
///<summary>
///Silver Preset Color.
///<para>When the item is serialized out as xml, its value is "silver".</para>
///</summary>
[EnumString("silver")]
Silver,
///<summary>
///Sky Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "skyBlue".</para>
///</summary>
[EnumString("skyBlue")]
SkyBlue,
///<summary>
///Slate Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "slateBlue".</para>
///</summary>
[EnumString("slateBlue")]
SlateBlue,
///<summary>
///Slate Gray Preset Color.
///<para>When the item is serialized out as xml, its value is "slateGray".</para>
///</summary>
[EnumString("slateGray")]
SlateGray,
///<summary>
///Snow Preset Color.
///<para>When the item is serialized out as xml, its value is "snow".</para>
///</summary>
[EnumString("snow")]
Snow,
///<summary>
///Spring Green Preset Color.
///<para>When the item is serialized out as xml, its value is "springGreen".</para>
///</summary>
[EnumString("springGreen")]
SpringGreen,
///<summary>
///Steel Blue Preset Color.
///<para>When the item is serialized out as xml, its value is "steelBlue".</para>
///</summary>
[EnumString("steelBlue")]
SteelBlue,
///<summary>
///Tan Preset Color.
///<para>When the item is serialized out as xml, its value is "tan".</para>
///</summary>
[EnumString("tan")]
Tan,
///<summary>
///Teal Preset Color.
///<para>When the item is serialized out as xml, its value is "teal".</para>
///</summary>
[EnumString("teal")]
Teal,
///<summary>
///Thistle Preset Color.
///<para>When the item is serialized out as xml, its value is "thistle".</para>
///</summary>
[EnumString("thistle")]
Thistle,
///<summary>
///Tomato Preset Color.
///<para>When the item is serialized out as xml, its value is "tomato".</para>
///</summary>
[EnumString("tomato")]
Tomato,
///<summary>
///Turquoise Preset Color.
///<para>When the item is serialized out as xml, its value is "turquoise".</para>
///</summary>
[EnumString("turquoise")]
Turquoise,
///<summary>
///Violet Preset Color.
///<para>When the item is serialized out as xml, its value is "violet".</para>
///</summary>
[EnumString("violet")]
Violet,
///<summary>
///Wheat Preset Color.
///<para>When the item is serialized out as xml, its value is "wheat".</para>
///</summary>
[EnumString("wheat")]
Wheat,
///<summary>
///White Preset Color.
///<para>When the item is serialized out as xml, its value is "white".</para>
///</summary>
[EnumString("white")]
White,
///<summary>
///White Smoke Preset Color.
///<para>When the item is serialized out as xml, its value is "whiteSmoke".</para>
///</summary>
[EnumString("whiteSmoke")]
WhiteSmoke,
///<summary>
///Yellow Preset Color.
///<para>When the item is serialized out as xml, its value is "yellow".</para>
///</summary>
[EnumString("yellow")]
Yellow,
///<summary>
///Yellow Green Preset Color.
///<para>When the item is serialized out as xml, its value is "yellowGreen".</para>
///</summary>
[EnumString("yellowGreen")]
YellowGreen,
///<summary>
///darkBlue.
///<para>When the item is serialized out as xml, its value is "darkBlue".</para>
///</summary>
[EnumString("darkBlue")]
DarkBlue2010,
///<summary>
///darkCyan.
///<para>When the item is serialized out as xml, its value is "darkCyan".</para>
///</summary>
[EnumString("darkCyan")]
DarkCyan2010,
///<summary>
///darkGoldenrod.
///<para>When the item is serialized out as xml, its value is "darkGoldenrod".</para>
///</summary>
[EnumString("darkGoldenrod")]
DarkGoldenrod2010,
///<summary>
///darkGray.
///<para>When the item is serialized out as xml, its value is "darkGray".</para>
///</summary>
[EnumString("darkGray")]
DarkGray2010,
///<summary>
///darkGrey.
///<para>When the item is serialized out as xml, its value is "darkGrey".</para>
///</summary>
[EnumString("darkGrey")]
DarkGrey2010,
///<summary>
///darkGreen.
///<para>When the item is serialized out as xml, its value is "darkGreen".</para>
///</summary>
[EnumString("darkGreen")]
DarkGreen2010,
///<summary>
///darkKhaki.
///<para>When the item is serialized out as xml, its value is "darkKhaki".</para>
///</summary>
[EnumString("darkKhaki")]
DarkKhaki2010,
///<summary>
///darkMagenta.
///<para>When the item is serialized out as xml, its value is "darkMagenta".</para>
///</summary>
[EnumString("darkMagenta")]
DarkMagenta2010,
///<summary>
///darkOliveGreen.
///<para>When the item is serialized out as xml, its value is "darkOliveGreen".</para>
///</summary>
[EnumString("darkOliveGreen")]
DarkOliveGreen2010,
///<summary>
///darkOrange.
///<para>When the item is serialized out as xml, its value is "darkOrange".</para>
///</summary>
[EnumString("darkOrange")]
DarkOrange2010,
///<summary>
///darkOrchid.
///<para>When the item is serialized out as xml, its value is "darkOrchid".</para>
///</summary>
[EnumString("darkOrchid")]
DarkOrchid2010,
///<summary>
///darkRed.
///<para>When the item is serialized out as xml, its value is "darkRed".</para>
///</summary>
[EnumString("darkRed")]
DarkRed2010,
///<summary>
///darkSalmon.
///<para>When the item is serialized out as xml, its value is "darkSalmon".</para>
///</summary>
[EnumString("darkSalmon")]
DarkSalmon2010,
///<summary>
///darkSeaGreen.
///<para>When the item is serialized out as xml, its value is "darkSeaGreen".</para>
///</summary>
[EnumString("darkSeaGreen")]
DarkSeaGreen2010,
///<summary>
///darkSlateBlue.
///<para>When the item is serialized out as xml, its value is "darkSlateBlue".</para>
///</summary>
[EnumString("darkSlateBlue")]
DarkSlateBlue2010,
///<summary>
///darkSlateGray.
///<para>When the item is serialized out as xml, its value is "darkSlateGray".</para>
///</summary>
[EnumString("darkSlateGray")]
DarkSlateGray2010,
///<summary>
///darkSlateGrey.
///<para>When the item is serialized out as xml, its value is "darkSlateGrey".</para>
///</summary>
[EnumString("darkSlateGrey")]
DarkSlateGrey2010,
///<summary>
///darkTurquoise.
///<para>When the item is serialized out as xml, its value is "darkTurquoise".</para>
///</summary>
[EnumString("darkTurquoise")]
DarkTurquoise2010,
///<summary>
///darkViolet.
///<para>When the item is serialized out as xml, its value is "darkViolet".</para>
///</summary>
[EnumString("darkViolet")]
DarkViolet2010,
///<summary>
///lightBlue.
///<para>When the item is serialized out as xml, its value is "lightBlue".</para>
///</summary>
[EnumString("lightBlue")]
LightBlue2010,
///<summary>
///lightCoral.
///<para>When the item is serialized out as xml, its value is "lightCoral".</para>
///</summary>
[EnumString("lightCoral")]
LightCoral2010,
///<summary>
///lightCyan.
///<para>When the item is serialized out as xml, its value is "lightCyan".</para>
///</summary>
[EnumString("lightCyan")]
LightCyan2010,
///<summary>
///lightGoldenrodYellow.
///<para>When the item is serialized out as xml, its value is "lightGoldenrodYellow".</para>
///</summary>
[EnumString("lightGoldenrodYellow")]
LightGoldenrodYellow2010,
///<summary>
///lightGray.
///<para>When the item is serialized out as xml, its value is "lightGray".</para>
///</summary>
[EnumString("lightGray")]
LightGray2010,
///<summary>
///lightGrey.
///<para>When the item is serialized out as xml, its value is "lightGrey".</para>
///</summary>
[EnumString("lightGrey")]
LightGrey2010,
///<summary>
///lightGreen.
///<para>When the item is serialized out as xml, its value is "lightGreen".</para>
///</summary>
[EnumString("lightGreen")]
LightGreen2010,
///<summary>
///lightPink.
///<para>When the item is serialized out as xml, its value is "lightPink".</para>
///</summary>
[EnumString("lightPink")]
LightPink2010,
///<summary>
///lightSalmon.
///<para>When the item is serialized out as xml, its value is "lightSalmon".</para>
///</summary>
[EnumString("lightSalmon")]
LightSalmon2010,
///<summary>
///lightSeaGreen.
///<para>When the item is serialized out as xml, its value is "lightSeaGreen".</para>
///</summary>
[EnumString("lightSeaGreen")]
LightSeaGreen2010,
///<summary>
///lightSkyBlue.
///<para>When the item is serialized out as xml, its value is "lightSkyBlue".</para>
///</summary>
[EnumString("lightSkyBlue")]
LightSkyBlue2010,
///<summary>
///lightSlateGray.
///<para>When the item is serialized out as xml, its value is "lightSlateGray".</para>
///</summary>
[EnumString("lightSlateGray")]
LightSlateGray2010,
///<summary>
///lightSlateGrey.
///<para>When the item is serialized out as xml, its value is "lightSlateGrey".</para>
///</summary>
[EnumString("lightSlateGrey")]
LightSlateGrey2010,
///<summary>
///lightSteelBlue.
///<para>When the item is serialized out as xml, its value is "lightSteelBlue".</para>
///</summary>
[EnumString("lightSteelBlue")]
LightSteelBlue2010,
///<summary>
///lightYellow.
///<para>When the item is serialized out as xml, its value is "lightYellow".</para>
///</summary>
[EnumString("lightYellow")]
LightYellow2010,
///<summary>
///mediumAquamarine.
///<para>When the item is serialized out as xml, its value is "mediumAquamarine".</para>
///</summary>
[EnumString("mediumAquamarine")]
MediumAquamarine2010,
///<summary>
///mediumBlue.
///<para>When the item is serialized out as xml, its value is "mediumBlue".</para>
///</summary>
[EnumString("mediumBlue")]
MediumBlue2010,
///<summary>
///mediumOrchid.
///<para>When the item is serialized out as xml, its value is "mediumOrchid".</para>
///</summary>
[EnumString("mediumOrchid")]
MediumOrchid2010,
///<summary>
///mediumPurple.
///<para>When the item is serialized out as xml, its value is "mediumPurple".</para>
///</summary>
[EnumString("mediumPurple")]
MediumPurple2010,
///<summary>
///mediumSeaGreen.
///<para>When the item is serialized out as xml, its value is "mediumSeaGreen".</para>
///</summary>
[EnumString("mediumSeaGreen")]
MediumSeaGreen2010,
///<summary>
///mediumSlateBlue.
///<para>When the item is serialized out as xml, its value is "mediumSlateBlue".</para>
///</summary>
[EnumString("mediumSlateBlue")]
MediumSlateBlue2010,
///<summary>
///mediumSpringGreen.
///<para>When the item is serialized out as xml, its value is "mediumSpringGreen".</para>
///</summary>
[EnumString("mediumSpringGreen")]
MediumSpringGreen2010,
///<summary>
///mediumTurquoise.
///<para>When the item is serialized out as xml, its value is "mediumTurquoise".</para>
///</summary>
[EnumString("mediumTurquoise")]
MediumTurquoise2010,
///<summary>
///mediumVioletRed.
///<para>When the item is serialized out as xml, its value is "mediumVioletRed".</para>
///</summary>
[EnumString("mediumVioletRed")]
MediumVioletRed2010,
///<summary>
///dkGrey.
///<para>When the item is serialized out as xml, its value is "dkGrey".</para>
///</summary>
[EnumString("dkGrey")]
DarkGrey,
///<summary>
///dimGrey.
///<para>When the item is serialized out as xml, its value is "dimGrey".</para>
///</summary>
[EnumString("dimGrey")]
DimGrey,
///<summary>
///dkSlateGrey.
///<para>When the item is serialized out as xml, its value is "dkSlateGrey".</para>
///</summary>
[EnumString("dkSlateGrey")]
DarkSlateGrey,
///<summary>
///grey.
///<para>When the item is serialized out as xml, its value is "grey".</para>
///</summary>
[EnumString("grey")]
Grey,
///<summary>
///ltGrey.
///<para>When the item is serialized out as xml, its value is "ltGrey".</para>
///</summary>
[EnumString("ltGrey")]
LightGrey,
///<summary>
///ltSlateGrey.
///<para>When the item is serialized out as xml, its value is "ltSlateGrey".</para>
///</summary>
[EnumString("ltSlateGrey")]
LightSlateGrey,
///<summary>
///slateGrey.
///<para>When the item is serialized out as xml, its value is "slateGrey".</para>
///</summary>
[EnumString("slateGrey")]
SlateGrey,
 
}
}
 
 

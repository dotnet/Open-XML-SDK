// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.CustomXmlSchemaReferences;
using DocumentFormat.OpenXml.Drawing.Wordprocessing;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Math;
using DocumentFormat.OpenXml.Office2010.Word;
using DocumentFormat.OpenXml.Office2013.Word;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Vml;
using DocumentFormat.OpenXml.Vml.Office;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Wordprocessing
{
    /// <summary>
    /// <para>Table Cell Insertion.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellIns.</para>
    /// </summary>
    [SchemaAttr(23, "cellIns")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CellInsertion : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CellInsertion class.
        /// </summary>
        public CellInsertion() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellInsertion>(deep);
    }

    /// <summary>
    /// <para>Table Cell Deletion.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellDel.</para>
    /// </summary>
    [SchemaAttr(23, "cellDel")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CellDeletion : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CellDeletion class.
        /// </summary>
        public CellDeletion() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellDeletion>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlInsRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlInsRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlInsRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlInsRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlInsRangeStart class.
        /// </summary>
        public CustomXmlInsRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlInsRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlDelRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlDelRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlDelRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlDelRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlDelRangeStart class.
        /// </summary>
        public CustomXmlDelRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlDelRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveFromRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveFromRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlMoveFromRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlMoveFromRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveFromRangeStart class.
        /// </summary>
        public CustomXmlMoveFromRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveFromRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveToRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveToRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlMoveToRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlMoveToRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveToRangeStart class.
        /// </summary>
        public CustomXmlMoveToRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveToRangeStart>(deep);
    }

    /// <summary>
    /// <para>Inserted Paragraph.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    [SchemaAttr(23, "ins")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Inserted : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the Inserted class.
        /// </summary>
        public Inserted() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inserted>(deep);
    }

    /// <summary>
    /// <para>Deleted Paragraph.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    [SchemaAttr(23, "del")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Deleted : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the Deleted class.
        /// </summary>
        public Deleted() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Deleted>(deep);
    }

    /// <summary>
    /// <para>Move Source Paragraph.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    [SchemaAttr(23, "moveFrom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveFrom : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFrom class.
        /// </summary>
        public MoveFrom() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFrom>(deep);
    }

    /// <summary>
    /// <para>Move Destination Paragraph.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    [SchemaAttr(23, "moveTo")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveTo : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveTo class.
        /// </summary>
        public MoveTo() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveTo>(deep);
    }

    /// <summary>
    /// <para>Defines the TrackChangeType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TrackChangeType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TrackChangeType class.
        /// </summary>
        protected TrackChangeType() : base()
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Vertically Merged/Split Table Cells.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellMerge.</para>
    /// </summary>
    [SchemaAttr(23, "cellMerge")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CellMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CellMerge class.
        /// </summary>
        public CellMerge() : base()
        {
        }

        /// <summary>
        /// <para>vMerge</para>
        /// <para>Represents the following attribute in the schema: w:vMerge</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vMerge")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues> VerticalMerge { get; set; }

        /// <summary>
        /// <para>vMergeOrig</para>
        /// <para>Represents the following attribute in the schema: w:vMergeOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vMergeOrig")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues> VerticalMergeOriginal { get; set; }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(2)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(3)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(4)]
        public StringValue Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the BookmarkStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookmarkStart.</para>
    /// </summary>
    [SchemaAttr(23, "bookmarkStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BookmarkStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BookmarkStart class.
        /// </summary>
        public BookmarkStart() : base()
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 40L)]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "colFirst")]
        [Index(1)]
        public Int32Value ColumnFirst { get; set; }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "colLast")]
        [Index(2)]
        public Int32Value ColumnLast { get; set; }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displacedByCustomXml")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues> DisplacedByCustomXml { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(4)]
        public StringValue Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookmarkStart>(deep);
    }

    /// <summary>
    /// <para>Defines the BookmarkEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookmarkEnd.</para>
    /// </summary>
    [SchemaAttr(23, "bookmarkEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BookmarkEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the BookmarkEnd class.
        /// </summary>
        public BookmarkEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookmarkEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CommentRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "commentRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CommentRangeStart : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the CommentRangeStart class.
        /// </summary>
        public CommentRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CommentRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "commentRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CommentRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the CommentRangeEnd class.
        /// </summary>
        public CommentRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveFromRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFromRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "moveFromRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveFromRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRangeEnd class.
        /// </summary>
        public MoveFromRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveToRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "moveToRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveToRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRangeEnd class.
        /// </summary>
        public MoveToRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MarkupRangeType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MarkupRangeType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MarkupRangeType class.
        /// </summary>
        protected MarkupRangeType() : base()
        {
        }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displacedByCustomXml")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues> DisplacedByCustomXml { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(1)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the MoveFromRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFromRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "moveFromRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveFromRangeStart : MoveBookmarkType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRangeStart class.
        /// </summary>
        public MoveFromRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToRangeStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveToRangeStart.</para>
    /// </summary>
    [SchemaAttr(23, "moveToRangeStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveToRangeStart : MoveBookmarkType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRangeStart class.
        /// </summary>
        public MoveToRangeStart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveBookmarkType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MoveBookmarkType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MoveBookmarkType class.
        /// </summary>
        protected MoveBookmarkType() : base()
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 40L)]
        [SchemaAttr(23, "name")]
        [Index(2)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "colFirst")]
        [Index(3)]
        public Int32Value ColumnFirst { get; set; }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "colLast")]
        [Index(4)]
        public Int32Value ColumnLast { get; set; }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displacedByCustomXml")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues> DisplacedByCustomXml { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(6)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the CustomXmlInsRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlInsRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlInsRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlInsRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlInsRangeEnd class.
        /// </summary>
        public CustomXmlInsRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlInsRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlDelRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlDelRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlDelRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlDelRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlDelRangeEnd class.
        /// </summary>
        public CustomXmlDelRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlDelRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveFromRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveFromRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlMoveFromRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlMoveFromRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveFromRangeEnd class.
        /// </summary>
        public CustomXmlMoveFromRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveFromRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveToRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveToRangeEnd.</para>
    /// </summary>
    [SchemaAttr(23, "customXmlMoveToRangeEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlMoveToRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveToRangeEnd class.
        /// </summary>
        public CustomXmlMoveToRangeEnd() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveToRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Comment Content Reference Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentReference.</para>
    /// </summary>
    [SchemaAttr(23, "commentReference")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CommentReference : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CommentReference class.
        /// </summary>
        public CommentReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentReference>(deep);
    }

    /// <summary>
    /// <para>Defines the MarkupType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MarkupType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MarkupType class.
        /// </summary>
        protected MarkupType() : base()
        {
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(0)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the ParagraphStyleId Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pStyle.</para>
    /// </summary>
    [SchemaAttr(23, "pStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphStyleId : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphStyleId class.
        /// </summary>
        public ParagraphStyleId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphStyleId>(deep);
    }

    /// <summary>
    /// <para>Date Display Mask.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dateFormat.</para>
    /// </summary>
    [SchemaAttr(23, "dateFormat")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DateFormat : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DateFormat class.
        /// </summary>
        public DateFormat() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DateFormat>(deep);
    }

    /// <summary>
    /// <para>Document Part Gallery Filter.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartGallery.</para>
    /// </summary>
    [SchemaAttr(23, "docPartGallery")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartGallery : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartGallery class.
        /// </summary>
        public DocPartGallery() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartGallery>(deep);
    }

    /// <summary>
    /// <para>Document Part Category Filter.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartCategory.</para>
    /// </summary>
    [SchemaAttr(23, "docPartCategory")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartCategory : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartCategory class.
        /// </summary>
        public DocPartCategory() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartCategory>(deep);
    }

    /// <summary>
    /// <para>Document Part Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPart.</para>
    /// </summary>
    [SchemaAttr(23, "docPart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartReference : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartReference class.
        /// </summary>
        public DocPartReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartReference>(deep);
    }

    /// <summary>
    /// <para>Custom XML Element Placeholder Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:placeholder.</para>
    /// </summary>
    [SchemaAttr(23, "placeholder")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlPlaceholder : StringType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlPlaceholder class.
        /// </summary>
        public CustomXmlPlaceholder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCaption Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCaption.</para>
    /// </summary>
    [SchemaAttr(23, "tblCaption")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class TableCaption : StringType
    {
        /// <summary>
        /// Initializes a new instance of the TableCaption class.
        /// </summary>
        public TableCaption() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCaption>(deep);
    }

    /// <summary>
    /// <para>Defines the TableDescription Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblDescription.</para>
    /// </summary>
    [SchemaAttr(23, "tblDescription")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class TableDescription : StringType
    {
        /// <summary>
        /// Initializes a new instance of the TableDescription class.
        /// </summary>
        public TableDescription() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableDescription>(deep);
    }

    /// <summary>
    /// <para>Data Source Name for Column.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Name : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Name class.
        /// </summary>
        public Name() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Name>(deep);
    }

    /// <summary>
    /// <para>Predefined Merge Field Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mappedName.</para>
    /// </summary>
    [SchemaAttr(23, "mappedName")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MappedName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the MappedName class.
        /// </summary>
        public MappedName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MappedName>(deep);
    }

    /// <summary>
    /// <para>UDL Connection String.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:udl.</para>
    /// </summary>
    [SchemaAttr(23, "udl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UdlConnectionString : StringType
    {
        /// <summary>
        /// Initializes a new instance of the UdlConnectionString class.
        /// </summary>
        public UdlConnectionString() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UdlConnectionString>(deep);
    }

    /// <summary>
    /// <para>Data Source Table Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:table.</para>
    /// </summary>
    [SchemaAttr(23, "table")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DataSourceTableName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceTableName class.
        /// </summary>
        public DataSourceTableName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceTableName>(deep);
    }

    /// <summary>
    /// <para>Data Source Connection String.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:connectString.</para>
    /// </summary>
    [SchemaAttr(23, "connectString")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ConnectString : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ConnectString class.
        /// </summary>
        public ConnectString() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectString>(deep);
    }

    /// <summary>
    /// <para>Query For Data Source Records To Merge.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:query.</para>
    /// </summary>
    [SchemaAttr(23, "query")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Query : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Query class.
        /// </summary>
        public Query() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Query>(deep);
    }

    /// <summary>
    /// <para>Column Containing E-mail Address.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:addressFieldName.</para>
    /// </summary>
    [SchemaAttr(23, "addressFieldName")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AddressFieldName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AddressFieldName class.
        /// </summary>
        public AddressFieldName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AddressFieldName>(deep);
    }

    /// <summary>
    /// <para>Merged E-mail or Fax Subject Line.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailSubject.</para>
    /// </summary>
    [SchemaAttr(23, "mailSubject")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MailSubject : StringType
    {
        /// <summary>
        /// Initializes a new instance of the MailSubject class.
        /// </summary>
        public MailSubject() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailSubject>(deep);
    }

    /// <summary>
    /// <para>Frame Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sz.</para>
    /// </summary>
    [SchemaAttr(23, "sz")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FrameSize : StringType
    {
        /// <summary>
        /// Initializes a new instance of the FrameSize class.
        /// </summary>
        public FrameSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameSize>(deep);
    }

    /// <summary>
    /// <para>Associated Paragraph Style Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:style.</para>
    /// </summary>
    [SchemaAttr(23, "style")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleId : StringType
    {
        /// <summary>
        /// Initializes a new instance of the StyleId class.
        /// </summary>
        public StyleId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleId>(deep);
    }

    /// <summary>
    /// <para>Description for Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:description.</para>
    /// </summary>
    [SchemaAttr(23, "description")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Description : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Description class.
        /// </summary>
        public Description() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Description>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtAlias Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alias.</para>
    /// </summary>
    [SchemaAttr(23, "alias")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtAlias : StringType
    {
        /// <summary>
        /// Initializes a new instance of the SdtAlias class.
        /// </summary>
        public SdtAlias() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtAlias>(deep);
    }

    /// <summary>
    /// <para>Defines the Tag Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tag.</para>
    /// </summary>
    [SchemaAttr(23, "tag")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Tag : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tag>(deep);
    }

    /// <summary>
    /// <para>Attached Custom XML Schema.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attachedSchema.</para>
    /// </summary>
    [SchemaAttr(23, "attachedSchema")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AttachedSchema : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AttachedSchema class.
        /// </summary>
        public AttachedSchema() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AttachedSchema>(deep);
    }

    /// <summary>
    /// <para>Radix Point for Field Code Evaluation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:decimalSymbol.</para>
    /// </summary>
    [SchemaAttr(23, "decimalSymbol")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DecimalSymbol : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DecimalSymbol class.
        /// </summary>
        public DecimalSymbol() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DecimalSymbol>(deep);
    }

    /// <summary>
    /// <para>List Separator for Field Code Evaluation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listSeparator.</para>
    /// </summary>
    [SchemaAttr(23, "listSeparator")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ListSeparator : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ListSeparator class.
        /// </summary>
        public ListSeparator() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListSeparator>(deep);
    }

    /// <summary>
    /// <para>Defines the WebPageEncoding Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:encoding.</para>
    /// </summary>
    [SchemaAttr(23, "encoding")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WebPageEncoding : StringType
    {
        /// <summary>
        /// Initializes a new instance of the WebPageEncoding class.
        /// </summary>
        public WebPageEncoding() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPageEncoding>(deep);
    }

    /// <summary>
    /// <para>Defines the AltName Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altName.</para>
    /// </summary>
    [SchemaAttr(23, "altName")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AltName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AltName class.
        /// </summary>
        public AltName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltName>(deep);
    }

    /// <summary>
    /// <para>Defines the StringType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class StringType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StringType class.
        /// </summary>
        protected StringType() : base()
        {
        }

        /// <summary>
        /// <para>String Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the KeepNext Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:keepNext.</para>
    /// </summary>
    [SchemaAttr(23, "keepNext")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class KeepNext : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the KeepNext class.
        /// </summary>
        public KeepNext() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeepNext>(deep);
    }

    /// <summary>
    /// <para>Defines the KeepLines Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:keepLines.</para>
    /// </summary>
    [SchemaAttr(23, "keepLines")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class KeepLines : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the KeepLines class.
        /// </summary>
        public KeepLines() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeepLines>(deep);
    }

    /// <summary>
    /// <para>Defines the PageBreakBefore Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pageBreakBefore.</para>
    /// </summary>
    [SchemaAttr(23, "pageBreakBefore")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageBreakBefore : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PageBreakBefore class.
        /// </summary>
        public PageBreakBefore() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageBreakBefore>(deep);
    }

    /// <summary>
    /// <para>Defines the WidowControl Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:widowControl.</para>
    /// </summary>
    [SchemaAttr(23, "widowControl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WidowControl : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WidowControl class.
        /// </summary>
        public WidowControl() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidowControl>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressLineNumbers Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressLineNumbers.</para>
    /// </summary>
    [SchemaAttr(23, "suppressLineNumbers")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressLineNumbers : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressLineNumbers class.
        /// </summary>
        public SuppressLineNumbers() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressLineNumbers>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressAutoHyphens Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressAutoHyphens.</para>
    /// </summary>
    [SchemaAttr(23, "suppressAutoHyphens")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressAutoHyphens : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressAutoHyphens class.
        /// </summary>
        public SuppressAutoHyphens() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressAutoHyphens>(deep);
    }

    /// <summary>
    /// <para>Defines the Kinsoku Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:kinsoku.</para>
    /// </summary>
    [SchemaAttr(23, "kinsoku")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Kinsoku : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Kinsoku class.
        /// </summary>
        public Kinsoku() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kinsoku>(deep);
    }

    /// <summary>
    /// <para>Defines the WordWrap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wordWrap.</para>
    /// </summary>
    [SchemaAttr(23, "wordWrap")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WordWrap : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordWrap class.
        /// </summary>
        public WordWrap() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the OverflowPunctuation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:overflowPunct.</para>
    /// </summary>
    [SchemaAttr(23, "overflowPunct")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class OverflowPunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OverflowPunctuation class.
        /// </summary>
        public OverflowPunctuation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OverflowPunctuation>(deep);
    }

    /// <summary>
    /// <para>Defines the TopLinePunctuation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:topLinePunct.</para>
    /// </summary>
    [SchemaAttr(23, "topLinePunct")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopLinePunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TopLinePunctuation class.
        /// </summary>
        public TopLinePunctuation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLinePunctuation>(deep);
    }

    /// <summary>
    /// <para>Defines the AutoSpaceDE Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceDE.</para>
    /// </summary>
    [SchemaAttr(23, "autoSpaceDE")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoSpaceDE : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceDE class.
        /// </summary>
        public AutoSpaceDE() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceDE>(deep);
    }

    /// <summary>
    /// <para>Defines the AutoSpaceDN Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceDN.</para>
    /// </summary>
    [SchemaAttr(23, "autoSpaceDN")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoSpaceDN : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceDN class.
        /// </summary>
        public AutoSpaceDN() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceDN>(deep);
    }

    /// <summary>
    /// <para>Defines the BiDi Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bidi.</para>
    /// </summary>
    [SchemaAttr(23, "bidi")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BiDi : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BiDi class.
        /// </summary>
        public BiDi() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiDi>(deep);
    }

    /// <summary>
    /// <para>Defines the AdjustRightIndent Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:adjustRightInd.</para>
    /// </summary>
    [SchemaAttr(23, "adjustRightInd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AdjustRightIndent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustRightIndent class.
        /// </summary>
        public AdjustRightIndent() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustRightIndent>(deep);
    }

    /// <summary>
    /// <para>Defines the SnapToGrid Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:snapToGrid.</para>
    /// </summary>
    [SchemaAttr(23, "snapToGrid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SnapToGrid : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SnapToGrid class.
        /// </summary>
        public SnapToGrid() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SnapToGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the ContextualSpacing Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:contextualSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "contextualSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ContextualSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ContextualSpacing class.
        /// </summary>
        public ContextualSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContextualSpacing>(deep);
    }

    /// <summary>
    /// <para>Defines the MirrorIndents Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mirrorIndents.</para>
    /// </summary>
    [SchemaAttr(23, "mirrorIndents")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MirrorIndents : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MirrorIndents class.
        /// </summary>
        public MirrorIndents() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MirrorIndents>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressOverlap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressOverlap.</para>
    /// </summary>
    [SchemaAttr(23, "suppressOverlap")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressOverlap : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressOverlap class.
        /// </summary>
        public SuppressOverlap() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressOverlap>(deep);
    }

    /// <summary>
    /// <para>Defines the Bold Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:b.</para>
    /// </summary>
    [SchemaAttr(23, "b")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Bold : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Bold class.
        /// </summary>
        public Bold() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bold>(deep);
    }

    /// <summary>
    /// <para>Defines the BoldComplexScript Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bCs.</para>
    /// </summary>
    [SchemaAttr(23, "bCs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BoldComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BoldComplexScript class.
        /// </summary>
        public BoldComplexScript() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BoldComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the Italic Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:i.</para>
    /// </summary>
    [SchemaAttr(23, "i")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Italic : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Italic class.
        /// </summary>
        public Italic() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Italic>(deep);
    }

    /// <summary>
    /// <para>Defines the ItalicComplexScript Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:iCs.</para>
    /// </summary>
    [SchemaAttr(23, "iCs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ItalicComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ItalicComplexScript class.
        /// </summary>
        public ItalicComplexScript() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ItalicComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the Caps Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:caps.</para>
    /// </summary>
    [SchemaAttr(23, "caps")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Caps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Caps class.
        /// </summary>
        public Caps() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Caps>(deep);
    }

    /// <summary>
    /// <para>Defines the SmallCaps Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:smallCaps.</para>
    /// </summary>
    [SchemaAttr(23, "smallCaps")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SmallCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SmallCaps class.
        /// </summary>
        public SmallCaps() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SmallCaps>(deep);
    }

    /// <summary>
    /// <para>Defines the Strike Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:strike.</para>
    /// </summary>
    [SchemaAttr(23, "strike")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Strike : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Strike class.
        /// </summary>
        public Strike() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Strike>(deep);
    }

    /// <summary>
    /// <para>Defines the DoubleStrike Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dstrike.</para>
    /// </summary>
    [SchemaAttr(23, "dstrike")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoubleStrike : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoubleStrike class.
        /// </summary>
        public DoubleStrike() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoubleStrike>(deep);
    }

    /// <summary>
    /// <para>Defines the Outline Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:outline.</para>
    /// </summary>
    [SchemaAttr(23, "outline")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Outline : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);
    }

    /// <summary>
    /// <para>Defines the Shadow Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shadow.</para>
    /// </summary>
    [SchemaAttr(23, "shadow")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Shadow : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Shadow class.
        /// </summary>
        public Shadow() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shadow>(deep);
    }

    /// <summary>
    /// <para>Defines the Emboss Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:emboss.</para>
    /// </summary>
    [SchemaAttr(23, "emboss")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Emboss : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Emboss class.
        /// </summary>
        public Emboss() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Emboss>(deep);
    }

    /// <summary>
    /// <para>Defines the Imprint Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:imprint.</para>
    /// </summary>
    [SchemaAttr(23, "imprint")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Imprint : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Imprint class.
        /// </summary>
        public Imprint() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Imprint>(deep);
    }

    /// <summary>
    /// <para>Defines the NoProof Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noProof.</para>
    /// </summary>
    [SchemaAttr(23, "noProof")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoProof : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoProof class.
        /// </summary>
        public NoProof() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoProof>(deep);
    }

    /// <summary>
    /// <para>Defines the Vanish Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vanish.</para>
    /// </summary>
    [SchemaAttr(23, "vanish")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Vanish : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Vanish class.
        /// </summary>
        public Vanish() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Vanish>(deep);
    }

    /// <summary>
    /// <para>Defines the WebHidden Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:webHidden.</para>
    /// </summary>
    [SchemaAttr(23, "webHidden")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WebHidden : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WebHidden class.
        /// </summary>
        public WebHidden() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebHidden>(deep);
    }

    /// <summary>
    /// <para>Defines the RightToLeftText Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rtl.</para>
    /// </summary>
    [SchemaAttr(23, "rtl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RightToLeftText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RightToLeftText class.
        /// </summary>
        public RightToLeftText() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightToLeftText>(deep);
    }

    /// <summary>
    /// <para>Defines the ComplexScript Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cs.</para>
    /// </summary>
    [SchemaAttr(23, "cs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ComplexScript class.
        /// </summary>
        public ComplexScript() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the SpecVanish Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:specVanish.</para>
    /// </summary>
    [SchemaAttr(23, "specVanish")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SpecVanish : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpecVanish class.
        /// </summary>
        public SpecVanish() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpecVanish>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeMath Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:oMath.</para>
    /// </summary>
    [SchemaAttr(23, "oMath")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class OfficeMath : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OfficeMath class.
        /// </summary>
        public OfficeMath() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeMath>(deep);
    }

    /// <summary>
    /// <para>Defines the Hidden Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hidden.</para>
    /// </summary>
    [SchemaAttr(23, "hidden")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Hidden : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Hidden class.
        /// </summary>
        public Hidden() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hidden>(deep);
    }

    /// <summary>
    /// <para>Defines the FormProtection Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:formProt.</para>
    /// </summary>
    [SchemaAttr(23, "formProt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FormProtection : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FormProtection class.
        /// </summary>
        public FormProtection() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormProtection>(deep);
    }

    /// <summary>
    /// <para>Defines the NoEndnote Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noEndnote.</para>
    /// </summary>
    [SchemaAttr(23, "noEndnote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoEndnote : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoEndnote class.
        /// </summary>
        public NoEndnote() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoEndnote>(deep);
    }

    /// <summary>
    /// <para>Defines the TitlePage Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:titlePg.</para>
    /// </summary>
    [SchemaAttr(23, "titlePg")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TitlePage : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TitlePage class.
        /// </summary>
        public TitlePage() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TitlePage>(deep);
    }

    /// <summary>
    /// <para>Defines the GutterOnRight Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rtlGutter.</para>
    /// </summary>
    [SchemaAttr(23, "rtlGutter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GutterOnRight : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GutterOnRight class.
        /// </summary>
        public GutterOnRight() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GutterOnRight>(deep);
    }

    /// <summary>
    /// <para>Form Field Enabled.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:enabled.</para>
    /// </summary>
    [SchemaAttr(23, "enabled")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Enabled : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Enabled class.
        /// </summary>
        public Enabled() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Enabled>(deep);
    }

    /// <summary>
    /// <para>Recalculate Fields When Current Field Is Modified.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:calcOnExit.</para>
    /// </summary>
    [SchemaAttr(23, "calcOnExit")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CalculateOnExit : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the CalculateOnExit class.
        /// </summary>
        public CalculateOnExit() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculateOnExit>(deep);
    }

    /// <summary>
    /// <para>Automatically Size Form Field.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sizeAuto.</para>
    /// </summary>
    [SchemaAttr(23, "sizeAuto")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutomaticallySizeFormField : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutomaticallySizeFormField class.
        /// </summary>
        public AutomaticallySizeFormField() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutomaticallySizeFormField>(deep);
    }

    /// <summary>
    /// <para>Default Checkbox Form Field State.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    [SchemaAttr(23, "default")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DefaultCheckBoxFormFieldState : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultCheckBoxFormFieldState class.
        /// </summary>
        public DefaultCheckBoxFormFieldState() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultCheckBoxFormFieldState>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field State.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checked.</para>
    /// </summary>
    [SchemaAttr(23, "checked")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Checked : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Checked class.
        /// </summary>
        public Checked() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Checked>(deep);
    }

    /// <summary>
    /// <para>Keep Source Formatting on Import.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:matchSrc.</para>
    /// </summary>
    [SchemaAttr(23, "matchSrc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MatchSource : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MatchSource class.
        /// </summary>
        public MatchSource() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MatchSource>(deep);
    }

    /// <summary>
    /// <para>Invalidated Field Cache.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dirty.</para>
    /// </summary>
    [SchemaAttr(23, "dirty")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Dirty : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Dirty class.
        /// </summary>
        public Dirty() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dirty>(deep);
    }

    /// <summary>
    /// <para>Built-In Document Part.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartUnique.</para>
    /// </summary>
    [SchemaAttr(23, "docPartUnique")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartUnique : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartUnique class.
        /// </summary>
        public DocPartUnique() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartUnique>(deep);
    }

    /// <summary>
    /// <para>Record Is Included in Mail Merge.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:active.</para>
    /// </summary>
    [SchemaAttr(23, "active")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Active : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Active class.
        /// </summary>
        public Active() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Active>(deep);
    }

    /// <summary>
    /// <para>Use Country/Region-Based Address Field Ordering.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dynamicAddress.</para>
    /// </summary>
    [SchemaAttr(23, "dynamicAddress")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DynamicAddress : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DynamicAddress class.
        /// </summary>
        public DynamicAddress() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DynamicAddress>(deep);
    }

    /// <summary>
    /// <para>First Row of Data Source Contains Column Names.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fHdr.</para>
    /// </summary>
    [SchemaAttr(23, "fHdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FirstRowHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FirstRowHeader class.
        /// </summary>
        public FirstRowHeader() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstRowHeader>(deep);
    }

    /// <summary>
    /// <para>Query Contains Link to External Query File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkToQuery.</para>
    /// </summary>
    [SchemaAttr(23, "linkToQuery")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LinkToQuery : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LinkToQuery class.
        /// </summary>
        public LinkToQuery() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkToQuery>(deep);
    }

    /// <summary>
    /// <para>Remove Blank Lines from Merged Documents.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressBlankLines.</para>
    /// </summary>
    [SchemaAttr(23, "doNotSuppressBlankLines")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotSuppressBlankLines : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressBlankLines class.
        /// </summary>
        public DoNotSuppressBlankLines() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressBlankLines>(deep);
    }

    /// <summary>
    /// <para>Merged Document To E-Mail Attachment.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailAsAttachment.</para>
    /// </summary>
    [SchemaAttr(23, "mailAsAttachment")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MailAsAttachment : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MailAsAttachment class.
        /// </summary>
        public MailAsAttachment() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailAsAttachment>(deep);
    }

    /// <summary>
    /// <para>View Merged Data Within Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:viewMergedData.</para>
    /// </summary>
    [SchemaAttr(23, "viewMergedData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ViewMergedData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ViewMergedData class.
        /// </summary>
        public ViewMergedData() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ViewMergedData>(deep);
    }

    /// <summary>
    /// <para>Display All Levels Using Arabic Numerals.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:isLgl.</para>
    /// </summary>
    [SchemaAttr(23, "isLgl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class IsLegalNumberingStyle : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the IsLegalNumberingStyle class.
        /// </summary>
        public IsLegalNumberingStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<IsLegalNumberingStyle>(deep);
    }

    /// <summary>
    /// <para>Data for HTML blockquote Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:blockQuote.</para>
    /// </summary>
    [SchemaAttr(23, "blockQuote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BlockQuote : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BlockQuote class.
        /// </summary>
        public BlockQuote() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlockQuote>(deep);
    }

    /// <summary>
    /// <para>Data for HTML body Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bodyDiv.</para>
    /// </summary>
    [SchemaAttr(23, "bodyDiv")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BodyDiv : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BodyDiv class.
        /// </summary>
        public BodyDiv() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BodyDiv>(deep);
    }

    /// <summary>
    /// <para>Use Simplified Rules For Table Border Conflicts.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useSingleBorderforContiguousCells.</para>
    /// </summary>
    [SchemaAttr(23, "useSingleBorderforContiguousCells")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseSingleBorderForContiguousCells : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseSingleBorderForContiguousCells class.
        /// </summary>
        public UseSingleBorderForContiguousCells() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseSingleBorderForContiguousCells>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 6.x Paragraph Justification.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wpJustification.</para>
    /// </summary>
    [SchemaAttr(23, "wpJustification")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WordPerfectJustification : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordPerfectJustification class.
        /// </summary>
        public WordPerfectJustification() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordPerfectJustification>(deep);
    }

    /// <summary>
    /// <para>Do Not Create Custom Tab Stop for Hanging Indent.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noTabHangInd.</para>
    /// </summary>
    [SchemaAttr(23, "noTabHangInd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoTabHangIndent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoTabHangIndent class.
        /// </summary>
        public NoTabHangIndent() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoTabHangIndent>(deep);
    }

    /// <summary>
    /// <para>Do Not Add Leading Between Lines of Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLeading.</para>
    /// </summary>
    [SchemaAttr(23, "noLeading")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoLeading : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoLeading class.
        /// </summary>
        public NoLeading() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLeading>(deep);
    }

    /// <summary>
    /// <para>Add Additional Space Below Baseline For Underlined East Asian Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spaceForUL.</para>
    /// </summary>
    [SchemaAttr(23, "spaceForUL")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SpaceForUnderline : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceForUnderline class.
        /// </summary>
        public SpaceForUnderline() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceForUnderline>(deep);
    }

    /// <summary>
    /// <para>Do Not Balance Text Columns within a Section.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noColumnBalance.</para>
    /// </summary>
    [SchemaAttr(23, "noColumnBalance")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoColumnBalance : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoColumnBalance class.
        /// </summary>
        public NoColumnBalance() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoColumnBalance>(deep);
    }

    /// <summary>
    /// <para>Balance Single Byte and Double Byte Characters.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:balanceSingleByteDoubleByteWidth.</para>
    /// </summary>
    [SchemaAttr(23, "balanceSingleByteDoubleByteWidth")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BalanceSingleByteDoubleByteWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BalanceSingleByteDoubleByteWidth class.
        /// </summary>
        public BalanceSingleByteDoubleByteWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BalanceSingleByteDoubleByteWidth>(deep);
    }

    /// <summary>
    /// <para>Do Not Center Content on Lines With Exact Line Height.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noExtraLineSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "noExtraLineSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoExtraLineSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoExtraLineSpacing class.
        /// </summary>
        public NoExtraLineSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoExtraLineSpacing>(deep);
    }

    /// <summary>
    /// <para>Convert Backslash To Yen Sign When Entered.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotLeaveBackslashAlone.</para>
    /// </summary>
    [SchemaAttr(23, "doNotLeaveBackslashAlone")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotLeaveBackslashAlone : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotLeaveBackslashAlone class.
        /// </summary>
        public DoNotLeaveBackslashAlone() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotLeaveBackslashAlone>(deep);
    }

    /// <summary>
    /// <para>Underline All Trailing Spaces.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ulTrailSpace.</para>
    /// </summary>
    [SchemaAttr(23, "ulTrailSpace")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UnderlineTrailingSpaces : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineTrailingSpaces class.
        /// </summary>
        public UnderlineTrailingSpaces() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineTrailingSpaces>(deep);
    }

    /// <summary>
    /// <para>Don't Justify Lines Ending in Soft Line Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotExpandShiftReturn.</para>
    /// </summary>
    [SchemaAttr(23, "doNotExpandShiftReturn")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotExpandShiftReturn : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotExpandShiftReturn class.
        /// </summary>
        public DoNotExpandShiftReturn() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotExpandShiftReturn>(deep);
    }

    /// <summary>
    /// <para>Only Expand/Condense Text By Whole Points.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacingInWholePoints.</para>
    /// </summary>
    [SchemaAttr(23, "spacingInWholePoints")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SpacingInWholePoints : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpacingInWholePoints class.
        /// </summary>
        public SpacingInWholePoints() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingInWholePoints>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 6.0 Line Wrapping for East Asian Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lineWrapLikeWord6.</para>
    /// </summary>
    [SchemaAttr(23, "lineWrapLikeWord6")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LineWrapLikeWord6 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LineWrapLikeWord6 class.
        /// </summary>
        public LineWrapLikeWord6() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineWrapLikeWord6>(deep);
    }

    /// <summary>
    /// <para>Print Body Text before Header/Footer Contents.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printBodyTextBeforeHeader.</para>
    /// </summary>
    [SchemaAttr(23, "printBodyTextBeforeHeader")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintBodyTextBeforeHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintBodyTextBeforeHeader class.
        /// </summary>
        public PrintBodyTextBeforeHeader() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintBodyTextBeforeHeader>(deep);
    }

    /// <summary>
    /// <para>Print Colors as Black And White without Dithering.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printColBlack.</para>
    /// </summary>
    [SchemaAttr(23, "printColBlack")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintColorBlackWhite : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintColorBlackWhite class.
        /// </summary>
        public PrintColorBlackWhite() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintColorBlackWhite>(deep);
    }

    /// <summary>
    /// <para>Space width.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wpSpaceWidth.</para>
    /// </summary>
    [SchemaAttr(23, "wpSpaceWidth")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WordPerfectSpaceWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordPerfectSpaceWidth class.
        /// </summary>
        public WordPerfectSpaceWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordPerfectSpaceWidth>(deep);
    }

    /// <summary>
    /// <para>Display Page/Column Breaks Present in Frames.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showBreaksInFrames.</para>
    /// </summary>
    [SchemaAttr(23, "showBreaksInFrames")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShowBreaksInFrames : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowBreaksInFrames class.
        /// </summary>
        public ShowBreaksInFrames() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowBreaksInFrames>(deep);
    }

    /// <summary>
    /// <para>Increase Priority Of Font Size During Font Substitution.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:subFontBySize.</para>
    /// </summary>
    [SchemaAttr(23, "subFontBySize")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SubFontBySize : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SubFontBySize class.
        /// </summary>
        public SubFontBySize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SubFontBySize>(deep);
    }

    /// <summary>
    /// <para>Ignore Exact Line Height for Last Line on Page.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressBottomSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "suppressBottomSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressBottomSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressBottomSpacing class.
        /// </summary>
        public SuppressBottomSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressBottomSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Minimum and Exact Line Height for First Line on Page.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressTopSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "suppressTopSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressTopSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressTopSpacing class.
        /// </summary>
        public SuppressTopSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressTopSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Minimum Line Height for First Line on Page.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressSpacingAtTopOfPage.</para>
    /// </summary>
    [SchemaAttr(23, "suppressSpacingAtTopOfPage")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressSpacingAtTopOfPage : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressSpacingAtTopOfPage class.
        /// </summary>
        public SuppressSpacingAtTopOfPage() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressSpacingAtTopOfPage>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 5.x Line Spacing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressTopSpacingWP.</para>
    /// </summary>
    [SchemaAttr(23, "suppressTopSpacingWP")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressTopSpacingWordPerfect : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressTopSpacingWordPerfect class.
        /// </summary>
        public SuppressTopSpacingWordPerfect() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressTopSpacingWordPerfect>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Space Before On First Line After a Page Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressSpBfAfterPgBrk.</para>
    /// </summary>
    [SchemaAttr(23, "suppressSpBfAfterPgBrk")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SuppressSpacingBeforeAfterPageBreak : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressSpacingBeforeAfterPageBreak class.
        /// </summary>
        public SuppressSpacingBeforeAfterPageBreak() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressSpacingBeforeAfterPageBreak>(deep);
    }

    /// <summary>
    /// <para>Swap Paragraph Borders on Odd Numbered Pages.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:swapBordersFacingPages.</para>
    /// </summary>
    [SchemaAttr(23, "swapBordersFacingPages")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SwapBordersFacingPages : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SwapBordersFacingPages class.
        /// </summary>
        public SwapBordersFacingPages() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SwapBordersFacingPages>(deep);
    }

    /// <summary>
    /// <para>Treat Backslash Quotation Delimiter as Two Quotation Marks.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:convMailMergeEsc.</para>
    /// </summary>
    [SchemaAttr(23, "convMailMergeEsc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ConvertMailMergeEscape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ConvertMailMergeEscape class.
        /// </summary>
        public ConvertMailMergeEscape() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConvertMailMergeEscape>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 6.x Font Height Calculation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:truncateFontHeightsLikeWP6.</para>
    /// </summary>
    [SchemaAttr(23, "truncateFontHeightsLikeWP6")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TruncateFontHeightsLikeWordPerfect : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TruncateFontHeightsLikeWordPerfect class.
        /// </summary>
        public TruncateFontHeightsLikeWordPerfect() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TruncateFontHeightsLikeWordPerfect>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 5.x for the Macintosh Small Caps Formatting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mwSmallCaps.</para>
    /// </summary>
    [SchemaAttr(23, "mwSmallCaps")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MacWordSmallCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MacWordSmallCaps class.
        /// </summary>
        public MacWordSmallCaps() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MacWordSmallCaps>(deep);
    }

    /// <summary>
    /// <para>Use Printer Metrics To Display Documents.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:usePrinterMetrics.</para>
    /// </summary>
    [SchemaAttr(23, "usePrinterMetrics")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UsePrinterMetrics : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UsePrinterMetrics class.
        /// </summary>
        public UsePrinterMetrics() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UsePrinterMetrics>(deep);
    }

    /// <summary>
    /// <para>Do Not Suppress Paragraph Borders Next To Frames.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressParagraphBorders.</para>
    /// </summary>
    [SchemaAttr(23, "doNotSuppressParagraphBorders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotSuppressParagraphBorders : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressParagraphBorders class.
        /// </summary>
        public DoNotSuppressParagraphBorders() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressParagraphBorders>(deep);
    }

    /// <summary>
    /// <para>Line Wrap Trailing Spaces.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wrapTrailSpaces.</para>
    /// </summary>
    [SchemaAttr(23, "wrapTrailSpaces")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WrapTrailSpaces : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WrapTrailSpaces class.
        /// </summary>
        public WrapTrailSpaces() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WrapTrailSpaces>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 6.x/95/97 Footnote Placement.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteLayoutLikeWW8.</para>
    /// </summary>
    [SchemaAttr(23, "footnoteLayoutLikeWW8")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteLayoutLikeWord8 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteLayoutLikeWord8 class.
        /// </summary>
        public FootnoteLayoutLikeWord8() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteLayoutLikeWord8>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 97 Text Wrapping Around Floating Objects.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shapeLayoutLikeWW8.</para>
    /// </summary>
    [SchemaAttr(23, "shapeLayoutLikeWW8")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShapeLayoutLikeWord8 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeLayoutLikeWord8 class.
        /// </summary>
        public ShapeLayoutLikeWord8() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeLayoutLikeWord8>(deep);
    }

    /// <summary>
    /// <para>Align Table Rows Independently.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alignTablesRowByRow.</para>
    /// </summary>
    [SchemaAttr(23, "alignTablesRowByRow")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AlignTablesRowByRow : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlignTablesRowByRow class.
        /// </summary>
        public AlignTablesRowByRow() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlignTablesRowByRow>(deep);
    }

    /// <summary>
    /// <para>Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:forgetLastTabAlignment.</para>
    /// </summary>
    [SchemaAttr(23, "forgetLastTabAlignment")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ForgetLastTabAlignment : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ForgetLastTabAlignment class.
        /// </summary>
        public ForgetLastTabAlignment() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForgetLastTabAlignment>(deep);
    }

    /// <summary>
    /// <para>Add Document Grid Line Pitch To Lines in Table Cells.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:adjustLineHeightInTable.</para>
    /// </summary>
    [SchemaAttr(23, "adjustLineHeightInTable")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AdjustLineHeightInTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustLineHeightInTable class.
        /// </summary>
        public AdjustLineHeightInTable() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustLineHeightInTable>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 95 Full-Width Character Spacing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceLikeWord95.</para>
    /// </summary>
    [SchemaAttr(23, "autoSpaceLikeWord95")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoSpaceLikeWord95 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceLikeWord95 class.
        /// </summary>
        public AutoSpaceLikeWord95() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceLikeWord95>(deep);
    }

    /// <summary>
    /// <para>Do Not Increase Line Height for Raised/Lowered Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noSpaceRaiseLower.</para>
    /// </summary>
    [SchemaAttr(23, "noSpaceRaiseLower")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoSpaceRaiseLower : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoSpaceRaiseLower class.
        /// </summary>
        public NoSpaceRaiseLower() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoSpaceRaiseLower>(deep);
    }

    /// <summary>
    /// <para>Use Fixed Paragraph Spacing for HTML Auto Setting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseHTMLParagraphAutoSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "doNotUseHTMLParagraphAutoSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotUseHTMLParagraphAutoSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseHTMLParagraphAutoSpacing class.
        /// </summary>
        public DoNotUseHTMLParagraphAutoSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseHTMLParagraphAutoSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Space Before Table When Deciding If Table Should Wrap Floating Object.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:layoutRawTableWidth.</para>
    /// </summary>
    [SchemaAttr(23, "layoutRawTableWidth")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LayoutRawTableWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LayoutRawTableWidth class.
        /// </summary>
        public LayoutRawTableWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LayoutRawTableWidth>(deep);
    }

    /// <summary>
    /// <para>Allow Table Rows to Wrap Inline Objects Independently.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:layoutTableRowsApart.</para>
    /// </summary>
    [SchemaAttr(23, "layoutTableRowsApart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LayoutTableRowsApart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LayoutTableRowsApart class.
        /// </summary>
        public LayoutTableRowsApart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LayoutTableRowsApart>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 97 East Asian Line Breaking.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useWord97LineBreakRules.</para>
    /// </summary>
    [SchemaAttr(23, "useWord97LineBreakRules")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseWord97LineBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseWord97LineBreakRules class.
        /// </summary>
        public UseWord97LineBreakRules() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseWord97LineBreakRules>(deep);
    }

    /// <summary>
    /// <para>Do Not Allow Floating Tables To Break Across Pages.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotBreakWrappedTables.</para>
    /// </summary>
    [SchemaAttr(23, "doNotBreakWrappedTables")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotBreakWrappedTables : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotBreakWrappedTables class.
        /// </summary>
        public DoNotBreakWrappedTables() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotBreakWrappedTables>(deep);
    }

    /// <summary>
    /// <para>Do Not Snap to Document Grid in Table Cells with Objects.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSnapToGridInCell.</para>
    /// </summary>
    [SchemaAttr(23, "doNotSnapToGridInCell")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotSnapToGridInCell : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSnapToGridInCell class.
        /// </summary>
        public DoNotSnapToGridInCell() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSnapToGridInCell>(deep);
    }

    /// <summary>
    /// <para>Select Field When First or Last Character Is Selected.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:selectFldWithFirstOrLastChar.</para>
    /// </summary>
    [SchemaAttr(23, "selectFldWithFirstOrLastChar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SelectFieldWithFirstOrLastChar : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SelectFieldWithFirstOrLastChar class.
        /// </summary>
        public SelectFieldWithFirstOrLastChar() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SelectFieldWithFirstOrLastChar>(deep);
    }

    /// <summary>
    /// <para>Use Legacy Ethiopic and Amharic Line Breaking Rules.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:applyBreakingRules.</para>
    /// </summary>
    [SchemaAttr(23, "applyBreakingRules")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ApplyBreakingRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ApplyBreakingRules class.
        /// </summary>
        public ApplyBreakingRules() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ApplyBreakingRules>(deep);
    }

    /// <summary>
    /// <para>Do Not Allow Hanging Punctuation With Character Grid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotWrapTextWithPunct.</para>
    /// </summary>
    [SchemaAttr(23, "doNotWrapTextWithPunct")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotWrapTextWithPunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotWrapTextWithPunctuation class.
        /// </summary>
        public DoNotWrapTextWithPunctuation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotWrapTextWithPunctuation>(deep);
    }

    /// <summary>
    /// <para>Do Not Compress Compressible Characters When Using Document Grid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseEastAsianBreakRules.</para>
    /// </summary>
    [SchemaAttr(23, "doNotUseEastAsianBreakRules")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotUseEastAsianBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseEastAsianBreakRules class.
        /// </summary>
        public DoNotUseEastAsianBreakRules() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseEastAsianBreakRules>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 2002 Table Style Rules.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useWord2002TableStyleRules.</para>
    /// </summary>
    [SchemaAttr(23, "useWord2002TableStyleRules")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseWord2002TableStyleRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseWord2002TableStyleRules class.
        /// </summary>
        public UseWord2002TableStyleRules() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseWord2002TableStyleRules>(deep);
    }

    /// <summary>
    /// <para>Allow Tables to AutoFit Into Page Margins.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:growAutofit.</para>
    /// </summary>
    [SchemaAttr(23, "growAutofit")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GrowAutofit : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GrowAutofit class.
        /// </summary>
        public GrowAutofit() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GrowAutofit>(deep);
    }

    /// <summary>
    /// <para>Do Not Bypass East Asian/Complex Script Layout Code.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useFELayout.</para>
    /// </summary>
    [SchemaAttr(23, "useFELayout")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseFarEastLayout : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseFarEastLayout class.
        /// </summary>
        public UseFarEastLayout() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseFarEastLayout>(deep);
    }

    /// <summary>
    /// <para>Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useNormalStyleForList.</para>
    /// </summary>
    [SchemaAttr(23, "useNormalStyleForList")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseNormalStyleForList : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseNormalStyleForList class.
        /// </summary>
        public UseNormalStyleForList() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseNormalStyleForList>(deep);
    }

    /// <summary>
    /// <para>Ignore Hanging Indent When Creating Tab Stop After Numbering.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseIndentAsNumberingTabStop.</para>
    /// </summary>
    [SchemaAttr(23, "doNotUseIndentAsNumberingTabStop")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotUseIndentAsNumberingTabStop : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseIndentAsNumberingTabStop class.
        /// </summary>
        public DoNotUseIndentAsNumberingTabStop() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseIndentAsNumberingTabStop>(deep);
    }

    /// <summary>
    /// <para>Use Alternate Set of East Asian Line Breaking Rules.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useAltKinsokuLineBreakRules.</para>
    /// </summary>
    [SchemaAttr(23, "useAltKinsokuLineBreakRules")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseAltKinsokuLineBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseAltKinsokuLineBreakRules class.
        /// </summary>
        public UseAltKinsokuLineBreakRules() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseAltKinsokuLineBreakRules>(deep);
    }

    /// <summary>
    /// <para>Allow Contextual Spacing of Paragraphs in Tables.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:allowSpaceOfSameStyleInTable.</para>
    /// </summary>
    [SchemaAttr(23, "allowSpaceOfSameStyleInTable")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AllowSpaceOfSameStyleInTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AllowSpaceOfSameStyleInTable class.
        /// </summary>
        public AllowSpaceOfSameStyleInTable() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllowSpaceOfSameStyleInTable>(deep);
    }

    /// <summary>
    /// <para>Do Not Ignore Floating Objects When Calculating Paragraph Indentation.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressIndentation.</para>
    /// </summary>
    [SchemaAttr(23, "doNotSuppressIndentation")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotSuppressIndentation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressIndentation class.
        /// </summary>
        public DoNotSuppressIndentation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressIndentation>(deep);
    }

    /// <summary>
    /// <para>Do Not AutoFit Tables To Fit Next To Wrapped Objects.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotAutofitConstrainedTables.</para>
    /// </summary>
    [SchemaAttr(23, "doNotAutofitConstrainedTables")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotAutofitConstrainedTables : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotAutofitConstrainedTables class.
        /// </summary>
        public DoNotAutofitConstrainedTables() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotAutofitConstrainedTables>(deep);
    }

    /// <summary>
    /// <para>Allow Table Columns To Exceed Preferred Widths of Constituent Cells.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autofitToFirstFixedWidthCell.</para>
    /// </summary>
    [SchemaAttr(23, "autofitToFirstFixedWidthCell")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutofitToFirstFixedWidthCell : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutofitToFirstFixedWidthCell class.
        /// </summary>
        public AutofitToFirstFixedWidthCell() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutofitToFirstFixedWidthCell>(deep);
    }

    /// <summary>
    /// <para>Underline Following Character Following Numbering.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:underlineTabInNumList.</para>
    /// </summary>
    [SchemaAttr(23, "underlineTabInNumList")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UnderlineTabInNumberingList : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineTabInNumberingList class.
        /// </summary>
        public UnderlineTabInNumberingList() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineTabInNumberingList>(deep);
    }

    /// <summary>
    /// <para>Always Use Fixed Width for Hangul Characters.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayHangulFixedWidth.</para>
    /// </summary>
    [SchemaAttr(23, "displayHangulFixedWidth")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DisplayHangulFixedWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DisplayHangulFixedWidth class.
        /// </summary>
        public DisplayHangulFixedWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayHangulFixedWidth>(deep);
    }

    /// <summary>
    /// <para>Always Move Paragraph Mark to Page after a Page Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:splitPgBreakAndParaMark.</para>
    /// </summary>
    [SchemaAttr(23, "splitPgBreakAndParaMark")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SplitPageBreakAndParagraphMark : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SplitPageBreakAndParagraphMark class.
        /// </summary>
        public SplitPageBreakAndParagraphMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SplitPageBreakAndParagraphMark>(deep);
    }

    /// <summary>
    /// <para>Don't Vertically Align Cells Containing Floating Objects.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotVertAlignCellWithSp.</para>
    /// </summary>
    [SchemaAttr(23, "doNotVertAlignCellWithSp")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotVerticallyAlignCellWithShape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotVerticallyAlignCellWithShape class.
        /// </summary>
        public DoNotVerticallyAlignCellWithShape() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotVerticallyAlignCellWithShape>(deep);
    }

    /// <summary>
    /// <para>Don't Break Table Rows Around Floating Tables.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotBreakConstrainedForcedTable.</para>
    /// </summary>
    [SchemaAttr(23, "doNotBreakConstrainedForcedTable")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotBreakConstrainedForcedTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotBreakConstrainedForcedTable class.
        /// </summary>
        public DoNotBreakConstrainedForcedTable() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotBreakConstrainedForcedTable>(deep);
    }

    /// <summary>
    /// <para>Ignore Vertical Alignment in Textboxes.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotVertAlignInTxbx.</para>
    /// </summary>
    [SchemaAttr(23, "doNotVertAlignInTxbx")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotVerticallyAlignInTextBox : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotVerticallyAlignInTextBox class.
        /// </summary>
        public DoNotVerticallyAlignInTextBox() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotVerticallyAlignInTextBox>(deep);
    }

    /// <summary>
    /// <para>Use ANSI Kerning Pairs from Fonts.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useAnsiKerningPairs.</para>
    /// </summary>
    [SchemaAttr(23, "useAnsiKerningPairs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseAnsiKerningPairs : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseAnsiKerningPairs class.
        /// </summary>
        public UseAnsiKerningPairs() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseAnsiKerningPairs>(deep);
    }

    /// <summary>
    /// <para>Use Cached Paragraph Information for Column Balancing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cachedColBalance.</para>
    /// </summary>
    [SchemaAttr(23, "cachedColBalance")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CachedColumnBalance : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the CachedColumnBalance class.
        /// </summary>
        public CachedColumnBalance() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CachedColumnBalance>(deep);
    }

    /// <summary>
    /// <para>Defines the ShowingPlaceholder Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showingPlcHdr.</para>
    /// </summary>
    [SchemaAttr(23, "showingPlcHdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShowingPlaceholder : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowingPlaceholder class.
        /// </summary>
        public ShowingPlaceholder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowingPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the TemporarySdt Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:temporary.</para>
    /// </summary>
    [SchemaAttr(23, "temporary")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TemporarySdt : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TemporarySdt class.
        /// </summary>
        public TemporarySdt() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TemporarySdt>(deep);
    }

    /// <summary>
    /// <para>Remove Personal Information from Document Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:removePersonalInformation.</para>
    /// </summary>
    [SchemaAttr(23, "removePersonalInformation")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RemovePersonalInformation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RemovePersonalInformation class.
        /// </summary>
        public RemovePersonalInformation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RemovePersonalInformation>(deep);
    }

    /// <summary>
    /// <para>Remove Date and Time from Annotations.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:removeDateAndTime.</para>
    /// </summary>
    [SchemaAttr(23, "removeDateAndTime")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RemoveDateAndTime : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RemoveDateAndTime class.
        /// </summary>
        public RemoveDateAndTime() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RemoveDateAndTime>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Boundary For Header/Footer or Between Pages.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotDisplayPageBoundaries.</para>
    /// </summary>
    [SchemaAttr(23, "doNotDisplayPageBoundaries")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotDisplayPageBoundaries : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotDisplayPageBoundaries class.
        /// </summary>
        public DoNotDisplayPageBoundaries() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotDisplayPageBoundaries>(deep);
    }

    /// <summary>
    /// <para>Display Background Objects When Displaying Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayBackgroundShape.</para>
    /// </summary>
    [SchemaAttr(23, "displayBackgroundShape")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DisplayBackgroundShape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DisplayBackgroundShape class.
        /// </summary>
        public DisplayBackgroundShape() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayBackgroundShape>(deep);
    }

    /// <summary>
    /// <para>Print PostScript Codes With Document Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printPostScriptOverText.</para>
    /// </summary>
    [SchemaAttr(23, "printPostScriptOverText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintPostScriptOverText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintPostScriptOverText class.
        /// </summary>
        public PrintPostScriptOverText() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintPostScriptOverText>(deep);
    }

    /// <summary>
    /// <para>Print Fractional Character Widths.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printFractionalCharacterWidth.</para>
    /// </summary>
    [SchemaAttr(23, "printFractionalCharacterWidth")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintFractionalCharacterWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintFractionalCharacterWidth class.
        /// </summary>
        public PrintFractionalCharacterWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintFractionalCharacterWidth>(deep);
    }

    /// <summary>
    /// <para>Only Print Form Field Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printFormsData.</para>
    /// </summary>
    [SchemaAttr(23, "printFormsData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintFormsData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintFormsData class.
        /// </summary>
        public PrintFormsData() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintFormsData>(deep);
    }

    /// <summary>
    /// <para>Embed TrueType Fonts.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedTrueTypeFonts.</para>
    /// </summary>
    [SchemaAttr(23, "embedTrueTypeFonts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedTrueTypeFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedTrueTypeFonts class.
        /// </summary>
        public EmbedTrueTypeFonts() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedTrueTypeFonts>(deep);
    }

    /// <summary>
    /// <para>Embed Common System Fonts.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedSystemFonts.</para>
    /// </summary>
    [SchemaAttr(23, "embedSystemFonts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedSystemFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedSystemFonts class.
        /// </summary>
        public EmbedSystemFonts() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedSystemFonts>(deep);
    }

    /// <summary>
    /// <para>Subset Fonts When Embedding.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveSubsetFonts.</para>
    /// </summary>
    [SchemaAttr(23, "saveSubsetFonts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SaveSubsetFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveSubsetFonts class.
        /// </summary>
        public SaveSubsetFonts() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveSubsetFonts>(deep);
    }

    /// <summary>
    /// <para>Only Save Form Field Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveFormsData.</para>
    /// </summary>
    [SchemaAttr(23, "saveFormsData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SaveFormsData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveFormsData class.
        /// </summary>
        public SaveFormsData() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveFormsData>(deep);
    }

    /// <summary>
    /// <para>Mirror Page Margins.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mirrorMargins.</para>
    /// </summary>
    [SchemaAttr(23, "mirrorMargins")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MirrorMargins : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MirrorMargins class.
        /// </summary>
        public MirrorMargins() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MirrorMargins>(deep);
    }

    /// <summary>
    /// <para>Align Paragraph and Table Borders with Page Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alignBordersAndEdges.</para>
    /// </summary>
    [SchemaAttr(23, "alignBordersAndEdges")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AlignBorderAndEdges : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlignBorderAndEdges class.
        /// </summary>
        public AlignBorderAndEdges() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlignBorderAndEdges>(deep);
    }

    /// <summary>
    /// <para>Page Border Excludes Header.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bordersDoNotSurroundHeader.</para>
    /// </summary>
    [SchemaAttr(23, "bordersDoNotSurroundHeader")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BordersDoNotSurroundHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BordersDoNotSurroundHeader class.
        /// </summary>
        public BordersDoNotSurroundHeader() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BordersDoNotSurroundHeader>(deep);
    }

    /// <summary>
    /// <para>Page Border Excludes Footer.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bordersDoNotSurroundFooter.</para>
    /// </summary>
    [SchemaAttr(23, "bordersDoNotSurroundFooter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BordersDoNotSurroundFooter : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BordersDoNotSurroundFooter class.
        /// </summary>
        public BordersDoNotSurroundFooter() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BordersDoNotSurroundFooter>(deep);
    }

    /// <summary>
    /// <para>Position Gutter At Top of Page.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gutterAtTop.</para>
    /// </summary>
    [SchemaAttr(23, "gutterAtTop")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GutterAtTop : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GutterAtTop class.
        /// </summary>
        public GutterAtTop() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GutterAtTop>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Indication of Spelling Errors.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideSpellingErrors.</para>
    /// </summary>
    [SchemaAttr(23, "hideSpellingErrors")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HideSpellingErrors : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the HideSpellingErrors class.
        /// </summary>
        public HideSpellingErrors() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideSpellingErrors>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Indication of Grammatical Errors.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideGrammaticalErrors.</para>
    /// </summary>
    [SchemaAttr(23, "hideGrammaticalErrors")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HideGrammaticalErrors : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the HideGrammaticalErrors class.
        /// </summary>
        public HideGrammaticalErrors() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideGrammaticalErrors>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag Placeholder Text Should be Resaved.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:formsDesign.</para>
    /// </summary>
    [SchemaAttr(23, "formsDesign")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FormsDesign : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FormsDesign class.
        /// </summary>
        public FormsDesign() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormsDesign>(deep);
    }

    /// <summary>
    /// <para>Automatically Update Styles From Document Template.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkStyles.</para>
    /// </summary>
    [SchemaAttr(23, "linkStyles")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LinkStyles : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LinkStyles class.
        /// </summary>
        public LinkStyles() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkStyles>(deep);
    }

    /// <summary>
    /// <para>Track Revisions to Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trackRevisions.</para>
    /// </summary>
    [SchemaAttr(23, "trackRevisions")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TrackRevisions : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TrackRevisions class.
        /// </summary>
        public TrackRevisions() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TrackRevisions>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Move Syntax When Tracking Revisions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotTrackMoves.</para>
    /// </summary>
    [SchemaAttr(23, "doNotTrackMoves")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotTrackMoves : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotTrackMoves class.
        /// </summary>
        public DoNotTrackMoves() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotTrackMoves>(deep);
    }

    /// <summary>
    /// <para>Do Not Track Formatting Revisions When Tracking Revisions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotTrackFormatting.</para>
    /// </summary>
    [SchemaAttr(23, "doNotTrackFormatting")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotTrackFormatting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotTrackFormatting class.
        /// </summary>
        public DoNotTrackFormatting() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotTrackFormatting>(deep);
    }

    /// <summary>
    /// <para>Allow Automatic Formatting to Override Formatting Protection Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoFormatOverride.</para>
    /// </summary>
    [SchemaAttr(23, "autoFormatOverride")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoFormatOverride : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoFormatOverride class.
        /// </summary>
        public AutoFormatOverride() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoFormatOverride>(deep);
    }

    /// <summary>
    /// <para>Prevent Modification of Themes Part.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLockTheme.</para>
    /// </summary>
    [SchemaAttr(23, "styleLockTheme")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleLockThemesPart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StyleLockThemesPart class.
        /// </summary>
        public StyleLockThemesPart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLockThemesPart>(deep);
    }

    /// <summary>
    /// <para>Prevent Replacement of Styles Part.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLockQFSet.</para>
    /// </summary>
    [SchemaAttr(23, "styleLockQFSet")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleLockStylesPart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StyleLockStylesPart class.
        /// </summary>
        public StyleLockStylesPart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLockStylesPart>(deep);
    }

    /// <summary>
    /// <para>Automatically Hyphenate Document Contents When Displayed.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoHyphenation.</para>
    /// </summary>
    [SchemaAttr(23, "autoHyphenation")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoHyphenation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoHyphenation class.
        /// </summary>
        public AutoHyphenation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoHyphenation>(deep);
    }

    /// <summary>
    /// <para>Do Not Hyphenate Words in ALL CAPITAL LETTERS.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotHyphenateCaps.</para>
    /// </summary>
    [SchemaAttr(23, "doNotHyphenateCaps")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotHyphenateCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotHyphenateCaps class.
        /// </summary>
        public DoNotHyphenateCaps() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotHyphenateCaps>(deep);
    }

    /// <summary>
    /// <para>Show E-Mail Message Header.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showEnvelope.</para>
    /// </summary>
    [SchemaAttr(23, "showEnvelope")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShowEnvelope : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowEnvelope class.
        /// </summary>
        public ShowEnvelope() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowEnvelope>(deep);
    }

    /// <summary>
    /// <para>Different Even/Odd Page Headers and Footers.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:evenAndOddHeaders.</para>
    /// </summary>
    [SchemaAttr(23, "evenAndOddHeaders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EvenAndOddHeaders : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EvenAndOddHeaders class.
        /// </summary>
        public EvenAndOddHeaders() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EvenAndOddHeaders>(deep);
    }

    /// <summary>
    /// <para>Reverse Book Fold Printing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldRevPrinting.</para>
    /// </summary>
    [SchemaAttr(23, "bookFoldRevPrinting")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BookFoldReversePrinting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldReversePrinting class.
        /// </summary>
        public BookFoldReversePrinting() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldReversePrinting>(deep);
    }

    /// <summary>
    /// <para>Book Fold Printing.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldPrinting.</para>
    /// </summary>
    [SchemaAttr(23, "bookFoldPrinting")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BookFoldPrinting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldPrinting class.
        /// </summary>
        public BookFoldPrinting() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldPrinting>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Margins for Drawing Grid Origin.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseMarginsForDrawingGridOrigin.</para>
    /// </summary>
    [SchemaAttr(23, "doNotUseMarginsForDrawingGridOrigin")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotUseMarginsForDrawingGridOrigin : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseMarginsForDrawingGridOrigin class.
        /// </summary>
        public DoNotUseMarginsForDrawingGridOrigin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseMarginsForDrawingGridOrigin>(deep);
    }

    /// <summary>
    /// <para>Do Not Show Visual Indicator For Form Fields.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotShadeFormData.</para>
    /// </summary>
    [SchemaAttr(23, "doNotShadeFormData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotShadeFormData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotShadeFormData class.
        /// </summary>
        public DoNotShadeFormData() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotShadeFormData>(deep);
    }

    /// <summary>
    /// <para>Never Kern Punctuation Characters.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noPunctuationKerning.</para>
    /// </summary>
    [SchemaAttr(23, "noPunctuationKerning")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoPunctuationKerning : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoPunctuationKerning class.
        /// </summary>
        public NoPunctuationKerning() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoPunctuationKerning>(deep);
    }

    /// <summary>
    /// <para>Print Two Pages Per Sheet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printTwoOnOne.</para>
    /// </summary>
    [SchemaAttr(23, "printTwoOnOne")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrintTwoOnOne : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintTwoOnOne class.
        /// </summary>
        public PrintTwoOnOne() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintTwoOnOne>(deep);
    }

    /// <summary>
    /// <para>Use Strict Kinsoku Rules for Japanese Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:strictFirstAndLastChars.</para>
    /// </summary>
    [SchemaAttr(23, "strictFirstAndLastChars")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StrictFirstAndLastChars : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StrictFirstAndLastChars class.
        /// </summary>
        public StrictFirstAndLastChars() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StrictFirstAndLastChars>(deep);
    }

    /// <summary>
    /// <para>Generate Thumbnail For Document On Save.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:savePreviewPicture.</para>
    /// </summary>
    [SchemaAttr(23, "savePreviewPicture")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SavePreviewPicture : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SavePreviewPicture class.
        /// </summary>
        public SavePreviewPicture() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SavePreviewPicture>(deep);
    }

    /// <summary>
    /// <para>Do Not Validate Custom XML Markup Against Schemas.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotValidateAgainstSchema.</para>
    /// </summary>
    [SchemaAttr(23, "doNotValidateAgainstSchema")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotValidateAgainstSchema : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotValidateAgainstSchema class.
        /// </summary>
        public DoNotValidateAgainstSchema() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotValidateAgainstSchema>(deep);
    }

    /// <summary>
    /// <para>Allow Saving Document As XML File When Custom XML Markup Is Invalid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveInvalidXml.</para>
    /// </summary>
    [SchemaAttr(23, "saveInvalidXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SaveInvalidXml : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveInvalidXml class.
        /// </summary>
        public SaveInvalidXml() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveInvalidXml>(deep);
    }

    /// <summary>
    /// <para>Ignore Mixed Content When Validating Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ignoreMixedContent.</para>
    /// </summary>
    [SchemaAttr(23, "ignoreMixedContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class IgnoreMixedContent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the IgnoreMixedContent class.
        /// </summary>
        public IgnoreMixedContent() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<IgnoreMixedContent>(deep);
    }

    /// <summary>
    /// <para>Use Custom XML Element Names as Default Placeholder Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alwaysShowPlaceholderText.</para>
    /// </summary>
    [SchemaAttr(23, "alwaysShowPlaceholderText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AlwaysShowPlaceholderText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlwaysShowPlaceholderText class.
        /// </summary>
        public AlwaysShowPlaceholderText() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlwaysShowPlaceholderText>(deep);
    }

    /// <summary>
    /// <para>Do Not Show Visual Indicator For Invalid Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotDemarcateInvalidXml.</para>
    /// </summary>
    [SchemaAttr(23, "doNotDemarcateInvalidXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotDemarcateInvalidXml : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotDemarcateInvalidXml class.
        /// </summary>
        public DoNotDemarcateInvalidXml() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotDemarcateInvalidXml>(deep);
    }

    /// <summary>
    /// <para>Only Save Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveXmlDataOnly.</para>
    /// </summary>
    [SchemaAttr(23, "saveXmlDataOnly")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SaveXmlDataOnly : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveXmlDataOnly class.
        /// </summary>
        public SaveXmlDataOnly() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveXmlDataOnly>(deep);
    }

    /// <summary>
    /// <para>Save Document as XML File through Custom XSL Transform.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useXSLTWhenSaving.</para>
    /// </summary>
    [SchemaAttr(23, "useXSLTWhenSaving")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UseXsltWhenSaving : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseXsltWhenSaving class.
        /// </summary>
        public UseXsltWhenSaving() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseXsltWhenSaving>(deep);
    }

    /// <summary>
    /// <para>Show Visual Indicators for Custom XML Markup Start/End Locations.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showXMLTags.</para>
    /// </summary>
    [SchemaAttr(23, "showXMLTags")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShowXmlTags : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowXmlTags class.
        /// </summary>
        public ShowXmlTags() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowXmlTags>(deep);
    }

    /// <summary>
    /// <para>Do Not Mark Custom XML Elements With No Namespace As Invalid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alwaysMergeEmptyNamespace.</para>
    /// </summary>
    [SchemaAttr(23, "alwaysMergeEmptyNamespace")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AlwaysMergeEmptyNamespace : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlwaysMergeEmptyNamespace class.
        /// </summary>
        public AlwaysMergeEmptyNamespace() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlwaysMergeEmptyNamespace>(deep);
    }

    /// <summary>
    /// <para>Automatically Recalculate Fields on Open.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:updateFields.</para>
    /// </summary>
    [SchemaAttr(23, "updateFields")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UpdateFieldsOnOpen : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UpdateFieldsOnOpen class.
        /// </summary>
        public UpdateFieldsOnOpen() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UpdateFieldsOnOpen>(deep);
    }

    /// <summary>
    /// <para>Disable Features Incompatible With Earlier Word Processing Formats.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uiCompat97To2003.</para>
    /// </summary>
    [SchemaAttr(23, "uiCompat97To2003")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UICompatibleWith97To2003 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UICompatibleWith97To2003 class.
        /// </summary>
        public UICompatibleWith97To2003() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UICompatibleWith97To2003>(deep);
    }

    /// <summary>
    /// <para>Do Not Include Content in Text Boxes, Footnotes, and Endnotes in Document Statistics.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotIncludeSubdocsInStats.</para>
    /// </summary>
    [SchemaAttr(23, "doNotIncludeSubdocsInStats")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotIncludeSubdocsInStats : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotIncludeSubdocsInStats class.
        /// </summary>
        public DoNotIncludeSubdocsInStats() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotIncludeSubdocsInStats>(deep);
    }

    /// <summary>
    /// <para>Do Not Automatically Compress Images.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotAutoCompressPictures.</para>
    /// </summary>
    [SchemaAttr(23, "doNotAutoCompressPictures")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotAutoCompressPictures : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotAutoCompressPictures class.
        /// </summary>
        public DoNotAutoCompressPictures() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotAutoCompressPictures>(deep);
    }

    /// <summary>
    /// <para>Defines the OptimizeForBrowser Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:optimizeForBrowser.</para>
    /// </summary>
    [SchemaAttr(23, "optimizeForBrowser")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class OptimizeForBrowser : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OptimizeForBrowser class.
        /// </summary>
        public OptimizeForBrowser() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OptimizeForBrowser>(deep);
    }

    /// <summary>
    /// <para>Defines the RelyOnVML Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:relyOnVML.</para>
    /// </summary>
    [SchemaAttr(23, "relyOnVML")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RelyOnVML : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RelyOnVML class.
        /// </summary>
        public RelyOnVML() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelyOnVML>(deep);
    }

    /// <summary>
    /// <para>Defines the AllowPNG Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:allowPNG.</para>
    /// </summary>
    [SchemaAttr(23, "allowPNG")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AllowPNG : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AllowPNG class.
        /// </summary>
        public AllowPNG() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllowPNG>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotRelyOnCSS Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotRelyOnCSS.</para>
    /// </summary>
    [SchemaAttr(23, "doNotRelyOnCSS")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotRelyOnCSS : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotRelyOnCSS class.
        /// </summary>
        public DoNotRelyOnCSS() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotRelyOnCSS>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotSaveAsSingleFile Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSaveAsSingleFile.</para>
    /// </summary>
    [SchemaAttr(23, "doNotSaveAsSingleFile")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotSaveAsSingleFile : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSaveAsSingleFile class.
        /// </summary>
        public DoNotSaveAsSingleFile() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSaveAsSingleFile>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotOrganizeInFolder Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotOrganizeInFolder.</para>
    /// </summary>
    [SchemaAttr(23, "doNotOrganizeInFolder")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotOrganizeInFolder : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotOrganizeInFolder class.
        /// </summary>
        public DoNotOrganizeInFolder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotOrganizeInFolder>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotUseLongFileNames Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseLongFileNames.</para>
    /// </summary>
    [SchemaAttr(23, "doNotUseLongFileNames")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DoNotUseLongFileNames : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseLongFileNames class.
        /// </summary>
        public DoNotUseLongFileNames() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseLongFileNames>(deep);
    }

    /// <summary>
    /// <para>Defines the NotTrueType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:notTrueType.</para>
    /// </summary>
    [SchemaAttr(23, "notTrueType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NotTrueType : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NotTrueType class.
        /// </summary>
        public NotTrueType() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NotTrueType>(deep);
    }

    /// <summary>
    /// <para>Defines the OnOffType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class OnOffType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the OnOffType class.
        /// </summary>
        protected OnOffType() : base()
        {
        }

        /// <summary>
        /// <para>On/Off Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public OnOffValue Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the FrameProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:framePr.</para>
    /// </summary>
    [SchemaAttr(23, "framePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FrameProperties : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FrameProperties class.
        /// </summary>
        public FrameProperties() : base()
        {
        }

        /// <summary>
        /// <para>Drop Cap Frame</para>
        /// <para>Represents the following attribute in the schema: w:dropCap</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dropCap")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DropCapLocationValues> DropCap { get; set; }

        /// <summary>
        /// <para>Drop Cap Vertical Height in Lines</para>
        /// <para>Represents the following attribute in the schema: w:lines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 1L, MaxInclusive = 10L)]
        [SchemaAttr(23, "lines")]
        [Index(1)]
        public Int32Value Lines { get; set; }

        /// <summary>
        /// <para>Frame Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "w")]
        [Index(2)]
        public StringValue Width { get; set; }

        /// <summary>
        /// <para>Frame Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "h")]
        [Index(3)]
        public UInt32Value Height { get; set; }

        /// <summary>
        /// <para>Vertical Frame Padding</para>
        /// <para>Represents the following attribute in the schema: w:vSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "vSpace")]
        [Index(4)]
        public StringValue VerticalSpace { get; set; }

        /// <summary>
        /// <para>Horizontal Frame Padding</para>
        /// <para>Represents the following attribute in the schema: w:hSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "hSpace")]
        [Index(5)]
        public StringValue HorizontalSpace { get; set; }

        /// <summary>
        /// <para>Text Wrapping Around Frame</para>
        /// <para>Represents the following attribute in the schema: w:wrap</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "wrap")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextWrappingValues> Wrap { get; set; }

        /// <summary>
        /// <para>Frame Horizontal Positioning Base</para>
        /// <para>Represents the following attribute in the schema: w:hAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hAnchor")]
        [Index(7)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues> HorizontalPosition { get; set; }

        /// <summary>
        /// <para>Frame Vertical Positioning Base</para>
        /// <para>Represents the following attribute in the schema: w:vAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vAnchor")]
        [Index(8)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues> VerticalPosition { get; set; }

        /// <summary>
        /// <para>Absolute Horizontal Position</para>
        /// <para>Represents the following attribute in the schema: w:x</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "x")]
        [Index(9)]
        public StringValue X { get; set; }

        /// <summary>
        /// <para>Relative Horizontal Position</para>
        /// <para>Represents the following attribute in the schema: w:xAlign</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "xAlign")]
        [Index(10)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues> XAlign { get; set; }

        /// <summary>
        /// <para>Absolute Vertical Position</para>
        /// <para>Represents the following attribute in the schema: w:y</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "y")]
        [Index(11)]
        public StringValue Y { get; set; }

        /// <summary>
        /// <para>Relative Vertical Position</para>
        /// <para>Represents the following attribute in the schema: w:yAlign</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "yAlign")]
        [Index(12)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues> YAlign { get; set; }

        /// <summary>
        /// <para>Frame Height Type</para>
        /// <para>Represents the following attribute in the schema: w:hRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hRule")]
        [Index(13)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues> HeightType { get; set; }

        /// <summary>
        /// <para>Lock Frame Anchor to Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:anchorLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "anchorLock")]
        [Index(14)]
        public OnOffValue AnchorLock { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the NumberingProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NumberingLevelReference &lt;w:ilvl></description></item>
    ///   <item><description>NumberingId &lt;w:numId></description></item>
    ///   <item><description>NumberingChange &lt;w:numberingChange></description></item>
    ///   <item><description>Inserted &lt;w:ins></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(NumberingLevelReference))]
    [ChildElementInfo(typeof(NumberingId))]
    [ChildElementInfo(typeof(NumberingChange))]
    [ChildElementInfo(typeof(Inserted))]
    [SchemaAttr(23, "numPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingProperties class.
        /// </summary>
        public NumberingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Level Reference.</para>
        /// <para>Represents the following element tag in the schema: w:ilvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingLevelReference NumberingLevelReference
        {
            get => GetElement<NumberingLevelReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Definition Instance Reference.</para>
        /// <para>Represents the following element tag in the schema: w:numId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingId NumberingId
        {
            get => GetElement<NumberingId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Previous Paragraph Numbering Properties.</para>
        /// <para>Represents the following element tag in the schema: w:numberingChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingChange NumberingChange
        {
            get => GetElement<NumberingChange>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inserted Numbering Properties.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Inserted Inserted
        {
            get => GetElement<Inserted>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingChange), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the ParagraphBorders Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopBorder &lt;w:top></description></item>
    ///   <item><description>LeftBorder &lt;w:left></description></item>
    ///   <item><description>BottomBorder &lt;w:bottom></description></item>
    ///   <item><description>RightBorder &lt;w:right></description></item>
    ///   <item><description>BetweenBorder &lt;w:between></description></item>
    ///   <item><description>BarBorder &lt;w:bar></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [ChildElementInfo(typeof(BetweenBorder))]
    [ChildElementInfo(typeof(BarBorder))]
    [SchemaAttr(23, "pBdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class.
        /// </summary>
        public ParagraphBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphBorders(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Paragraph Border Above Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Paragraph Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Paragraph Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:between.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BetweenBorder BetweenBorder
        {
            get => GetElement<BetweenBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Facing Pages.</para>
        /// <para>Represents the following element tag in the schema: w:bar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BarBorder BarBorder
        {
            get => GetElement<BarBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BetweenBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BarBorder), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the Shading Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shd.</para>
    /// </summary>
    [SchemaAttr(23, "shd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Shading : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Shading class.
        /// </summary>
        public Shading() : base()
        {
        }

        /// <summary>
        /// <para>Shading Pattern</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ShadingPatternValues> Val { get; set; }

        /// <summary>
        /// <para>Shading Pattern Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "color")]
        [Index(1)]
        public StringValue Color { get; set; }

        /// <summary>
        /// <para>Shading Pattern Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeColor")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeColor { get; set; }

        /// <summary>
        /// <para>Shading Pattern Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeTint")]
        [Index(3)]
        public StringValue ThemeTint { get; set; }

        /// <summary>
        /// <para>Shading Pattern Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeShade")]
        [Index(4)]
        public StringValue ThemeShade { get; set; }

        /// <summary>
        /// <para>Shading Background Color</para>
        /// <para>Represents the following attribute in the schema: w:fill</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "fill")]
        [Index(5)]
        public StringValue Fill { get; set; }

        /// <summary>
        /// <para>Shading Background Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeFill</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeFill")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeFill { get; set; }

        /// <summary>
        /// <para>Shading Background Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeFillTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeFillTint")]
        [Index(7)]
        public StringValue ThemeFillTint { get; set; }

        /// <summary>
        /// <para>Shading Background Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeFillShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeFillShade")]
        [Index(8)]
        public StringValue ThemeFillShade { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shading>(deep);
    }

    /// <summary>
    /// <para>Defines the Tabs Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tabs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TabStop &lt;w:tab></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TabStop))]
    [SchemaAttr(23, "tabs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Tabs : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Tabs class.
        /// </summary>
        public Tabs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Tabs(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Tabs(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Tabs(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TabStop), 1, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tabs>(deep);
    }

    /// <summary>
    /// <para>Defines the SpacingBetweenLines Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacing.</para>
    /// </summary>
    [SchemaAttr(23, "spacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SpacingBetweenLines : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingBetweenLines class.
        /// </summary>
        public SpacingBetweenLines() : base()
        {
        }

        /// <summary>
        /// <para>Spacing Above Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:before</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "before")]
        [Index(0)]
        public StringValue Before { get; set; }

        /// <summary>
        /// <para>Spacing Above Paragraph IN Line Units</para>
        /// <para>Represents the following attribute in the schema: w:beforeLines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "beforeLines")]
        [Index(1)]
        public Int32Value BeforeLines { get; set; }

        /// <summary>
        /// <para>Automatically Determine Spacing Above Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:beforeAutospacing</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "beforeAutospacing")]
        [Index(2)]
        public OnOffValue BeforeAutoSpacing { get; set; }

        /// <summary>
        /// <para>Spacing Below Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:after</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "after")]
        [Index(3)]
        public StringValue After { get; set; }

        /// <summary>
        /// <para>Spacing Below Paragraph in Line Units</para>
        /// <para>Represents the following attribute in the schema: w:afterLines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "afterLines")]
        [Index(4)]
        public Int32Value AfterLines { get; set; }

        /// <summary>
        /// <para>Automatically Determine Spacing Below Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:afterAutospacing</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "afterAutospacing")]
        [Index(5)]
        public OnOffValue AfterAutoSpacing { get; set; }

        /// <summary>
        /// <para>Spacing Between Lines in Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:line</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "line")]
        [Index(6)]
        public StringValue Line { get; set; }

        /// <summary>
        /// <para>Type of Spacing Between Lines</para>
        /// <para>Represents the following attribute in the schema: w:lineRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "lineRule")]
        [Index(7)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineSpacingRuleValues> LineRule { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingBetweenLines>(deep);
    }

    /// <summary>
    /// <para>Defines the Indentation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ind.</para>
    /// </summary>
    [SchemaAttr(23, "ind")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Indentation : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Indentation class.
        /// </summary>
        public Indentation() : base()
        {
        }

        /// <summary>
        /// <para>Left Indentation</para>
        /// <para>Represents the following attribute in the schema: w:left</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "left")]
        [Index(0)]
        public StringValue Left { get; set; }

        /// <summary>
        /// <para>start, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "start")]
        [Index(1)]
        public StringValue Start { get; set; }

        /// <summary>
        /// <para>Left Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:leftChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "leftChars")]
        [Index(2)]
        public Int32Value LeftChars { get; set; }

        /// <summary>
        /// <para>startChars, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:startChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "startChars")]
        [Index(3)]
        public Int32Value StartCharacters { get; set; }

        /// <summary>
        /// <para>Right Indentation</para>
        /// <para>Represents the following attribute in the schema: w:right</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "right")]
        [Index(4)]
        public StringValue Right { get; set; }

        /// <summary>
        /// <para>end, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:end</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "end")]
        [Index(5)]
        public StringValue End { get; set; }

        /// <summary>
        /// <para>Right Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:rightChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "rightChars")]
        [Index(6)]
        public Int32Value RightChars { get; set; }

        /// <summary>
        /// <para>endChars, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:endChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "endChars")]
        [Index(7)]
        public Int32Value EndCharacters { get; set; }

        /// <summary>
        /// <para>Indentation Removed from First Line</para>
        /// <para>Represents the following attribute in the schema: w:hanging</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "hanging")]
        [Index(8)]
        public StringValue Hanging { get; set; }

        /// <summary>
        /// <para>Indentation Removed From First Line in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:hangingChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hangingChars")]
        [Index(9)]
        public Int32Value HangingChars { get; set; }

        /// <summary>
        /// <para>Additional First Line Indentation</para>
        /// <para>Represents the following attribute in the schema: w:firstLine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "firstLine")]
        [Index(10)]
        public StringValue FirstLine { get; set; }

        /// <summary>
        /// <para>Additional First Line Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:firstLineChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "firstLineChars")]
        [Index(11)]
        public Int32Value FirstLineChars { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Indentation>(deep);
    }

    /// <summary>
    /// <para>Defines the Justification Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:jc.</para>
    /// </summary>
    [SchemaAttr(23, "jc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Justification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Justification class.
        /// </summary>
        public Justification() : base()
        {
        }

        /// <summary>
        /// <para>Alignment Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.JustificationValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Justification>(deep);
    }

    /// <summary>
    /// <para>Defines the TextDirection Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textDirection.</para>
    /// </summary>
    [SchemaAttr(23, "textDirection")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextDirection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextDirection class.
        /// </summary>
        public TextDirection() : base()
        {
        }

        /// <summary>
        /// <para>Direction of Text Flow</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextDirection>(deep);
    }

    /// <summary>
    /// <para>Defines the TextAlignment Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textAlignment.</para>
    /// </summary>
    [SchemaAttr(23, "textAlignment")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextAlignment class.
        /// </summary>
        public TextAlignment() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Character Alignment Position</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the TextBoxTightWrap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textboxTightWrap.</para>
    /// </summary>
    [SchemaAttr(23, "textboxTightWrap")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextBoxTightWrap : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxTightWrap class.
        /// </summary>
        public TextBoxTightWrap() : base()
        {
        }

        /// <summary>
        /// <para>Lines to Tight Wrap to Paragraph Extents</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrapValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxTightWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the OutlineLevel Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:outlineLvl.</para>
    /// </summary>
    [SchemaAttr(23, "outlineLvl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class OutlineLevel : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the OutlineLevel class.
        /// </summary>
        public OutlineLevel() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OutlineLevel>(deep);
    }

    /// <summary>
    /// <para>Defines the GridSpan Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridSpan.</para>
    /// </summary>
    [SchemaAttr(23, "gridSpan")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GridSpan : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridSpan class.
        /// </summary>
        public GridSpan() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridSpan>(deep);
    }

    /// <summary>
    /// <para>Defines the GridBefore Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridBefore.</para>
    /// </summary>
    [SchemaAttr(23, "gridBefore")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GridBefore : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridBefore class.
        /// </summary>
        public GridBefore() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridBefore>(deep);
    }

    /// <summary>
    /// <para>Defines the GridAfter Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridAfter.</para>
    /// </summary>
    [SchemaAttr(23, "gridAfter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GridAfter : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridAfter class.
        /// </summary>
        public GridAfter() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridAfter>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Selection.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:result.</para>
    /// </summary>
    [SchemaAttr(23, "result")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DropDownListSelection : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the DropDownListSelection class.
        /// </summary>
        public DropDownListSelection() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DropDownListSelection>(deep);
    }

    /// <summary>
    /// <para>Record Currently Displayed In Merged Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:activeRecord.</para>
    /// </summary>
    [SchemaAttr(23, "activeRecord")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ActiveRecord : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ActiveRecord class.
        /// </summary>
        public ActiveRecord() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ActiveRecord>(deep);
    }

    /// <summary>
    /// <para>Mail Merge Error Reporting Setting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checkErrors.</para>
    /// </summary>
    [SchemaAttr(23, "checkErrors")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CheckErrors : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the CheckErrors class.
        /// </summary>
        public CheckErrors() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CheckErrors>(deep);
    }

    /// <summary>
    /// <para>Restart Numbering Level Symbol.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlRestart.</para>
    /// </summary>
    [SchemaAttr(23, "lvlRestart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelRestart : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the LevelRestart class.
        /// </summary>
        public LevelRestart() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelRestart>(deep);
    }

    /// <summary>
    /// <para>Picture Numbering Symbol Definition Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlPicBulletId.</para>
    /// </summary>
    [SchemaAttr(23, "lvlPicBulletId")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelPictureBulletId : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the LevelPictureBulletId class.
        /// </summary>
        public LevelPictureBulletId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelPictureBulletId>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Starting Value Override.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:startOverride.</para>
    /// </summary>
    [SchemaAttr(23, "startOverride")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StartOverrideNumberingValue : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the StartOverrideNumberingValue class.
        /// </summary>
        public StartOverrideNumberingValue() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartOverrideNumberingValue>(deep);
    }

    /// <summary>
    /// <para>Last Reviewed Abstract Numbering Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numIdMacAtCleanup.</para>
    /// </summary>
    [SchemaAttr(23, "numIdMacAtCleanup")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingIdMacAtCleanup : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the NumberingIdMacAtCleanup class.
        /// </summary>
        public NumberingIdMacAtCleanup() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingIdMacAtCleanup>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtId Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:id.</para>
    /// </summary>
    [SchemaAttr(23, "id")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtId : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the SdtId class.
        /// </summary>
        public SdtId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtId>(deep);
    }

    /// <summary>
    /// <para>Defines the PixelsPerInch Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pixelsPerInch.</para>
    /// </summary>
    [SchemaAttr(23, "pixelsPerInch")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PixelsPerInch : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the PixelsPerInch class.
        /// </summary>
        public PixelsPerInch() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PixelsPerInch>(deep);
    }

    /// <summary>
    /// <para>Defines the DecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class DecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DecimalNumberType class.
        /// </summary>
        protected DecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Decimal Number Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the ParagraphPropertiesChange Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphPropertiesExtended &lt;w:pPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphPropertiesExtended))]
    [SchemaAttr(23, "pPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class.
        /// </summary>
        public ParagraphPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphPropertiesExtended ParagraphPropertiesExtended
        {
            get => GetElement<ParagraphPropertiesExtended>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Header Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:headerReference.</para>
    /// </summary>
    [SchemaAttr(23, "headerReference")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HeaderReference : HeaderFooterReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderReference class.
        /// </summary>
        public HeaderReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderReference>(deep);
    }

    /// <summary>
    /// <para>Footer Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footerReference.</para>
    /// </summary>
    [SchemaAttr(23, "footerReference")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FooterReference : HeaderFooterReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FooterReference class.
        /// </summary>
        public FooterReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FooterReference>(deep);
    }

    /// <summary>
    /// <para>Defines the HeaderFooterReferenceType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class HeaderFooterReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HeaderFooterReferenceType class.
        /// </summary>
        protected HeaderFooterReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeaderFooterValues> Type { get; set; }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(1)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:br.</para>
    /// </summary>
    [SchemaAttr(23, "br")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Break : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Break class.
        /// </summary>
        public Break() : base()
        {
        }

        /// <summary>
        /// <para>Break Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakValues> Type { get; set; }

        /// <summary>
        /// <para>Restart Location For Text Wrapping Break</para>
        /// <para>Represents the following attribute in the schema: w:clear</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "clear")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues> Clear { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);
    }

    /// <summary>
    /// <para>Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:t.</para>
    /// </summary>
    [SchemaAttr(23, "t")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Text : TextType
    {
        /// <summary>
        /// Initializes a new instance of the Text class.
        /// </summary>
        public Text() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Text class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Text(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);
    }

    /// <summary>
    /// <para>Deleted Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:delText.</para>
    /// </summary>
    [SchemaAttr(23, "delText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DeletedText : TextType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedText class.
        /// </summary>
        public DeletedText() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedText class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DeletedText(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedText>(deep);
    }

    /// <summary>
    /// <para>Field Code.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:instrText.</para>
    /// </summary>
    [SchemaAttr(23, "instrText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FieldCode : TextType
    {
        /// <summary>
        /// Initializes a new instance of the FieldCode class.
        /// </summary>
        public FieldCode() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldCode class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public FieldCode(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldCode>(deep);
    }

    /// <summary>
    /// <para>Deleted Field Code.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:delInstrText.</para>
    /// </summary>
    [SchemaAttr(23, "delInstrText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DeletedFieldCode : TextType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedFieldCode class.
        /// </summary>
        public DeletedFieldCode() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedFieldCode class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DeletedFieldCode(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedFieldCode>(deep);
    }

    /// <summary>
    /// <para>Defines the TextType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TextType : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the TextType class.
        /// </summary>
        protected TextType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        protected TextType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <summary>
        /// <para>space</para>
        /// <para>Represents the following attribute in the schema: xml:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:xml=http://www.w3.org/XML/1998/namespace
        /// </remark>
        [SchemaAttr(1, "space")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues> Space { get; set; }
    }

    /// <summary>
    /// <para>Non Breaking Hyphen Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noBreakHyphen.</para>
    /// </summary>
    [SchemaAttr(23, "noBreakHyphen")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoBreakHyphen : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the NoBreakHyphen class.
        /// </summary>
        public NoBreakHyphen() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBreakHyphen>(deep);
    }

    /// <summary>
    /// <para>Optional Hyphen Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:softHyphen.</para>
    /// </summary>
    [SchemaAttr(23, "softHyphen")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SoftHyphen : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SoftHyphen class.
        /// </summary>
        public SoftHyphen() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoftHyphen>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Day Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dayShort.</para>
    /// </summary>
    [SchemaAttr(23, "dayShort")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DayShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the DayShort class.
        /// </summary>
        public DayShort() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Month Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:monthShort.</para>
    /// </summary>
    [SchemaAttr(23, "monthShort")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MonthShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MonthShort class.
        /// </summary>
        public MonthShort() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Year Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:yearShort.</para>
    /// </summary>
    [SchemaAttr(23, "yearShort")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class YearShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the YearShort class.
        /// </summary>
        public YearShort() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Day Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dayLong.</para>
    /// </summary>
    [SchemaAttr(23, "dayLong")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DayLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the DayLong class.
        /// </summary>
        public DayLong() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayLong>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Month Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:monthLong.</para>
    /// </summary>
    [SchemaAttr(23, "monthLong")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MonthLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MonthLong class.
        /// </summary>
        public MonthLong() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthLong>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Year Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:yearLong.</para>
    /// </summary>
    [SchemaAttr(23, "yearLong")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class YearLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the YearLong class.
        /// </summary>
        public YearLong() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearLong>(deep);
    }

    /// <summary>
    /// <para>Comment Information Block.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:annotationRef.</para>
    /// </summary>
    [SchemaAttr(23, "annotationRef")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AnnotationReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the AnnotationReferenceMark class.
        /// </summary>
        public AnnotationReferenceMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AnnotationReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Footnote Reference Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteRef.</para>
    /// </summary>
    [SchemaAttr(23, "footnoteRef")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteReferenceMark class.
        /// </summary>
        public FootnoteReferenceMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Endnote Reference Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnoteRef.</para>
    /// </summary>
    [SchemaAttr(23, "endnoteRef")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnoteReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteReferenceMark class.
        /// </summary>
        public EndnoteReferenceMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Footnote/Endnote Separator Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:separator.</para>
    /// </summary>
    [SchemaAttr(23, "separator")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SeparatorMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SeparatorMark class.
        /// </summary>
        public SeparatorMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SeparatorMark>(deep);
    }

    /// <summary>
    /// <para>Continuation Separator Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:continuationSeparator.</para>
    /// </summary>
    [SchemaAttr(23, "continuationSeparator")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ContinuationSeparatorMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ContinuationSeparatorMark class.
        /// </summary>
        public ContinuationSeparatorMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContinuationSeparatorMark>(deep);
    }

    /// <summary>
    /// <para>Page Number Block.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgNum.</para>
    /// </summary>
    [SchemaAttr(23, "pgNum")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageNumber : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the PageNumber class.
        /// </summary>
        public PageNumber() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageNumber>(deep);
    }

    /// <summary>
    /// <para>Carriage Return.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cr.</para>
    /// </summary>
    [SchemaAttr(23, "cr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CarriageReturn : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the CarriageReturn class.
        /// </summary>
        public CarriageReturn() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CarriageReturn>(deep);
    }

    /// <summary>
    /// <para>Tab Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tab.</para>
    /// </summary>
    [SchemaAttr(23, "tab")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TabChar : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the TabChar class.
        /// </summary>
        public TabChar() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabChar>(deep);
    }

    /// <summary>
    /// <para>Position of Last Calculated Page Break.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lastRenderedPageBreak.</para>
    /// </summary>
    [SchemaAttr(23, "lastRenderedPageBreak")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LastRenderedPageBreak : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the LastRenderedPageBreak class.
        /// </summary>
        public LastRenderedPageBreak() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastRenderedPageBreak>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentEquation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:equation.</para>
    /// </summary>
    [SchemaAttr(23, "equation")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentEquation : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentEquation class.
        /// </summary>
        public SdtContentEquation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentEquation>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentPicture Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:picture.</para>
    /// </summary>
    [SchemaAttr(23, "picture")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentPicture : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentPicture class.
        /// </summary>
        public SdtContentPicture() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentPicture>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentRichText Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:richText.</para>
    /// </summary>
    [SchemaAttr(23, "richText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentRichText : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRichText class.
        /// </summary>
        public SdtContentRichText() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRichText>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentCitation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:citation.</para>
    /// </summary>
    [SchemaAttr(23, "citation")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentCitation : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentCitation class.
        /// </summary>
        public SdtContentCitation() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentCitation>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentGroup Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:group.</para>
    /// </summary>
    [SchemaAttr(23, "group")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentGroup : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentGroup class.
        /// </summary>
        public SdtContentGroup() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentGroup>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentBibliography Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bibliography.</para>
    /// </summary>
    [SchemaAttr(23, "bibliography")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentBibliography : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentBibliography class.
        /// </summary>
        public SdtContentBibliography() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentBibliography>(deep);
    }

    /// <summary>
    /// <para>Upgrade Document on Open.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:forceUpgrade.</para>
    /// </summary>
    [SchemaAttr(23, "forceUpgrade")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ForceUpgrade : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ForceUpgrade class.
        /// </summary>
        public ForceUpgrade() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForceUpgrade>(deep);
    }

    /// <summary>
    /// <para>Defines the EmptyType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmptyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmptyType class.
        /// </summary>
        protected EmptyType() : base()
        {
        }
    }

    /// <summary>
    /// <para>Symbol Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sym.</para>
    /// </summary>
    [SchemaAttr(23, "sym")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SymbolChar : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SymbolChar class.
        /// </summary>
        public SymbolChar() : base()
        {
        }

        /// <summary>
        /// <para>Symbol Character Font</para>
        /// <para>Represents the following attribute in the schema: w:font</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 31L)]
        [SchemaAttr(23, "font")]
        [Index(0)]
        public StringValue Font { get; set; }

        /// <summary>
        /// <para>Symbol Character Code</para>
        /// <para>Represents the following attribute in the schema: w:char</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 2L)]
        [SchemaAttr(23, "char")]
        [Index(1)]
        public HexBinaryValue Char { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SymbolChar>(deep);
    }

    /// <summary>
    /// <para>Inline Embedded Object.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:object.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Group &lt;v:group></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ImageFile &lt;v:image></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Line &lt;v:line></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Oval &lt;v:oval></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.PolyLine &lt;v:polyline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Rectangle &lt;v:rect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.RoundRectangle &lt;v:roundrect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shape &lt;v:shape></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shapetype &lt;v:shapetype></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Arc &lt;v:arc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Curve &lt;v:curve></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.OleObject &lt;o:OLEObject></description></item>
    ///   <item><description>Drawing &lt;w:drawing></description></item>
    ///   <item><description>Control &lt;w:control></description></item>
    ///   <item><description>ObjectEmbed &lt;w:objectEmbed></description></item>
    ///   <item><description>ObjectLink &lt;w:objectLink></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Group))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ImageFile))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Line))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Oval))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.PolyLine))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Rectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shape))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shapetype))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Arc))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Curve))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject))]
    [ChildElementInfo(typeof(Drawing))]
    [ChildElementInfo(typeof(Control))]
    [ChildElementInfo(typeof(ObjectEmbed))]
    [ChildElementInfo(typeof(ObjectLink))]
    [SchemaAttr(23, "object")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbeddedObject : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class.
        /// </summary>
        public EmbeddedObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EmbeddedObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EmbeddedObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EmbeddedObject(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>dxaOrig</para>
        /// <para>Represents the following attribute in the schema: w:dxaOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dxaOrig")]
        [Index(0)]
        public StringValue DxaOriginal { get; set; }

        /// <summary>
        /// <para>dyaOrig</para>
        /// <para>Represents the following attribute in the schema: w:dyaOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dyaOrig")]
        [Index(1)]
        public StringValue DyaOriginal { get; set; }

        /// <summary>
        /// <para>anchorId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:anchorId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "anchorId")]
        [Index(2)]
        public HexBinaryValue AnchorId { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Arc), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Curve), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject), 1, 1)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 0, 1),
                new CompositeParticle(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Control), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ObjectEmbed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ObjectLink), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbeddedObject>(deep);
    }

    /// <summary>
    /// <para>VML Object.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pict.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Group &lt;v:group></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ImageFile &lt;v:image></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Line &lt;v:line></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Oval &lt;v:oval></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.PolyLine &lt;v:polyline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Rectangle &lt;v:rect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.RoundRectangle &lt;v:roundrect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shape &lt;v:shape></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shapetype &lt;v:shapetype></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Arc &lt;v:arc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Curve &lt;v:curve></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.OleObject &lt;o:OLEObject></description></item>
    ///   <item><description>MovieReference &lt;w:movie></description></item>
    ///   <item><description>Control &lt;w:control></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Group))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ImageFile))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Line))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Oval))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.PolyLine))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Rectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shape))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shapetype))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Arc))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Curve))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject))]
    [ChildElementInfo(typeof(MovieReference))]
    [ChildElementInfo(typeof(Control))]
    [SchemaAttr(23, "pict")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Picture : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Picture class.
        /// </summary>
        public Picture() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Picture(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>anchorId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:anchorId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "anchorId")]
        [Index(0)]
        public HexBinaryValue AnchorId { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Arc), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Curve), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject), 1, 1)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MovieReference), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Control), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);
    }

    /// <summary>
    /// <para>Complex Field Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldChar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FieldData &lt;w:fldData></description></item>
    ///   <item><description>FormFieldData &lt;w:ffData></description></item>
    ///   <item><description>NumberingChange &lt;w:numberingChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FieldData))]
    [ChildElementInfo(typeof(FormFieldData))]
    [ChildElementInfo(typeof(NumberingChange))]
    [SchemaAttr(23, "fldChar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FieldChar : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldChar class.
        /// </summary>
        public FieldChar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldChar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldChar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FieldChar(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field Character Type</para>
        /// <para>Represents the following attribute in the schema: w:fldCharType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "fldCharType")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FieldCharValues> FieldCharType { get; set; }

        /// <summary>
        /// <para>Field Should Not Be Recalculated</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fldLock")]
        [Index(1)]
        public OnOffValue FieldLock { get; set; }

        /// <summary>
        /// <para>Field Result Invalidated</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dirty")]
        [Index(2)]
        public OnOffValue Dirty { get; set; }

        /// <summary>
        /// <para>Custom Field Data.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FieldData FieldData
        {
            get => GetElement<FieldData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Form Field Properties.</para>
        /// <para>Represents the following element tag in the schema: w:ffData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FormFieldData FormFieldData
        {
            get => GetElement<FormFieldData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Previous Numbering Field Properties.</para>
        /// <para>Represents the following element tag in the schema: w:numberingChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingChange NumberingChange
        {
            get => GetElement<NumberingChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingChange), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldChar>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ruby.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RubyProperties &lt;w:rubyPr></description></item>
    ///   <item><description>RubyContent &lt;w:rt></description></item>
    ///   <item><description>RubyBase &lt;w:rubyBase></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RubyProperties))]
    [ChildElementInfo(typeof(RubyContent))]
    [ChildElementInfo(typeof(RubyBase))]
    [SchemaAttr(23, "ruby")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Ruby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Ruby class.
        /// </summary>
        public Ruby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Ruby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Ruby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Ruby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Phonetic Guide Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rubyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RubyProperties RubyProperties
        {
            get => GetElement<RubyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Text.</para>
        /// <para>Represents the following element tag in the schema: w:rt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RubyContent RubyContent
        {
            get => GetElement<RubyContent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Base Text.</para>
        /// <para>Represents the following element tag in the schema: w:rubyBase.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RubyBase RubyBase
        {
            get => GetElement<RubyBase>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyProperties), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyContent), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyBase), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Ruby>(deep);
    }

    /// <summary>
    /// <para>Footnote Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteReference.</para>
    /// </summary>
    [SchemaAttr(23, "footnoteReference")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteReference : FootnoteEndnoteReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteReference class.
        /// </summary>
        public FootnoteReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteReference>(deep);
    }

    /// <summary>
    /// <para>Endnote Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnoteReference.</para>
    /// </summary>
    [SchemaAttr(23, "endnoteReference")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnoteReference : FootnoteEndnoteReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteReference class.
        /// </summary>
        public EndnoteReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteReferenceType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FootnoteEndnoteReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteReferenceType class.
        /// </summary>
        protected FootnoteEndnoteReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>Suppress Footnote/Endnote Reference Mark</para>
        /// <para>Represents the following attribute in the schema: w:customMarkFollows</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "customMarkFollows")]
        [Index(0)]
        public OnOffValue CustomMarkFollows { get; set; }

        /// <summary>
        /// <para>Footnote/Endnote ID Reference</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = -2147483648L, MaxInclusive = 32767L)]
        [SchemaAttr(23, "id")]
        [Index(1)]
        public IntegerValue Id { get; set; }
    }

    /// <summary>
    /// <para>DrawingML Object.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawing.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor &lt;wp:anchor></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline &lt;wp:inline></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline))]
    [SchemaAttr(23, "drawing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Drawing : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Drawing class.
        /// </summary>
        public Drawing() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Drawing(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Drawing(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Drawing(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Drawing Element Anchor.</para>
        /// <para>Represents the following element tag in the schema: wp:anchor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:wp = http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing
        /// </remark>
        public DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor Anchor
        {
            get => GetElement<DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inline Drawing Object.</para>
        /// <para>Represents the following element tag in the schema: wp:inline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:wp = http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing
        /// </remark>
        public DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline Inline
        {
            get => GetElement<DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Drawing>(deep);
    }

    /// <summary>
    /// <para>Absolute Position Tab Character.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ptab.</para>
    /// </summary>
    [SchemaAttr(23, "ptab")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PositionalTab : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositionalTab class.
        /// </summary>
        public PositionalTab() : base()
        {
        }

        /// <summary>
        /// <para>Positional Tab Stop Alignment</para>
        /// <para>Represents the following attribute in the schema: w:alignment</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "alignment")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabAlignmentValues> Alignment { get; set; }

        /// <summary>
        /// <para>Positional Tab Base</para>
        /// <para>Represents the following attribute in the schema: w:relativeTo</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "relativeTo")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabPositioningBaseValues> RelativeTo { get; set; }

        /// <summary>
        /// <para>Tab Leader Character</para>
        /// <para>Represents the following attribute in the schema: w:leader</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "leader")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabLeaderCharValues> Leader { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PositionalTab>(deep);
    }

    /// <summary>
    /// <para>Defines the RunStyle Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rStyle.</para>
    /// </summary>
    [SchemaAttr(23, "rStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the RunStyle class.
        /// </summary>
        public RunStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyle Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyle.</para>
    /// </summary>
    [SchemaAttr(23, "tblStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyle class.
        /// </summary>
        public TableStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Style's Associated Numbering Level.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pStyle.</para>
    /// </summary>
    [SchemaAttr(23, "pStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphStyleIdInLevel : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphStyleIdInLevel class.
        /// </summary>
        public ParagraphStyleIdInLevel() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphStyleIdInLevel>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AbstractNumDefinitionName : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNumDefinitionName class.
        /// </summary>
        public AbstractNumDefinitionName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNumDefinitionName>(deep);
    }

    /// <summary>
    /// <para>Numbering Style Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLink.</para>
    /// </summary>
    [SchemaAttr(23, "styleLink")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleLink : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the StyleLink class.
        /// </summary>
        public StyleLink() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLink>(deep);
    }

    /// <summary>
    /// <para>Numbering Style Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numStyleLink.</para>
    /// </summary>
    [SchemaAttr(23, "numStyleLink")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingStyleLink : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the NumberingStyleLink class.
        /// </summary>
        public NumberingStyleLink() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingStyleLink>(deep);
    }

    /// <summary>
    /// <para>Alternate Style Names.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:aliases.</para>
    /// </summary>
    [SchemaAttr(23, "aliases")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Aliases : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the Aliases class.
        /// </summary>
        public Aliases() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Aliases>(deep);
    }

    /// <summary>
    /// <para>Parent Style ID.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:basedOn.</para>
    /// </summary>
    [SchemaAttr(23, "basedOn")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BasedOn : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the BasedOn class.
        /// </summary>
        public BasedOn() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BasedOn>(deep);
    }

    /// <summary>
    /// <para>Style For Next Paragraph.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:next.</para>
    /// </summary>
    [SchemaAttr(23, "next")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NextParagraphStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the NextParagraphStyle class.
        /// </summary>
        public NextParagraphStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NextParagraphStyle>(deep);
    }

    /// <summary>
    /// <para>Linked Style Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:link.</para>
    /// </summary>
    [SchemaAttr(23, "link")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LinkedStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the LinkedStyle class.
        /// </summary>
        public LinkedStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkedStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Style Applied to Automatically Generated Paragraphs.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:clickAndTypeStyle.</para>
    /// </summary>
    [SchemaAttr(23, "clickAndTypeStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ClickAndTypeStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the ClickAndTypeStyle class.
        /// </summary>
        public ClickAndTypeStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ClickAndTypeStyle>(deep);
    }

    /// <summary>
    /// <para>Default Table Style for Newly Inserted Tables.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:defaultTableStyle.</para>
    /// </summary>
    [SchemaAttr(23, "defaultTableStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DefaultTableStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTableStyle class.
        /// </summary>
        public DefaultTableStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTableStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the String253Type Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class String253Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the String253Type class.
        /// </summary>
        protected String253Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 253L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the RunFonts Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rFonts.</para>
    /// </summary>
    [SchemaAttr(23, "rFonts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunFonts : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RunFonts class.
        /// </summary>
        public RunFonts() : base()
        {
        }

        /// <summary>
        /// <para>Font Content Type</para>
        /// <para>Represents the following attribute in the schema: w:hint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hint")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontTypeHintValues> Hint { get; set; }

        /// <summary>
        /// <para>ASCII Font</para>
        /// <para>Represents the following attribute in the schema: w:ascii</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 31L)]
        [SchemaAttr(23, "ascii")]
        [Index(1)]
        public StringValue Ascii { get; set; }

        /// <summary>
        /// <para>High ANSI Font</para>
        /// <para>Represents the following attribute in the schema: w:hAnsi</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 31L)]
        [SchemaAttr(23, "hAnsi")]
        [Index(2)]
        public StringValue HighAnsi { get; set; }

        /// <summary>
        /// <para>East Asian Font</para>
        /// <para>Represents the following attribute in the schema: w:eastAsia</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 31L)]
        [SchemaAttr(23, "eastAsia")]
        [Index(3)]
        public StringValue EastAsia { get; set; }

        /// <summary>
        /// <para>Complex Script Font</para>
        /// <para>Represents the following attribute in the schema: w:cs</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 31L)]
        [SchemaAttr(23, "cs")]
        [Index(4)]
        public StringValue ComplexScript { get; set; }

        /// <summary>
        /// <para>ASCII Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:asciiTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "asciiTheme")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues> AsciiTheme { get; set; }

        /// <summary>
        /// <para>High ANSI Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:hAnsiTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hAnsiTheme")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues> HighAnsiTheme { get; set; }

        /// <summary>
        /// <para>East Asian Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:eastAsiaTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "eastAsiaTheme")]
        [Index(7)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues> EastAsiaTheme { get; set; }

        /// <summary>
        /// <para>Complex Script Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:cstheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cstheme")]
        [Index(8)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues> ComplexScriptTheme { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunFonts>(deep);
    }

    /// <summary>
    /// <para>Defines the Color Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:color.</para>
    /// </summary>
    [SchemaAttr(23, "color")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Color : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Color class.
        /// </summary>
        public Color() : base()
        {
        }

        /// <summary>
        /// <para>Run Content Color</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>Run Content Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeColor")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeColor { get; set; }

        /// <summary>
        /// <para>Run Content Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeTint")]
        [Index(2)]
        public StringValue ThemeTint { get; set; }

        /// <summary>
        /// <para>Run Content Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeShade")]
        [Index(3)]
        public StringValue ThemeShade { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Color>(deep);
    }

    /// <summary>
    /// <para>Defines the Spacing Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacing.</para>
    /// </summary>
    [SchemaAttr(23, "spacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Spacing : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Spacing class.
        /// </summary>
        public Spacing() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Spacing>(deep);
    }

    /// <summary>
    /// <para>Defines the CharacterScale Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:w.</para>
    /// </summary>
    [SchemaAttr(23, "w")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CharacterScale : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterScale class.
        /// </summary>
        public CharacterScale() : base()
        {
        }

        /// <summary>
        /// <para>Text Expansion/Compression Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 1L, MaxInclusive = 600L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public IntegerValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterScale>(deep);
    }

    /// <summary>
    /// <para>Defines the Kern Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:kern.</para>
    /// </summary>
    [SchemaAttr(23, "kern")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Kern : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Kern class.
        /// </summary>
        public Kern() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 3277L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kern>(deep);
    }

    /// <summary>
    /// <para>Defines the Position Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:position.</para>
    /// </summary>
    [SchemaAttr(23, "position")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Position : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position() : base()
        {
        }

        /// <summary>
        /// <para>Signed Half-Point Measurement</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Position>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSize Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sz.</para>
    /// </summary>
    [SchemaAttr(23, "sz")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FontSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FontSize class.
        /// </summary>
        public FontSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSize>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSizeComplexScript Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:szCs.</para>
    /// </summary>
    [SchemaAttr(23, "szCs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FontSizeComplexScript : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FontSizeComplexScript class.
        /// </summary>
        public FontSizeComplexScript() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSizeComplexScript>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:size.</para>
    /// </summary>
    [SchemaAttr(23, "size")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FormFieldSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldSize class.
        /// </summary>
        public FormFieldSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldSize>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Font Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hps.</para>
    /// </summary>
    [SchemaAttr(23, "hps")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PhoneticGuideTextFontSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideTextFontSize class.
        /// </summary>
        public PhoneticGuideTextFontSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideTextFontSize>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Base Text Font Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hpsBaseText.</para>
    /// </summary>
    [SchemaAttr(23, "hpsBaseText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PhoneticGuideBaseTextSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideBaseTextSize class.
        /// </summary>
        public PhoneticGuideBaseTextSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideBaseTextSize>(deep);
    }

    /// <summary>
    /// <para>Defines the HpsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class HpsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HpsMeasureType class.
        /// </summary>
        protected HpsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Half Point Measurement</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 2L, MaxInclusive = 3277L, SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the Highlight Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:highlight.</para>
    /// </summary>
    [SchemaAttr(23, "highlight")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Highlight : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Highlight class.
        /// </summary>
        public Highlight() : base()
        {
        }

        /// <summary>
        /// <para>Highlighting Color</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HighlightColorValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Highlight>(deep);
    }

    /// <summary>
    /// <para>Defines the Underline Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:u.</para>
    /// </summary>
    [SchemaAttr(23, "u")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Underline : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Underline class.
        /// </summary>
        public Underline() : base()
        {
        }

        /// <summary>
        /// <para>Underline Style</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.UnderlineValues> Val { get; set; }

        /// <summary>
        /// <para>Underline Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "color")]
        [Index(1)]
        public StringValue Color { get; set; }

        /// <summary>
        /// <para>Underline Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeColor")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeColor { get; set; }

        /// <summary>
        /// <para>Underline Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeTint")]
        [Index(3)]
        public StringValue ThemeTint { get; set; }

        /// <summary>
        /// <para>Underline Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeShade")]
        [Index(4)]
        public StringValue ThemeShade { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);
    }

    /// <summary>
    /// <para>Defines the TextEffect Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:effect.</para>
    /// </summary>
    [SchemaAttr(23, "effect")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextEffect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextEffect class.
        /// </summary>
        public TextEffect() : base()
        {
        }

        /// <summary>
        /// <para>Animated Text Effect Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextEffectValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextEffect>(deep);
    }

    /// <summary>
    /// <para>Defines the Border Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bdr.</para>
    /// </summary>
    [SchemaAttr(23, "bdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Border : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the Border class.
        /// </summary>
        public Border() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Border>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Above Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:top.</para>
    /// </summary>
    [SchemaAttr(23, "top")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorder class.
        /// </summary>
        public TopBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);
    }

    /// <summary>
    /// <para>Left Paragraph Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    [SchemaAttr(23, "left")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LeftBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorder class.
        /// </summary>
        public LeftBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bottom.</para>
    /// </summary>
    [SchemaAttr(23, "bottom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BottomBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorder class.
        /// </summary>
        public BottomBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);
    }

    /// <summary>
    /// <para>Right Paragraph Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    [SchemaAttr(23, "right")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RightBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorder class.
        /// </summary>
        public RightBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:between.</para>
    /// </summary>
    [SchemaAttr(23, "between")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BetweenBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BetweenBorder class.
        /// </summary>
        public BetweenBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BetweenBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Facing Pages.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bar.</para>
    /// </summary>
    [SchemaAttr(23, "bar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BarBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BarBorder class.
        /// </summary>
        public BarBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BarBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the StartBorder Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    [SchemaAttr(23, "start")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class StartBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the StartBorder class.
        /// </summary>
        public StartBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the EndBorder Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:end.</para>
    /// </summary>
    [SchemaAttr(23, "end")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class EndBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the EndBorder class.
        /// </summary>
        public EndBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndBorder>(deep);
    }

    /// <summary>
    /// <para>Table Inside Horizontal Edges Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:insideH.</para>
    /// </summary>
    [SchemaAttr(23, "insideH")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class InsideHorizontalBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class.
        /// </summary>
        public InsideHorizontalBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideHorizontalBorder>(deep);
    }

    /// <summary>
    /// <para>Table Inside Vertical Edges Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:insideV.</para>
    /// </summary>
    [SchemaAttr(23, "insideV")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class InsideVerticalBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class.
        /// </summary>
        public InsideVerticalBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideVerticalBorder>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Left to Bottom Right Diagonal Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tl2br.</para>
    /// </summary>
    [SchemaAttr(23, "tl2br")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopLeftToBottomRightCellBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightCellBorder class.
        /// </summary>
        public TopLeftToBottomRightCellBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightCellBorder>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Right to Bottom Left Diagonal Border.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tr2bl.</para>
    /// </summary>
    [SchemaAttr(23, "tr2bl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopRightToBottomLeftCellBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftCellBorder class.
        /// </summary>
        public TopRightToBottomLeftCellBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopRightToBottomLeftCellBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the BorderType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BorderType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BorderType class.
        /// </summary>
        protected BorderType() : base()
        {
        }

        /// <summary>
        /// <para>Border Style</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BorderValues> Val { get; set; }

        /// <summary>
        /// <para>Border Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "color")]
        [Index(1)]
        public StringValue Color { get; set; }

        /// <summary>
        /// <para>Border Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeColor")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeColor { get; set; }

        /// <summary>
        /// <para>Border Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeTint")]
        [Index(3)]
        public StringValue ThemeTint { get; set; }

        /// <summary>
        /// <para>Border Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeShade")]
        [Index(4)]
        public StringValue ThemeShade { get; set; }

        /// <summary>
        /// <para>Border Width</para>
        /// <para>Represents the following attribute in the schema: w:sz</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "sz")]
        [Index(5)]
        public UInt32Value Size { get; set; }

        /// <summary>
        /// <para>Border Spacing Measurement</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 31L)]
        [SchemaAttr(23, "space")]
        [Index(6)]
        public UInt32Value Space { get; set; }

        /// <summary>
        /// <para>Border Shadow</para>
        /// <para>Represents the following attribute in the schema: w:shadow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "shadow")]
        [Index(7)]
        public OnOffValue Shadow { get; set; }

        /// <summary>
        /// <para>Create Frame Effect</para>
        /// <para>Represents the following attribute in the schema: w:frame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "frame")]
        [Index(8)]
        public OnOffValue Frame { get; set; }
    }

    /// <summary>
    /// <para>Defines the FitText Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fitText.</para>
    /// </summary>
    [SchemaAttr(23, "fitText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FitText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FitText class.
        /// </summary>
        public FitText() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt32Value Val { get; set; }

        /// <summary>
        /// <para>Fit Text Run ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "id")]
        [Index(1)]
        public Int32Value Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FitText>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalTextAlignment Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vertAlign.</para>
    /// </summary>
    [SchemaAttr(23, "vertAlign")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class VerticalTextAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalTextAlignment class.
        /// </summary>
        public VerticalTextAlignment() : base()
        {
        }

        /// <summary>
        /// <para>Subscript/Superscript Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalPositionValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalTextAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the Emphasis Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:em.</para>
    /// </summary>
    [SchemaAttr(23, "em")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Emphasis : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Emphasis class.
        /// </summary>
        public Emphasis() : base()
        {
        }

        /// <summary>
        /// <para>Emphasis Mark Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.EmphasisMarkValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Emphasis>(deep);
    }

    /// <summary>
    /// <para>Defines the Languages Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lang.</para>
    /// </summary>
    [SchemaAttr(23, "lang")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Languages : LanguageType
    {
        /// <summary>
        /// Initializes a new instance of the Languages class.
        /// </summary>
        public Languages() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Languages>(deep);
    }

    /// <summary>
    /// <para>Theme Font Languages.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:themeFontLang.</para>
    /// </summary>
    [SchemaAttr(23, "themeFontLang")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ThemeFontLanguages : LanguageType
    {
        /// <summary>
        /// Initializes a new instance of the ThemeFontLanguages class.
        /// </summary>
        public ThemeFontLanguages() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeFontLanguages>(deep);
    }

    /// <summary>
    /// <para>Defines the LanguageType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LanguageType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LanguageType class.
        /// </summary>
        protected LanguageType() : base()
        {
        }

        /// <summary>
        /// <para>Latin Language</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>East Asian Language</para>
        /// <para>Represents the following attribute in the schema: w:eastAsia</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "eastAsia")]
        [Index(1)]
        public StringValue EastAsia { get; set; }

        /// <summary>
        /// <para>Complex Script Language</para>
        /// <para>Represents the following attribute in the schema: w:bidi</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "bidi")]
        [Index(2)]
        public StringValue Bidi { get; set; }
    }

    /// <summary>
    /// <para>Defines the EastAsianLayout Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:eastAsianLayout.</para>
    /// </summary>
    [SchemaAttr(23, "eastAsianLayout")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EastAsianLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EastAsianLayout class.
        /// </summary>
        public EastAsianLayout() : base()
        {
        }

        /// <summary>
        /// <para>East Asian Typography Run ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "id")]
        [Index(0)]
        public Int32Value Id { get; set; }

        /// <summary>
        /// <para>Two Lines in One</para>
        /// <para>Represents the following attribute in the schema: w:combine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "combine")]
        [Index(1)]
        public OnOffValue Combine { get; set; }

        /// <summary>
        /// <para>Display Brackets Around Two Lines in One</para>
        /// <para>Represents the following attribute in the schema: w:combineBrackets</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "combineBrackets")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CombineBracketValues> CombineBrackets { get; set; }

        /// <summary>
        /// <para>Horizontal in Vertical (Rotate Text)</para>
        /// <para>Represents the following attribute in the schema: w:vert</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vert")]
        [Index(3)]
        public OnOffValue Vertical { get; set; }

        /// <summary>
        /// <para>Compress Rotated Text to Line Height</para>
        /// <para>Represents the following attribute in the schema: w:vertCompress</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vertCompress")]
        [Index(4)]
        public OnOffValue VerticalCompress { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EastAsianLayout>(deep);
    }

    /// <summary>
    /// <para>Defines the RunPropertiesChange Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousRunProperties &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousRunProperties))]
    [SchemaAttr(23, "rPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class.
        /// </summary>
        public RunPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousRunProperties PreviousRunProperties
        {
            get => GetElement<PreviousRunProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunStyle &lt;w:rStyle></description></item>
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Highlight &lt;w:highlight></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>RightToLeftText &lt;w:rtl></description></item>
    ///   <item><description>ComplexScript &lt;w:cs></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Glow &lt;w14:glow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Shadow &lt;w14:shadow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Reflection &lt;w14:reflection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect &lt;w14:textOutline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.FillTextEffect &lt;w14:textFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Scene3D &lt;w14:scene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Properties3D &lt;w14:props3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Ligatures &lt;w14:ligatures></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberingFormat &lt;w14:numForm></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberSpacing &lt;w14:numSpacing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.StylisticSets &lt;w14:stylisticSets></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives &lt;w14:cntxtAlts></description></item>
    ///   <item><description>RunPropertiesChange &lt;w:rPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunStyle))]
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Highlight))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(RightToLeftText))]
    [ChildElementInfo(typeof(ComplexScript))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(RunPropertiesChange))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunProperties class.
        /// </summary>
        public RunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>RunStyle.</para>
        /// <para>Represents the following element tag in the schema: w:rStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunStyle RunStyle
        {
            get => GetElement<RunStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunFonts RunFonts
        {
            get => GetElement<RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Bold Bold
        {
            get => GetElement<Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BoldComplexScript BoldComplexScript
        {
            get => GetElement<BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Italic Italic
        {
            get => GetElement<Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ItalicComplexScript ItalicComplexScript
        {
            get => GetElement<ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Caps Caps
        {
            get => GetElement<Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SmallCaps SmallCaps
        {
            get => GetElement<SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Strike Strike
        {
            get => GetElement<Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoubleStrike DoubleStrike
        {
            get => GetElement<DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shadow Shadow
        {
            get => GetElement<Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emboss Emboss
        {
            get => GetElement<Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Imprint Imprint
        {
            get => GetElement<Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoProof NoProof
        {
            get => GetElement<NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Vanish Vanish
        {
            get => GetElement<Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WebHidden WebHidden
        {
            get => GetElement<WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Color Color
        {
            get => GetElement<Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Spacing Spacing
        {
            get => GetElement<Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CharacterScale CharacterScale
        {
            get => GetElement<CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kern Kern
        {
            get => GetElement<Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSize FontSize
        {
            get => GetElement<FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSizeComplexScript FontSizeComplexScript
        {
            get => GetElement<FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Highlight.</para>
        /// <para>Represents the following element tag in the schema: w:highlight.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Highlight Highlight
        {
            get => GetElement<Highlight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Underline Underline
        {
            get => GetElement<Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextEffect TextEffect
        {
            get => GetElement<TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Border Border
        {
            get => GetElement<Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FitText FitText
        {
            get => GetElement<FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalTextAlignment VerticalTextAlignment
        {
            get => GetElement<VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RightToLeftText.</para>
        /// <para>Represents the following element tag in the schema: w:rtl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightToLeftText RightToLeftText
        {
            get => GetElement<RightToLeftText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ComplexScript ComplexScript
        {
            get => GetElement<ComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emphasis Emphasis
        {
            get => GetElement<Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Languages Languages
        {
            get => GetElement<Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EastAsianLayout EastAsianLayout
        {
            get => GetElement<EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpecVanish SpecVanish
        {
            get => GetElement<SpecVanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Glow.</para>
        /// <para>Represents the following element tag in the schema: w14:glow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Glow Glow
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow14.</para>
        /// <para>Represents the following element tag in the schema: w14:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Shadow Shadow14
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reflection.</para>
        /// <para>Represents the following element tag in the schema: w14:reflection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Reflection Reflection
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextOutlineEffect.</para>
        /// <para>Represents the following element tag in the schema: w14:textOutline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect TextOutlineEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillTextEffect.</para>
        /// <para>Represents the following element tag in the schema: w14:textFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.FillTextEffect FillTextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scene3D.</para>
        /// <para>Represents the following element tag in the schema: w14:scene3d.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Scene3D Scene3D
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Properties3D.</para>
        /// <para>Represents the following element tag in the schema: w14:props3d.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Properties3D Properties3D
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ligatures.</para>
        /// <para>Represents the following element tag in the schema: w14:ligatures.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Ligatures Ligatures
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingFormat.</para>
        /// <para>Represents the following element tag in the schema: w14:numForm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.NumberingFormat NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberSpacing.</para>
        /// <para>Represents the following element tag in the schema: w14:numSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.NumberSpacing NumberSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StylisticSets.</para>
        /// <para>Represents the following element tag in the schema: w14:stylisticSets.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.StylisticSets StylisticSets
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualAlternatives.</para>
        /// <para>Represents the following element tag in the schema: w14:cntxtAlts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives ContextualAlternatives
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:rPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunPropertiesChange RunPropertiesChange
        {
            get => GetElement<RunPropertiesChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange), 0, 1)
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the InsertedMathControl Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>DeletedMathControl &lt;w:del></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(DeletedMathControl))]
    [SchemaAttr(23, "ins")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class InsertedMathControl : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class.
        /// </summary>
        public InsertedMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsertedMathControl(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsertedMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the DeletedMathControl Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [SchemaAttr(23, "del")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DeletedMathControl : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class.
        /// </summary>
        public DeletedMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DeletedMathControl(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveFromMathControl Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>InsertedMathControl &lt;w:ins></description></item>
    ///   <item><description>DeletedMathControl &lt;w:del></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "moveFrom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveFromMathControl : MathControlMoveType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class.
        /// </summary>
        public MoveFromMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveFromMathControl(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToMathControl Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>InsertedMathControl &lt;w:ins></description></item>
    ///   <item><description>DeletedMathControl &lt;w:del></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "moveTo")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveToMathControl : MathControlMoveType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class.
        /// </summary>
        public MoveToMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveToMathControl(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MathControlMoveType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>InsertedMathControl &lt;w:ins></description></item>
    ///   <item><description>DeletedMathControl &lt;w:del></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(InsertedMathControl))]
    [ChildElementInfo(typeof(DeletedMathControl))]
    public abstract partial class MathControlMoveType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class.
        /// </summary>
        protected MathControlMoveType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected MathControlMoveType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected MathControlMoveType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected MathControlMoveType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the CustomXmlRuby Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlProperties &lt;w:customXmlPr></description></item>
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlProperties))]
    [ChildElementInfo(typeof(CustomXmlRuby))]
    [ChildElementInfo(typeof(SimpleFieldRuby))]
    [ChildElementInfo(typeof(HyperlinkRuby))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(SdtRunRuby))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [SchemaAttr(23, "customXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlRuby : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class.
        /// </summary>
        public CustomXmlRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRuby(string outerXml) : base(outerXml)
        {
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the SimpleFieldRuby Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldSimple.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FieldData &lt;w:fldData></description></item>
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FieldData))]
    [ChildElementInfo(typeof(CustomXmlRuby))]
    [ChildElementInfo(typeof(SimpleFieldRuby))]
    [ChildElementInfo(typeof(HyperlinkRuby))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(SdtRunRuby))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [SchemaAttr(23, "fldSimple")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SimpleFieldRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class.
        /// </summary>
        public SimpleFieldRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleFieldRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleFieldRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SimpleFieldRuby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>instr</para>
        /// <para>Represents the following attribute in the schema: w:instr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "instr")]
        [Index(0)]
        public StringValue Instruction { get; set; }

        /// <summary>
        /// <para>fldLock</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fldLock")]
        [Index(1)]
        public OnOffValue FieldLock { get; set; }

        /// <summary>
        /// <para>dirty</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dirty")]
        [Index(2)]
        public OnOffValue Dirty { get; set; }

        /// <summary>
        /// <para>FieldData.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FieldData FieldData
        {
            get => GetElement<FieldData>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SimpleFieldRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkRuby Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyperlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRuby))]
    [ChildElementInfo(typeof(SimpleFieldRuby))]
    [ChildElementInfo(typeof(HyperlinkRuby))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(SdtRunRuby))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [SchemaAttr(23, "hyperlink")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HyperlinkRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class.
        /// </summary>
        public HyperlinkRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkRuby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>tgtFrame</para>
        /// <para>Represents the following attribute in the schema: w:tgtFrame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "tgtFrame")]
        [Index(0)]
        public StringValue TargetFrame { get; set; }

        /// <summary>
        /// <para>tooltip</para>
        /// <para>Represents the following attribute in the schema: w:tooltip</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 260L)]
        [SchemaAttr(23, "tooltip")]
        [Index(1)]
        public StringValue Tooltip { get; set; }

        /// <summary>
        /// <para>docLocation</para>
        /// <para>Represents the following attribute in the schema: w:docLocation</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "docLocation")]
        [Index(2)]
        public StringValue DocLocation { get; set; }

        /// <summary>
        /// <para>history</para>
        /// <para>Represents the following attribute in the schema: w:history</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "history")]
        [Index(3)]
        public OnOffValue History { get; set; }

        /// <summary>
        /// <para>anchor</para>
        /// <para>Represents the following attribute in the schema: w:anchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "anchor")]
        [Index(4)]
        public StringValue Anchor { get; set; }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [SchemaAttr(19, "id")]
        [Index(5)]
        public StringValue Id { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                new CompositeParticle(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkRuby>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Run.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:r.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>Break &lt;w:br></description></item>
    ///   <item><description>Text &lt;w:t></description></item>
    ///   <item><description>DeletedText &lt;w:delText></description></item>
    ///   <item><description>FieldCode &lt;w:instrText></description></item>
    ///   <item><description>DeletedFieldCode &lt;w:delInstrText></description></item>
    ///   <item><description>NoBreakHyphen &lt;w:noBreakHyphen></description></item>
    ///   <item><description>SoftHyphen &lt;w:softHyphen></description></item>
    ///   <item><description>DayShort &lt;w:dayShort></description></item>
    ///   <item><description>MonthShort &lt;w:monthShort></description></item>
    ///   <item><description>YearShort &lt;w:yearShort></description></item>
    ///   <item><description>DayLong &lt;w:dayLong></description></item>
    ///   <item><description>MonthLong &lt;w:monthLong></description></item>
    ///   <item><description>YearLong &lt;w:yearLong></description></item>
    ///   <item><description>AnnotationReferenceMark &lt;w:annotationRef></description></item>
    ///   <item><description>FootnoteReferenceMark &lt;w:footnoteRef></description></item>
    ///   <item><description>EndnoteReferenceMark &lt;w:endnoteRef></description></item>
    ///   <item><description>SeparatorMark &lt;w:separator></description></item>
    ///   <item><description>ContinuationSeparatorMark &lt;w:continuationSeparator></description></item>
    ///   <item><description>SymbolChar &lt;w:sym></description></item>
    ///   <item><description>PageNumber &lt;w:pgNum></description></item>
    ///   <item><description>CarriageReturn &lt;w:cr></description></item>
    ///   <item><description>TabChar &lt;w:tab></description></item>
    ///   <item><description>EmbeddedObject &lt;w:object></description></item>
    ///   <item><description>Picture &lt;w:pict></description></item>
    ///   <item><description>FieldChar &lt;w:fldChar></description></item>
    ///   <item><description>Ruby &lt;w:ruby></description></item>
    ///   <item><description>FootnoteReference &lt;w:footnoteReference></description></item>
    ///   <item><description>EndnoteReference &lt;w:endnoteReference></description></item>
    ///   <item><description>CommentReference &lt;w:commentReference></description></item>
    ///   <item><description>Drawing &lt;w:drawing></description></item>
    ///   <item><description>PositionalTab &lt;w:ptab></description></item>
    ///   <item><description>LastRenderedPageBreak &lt;w:lastRenderedPageBreak></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(Break))]
    [ChildElementInfo(typeof(Text))]
    [ChildElementInfo(typeof(DeletedText))]
    [ChildElementInfo(typeof(FieldCode))]
    [ChildElementInfo(typeof(DeletedFieldCode))]
    [ChildElementInfo(typeof(NoBreakHyphen))]
    [ChildElementInfo(typeof(SoftHyphen))]
    [ChildElementInfo(typeof(DayShort))]
    [ChildElementInfo(typeof(MonthShort))]
    [ChildElementInfo(typeof(YearShort))]
    [ChildElementInfo(typeof(DayLong))]
    [ChildElementInfo(typeof(MonthLong))]
    [ChildElementInfo(typeof(YearLong))]
    [ChildElementInfo(typeof(AnnotationReferenceMark))]
    [ChildElementInfo(typeof(FootnoteReferenceMark))]
    [ChildElementInfo(typeof(EndnoteReferenceMark))]
    [ChildElementInfo(typeof(SeparatorMark))]
    [ChildElementInfo(typeof(ContinuationSeparatorMark))]
    [ChildElementInfo(typeof(SymbolChar))]
    [ChildElementInfo(typeof(PageNumber))]
    [ChildElementInfo(typeof(CarriageReturn))]
    [ChildElementInfo(typeof(TabChar))]
    [ChildElementInfo(typeof(EmbeddedObject))]
    [ChildElementInfo(typeof(Picture))]
    [ChildElementInfo(typeof(FieldChar))]
    [ChildElementInfo(typeof(Ruby))]
    [ChildElementInfo(typeof(FootnoteReference))]
    [ChildElementInfo(typeof(EndnoteReference))]
    [ChildElementInfo(typeof(CommentReference))]
    [ChildElementInfo(typeof(Drawing))]
    [ChildElementInfo(typeof(PositionalTab))]
    [ChildElementInfo(typeof(LastRenderedPageBreak))]
    [SchemaAttr(23, "r")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Run : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Run class.
        /// </summary>
        public Run() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Run(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Run Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRPr")]
        [Index(0)]
        public HexBinaryValue RsidRunProperties { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Run Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidDel")]
        [Index(1)]
        public HexBinaryValue RsidRunDeletion { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Run</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidR")]
        [Index(2)]
        public HexBinaryValue RsidRunAddition { get; set; }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunProperties RunProperties
        {
            get => GetElement<RunProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Break), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Text), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedText), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldCode), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedFieldCode), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoBreakHyphen), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SoftHyphen), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DayShort), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MonthShort), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.YearShort), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DayLong), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MonthLong), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.YearLong), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AnnotationReferenceMark), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteReferenceMark), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteReferenceMark), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SeparatorMark), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContinuationSeparatorMark), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SymbolChar), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumber), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CarriageReturn), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TabChar), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbeddedObject), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Picture), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldChar), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Ruby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PositionalTab), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LastRenderedPageBreak), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtRunRuby Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtProperties &lt;w:sdtPr></description></item>
    ///   <item><description>SdtEndCharProperties &lt;w:sdtEndPr></description></item>
    ///   <item><description>SdtContentRunRuby &lt;w:sdtContent></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtProperties))]
    [ChildElementInfo(typeof(SdtEndCharProperties))]
    [ChildElementInfo(typeof(SdtContentRunRuby))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtRunRuby : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class.
        /// </summary>
        public SdtRunRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRunRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRunRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRunRuby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>SdtContentRunRuby.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtContentRunRuby SdtContentRunRuby
        {
            get => GetElement<SdtContentRunRuby>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRunRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the ProofError Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:proofErr.</para>
    /// </summary>
    [SchemaAttr(23, "proofErr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ProofError : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ProofError class.
        /// </summary>
        public ProofError() : base()
        {
        }

        /// <summary>
        /// <para>Proofing Error Anchor Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingErrorValues> Type { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProofError>(deep);
    }

    /// <summary>
    /// <para>Defines the PermStart Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:permStart.</para>
    /// </summary>
    [SchemaAttr(23, "permStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PermStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PermStart class.
        /// </summary>
        public PermStart() : base()
        {
        }

        /// <summary>
        /// <para>edGrp</para>
        /// <para>Represents the following attribute in the schema: w:edGrp</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "edGrp")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RangePermissionEditingGroupValues> EditorGroup { get; set; }

        /// <summary>
        /// <para>ed</para>
        /// <para>Represents the following attribute in the schema: w:ed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "ed")]
        [Index(1)]
        public StringValue Ed { get; set; }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "colFirst")]
        [Index(2)]
        public Int32Value ColumnFirst { get; set; }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "colLast")]
        [Index(3)]
        public Int32Value ColumnLast { get; set; }

        /// <summary>
        /// <para>Annotation ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "id")]
        [Index(4)]
        public Int32Value Id { get; set; }

        /// <summary>
        /// <para>Annotation Displaced By Custom XML Markup</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displacedByCustomXml")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues> DisplacedByCustomXml { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PermStart>(deep);
    }

    /// <summary>
    /// <para>Defines the PermEnd Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:permEnd.</para>
    /// </summary>
    [SchemaAttr(23, "permEnd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PermEnd : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PermEnd class.
        /// </summary>
        public PermEnd() : base()
        {
        }

        /// <summary>
        /// <para>Annotation ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "id")]
        [Index(0)]
        public Int32Value Id { get; set; }

        /// <summary>
        /// <para>Annotation Displaced By Custom XML Markup</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displacedByCustomXml")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues> DisplacedByCustomXml { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PermEnd>(deep);
    }

    /// <summary>
    /// <para>Inserted Run Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "ins")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class InsertedRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the InsertedRun class.
        /// </summary>
        public InsertedRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsertedRun(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsertedRun>(deep);
    }

    /// <summary>
    /// <para>Deleted Run Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "del")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DeletedRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedRun class.
        /// </summary>
        public DeletedRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DeletedRun(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedRun>(deep);
    }

    /// <summary>
    /// <para>Move Source Run Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "moveFrom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveFromRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRun class.
        /// </summary>
        public MoveFromRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveFromRun(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRun>(deep);
    }

    /// <summary>
    /// <para>Move Destination Run Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "moveTo")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MoveToRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRun class.
        /// </summary>
        public MoveToRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveToRun(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRun>(deep);
    }

    /// <summary>
    /// <para>Defines the RunTrackChangeType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    public abstract partial class RunTrackChangeType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class.
        /// </summary>
        protected RunTrackChangeType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RunTrackChangeType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RunTrackChangeType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected RunTrackChangeType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the ContentPart Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:contentPart.</para>
    /// </summary>
    [SchemaAttr(23, "contentPart")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class ContentPart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ContentPart class.
        /// </summary>
        public ContentPart() : base()
        {
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(0)]
        public StringValue Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContentPart>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtRun Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtProperties &lt;w:sdtPr></description></item>
    ///   <item><description>SdtEndCharProperties &lt;w:sdtEndPr></description></item>
    ///   <item><description>SdtContentRun &lt;w:sdtContent></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtProperties))]
    [ChildElementInfo(typeof(SdtEndCharProperties))]
    [ChildElementInfo(typeof(SdtContentRun))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtRun : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRun class.
        /// </summary>
        public SdtRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRun(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Inline-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtContentRun SdtContentRun
        {
            get => GetElement<SdtContentRun>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRun), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRun>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlBlock Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlProperties &lt;w:customXmlPr></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlProperties))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "customXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlBlock : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class.
        /// </summary>
        public CustomXmlBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlBlock(string outerXml) : base(outerXml)
        {
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlBlock>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtBlock Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtProperties &lt;w:sdtPr></description></item>
    ///   <item><description>SdtEndCharProperties &lt;w:sdtEndPr></description></item>
    ///   <item><description>SdtContentBlock &lt;w:sdtContent></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtProperties))]
    [ChildElementInfo(typeof(SdtEndCharProperties))]
    [ChildElementInfo(typeof(SdtContentBlock))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtBlock : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtBlock class.
        /// </summary>
        public SdtBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtBlock(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Block-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtContentBlock SdtContentBlock
        {
            get => GetElement<SdtContentBlock>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtBlock>(deep);
    }

    /// <summary>
    /// <para>Defines the Paragraph Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:p.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphProperties &lt;w:pPr></description></item>
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphProperties))]
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "p")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Paragraph : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Paragraph class.
        /// </summary>
        public Paragraph() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Paragraph(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Glyph Formatting</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRPr")]
        [Index(0)]
        public HexBinaryValue RsidParagraphMarkRevision { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidR")]
        [Index(1)]
        public HexBinaryValue RsidParagraphAddition { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidDel")]
        [Index(2)]
        public HexBinaryValue RsidParagraphDeletion { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidP</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidP")]
        [Index(3)]
        public HexBinaryValue RsidParagraphProperties { get; set; }

        /// <summary>
        /// <para>Default Revision Identifier for Runs</para>
        /// <para>Represents the following attribute in the schema: w:rsidRDefault</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRDefault")]
        [Index(4)]
        public HexBinaryValue RsidRunAdditionDefault { get; set; }

        /// <summary>
        /// <para>paraId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:paraId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "paraId")]
        [Index(5)]
        public HexBinaryValue ParagraphId { get; set; }

        /// <summary>
        /// <para>textId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:textId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "textId")]
        [Index(6)]
        public HexBinaryValue TextId { get; set; }

        /// <summary>
        /// <para>noSpellErr, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:noSpellErr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(52, "noSpellErr")]
        [Index(7)]
        public OnOffValue NoSpellError { get; set; }

        /// <summary>
        /// <para>Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphProperties ParagraphProperties
        {
            get => GetElement<ParagraphProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraph>(deep);
    }

    /// <summary>
    /// <para>Defines the Table Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>TableProperties &lt;w:tblPr></description></item>
    ///   <item><description>TableGrid &lt;w:tblGrid></description></item>
    ///   <item><description>TableRow &lt;w:tr></description></item>
    ///   <item><description>CustomXmlRow &lt;w:customXml></description></item>
    ///   <item><description>SdtRow &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(TableProperties))]
    [ChildElementInfo(typeof(TableGrid))]
    [ChildElementInfo(typeof(TableRow))]
    [ChildElementInfo(typeof(CustomXmlRow))]
    [ChildElementInfo(typeof(SdtRow))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tbl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Table : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Table(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableProperties), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableGrid), 1, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);
    }

    /// <summary>
    /// <para>Table Row.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TablePropertyExceptions &lt;w:tblPrEx></description></item>
    ///   <item><description>TableRowProperties &lt;w:trPr></description></item>
    ///   <item><description>TableCell &lt;w:tc></description></item>
    ///   <item><description>CustomXmlCell &lt;w:customXml></description></item>
    ///   <item><description>SdtCell &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TablePropertyExceptions))]
    [ChildElementInfo(typeof(TableRowProperties))]
    [ChildElementInfo(typeof(TableCell))]
    [ChildElementInfo(typeof(CustomXmlCell))]
    [ChildElementInfo(typeof(SdtCell))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableRow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRow class.
        /// </summary>
        public TableRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Table Row Glyph Formatting</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRPr")]
        [Index(0)]
        public HexBinaryValue RsidTableRowMarkRevision { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Table Row</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidR")]
        [Index(1)]
        public HexBinaryValue RsidTableRowAddition { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Table Row Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidDel")]
        [Index(2)]
        public HexBinaryValue RsidTableRowDeletion { get; set; }

        /// <summary>
        /// <para>Revision Identifier for Table Row Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidTr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidTr")]
        [Index(3)]
        public HexBinaryValue RsidTableRowProperties { get; set; }

        /// <summary>
        /// <para>paraId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:paraId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "paraId")]
        [Index(4)]
        public HexBinaryValue ParagraphId { get; set; }

        /// <summary>
        /// <para>textId, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w14:textId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [StringValidator(Length = 4L)]
        [SchemaAttr(52, "textId")]
        [Index(5)]
        public HexBinaryValue TextId { get; set; }

        /// <summary>
        /// <para>Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrEx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TablePropertyExceptions TablePropertyExceptions
        {
            get => GetElement<TablePropertyExceptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableRowProperties TableRowProperties
        {
            get => GetElement<TableRowProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 1, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRow>(deep);
    }

    /// <summary>
    /// <para>Row-Level Custom XML Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlProperties &lt;w:customXmlPr></description></item>
    ///   <item><description>TableRow &lt;w:tr></description></item>
    ///   <item><description>CustomXmlRow &lt;w:customXml></description></item>
    ///   <item><description>SdtRow &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlProperties))]
    [ChildElementInfo(typeof(TableRow))]
    [ChildElementInfo(typeof(CustomXmlRow))]
    [ChildElementInfo(typeof(SdtRow))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "customXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlRow : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class.
        /// </summary>
        public CustomXmlRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRow(string outerXml) : base(outerXml)
        {
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRow>(deep);
    }

    /// <summary>
    /// <para>Row-Level Structured Document Tag.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtProperties &lt;w:sdtPr></description></item>
    ///   <item><description>SdtEndCharProperties &lt;w:sdtEndPr></description></item>
    ///   <item><description>SdtContentRow &lt;w:sdtContent></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtProperties))]
    [ChildElementInfo(typeof(SdtEndCharProperties))]
    [ChildElementInfo(typeof(SdtContentRow))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtRow : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRow class.
        /// </summary>
        public SdtRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Row-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtContentRow SdtContentRow
        {
            get => GetElement<SdtContentRow>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRow), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRow>(deep);
    }

    /// <summary>
    /// <para>Table Cell.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellProperties &lt;w:tcPr></description></item>
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableCellProperties))]
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCell : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCell class.
        /// </summary>
        public TableCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCell(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellProperties TableCellProperties
        {
            get => GetElement<TableCellProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 1, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCell>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Custom XML Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlProperties &lt;w:customXmlPr></description></item>
    ///   <item><description>TableCell &lt;w:tc></description></item>
    ///   <item><description>CustomXmlCell &lt;w:customXml></description></item>
    ///   <item><description>SdtCell &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlProperties))]
    [ChildElementInfo(typeof(TableCell))]
    [ChildElementInfo(typeof(CustomXmlCell))]
    [ChildElementInfo(typeof(SdtCell))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "customXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlCell : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class.
        /// </summary>
        public CustomXmlCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlCell(string outerXml) : base(outerXml)
        {
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlCell>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Structured Document Tag.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>SdtProperties &lt;w:sdtPr></description></item>
    ///   <item><description>SdtEndCharProperties &lt;w:sdtEndPr></description></item>
    ///   <item><description>SdtContentCell &lt;w:sdtContent></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(SdtProperties))]
    [ChildElementInfo(typeof(SdtEndCharProperties))]
    [ChildElementInfo(typeof(SdtContentCell))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtCell : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtCell class.
        /// </summary>
        public SdtCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtCell(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Cell-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtContentCell SdtContentCell
        {
            get => GetElement<SdtContentCell>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentCell), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtCell>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlRun Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlProperties &lt;w:customXmlPr></description></item>
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlProperties))]
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "customXml")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlRun : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class.
        /// </summary>
        public CustomXmlRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRun(string outerXml) : base(outerXml)
        {
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRun>(deep);
    }

    /// <summary>
    /// <para>Defines the SimpleField Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldSimple.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FieldData &lt;w:fldData></description></item>
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FieldData))]
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "fldSimple")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SimpleField : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SimpleField class.
        /// </summary>
        public SimpleField() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleField(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleField(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SimpleField(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field Codes</para>
        /// <para>Represents the following attribute in the schema: w:instr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "instr")]
        [Index(0)]
        public StringValue Instruction { get; set; }

        /// <summary>
        /// <para>Field Should Not Be Recalculated</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fldLock")]
        [Index(1)]
        public OnOffValue FieldLock { get; set; }

        /// <summary>
        /// <para>Field Result Invalidated</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "dirty")]
        [Index(2)]
        public OnOffValue Dirty { get; set; }

        /// <summary>
        /// <para>Custom Field Data.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FieldData FieldData
        {
            get => GetElement<FieldData>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SimpleField>(deep);
    }

    /// <summary>
    /// <para>Defines the Hyperlink Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyperlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "hyperlink")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Hyperlink : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Hyperlink class.
        /// </summary>
        public Hyperlink() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Hyperlink(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Hyperlink Target Frame</para>
        /// <para>Represents the following attribute in the schema: w:tgtFrame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "tgtFrame")]
        [Index(0)]
        public StringValue TargetFrame { get; set; }

        /// <summary>
        /// <para>Associated String</para>
        /// <para>Represents the following attribute in the schema: w:tooltip</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 260L)]
        [SchemaAttr(23, "tooltip")]
        [Index(1)]
        public StringValue Tooltip { get; set; }

        /// <summary>
        /// <para>Location in Target Document</para>
        /// <para>Represents the following attribute in the schema: w:docLocation</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "docLocation")]
        [Index(2)]
        public StringValue DocLocation { get; set; }

        /// <summary>
        /// <para>Add To Viewed Hyperlinks</para>
        /// <para>Represents the following attribute in the schema: w:history</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "history")]
        [Index(3)]
        public OnOffValue History { get; set; }

        /// <summary>
        /// <para>Hyperlink Anchor</para>
        /// <para>Represents the following attribute in the schema: w:anchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "anchor")]
        [Index(4)]
        public StringValue Anchor { get; set; }

        /// <summary>
        /// <para>Hyperlink Target</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [SchemaAttr(19, "id")]
        [Index(5)]
        public StringValue Id { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);
    }

    /// <summary>
    /// <para>Defines the BidirectionalOverride Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bdo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "bdo")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class BidirectionalOverride : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class.
        /// </summary>
        public BidirectionalOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BidirectionalOverride(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues> Val { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BidirectionalOverride>(deep);
    }

    /// <summary>
    /// <para>Defines the BidirectionalEmbedding Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dir.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "dir")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class BidirectionalEmbedding : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class.
        /// </summary>
        public BidirectionalEmbedding() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalEmbedding(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalEmbedding(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BidirectionalEmbedding(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues> Val { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                new CompositeParticle(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BidirectionalEmbedding>(deep);
    }

    /// <summary>
    /// <para>Anchor for Subdocument Location.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:subDoc.</para>
    /// </summary>
    [SchemaAttr(23, "subDoc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SubDocumentReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SubDocumentReference class.
        /// </summary>
        public SubDocumentReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SubDocumentReference>(deep);
    }

    /// <summary>
    /// <para>Defines the PrinterSettingsReference Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printerSettings.</para>
    /// </summary>
    [SchemaAttr(23, "printerSettings")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrinterSettingsReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the PrinterSettingsReference class.
        /// </summary>
        public PrinterSettingsReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrinterSettingsReference>(deep);
    }

    /// <summary>
    /// <para>ODSO Data Source File Path.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:src.</para>
    /// </summary>
    [SchemaAttr(23, "src")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SourceReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SourceReference class.
        /// </summary>
        public SourceReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceReference>(deep);
    }

    /// <summary>
    /// <para>Reference to Inclusion/Exclusion Data for Data Source.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipientData.</para>
    /// </summary>
    [SchemaAttr(23, "recipientData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RecipientDataReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the RecipientDataReference class.
        /// </summary>
        public RecipientDataReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecipientDataReference>(deep);
    }

    /// <summary>
    /// <para>Data Source File Path.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataSource.</para>
    /// </summary>
    [SchemaAttr(23, "dataSource")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DataSourceReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceReference class.
        /// </summary>
        public DataSourceReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceReference>(deep);
    }

    /// <summary>
    /// <para>Header Definition File Path.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:headerSource.</para>
    /// </summary>
    [SchemaAttr(23, "headerSource")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HeaderSource : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderSource class.
        /// </summary>
        public HeaderSource() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderSource>(deep);
    }

    /// <summary>
    /// <para>Source File for Frame.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sourceFileName.</para>
    /// </summary>
    [SchemaAttr(23, "sourceFileName")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SourceFileReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SourceFileReference class.
        /// </summary>
        public SourceFileReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceFileReference>(deep);
    }

    /// <summary>
    /// <para>Defines the MovieReference Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:movie.</para>
    /// </summary>
    [SchemaAttr(23, "movie")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MovieReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the MovieReference class.
        /// </summary>
        public MovieReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MovieReference>(deep);
    }

    /// <summary>
    /// <para>Attached Document Template.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attachedTemplate.</para>
    /// </summary>
    [SchemaAttr(23, "attachedTemplate")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AttachedTemplate : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the AttachedTemplate class.
        /// </summary>
        public AttachedTemplate() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AttachedTemplate>(deep);
    }

    /// <summary>
    /// <para>Defines the RelationshipType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RelationshipType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipType class.
        /// </summary>
        protected RelationshipType() : base()
        {
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(0)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// <para>Defines the ConditionalFormatStyle Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cnfStyle.</para>
    /// </summary>
    [SchemaAttr(23, "cnfStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ConditionalFormatStyle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConditionalFormatStyle class.
        /// </summary>
        public ConditionalFormatStyle() : base()
        {
        }

        /// <summary>
        /// <para>Conditional Formatting Bit Mask</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator(Version = FileFormatVersions.Office2007)]
        [RequiredValidator(IsRequired = false, Version = FileFormatVersions.Office2010)]
        [RequiredValidator(InitialVersion = FileFormatVersions.Office2013)]
        [StringValidator(Pattern = "[01]*", Length = 12L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>firstRow, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstRow")]
        [Index(1)]
        public OnOffValue FirstRow { get; set; }

        /// <summary>
        /// <para>lastRow, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastRow")]
        [Index(2)]
        public OnOffValue LastRow { get; set; }

        /// <summary>
        /// <para>firstColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstColumn")]
        [Index(3)]
        public OnOffValue FirstColumn { get; set; }

        /// <summary>
        /// <para>lastColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastColumn")]
        [Index(4)]
        public OnOffValue LastColumn { get; set; }

        /// <summary>
        /// <para>oddVBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:oddVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "oddVBand")]
        [Index(5)]
        public OnOffValue OddVerticalBand { get; set; }

        /// <summary>
        /// <para>evenVBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:evenVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "evenVBand")]
        [Index(6)]
        public OnOffValue EvenVerticalBand { get; set; }

        /// <summary>
        /// <para>oddHBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:oddHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "oddHBand")]
        [Index(7)]
        public OnOffValue OddHorizontalBand { get; set; }

        /// <summary>
        /// <para>evenHBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:evenHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "evenHBand")]
        [Index(8)]
        public OnOffValue EvenHorizontalBand { get; set; }

        /// <summary>
        /// <para>firstRowFirstColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstRowFirstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstRowFirstColumn")]
        [Index(9)]
        public OnOffValue FirstRowFirstColumn { get; set; }

        /// <summary>
        /// <para>firstRowLastColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstRowLastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstRowLastColumn")]
        [Index(10)]
        public OnOffValue FirstRowLastColumn { get; set; }

        /// <summary>
        /// <para>lastRowFirstColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastRowFirstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastRowFirstColumn")]
        [Index(11)]
        public OnOffValue LastRowFirstColumn { get; set; }

        /// <summary>
        /// <para>lastRowLastColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastRowLastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastRowLastColumn")]
        [Index(12)]
        public OnOffValue LastRowLastColumn { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormatStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellWidth Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcW.</para>
    /// </summary>
    [SchemaAttr(23, "tcW")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellWidth : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellWidth class.
        /// </summary>
        public TableCellWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellWidth>(deep);
    }

    /// <summary>
    /// <para>Defines the WidthBeforeTableRow Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wBefore.</para>
    /// </summary>
    [SchemaAttr(23, "wBefore")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WidthBeforeTableRow : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the WidthBeforeTableRow class.
        /// </summary>
        public WidthBeforeTableRow() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidthBeforeTableRow>(deep);
    }

    /// <summary>
    /// <para>Defines the WidthAfterTableRow Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wAfter.</para>
    /// </summary>
    [SchemaAttr(23, "wAfter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WidthAfterTableRow : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the WidthAfterTableRow class.
        /// </summary>
        public WidthAfterTableRow() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidthAfterTableRow>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellSpacing Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCellSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "tblCellSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellSpacing : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellSpacing class.
        /// </summary>
        public TableCellSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellSpacing>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidth Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblW.</para>
    /// </summary>
    [SchemaAttr(23, "tblW")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableWidth : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableWidth class.
        /// </summary>
        public TableWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableWidth>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Margin Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:top.</para>
    /// </summary>
    [SchemaAttr(23, "top")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TopMargin class.
        /// </summary>
        public TopMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the StartMargin Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    [SchemaAttr(23, "start")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class StartMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the StartMargin class.
        /// </summary>
        public StartMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Bottom Margin Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bottom.</para>
    /// </summary>
    [SchemaAttr(23, "bottom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BottomMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the BottomMargin class.
        /// </summary>
        public BottomMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the EndMargin Class.</para>
    /// <para>This class is available in Office 2010 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:end.</para>
    /// </summary>
    [SchemaAttr(23, "end")]
    [OfficeAvailability(FileFormatVersions.Office2010)]
    public partial class EndMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the EndMargin class.
        /// </summary>
        public EndMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Left Margin Exception.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    [SchemaAttr(23, "left")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LeftMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the LeftMargin class.
        /// </summary>
        public LeftMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Right Margin Exception.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    [SchemaAttr(23, "right")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RightMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the RightMargin class.
        /// </summary>
        public RightMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidthType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TableWidthType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableWidthType class.
        /// </summary>
        protected TableWidthType() : base()
        {
        }

        /// <summary>
        /// <para>Table Width Value</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", Version = FileFormatVersions.Office2010, UnionId = 0)]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [NumberValidator(SimpleType = typeof(Int32Value), InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [SchemaAttr(23, "w")]
        [Index(0)]
        public StringValue Width { get; set; }

        /// <summary>
        /// <para>Table Width Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues> Type { get; set; }
    }

    /// <summary>
    /// <para>Defines the HorizontalMerge Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hMerge.</para>
    /// </summary>
    [SchemaAttr(23, "hMerge")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HorizontalMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HorizontalMerge class.
        /// </summary>
        public HorizontalMerge() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Merge Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HorizontalMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalMerge Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vMerge.</para>
    /// </summary>
    [SchemaAttr(23, "vMerge")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class VerticalMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalMerge class.
        /// </summary>
        public VerticalMerge() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Merge Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellBorders Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopBorder &lt;w:top></description></item>
    ///   <item><description>LeftBorder &lt;w:left></description></item>
    ///   <item><description>StartBorder &lt;w:start></description></item>
    ///   <item><description>BottomBorder &lt;w:bottom></description></item>
    ///   <item><description>RightBorder &lt;w:right></description></item>
    ///   <item><description>EndBorder &lt;w:end></description></item>
    ///   <item><description>InsideHorizontalBorder &lt;w:insideH></description></item>
    ///   <item><description>InsideVerticalBorder &lt;w:insideV></description></item>
    ///   <item><description>TopLeftToBottomRightCellBorder &lt;w:tl2br></description></item>
    ///   <item><description>TopRightToBottomLeftCellBorder &lt;w:tr2bl></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(StartBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [ChildElementInfo(typeof(EndBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsideHorizontalBorder))]
    [ChildElementInfo(typeof(InsideVerticalBorder))]
    [ChildElementInfo(typeof(TopLeftToBottomRightCellBorder))]
    [ChildElementInfo(typeof(TopRightToBottomLeftCellBorder))]
    [SchemaAttr(23, "tcBorders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellBorders class.
        /// </summary>
        public TableCellBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellBorders(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Cell Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartBorder.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartBorder StartBorder
        {
            get => GetElement<StartBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndBorder.</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndBorder EndBorder
        {
            get => GetElement<EndBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Inside Horizontal Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public InsideHorizontalBorder InsideHorizontalBorder
        {
            get => GetElement<InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Inside Vertical Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public InsideVerticalBorder InsideVerticalBorder
        {
            get => GetElement<InsideVerticalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Top Left to Bottom Right Diagonal Border.</para>
        /// <para>Represents the following element tag in the schema: w:tl2br.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLeftToBottomRightCellBorder TopLeftToBottomRightCellBorder
        {
            get => GetElement<TopLeftToBottomRightCellBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Top Right to Bottom Left Diagonal Border.</para>
        /// <para>Represents the following element tag in the schema: w:tr2bl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopRightToBottomLeftCellBorder TopRightToBottomLeftCellBorder
        {
            get => GetElement<TopRightToBottomLeftCellBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartBorder), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndBorder), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the NoWrap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noWrap.</para>
    /// </summary>
    [SchemaAttr(23, "noWrap")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoWrap : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoWrap class.
        /// </summary>
        public NoWrap() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellFitText Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcFitText.</para>
    /// </summary>
    [SchemaAttr(23, "tcFitText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellFitText : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellFitText class.
        /// </summary>
        public TableCellFitText() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellFitText>(deep);
    }

    /// <summary>
    /// <para>Defines the HideMark Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideMark.</para>
    /// </summary>
    [SchemaAttr(23, "hideMark")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HideMark : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the HideMark class.
        /// </summary>
        public HideMark() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideMark>(deep);
    }

    /// <summary>
    /// <para>Defines the CantSplit Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cantSplit.</para>
    /// </summary>
    [SchemaAttr(23, "cantSplit")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CantSplit : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the CantSplit class.
        /// </summary>
        public CantSplit() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CantSplit>(deep);
    }

    /// <summary>
    /// <para>Defines the TableHeader Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblHeader.</para>
    /// </summary>
    [SchemaAttr(23, "tblHeader")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableHeader : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the TableHeader class.
        /// </summary>
        public TableHeader() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableHeader>(deep);
    }

    /// <summary>
    /// <para>Defines the BiDiVisual Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bidiVisual.</para>
    /// </summary>
    [SchemaAttr(23, "bidiVisual")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BiDiVisual : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the BiDiVisual class.
        /// </summary>
        public BiDiVisual() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiDiVisual>(deep);
    }

    /// <summary>
    /// <para>Frame Cannot Be Resized.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noResizeAllowed.</para>
    /// </summary>
    [SchemaAttr(23, "noResizeAllowed")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoResizeAllowed : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoResizeAllowed class.
        /// </summary>
        public NoResizeAllowed() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoResizeAllowed>(deep);
    }

    /// <summary>
    /// <para>Maintain Link to Existing File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkedToFile.</para>
    /// </summary>
    [SchemaAttr(23, "linkedToFile")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LinkedToFile : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the LinkedToFile class.
        /// </summary>
        public LinkedToFile() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkedToFile>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Frameset Splitters.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noBorder.</para>
    /// </summary>
    [SchemaAttr(23, "noBorder")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoBorder : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoBorder class.
        /// </summary>
        public NoBorder() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBorder>(deep);
    }

    /// <summary>
    /// <para>Frameset Splitter Border Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:flatBorders.</para>
    /// </summary>
    [SchemaAttr(23, "flatBorders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FlatBorders : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the FlatBorders class.
        /// </summary>
        public FlatBorders() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FlatBorders>(deep);
    }

    /// <summary>
    /// <para>Automatically Merge User Formatting Into Style Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoRedefine.</para>
    /// </summary>
    [SchemaAttr(23, "autoRedefine")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoRedefine : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the AutoRedefine class.
        /// </summary>
        public AutoRedefine() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoRedefine>(deep);
    }

    /// <summary>
    /// <para>Hide Style From User Interface.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hidden.</para>
    /// </summary>
    [SchemaAttr(23, "hidden")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleHidden : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the StyleHidden class.
        /// </summary>
        public StyleHidden() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleHidden>(deep);
    }

    /// <summary>
    /// <para>Hide Style From Main User Interface.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:semiHidden.</para>
    /// </summary>
    [SchemaAttr(23, "semiHidden")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SemiHidden : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the SemiHidden class.
        /// </summary>
        public SemiHidden() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SemiHidden>(deep);
    }

    /// <summary>
    /// <para>Remove Semi-Hidden Property When Style Is Used.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:unhideWhenUsed.</para>
    /// </summary>
    [SchemaAttr(23, "unhideWhenUsed")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UnhideWhenUsed : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the UnhideWhenUsed class.
        /// </summary>
        public UnhideWhenUsed() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnhideWhenUsed>(deep);
    }

    /// <summary>
    /// <para>Primary Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:qFormat.</para>
    /// </summary>
    [SchemaAttr(23, "qFormat")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PrimaryStyle : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PrimaryStyle class.
        /// </summary>
        public PrimaryStyle() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrimaryStyle>(deep);
    }

    /// <summary>
    /// <para>Style Cannot Be Applied.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:locked.</para>
    /// </summary>
    [SchemaAttr(23, "locked")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Locked : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the Locked class.
        /// </summary>
        public Locked() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Locked>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Text Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personal.</para>
    /// </summary>
    [SchemaAttr(23, "personal")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Personal : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the Personal class.
        /// </summary>
        public Personal() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Personal>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Composition Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personalCompose.</para>
    /// </summary>
    [SchemaAttr(23, "personalCompose")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PersonalCompose : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PersonalCompose class.
        /// </summary>
        public PersonalCompose() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PersonalCompose>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Reply Style.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personalReply.</para>
    /// </summary>
    [SchemaAttr(23, "personalReply")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PersonalReply : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PersonalReply class.
        /// </summary>
        public PersonalReply() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PersonalReply>(deep);
    }

    /// <summary>
    /// <para>Defines the OnOffOnlyType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class OnOffOnlyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the OnOffOnlyType class.
        /// </summary>
        protected OnOffOnlyType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyValues> Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the TableCellMargin Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcMar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopMargin &lt;w:top></description></item>
    ///   <item><description>LeftMargin &lt;w:left></description></item>
    ///   <item><description>StartMargin &lt;w:start></description></item>
    ///   <item><description>BottomMargin &lt;w:bottom></description></item>
    ///   <item><description>RightMargin &lt;w:right></description></item>
    ///   <item><description>EndMargin &lt;w:end></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopMargin))]
    [ChildElementInfo(typeof(LeftMargin))]
    [ChildElementInfo(typeof(StartMargin), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BottomMargin))]
    [ChildElementInfo(typeof(RightMargin))]
    [ChildElementInfo(typeof(EndMargin), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tcMar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellMargin : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellMargin class.
        /// </summary>
        public TableCellMargin() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMargin(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMargin(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellMargin(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Cell Top Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopMargin TopMargin
        {
            get => GetElement<TopMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftMargin LeftMargin
        {
            get => GetElement<LeftMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartMargin.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartMargin StartMargin
        {
            get => GetElement<StartMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomMargin BottomMargin
        {
            get => GetElement<BottomMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightMargin RightMargin
        {
            get => GetElement<RightMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndMargin.</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndMargin EndMargin
        {
            get => GetElement<EndMargin>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartMargin), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndMargin), 0, 1, version: FileFormatVersions.Office2010)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellVerticalAlignment Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vAlign.</para>
    /// </summary>
    [SchemaAttr(23, "vAlign")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellVerticalAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellVerticalAlignment class.
        /// </summary>
        public TableCellVerticalAlignment() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableVerticalAlignmentValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellVerticalAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the DivId Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divId.</para>
    /// </summary>
    [SchemaAttr(23, "divId")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DivId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DivId class.
        /// </summary>
        public DivId() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 1L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -1L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivId>(deep);
    }

    /// <summary>
    /// <para>Defines the TableRowHeight Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trHeight.</para>
    /// </summary>
    [SchemaAttr(23, "trHeight")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableRowHeight : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowHeight class.
        /// </summary>
        public TableRowHeight() : base()
        {
        }

        /// <summary>
        /// <para>Table Row Height</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt32Value Val { get; set; }

        /// <summary>
        /// <para>Table Row Height Type</para>
        /// <para>Represents the following attribute in the schema: w:hRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hRule")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues> HeightType { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowHeight>(deep);
    }

    /// <summary>
    /// <para>Defines the TableJustification Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:jc.</para>
    /// </summary>
    [SchemaAttr(23, "jc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableJustification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableJustification class.
        /// </summary>
        public TableJustification() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableRowAlignmentValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableJustification>(deep);
    }

    /// <summary>
    /// <para>Defines the TablePositionProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblpPr.</para>
    /// </summary>
    [SchemaAttr(23, "tblpPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TablePositionProperties : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePositionProperties class.
        /// </summary>
        public TablePositionProperties() : base()
        {
        }

        /// <summary>
        /// <para>Distance From Left of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:leftFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "leftFromText")]
        [Index(0)]
        public Int16Value LeftFromText { get; set; }

        /// <summary>
        /// <para>(Distance From Right of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:rightFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "rightFromText")]
        [Index(1)]
        public Int16Value RightFromText { get; set; }

        /// <summary>
        /// <para>Distance From Top of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:topFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "topFromText")]
        [Index(2)]
        public Int16Value TopFromText { get; set; }

        /// <summary>
        /// <para>Distance From Bottom of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:bottomFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "bottomFromText")]
        [Index(3)]
        public Int16Value BottomFromText { get; set; }

        /// <summary>
        /// <para>Table Vertical Anchor</para>
        /// <para>Represents the following attribute in the schema: w:vertAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "vertAnchor")]
        [Index(4)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues> VerticalAnchor { get; set; }

        /// <summary>
        /// <para>Table Horizontal Anchor</para>
        /// <para>Represents the following attribute in the schema: w:horzAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "horzAnchor")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues> HorizontalAnchor { get; set; }

        /// <summary>
        /// <para>Relative Horizontal Alignment From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpXSpec</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "tblpXSpec")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues> TablePositionXAlignment { get; set; }

        /// <summary>
        /// <para>Absolute Horizontal Distance From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpX</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "tblpX")]
        [Index(7)]
        public Int32Value TablePositionX { get; set; }

        /// <summary>
        /// <para>Relative Vertical Alignment from Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpYSpec</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "tblpYSpec")]
        [Index(8)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues> TablePositionYAlignment { get; set; }

        /// <summary>
        /// <para>Absolute Vertical Distance From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpY</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "tblpY")]
        [Index(9)]
        public Int32Value TablePositionY { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePositionProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TableOverlap Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblOverlap.</para>
    /// </summary>
    [SchemaAttr(23, "tblOverlap")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableOverlap : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableOverlap class.
        /// </summary>
        public TableOverlap() : base()
        {
        }

        /// <summary>
        /// <para>Floating Table Overlap Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableOverlapValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableOverlap>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleRowBandSize Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyleRowBandSize.</para>
    /// </summary>
    [SchemaAttr(23, "tblStyleRowBandSize")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleRowBandSize : UnsignedDecimalNumberMax3Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleRowBandSize class.
        /// </summary>
        public TableStyleRowBandSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleRowBandSize>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleColumnBandSize Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyleColBandSize.</para>
    /// </summary>
    [SchemaAttr(23, "tblStyleColBandSize")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleColumnBandSize : UnsignedDecimalNumberMax3Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleColumnBandSize class.
        /// </summary>
        public TableStyleColumnBandSize() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleColumnBandSize>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedDecimalNumberMax3Type Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedDecimalNumberMax3Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedDecimalNumberMax3Type class.
        /// </summary>
        protected UnsignedDecimalNumberMax3Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 3L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Defines the TableIndentation Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblInd.</para>
    /// </summary>
    [SchemaAttr(23, "tblInd")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableIndentation : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableIndentation class.
        /// </summary>
        public TableIndentation() : base()
        {
        }

        /// <summary>
        /// <para>w</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "w")]
        [Index(0)]
        public Int32Value Width { get; set; }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues> Type { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableIndentation>(deep);
    }

    /// <summary>
    /// <para>Defines the TableBorders Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopBorder &lt;w:top></description></item>
    ///   <item><description>LeftBorder &lt;w:left></description></item>
    ///   <item><description>StartBorder &lt;w:start></description></item>
    ///   <item><description>BottomBorder &lt;w:bottom></description></item>
    ///   <item><description>RightBorder &lt;w:right></description></item>
    ///   <item><description>EndBorder &lt;w:end></description></item>
    ///   <item><description>InsideHorizontalBorder &lt;w:insideH></description></item>
    ///   <item><description>InsideVerticalBorder &lt;w:insideV></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(StartBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [ChildElementInfo(typeof(EndBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsideHorizontalBorder))]
    [ChildElementInfo(typeof(InsideVerticalBorder))]
    [SchemaAttr(23, "tblBorders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableBorders class.
        /// </summary>
        public TableBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableBorders(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartBorder.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartBorder StartBorder
        {
            get => GetElement<StartBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndBorder.</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndBorder EndBorder
        {
            get => GetElement<EndBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Inside Horizontal Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public InsideHorizontalBorder InsideHorizontalBorder
        {
            get => GetElement<InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Inside Vertical Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public InsideVerticalBorder InsideVerticalBorder
        {
            get => GetElement<InsideVerticalBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartBorder), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndBorder), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the TableLayout Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblLayout.</para>
    /// </summary>
    [SchemaAttr(23, "tblLayout")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableLayout class.
        /// </summary>
        public TableLayout() : base()
        {
        }

        /// <summary>
        /// <para>Table Layout Setting</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableLayoutValues> Type { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableLayout>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellMarginDefault Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCellMar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopMargin &lt;w:top></description></item>
    ///   <item><description>TableCellLeftMargin &lt;w:left></description></item>
    ///   <item><description>StartMargin &lt;w:start></description></item>
    ///   <item><description>BottomMargin &lt;w:bottom></description></item>
    ///   <item><description>TableCellRightMargin &lt;w:right></description></item>
    ///   <item><description>EndMargin &lt;w:end></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopMargin))]
    [ChildElementInfo(typeof(TableCellLeftMargin))]
    [ChildElementInfo(typeof(StartMargin), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BottomMargin))]
    [ChildElementInfo(typeof(TableCellRightMargin))]
    [ChildElementInfo(typeof(EndMargin), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tblCellMar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellMarginDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class.
        /// </summary>
        public TableCellMarginDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMarginDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMarginDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellMarginDefault(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Cell Top Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopMargin TopMargin
        {
            get => GetElement<TopMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellLeftMargin TableCellLeftMargin
        {
            get => GetElement<TableCellLeftMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartMargin.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartMargin StartMargin
        {
            get => GetElement<StartMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomMargin BottomMargin
        {
            get => GetElement<BottomMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellRightMargin TableCellRightMargin
        {
            get => GetElement<TableCellRightMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndMargin.</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndMargin EndMargin
        {
            get => GetElement<EndMargin>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartMargin), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndMargin), 0, 1, version: FileFormatVersions.Office2010)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellMarginDefault>(deep);
    }

    /// <summary>
    /// <para>Footnote and Endnote Numbering Starting Value.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numStart.</para>
    /// </summary>
    [SchemaAttr(23, "numStart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingStart class.
        /// </summary>
        public NumberingStart() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt16Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingStart>(deep);
    }

    /// <summary>
    /// <para>Footnote and Endnote Numbering Restart Location.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numRestart.</para>
    /// </summary>
    [SchemaAttr(23, "numRestart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingRestart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingRestart class.
        /// </summary>
        public NumberingRestart() : base()
        {
        }

        /// <summary>
        /// <para>Automatic Numbering Restart Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RestartNumberValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingRestart>(deep);
    }

    /// <summary>
    /// <para>Defines the AltChunk Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altChunk.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunkProperties &lt;w:altChunkPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunkProperties))]
    [SchemaAttr(23, "altChunk")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AltChunk : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AltChunk class.
        /// </summary>
        public AltChunk() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunk(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunk(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AltChunk(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [SchemaAttr(19, "id")]
        [Index(0)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>External Content Import Properties.</para>
        /// <para>Represents the following element tag in the schema: w:altChunkPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AltChunkProperties AltChunkProperties
        {
            get => GetElement<AltChunkProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltChunk>(deep);
    }

    /// <summary>
    /// <para>Defines the TableLook Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblLook.</para>
    /// </summary>
    [SchemaAttr(23, "tblLook")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableLook : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableLook class.
        /// </summary>
        public TableLook() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 2L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public HexBinaryValue Val { get; set; }

        /// <summary>
        /// <para>firstRow, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstRow")]
        [Index(1)]
        public OnOffValue FirstRow { get; set; }

        /// <summary>
        /// <para>lastRow, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastRow")]
        [Index(2)]
        public OnOffValue LastRow { get; set; }

        /// <summary>
        /// <para>firstColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:firstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "firstColumn")]
        [Index(3)]
        public OnOffValue FirstColumn { get; set; }

        /// <summary>
        /// <para>lastColumn, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:lastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "lastColumn")]
        [Index(4)]
        public OnOffValue LastColumn { get; set; }

        /// <summary>
        /// <para>noHBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:noHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "noHBand")]
        [Index(5)]
        public OnOffValue NoHorizontalBand { get; set; }

        /// <summary>
        /// <para>noVBand, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:noVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "noVBand")]
        [Index(6)]
        public OnOffValue NoVerticalBand { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableLook>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FootnotePosition &lt;w:pos></description></item>
    ///   <item><description>NumberingFormat &lt;w:numFmt></description></item>
    ///   <item><description>NumberingStart &lt;w:numStart></description></item>
    ///   <item><description>NumberingRestart &lt;w:numRestart></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FootnotePosition))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(NumberingStart))]
    [ChildElementInfo(typeof(NumberingRestart))]
    [SchemaAttr(23, "footnotePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class.
        /// </summary>
        public FootnoteProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FootnoteProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FootnotePosition FootnotePosition
        {
            get => GetElement<FootnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingFormat NumberingFormat
        {
            get => GetElement<NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingStart NumberingStart
        {
            get => GetElement<NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingRestart NumberingRestart
        {
            get => GetElement<NumberingRestart>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnotePosition), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the EndnoteProperties Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EndnotePosition &lt;w:pos></description></item>
    ///   <item><description>NumberingFormat &lt;w:numFmt></description></item>
    ///   <item><description>NumberingStart &lt;w:numStart></description></item>
    ///   <item><description>NumberingRestart &lt;w:numRestart></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(EndnotePosition))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(NumberingStart))]
    [ChildElementInfo(typeof(NumberingRestart))]
    [SchemaAttr(23, "endnotePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnoteProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class.
        /// </summary>
        public EndnoteProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndnoteProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Endnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndnotePosition EndnotePosition
        {
            get => GetElement<EndnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Endnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingFormat NumberingFormat
        {
            get => GetElement<NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingStart NumberingStart
        {
            get => GetElement<NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingRestart NumberingRestart
        {
            get => GetElement<NumberingRestart>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnotePosition), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the SectionType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    [SchemaAttr(23, "type")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SectionType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionType class.
        /// </summary>
        public SectionType() : base()
        {
        }

        /// <summary>
        /// <para>Section Type Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.SectionMarkValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionType>(deep);
    }

    /// <summary>
    /// <para>Defines the PageSize Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgSz.</para>
    /// </summary>
    [SchemaAttr(23, "pgSz")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageSize : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageSize class.
        /// </summary>
        public PageSize() : base()
        {
        }

        /// <summary>
        /// <para>Page Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "w")]
        [Index(0)]
        public UInt32Value Width { get; set; }

        /// <summary>
        /// <para>Page Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "h")]
        [Index(1)]
        public UInt32Value Height { get; set; }

        /// <summary>
        /// <para>Page Orientation</para>
        /// <para>Represents the following attribute in the schema: w:orient</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "orient")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageOrientationValues> Orient { get; set; }

        /// <summary>
        /// <para>Printer Paper Code</para>
        /// <para>Represents the following attribute in the schema: w:code</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "code")]
        [Index(3)]
        public UInt16Value Code { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageSize>(deep);
    }

    /// <summary>
    /// <para>Defines the PageMargin Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgMar.</para>
    /// </summary>
    [SchemaAttr(23, "pgMar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageMargin : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageMargin class.
        /// </summary>
        public PageMargin() : base()
        {
        }

        /// <summary>
        /// <para>Top Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:top</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "top")]
        [Index(0)]
        public Int32Value Top { get; set; }

        /// <summary>
        /// <para>Right Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:right</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "right")]
        [Index(1)]
        public UInt32Value Right { get; set; }

        /// <summary>
        /// <para>Page Bottom Spacing</para>
        /// <para>Represents the following attribute in the schema: w:bottom</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "bottom")]
        [Index(2)]
        public Int32Value Bottom { get; set; }

        /// <summary>
        /// <para>Left Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:left</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "left")]
        [Index(3)]
        public UInt32Value Left { get; set; }

        /// <summary>
        /// <para>Spacing to Top of Header</para>
        /// <para>Represents the following attribute in the schema: w:header</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "header")]
        [Index(4)]
        public UInt32Value Header { get; set; }

        /// <summary>
        /// <para>Spacing to Bottom of Footer</para>
        /// <para>Represents the following attribute in the schema: w:footer</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "footer")]
        [Index(5)]
        public UInt32Value Footer { get; set; }

        /// <summary>
        /// <para>Page Gutter Spacing</para>
        /// <para>Represents the following attribute in the schema: w:gutter</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 31680L)]
        [SchemaAttr(23, "gutter")]
        [Index(6)]
        public UInt32Value Gutter { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the PaperSource Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:paperSrc.</para>
    /// </summary>
    [SchemaAttr(23, "paperSrc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PaperSource : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PaperSource class.
        /// </summary>
        public PaperSource() : base()
        {
        }

        /// <summary>
        /// <para>First Page Printer Tray Code</para>
        /// <para>Represents the following attribute in the schema: w:first</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "first")]
        [Index(0)]
        public UInt16Value First { get; set; }

        /// <summary>
        /// <para>Non-First Page Printer Tray Code</para>
        /// <para>Represents the following attribute in the schema: w:other</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "other")]
        [Index(1)]
        public UInt16Value Other { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PaperSource>(deep);
    }

    /// <summary>
    /// <para>Defines the PageBorders Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopBorder &lt;w:top></description></item>
    ///   <item><description>LeftBorder &lt;w:left></description></item>
    ///   <item><description>BottomBorder &lt;w:bottom></description></item>
    ///   <item><description>RightBorder &lt;w:right></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [SchemaAttr(23, "pgBorders")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PageBorders class.
        /// </summary>
        public PageBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PageBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PageBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PageBorders(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Z-Ordering of Page Border</para>
        /// <para>Represents the following attribute in the schema: w:zOrder</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "zOrder")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderZOrderValues> ZOrder { get; set; }

        /// <summary>
        /// <para>Pages to Display Page Borders</para>
        /// <para>Represents the following attribute in the schema: w:display</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "display")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderDisplayValues> Display { get; set; }

        /// <summary>
        /// <para>Page Border Positioning</para>
        /// <para>Represents the following attribute in the schema: w:offsetFrom</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "offsetFrom")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderOffsetValues> OffsetFrom { get; set; }

        /// <summary>
        /// <para>Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the LineNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lnNumType.</para>
    /// </summary>
    [SchemaAttr(23, "lnNumType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LineNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineNumberType class.
        /// </summary>
        public LineNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Line Number Increments to Display</para>
        /// <para>Represents the following attribute in the schema: w:countBy</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 1L, MaxInclusive = 100L)]
        [SchemaAttr(23, "countBy")]
        [Index(0)]
        public Int16Value CountBy { get; set; }

        /// <summary>
        /// <para>Line Numbering Starting Value</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "start")]
        [Index(1)]
        public Int16Value Start { get; set; }

        /// <summary>
        /// <para>Distance Between Text and Line Numbering</para>
        /// <para>Represents the following attribute in the schema: w:distance</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "distance")]
        [Index(2)]
        public StringValue Distance { get; set; }

        /// <summary>
        /// <para>Line Numbering Restart Setting</para>
        /// <para>Represents the following attribute in the schema: w:restart</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "restart")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineNumberRestartValues> Restart { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineNumberType>(deep);
    }

    /// <summary>
    /// <para>Defines the PageNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgNumType.</para>
    /// </summary>
    [SchemaAttr(23, "pgNumType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PageNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageNumberType class.
        /// </summary>
        public PageNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Page Number Format</para>
        /// <para>Represents the following attribute in the schema: w:fmt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fmt")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues> Format { get; set; }

        /// <summary>
        /// <para>Starting Page Number</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "start")]
        [Index(1)]
        public Int32Value Start { get; set; }

        /// <summary>
        /// <para>Chapter Heading Style</para>
        /// <para>Represents the following attribute in the schema: w:chapStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "chapStyle")]
        [Index(2)]
        public ByteValue ChapterStyle { get; set; }

        /// <summary>
        /// <para>Chapter Separator Character</para>
        /// <para>Represents the following attribute in the schema: w:chapSep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "chapSep")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues> ChapterSeparator { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageNumberType>(deep);
    }

    /// <summary>
    /// <para>Defines the Columns Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cols.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Column &lt;w:col></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Column))]
    [SchemaAttr(23, "cols")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Columns : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Columns class.
        /// </summary>
        public Columns() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Columns(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Columns(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Columns(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Equal Column Widths</para>
        /// <para>Represents the following attribute in the schema: w:equalWidth</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "equalWidth")]
        [Index(0)]
        public OnOffValue EqualWidth { get; set; }

        /// <summary>
        /// <para>Spacing Between Equal Width Columns</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "space")]
        [Index(1)]
        public StringValue Space { get; set; }

        /// <summary>
        /// <para>Number of Equal Width Columns</para>
        /// <para>Represents the following attribute in the schema: w:num</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 1L, MaxInclusive = 45L)]
        [SchemaAttr(23, "num")]
        [Index(2)]
        public Int16Value ColumnCount { get; set; }

        /// <summary>
        /// <para>Draw Line Between Columns</para>
        /// <para>Represents the following attribute in the schema: w:sep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "sep")]
        [Index(3)]
        public OnOffValue Separator { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 0, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Column), 1, 45)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Columns>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalTextAlignmentOnPage Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vAlign.</para>
    /// </summary>
    [SchemaAttr(23, "vAlign")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class VerticalTextAlignmentOnPage : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalTextAlignmentOnPage class.
        /// </summary>
        public VerticalTextAlignmentOnPage() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Alignment Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalJustificationValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalTextAlignmentOnPage>(deep);
    }

    /// <summary>
    /// <para>Defines the DocGrid Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docGrid.</para>
    /// </summary>
    [SchemaAttr(23, "docGrid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocGrid : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocGrid class.
        /// </summary>
        public DocGrid() : base()
        {
        }

        /// <summary>
        /// <para>Document Grid Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocGridValues> Type { get; set; }

        /// <summary>
        /// <para>Document Grid Line Pitch</para>
        /// <para>Represents the following attribute in the schema: w:linePitch</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "linePitch")]
        [Index(1)]
        public Int32Value LinePitch { get; set; }

        /// <summary>
        /// <para>Document Grid Character Pitch</para>
        /// <para>Represents the following attribute in the schema: w:charSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "charSpace")]
        [Index(2)]
        public Int32Value CharacterSpace { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocGrid>(deep);
    }

    /// <summary>
    /// <para>Inclusion/Exclusion Data for Data Source.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipients.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RecipientData &lt;w:recipientData></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RecipientData))]
    [SchemaAttr(23, "recipients")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Recipients : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Recipients class.
        /// </summary>
        public Recipients() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Recipients(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Recipients(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Recipients(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RecipientData), 1, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Recipients>(deep);
    }

    /// <summary>
    /// <para>Rich Text Box Content Container.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:txbxContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "txbxContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextBoxContent : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxContent class.
        /// </summary>
        public TextBoxContent() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBoxContent(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBoxContent(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextBoxContent(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 1, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                        {
                                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxContent>(deep);
    }

    /// <summary>
    /// <para>Comments Collection.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comments.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Comment &lt;w:comment></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Comment))]
    [SchemaAttr(23, "comments")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Comments : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Comments class.
        /// </summary>
        public Comments() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comments(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comments(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Comments(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Comment), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comments>(deep);

        internal Comments(WordprocessingCommentsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WordprocessingCommentsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WordprocessingCommentsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WordprocessingCommentsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WordprocessingCommentsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WordprocessingCommentsPart associated with this element.
        /// </summary>
        public WordprocessingCommentsPart WordprocessingCommentsPart
        {
            get => OpenXmlPart as WordprocessingCommentsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Document Footnotes.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotes.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Footnote &lt;w:footnote></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Footnote))]
    [SchemaAttr(23, "footnotes")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Footnotes : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Footnotes class.
        /// </summary>
        public Footnotes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnotes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnotes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footnotes(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Footnote), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footnotes>(deep);

        internal Footnotes(FootnotesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FootnotesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FootnotesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FootnotesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FootnotesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FootnotesPart associated with this element.
        /// </summary>
        public FootnotesPart FootnotesPart
        {
            get => OpenXmlPart as FootnotesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Document Endnotes.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotes.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Endnote &lt;w:endnote></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Endnote))]
    [SchemaAttr(23, "endnotes")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Endnotes : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Endnotes class.
        /// </summary>
        public Endnotes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnotes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnotes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Endnotes(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Endnote), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Endnotes>(deep);

        internal Endnotes(EndnotesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the EndnotesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(EndnotesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the EndnotesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(EndnotesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the EndnotesPart associated with this element.
        /// </summary>
        public EndnotesPart EndnotesPart
        {
            get => OpenXmlPart as EndnotesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Header.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "hdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Header : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Header class.
        /// </summary>
        public Header() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Header(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Header(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Header(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 1, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                        {
                                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Header>(deep);

        internal Header(HeaderPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the HeaderPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(HeaderPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the HeaderPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(HeaderPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the HeaderPart associated with this element.
        /// </summary>
        public HeaderPart HeaderPart
        {
            get => OpenXmlPart as HeaderPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Footer.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ftr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "ftr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Footer : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Footer class.
        /// </summary>
        public Footer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footer(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 1, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                        {
                                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footer>(deep);

        internal Footer(FooterPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FooterPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FooterPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FooterPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FooterPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FooterPart associated with this element.
        /// </summary>
        public FooterPart FooterPart
        {
            get => OpenXmlPart as FooterPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the HeaderFooterType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    public abstract partial class HeaderFooterType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class.
        /// </summary>
        protected HeaderFooterType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HeaderFooterType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HeaderFooterType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected HeaderFooterType(string outerXml) : base(outerXml)
        {
        }
    }

    /// <summary>
    /// <para>Document Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:settings.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>WriteProtection &lt;w:writeProtection></description></item>
    ///   <item><description>View &lt;w:view></description></item>
    ///   <item><description>Zoom &lt;w:zoom></description></item>
    ///   <item><description>RemovePersonalInformation &lt;w:removePersonalInformation></description></item>
    ///   <item><description>RemoveDateAndTime &lt;w:removeDateAndTime></description></item>
    ///   <item><description>DoNotDisplayPageBoundaries &lt;w:doNotDisplayPageBoundaries></description></item>
    ///   <item><description>DisplayBackgroundShape &lt;w:displayBackgroundShape></description></item>
    ///   <item><description>PrintPostScriptOverText &lt;w:printPostScriptOverText></description></item>
    ///   <item><description>PrintFractionalCharacterWidth &lt;w:printFractionalCharacterWidth></description></item>
    ///   <item><description>PrintFormsData &lt;w:printFormsData></description></item>
    ///   <item><description>EmbedTrueTypeFonts &lt;w:embedTrueTypeFonts></description></item>
    ///   <item><description>EmbedSystemFonts &lt;w:embedSystemFonts></description></item>
    ///   <item><description>SaveSubsetFonts &lt;w:saveSubsetFonts></description></item>
    ///   <item><description>SaveFormsData &lt;w:saveFormsData></description></item>
    ///   <item><description>MirrorMargins &lt;w:mirrorMargins></description></item>
    ///   <item><description>AlignBorderAndEdges &lt;w:alignBordersAndEdges></description></item>
    ///   <item><description>BordersDoNotSurroundHeader &lt;w:bordersDoNotSurroundHeader></description></item>
    ///   <item><description>BordersDoNotSurroundFooter &lt;w:bordersDoNotSurroundFooter></description></item>
    ///   <item><description>GutterAtTop &lt;w:gutterAtTop></description></item>
    ///   <item><description>HideSpellingErrors &lt;w:hideSpellingErrors></description></item>
    ///   <item><description>HideGrammaticalErrors &lt;w:hideGrammaticalErrors></description></item>
    ///   <item><description>ActiveWritingStyle &lt;w:activeWritingStyle></description></item>
    ///   <item><description>ProofState &lt;w:proofState></description></item>
    ///   <item><description>FormsDesign &lt;w:formsDesign></description></item>
    ///   <item><description>AttachedTemplate &lt;w:attachedTemplate></description></item>
    ///   <item><description>LinkStyles &lt;w:linkStyles></description></item>
    ///   <item><description>StylePaneFormatFilter &lt;w:stylePaneFormatFilter></description></item>
    ///   <item><description>StylePaneSortMethods &lt;w:stylePaneSortMethod></description></item>
    ///   <item><description>DocumentType &lt;w:documentType></description></item>
    ///   <item><description>MailMerge &lt;w:mailMerge></description></item>
    ///   <item><description>RevisionView &lt;w:revisionView></description></item>
    ///   <item><description>TrackRevisions &lt;w:trackRevisions></description></item>
    ///   <item><description>DoNotTrackMoves &lt;w:doNotTrackMoves></description></item>
    ///   <item><description>DoNotTrackFormatting &lt;w:doNotTrackFormatting></description></item>
    ///   <item><description>DocumentProtection &lt;w:documentProtection></description></item>
    ///   <item><description>AutoFormatOverride &lt;w:autoFormatOverride></description></item>
    ///   <item><description>StyleLockThemesPart &lt;w:styleLockTheme></description></item>
    ///   <item><description>StyleLockStylesPart &lt;w:styleLockQFSet></description></item>
    ///   <item><description>DefaultTabStop &lt;w:defaultTabStop></description></item>
    ///   <item><description>AutoHyphenation &lt;w:autoHyphenation></description></item>
    ///   <item><description>ConsecutiveHyphenLimit &lt;w:consecutiveHyphenLimit></description></item>
    ///   <item><description>HyphenationZone &lt;w:hyphenationZone></description></item>
    ///   <item><description>DoNotHyphenateCaps &lt;w:doNotHyphenateCaps></description></item>
    ///   <item><description>ShowEnvelope &lt;w:showEnvelope></description></item>
    ///   <item><description>SummaryLength &lt;w:summaryLength></description></item>
    ///   <item><description>ClickAndTypeStyle &lt;w:clickAndTypeStyle></description></item>
    ///   <item><description>DefaultTableStyle &lt;w:defaultTableStyle></description></item>
    ///   <item><description>EvenAndOddHeaders &lt;w:evenAndOddHeaders></description></item>
    ///   <item><description>BookFoldReversePrinting &lt;w:bookFoldRevPrinting></description></item>
    ///   <item><description>BookFoldPrinting &lt;w:bookFoldPrinting></description></item>
    ///   <item><description>BookFoldPrintingSheets &lt;w:bookFoldPrintingSheets></description></item>
    ///   <item><description>DrawingGridHorizontalSpacing &lt;w:drawingGridHorizontalSpacing></description></item>
    ///   <item><description>DrawingGridVerticalSpacing &lt;w:drawingGridVerticalSpacing></description></item>
    ///   <item><description>DisplayHorizontalDrawingGrid &lt;w:displayHorizontalDrawingGridEvery></description></item>
    ///   <item><description>DisplayVerticalDrawingGrid &lt;w:displayVerticalDrawingGridEvery></description></item>
    ///   <item><description>DoNotUseMarginsForDrawingGridOrigin &lt;w:doNotUseMarginsForDrawingGridOrigin></description></item>
    ///   <item><description>DrawingGridHorizontalOrigin &lt;w:drawingGridHorizontalOrigin></description></item>
    ///   <item><description>DrawingGridVerticalOrigin &lt;w:drawingGridVerticalOrigin></description></item>
    ///   <item><description>DoNotShadeFormData &lt;w:doNotShadeFormData></description></item>
    ///   <item><description>NoPunctuationKerning &lt;w:noPunctuationKerning></description></item>
    ///   <item><description>CharacterSpacingControl &lt;w:characterSpacingControl></description></item>
    ///   <item><description>PrintTwoOnOne &lt;w:printTwoOnOne></description></item>
    ///   <item><description>StrictFirstAndLastChars &lt;w:strictFirstAndLastChars></description></item>
    ///   <item><description>NoLineBreaksAfterKinsoku &lt;w:noLineBreaksAfter></description></item>
    ///   <item><description>NoLineBreaksBeforeKinsoku &lt;w:noLineBreaksBefore></description></item>
    ///   <item><description>SavePreviewPicture &lt;w:savePreviewPicture></description></item>
    ///   <item><description>DoNotValidateAgainstSchema &lt;w:doNotValidateAgainstSchema></description></item>
    ///   <item><description>SaveInvalidXml &lt;w:saveInvalidXml></description></item>
    ///   <item><description>IgnoreMixedContent &lt;w:ignoreMixedContent></description></item>
    ///   <item><description>AlwaysShowPlaceholderText &lt;w:alwaysShowPlaceholderText></description></item>
    ///   <item><description>DoNotDemarcateInvalidXml &lt;w:doNotDemarcateInvalidXml></description></item>
    ///   <item><description>SaveXmlDataOnly &lt;w:saveXmlDataOnly></description></item>
    ///   <item><description>UseXsltWhenSaving &lt;w:useXSLTWhenSaving></description></item>
    ///   <item><description>SaveThroughXslt &lt;w:saveThroughXslt></description></item>
    ///   <item><description>ShowXmlTags &lt;w:showXMLTags></description></item>
    ///   <item><description>AlwaysMergeEmptyNamespace &lt;w:alwaysMergeEmptyNamespace></description></item>
    ///   <item><description>UpdateFieldsOnOpen &lt;w:updateFields></description></item>
    ///   <item><description>HeaderShapeDefaults &lt;w:hdrShapeDefaults></description></item>
    ///   <item><description>FootnoteDocumentWideProperties &lt;w:footnotePr></description></item>
    ///   <item><description>EndnoteDocumentWideProperties &lt;w:endnotePr></description></item>
    ///   <item><description>Compatibility &lt;w:compat></description></item>
    ///   <item><description>DocumentVariables &lt;w:docVars></description></item>
    ///   <item><description>Rsids &lt;w:rsids></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathProperties &lt;m:mathPr></description></item>
    ///   <item><description>UICompatibleWith97To2003 &lt;w:uiCompat97To2003></description></item>
    ///   <item><description>AttachedSchema &lt;w:attachedSchema></description></item>
    ///   <item><description>ThemeFontLanguages &lt;w:themeFontLang></description></item>
    ///   <item><description>ColorSchemeMapping &lt;w:clrSchemeMapping></description></item>
    ///   <item><description>DoNotIncludeSubdocsInStats &lt;w:doNotIncludeSubdocsInStats></description></item>
    ///   <item><description>DoNotAutoCompressPictures &lt;w:doNotAutoCompressPictures></description></item>
    ///   <item><description>ForceUpgrade &lt;w:forceUpgrade></description></item>
    ///   <item><description>Captions &lt;w:captions></description></item>
    ///   <item><description>ReadModeInkLockDown &lt;w:readModeInkLockDown></description></item>
    ///   <item><description>DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary &lt;sl:schemaLibrary></description></item>
    ///   <item><description>ShapeDefaults &lt;w:shapeDefaults></description></item>
    ///   <item><description>DecimalSymbol &lt;w:decimalSymbol></description></item>
    ///   <item><description>ListSeparator &lt;w:listSeparator></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DocumentId &lt;w14:docId></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData &lt;w14:discardImageEditingData></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi &lt;w14:defaultImageDpi></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictMode &lt;w14:conflictMode></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased &lt;w15:chartTrackingRefBased></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId &lt;w15:docId></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(WriteProtection))]
    [ChildElementInfo(typeof(View))]
    [ChildElementInfo(typeof(Zoom))]
    [ChildElementInfo(typeof(RemovePersonalInformation))]
    [ChildElementInfo(typeof(RemoveDateAndTime))]
    [ChildElementInfo(typeof(DoNotDisplayPageBoundaries))]
    [ChildElementInfo(typeof(DisplayBackgroundShape))]
    [ChildElementInfo(typeof(PrintPostScriptOverText))]
    [ChildElementInfo(typeof(PrintFractionalCharacterWidth))]
    [ChildElementInfo(typeof(PrintFormsData))]
    [ChildElementInfo(typeof(EmbedTrueTypeFonts))]
    [ChildElementInfo(typeof(EmbedSystemFonts))]
    [ChildElementInfo(typeof(SaveSubsetFonts))]
    [ChildElementInfo(typeof(SaveFormsData))]
    [ChildElementInfo(typeof(MirrorMargins))]
    [ChildElementInfo(typeof(AlignBorderAndEdges))]
    [ChildElementInfo(typeof(BordersDoNotSurroundHeader))]
    [ChildElementInfo(typeof(BordersDoNotSurroundFooter))]
    [ChildElementInfo(typeof(GutterAtTop))]
    [ChildElementInfo(typeof(HideSpellingErrors))]
    [ChildElementInfo(typeof(HideGrammaticalErrors))]
    [ChildElementInfo(typeof(ActiveWritingStyle))]
    [ChildElementInfo(typeof(ProofState))]
    [ChildElementInfo(typeof(FormsDesign))]
    [ChildElementInfo(typeof(AttachedTemplate))]
    [ChildElementInfo(typeof(LinkStyles))]
    [ChildElementInfo(typeof(StylePaneFormatFilter))]
    [ChildElementInfo(typeof(StylePaneSortMethods))]
    [ChildElementInfo(typeof(DocumentType))]
    [ChildElementInfo(typeof(MailMerge))]
    [ChildElementInfo(typeof(RevisionView))]
    [ChildElementInfo(typeof(TrackRevisions))]
    [ChildElementInfo(typeof(DoNotTrackMoves))]
    [ChildElementInfo(typeof(DoNotTrackFormatting))]
    [ChildElementInfo(typeof(DocumentProtection))]
    [ChildElementInfo(typeof(AutoFormatOverride))]
    [ChildElementInfo(typeof(StyleLockThemesPart))]
    [ChildElementInfo(typeof(StyleLockStylesPart))]
    [ChildElementInfo(typeof(DefaultTabStop))]
    [ChildElementInfo(typeof(AutoHyphenation))]
    [ChildElementInfo(typeof(ConsecutiveHyphenLimit))]
    [ChildElementInfo(typeof(HyphenationZone))]
    [ChildElementInfo(typeof(DoNotHyphenateCaps))]
    [ChildElementInfo(typeof(ShowEnvelope))]
    [ChildElementInfo(typeof(SummaryLength))]
    [ChildElementInfo(typeof(ClickAndTypeStyle))]
    [ChildElementInfo(typeof(DefaultTableStyle))]
    [ChildElementInfo(typeof(EvenAndOddHeaders))]
    [ChildElementInfo(typeof(BookFoldReversePrinting))]
    [ChildElementInfo(typeof(BookFoldPrinting))]
    [ChildElementInfo(typeof(BookFoldPrintingSheets))]
    [ChildElementInfo(typeof(DrawingGridHorizontalSpacing))]
    [ChildElementInfo(typeof(DrawingGridVerticalSpacing))]
    [ChildElementInfo(typeof(DisplayHorizontalDrawingGrid))]
    [ChildElementInfo(typeof(DisplayVerticalDrawingGrid))]
    [ChildElementInfo(typeof(DoNotUseMarginsForDrawingGridOrigin))]
    [ChildElementInfo(typeof(DrawingGridHorizontalOrigin))]
    [ChildElementInfo(typeof(DrawingGridVerticalOrigin))]
    [ChildElementInfo(typeof(DoNotShadeFormData))]
    [ChildElementInfo(typeof(NoPunctuationKerning))]
    [ChildElementInfo(typeof(CharacterSpacingControl))]
    [ChildElementInfo(typeof(PrintTwoOnOne))]
    [ChildElementInfo(typeof(StrictFirstAndLastChars))]
    [ChildElementInfo(typeof(NoLineBreaksAfterKinsoku))]
    [ChildElementInfo(typeof(NoLineBreaksBeforeKinsoku))]
    [ChildElementInfo(typeof(SavePreviewPicture))]
    [ChildElementInfo(typeof(DoNotValidateAgainstSchema))]
    [ChildElementInfo(typeof(SaveInvalidXml))]
    [ChildElementInfo(typeof(IgnoreMixedContent))]
    [ChildElementInfo(typeof(AlwaysShowPlaceholderText))]
    [ChildElementInfo(typeof(DoNotDemarcateInvalidXml))]
    [ChildElementInfo(typeof(SaveXmlDataOnly))]
    [ChildElementInfo(typeof(UseXsltWhenSaving))]
    [ChildElementInfo(typeof(SaveThroughXslt))]
    [ChildElementInfo(typeof(ShowXmlTags))]
    [ChildElementInfo(typeof(AlwaysMergeEmptyNamespace))]
    [ChildElementInfo(typeof(UpdateFieldsOnOpen))]
    [ChildElementInfo(typeof(HeaderShapeDefaults))]
    [ChildElementInfo(typeof(FootnoteDocumentWideProperties))]
    [ChildElementInfo(typeof(EndnoteDocumentWideProperties))]
    [ChildElementInfo(typeof(Compatibility))]
    [ChildElementInfo(typeof(DocumentVariables))]
    [ChildElementInfo(typeof(Rsids))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathProperties))]
    [ChildElementInfo(typeof(UICompatibleWith97To2003))]
    [ChildElementInfo(typeof(AttachedSchema))]
    [ChildElementInfo(typeof(ThemeFontLanguages))]
    [ChildElementInfo(typeof(ColorSchemeMapping))]
    [ChildElementInfo(typeof(DoNotIncludeSubdocsInStats))]
    [ChildElementInfo(typeof(DoNotAutoCompressPictures))]
    [ChildElementInfo(typeof(ForceUpgrade))]
    [ChildElementInfo(typeof(Captions))]
    [ChildElementInfo(typeof(ReadModeInkLockDown))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary))]
    [ChildElementInfo(typeof(ShapeDefaults))]
    [ChildElementInfo(typeof(DecimalSymbol))]
    [ChildElementInfo(typeof(ListSeparator))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DocumentId), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictMode), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId), FileFormatVersions.Office2013)]
    [SchemaAttr(23, "settings")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Settings : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Settings class.
        /// </summary>
        public Settings() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Settings(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Settings(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Settings(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Write Protection.</para>
        /// <para>Represents the following element tag in the schema: w:writeProtection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WriteProtection WriteProtection
        {
            get => GetElement<WriteProtection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Document View Setting.</para>
        /// <para>Represents the following element tag in the schema: w:view.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public View View
        {
            get => GetElement<View>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Magnification Setting.</para>
        /// <para>Represents the following element tag in the schema: w:zoom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Zoom Zoom
        {
            get => GetElement<Zoom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Personal Information from Document Properties.</para>
        /// <para>Represents the following element tag in the schema: w:removePersonalInformation.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RemovePersonalInformation RemovePersonalInformation
        {
            get => GetElement<RemovePersonalInformation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Date and Time from Annotations.</para>
        /// <para>Represents the following element tag in the schema: w:removeDateAndTime.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RemoveDateAndTime RemoveDateAndTime
        {
            get => GetElement<RemoveDateAndTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Boundary For Header/Footer or Between Pages.</para>
        /// <para>Represents the following element tag in the schema: w:doNotDisplayPageBoundaries.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotDisplayPageBoundaries DoNotDisplayPageBoundaries
        {
            get => GetElement<DoNotDisplayPageBoundaries>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display Background Objects When Displaying Document.</para>
        /// <para>Represents the following element tag in the schema: w:displayBackgroundShape.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DisplayBackgroundShape DisplayBackgroundShape
        {
            get => GetElement<DisplayBackgroundShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print PostScript Codes With Document Text.</para>
        /// <para>Represents the following element tag in the schema: w:printPostScriptOverText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrintPostScriptOverText PrintPostScriptOverText
        {
            get => GetElement<PrintPostScriptOverText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Fractional Character Widths.</para>
        /// <para>Represents the following element tag in the schema: w:printFractionalCharacterWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrintFractionalCharacterWidth PrintFractionalCharacterWidth
        {
            get => GetElement<PrintFractionalCharacterWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Print Form Field Content.</para>
        /// <para>Represents the following element tag in the schema: w:printFormsData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrintFormsData PrintFormsData
        {
            get => GetElement<PrintFormsData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Embed TrueType Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:embedTrueTypeFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedTrueTypeFonts EmbedTrueTypeFonts
        {
            get => GetElement<EmbedTrueTypeFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Embed Common System Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:embedSystemFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedSystemFonts EmbedSystemFonts
        {
            get => GetElement<EmbedSystemFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Subset Fonts When Embedding.</para>
        /// <para>Represents the following element tag in the schema: w:saveSubsetFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SaveSubsetFonts SaveSubsetFonts
        {
            get => GetElement<SaveSubsetFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Save Form Field Content.</para>
        /// <para>Represents the following element tag in the schema: w:saveFormsData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SaveFormsData SaveFormsData
        {
            get => GetElement<SaveFormsData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Mirror Page Margins.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorMargins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorMargins MirrorMargins
        {
            get => GetElement<MirrorMargins>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Align Paragraph and Table Borders with Page Border.</para>
        /// <para>Represents the following element tag in the schema: w:alignBordersAndEdges.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AlignBorderAndEdges AlignBorderAndEdges
        {
            get => GetElement<AlignBorderAndEdges>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Page Border Excludes Header.</para>
        /// <para>Represents the following element tag in the schema: w:bordersDoNotSurroundHeader.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BordersDoNotSurroundHeader BordersDoNotSurroundHeader
        {
            get => GetElement<BordersDoNotSurroundHeader>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Page Border Excludes Footer.</para>
        /// <para>Represents the following element tag in the schema: w:bordersDoNotSurroundFooter.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BordersDoNotSurroundFooter BordersDoNotSurroundFooter
        {
            get => GetElement<BordersDoNotSurroundFooter>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position Gutter At Top of Page.</para>
        /// <para>Represents the following element tag in the schema: w:gutterAtTop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public GutterAtTop GutterAtTop
        {
            get => GetElement<GutterAtTop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Indication of Spelling Errors.</para>
        /// <para>Represents the following element tag in the schema: w:hideSpellingErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HideSpellingErrors HideSpellingErrors
        {
            get => GetElement<HideSpellingErrors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Indication of Grammatical Errors.</para>
        /// <para>Represents the following element tag in the schema: w:hideGrammaticalErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HideGrammaticalErrors HideGrammaticalErrors
        {
            get => GetElement<HideGrammaticalErrors>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WriteProtection), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.View), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Zoom), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintFormsData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveFormsData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorMargins), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterAtTop), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ActiveWritingStyle), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofState), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormsDesign), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AttachedTemplate), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkStyles), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StylePaneFormatFilter), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethods), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMerge), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RevisionView), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TrackRevisions), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotTrackMoves), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotTrackFormatting), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentProtection), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoFormatOverride), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLockThemesPart), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLockStylesPart), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTabStop), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoHyphenation), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConsecutiveHyphenLimit), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyphenationZone), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotHyphenateCaps), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowEnvelope), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SummaryLength), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ClickAndTypeStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTableStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EvenAndOddHeaders), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldReversePrinting), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldPrinting), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldPrintingSheets), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayHorizontalDrawingGrid), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayVerticalDrawingGrid), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseMarginsForDrawingGridOrigin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalOrigin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalOrigin), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotShadeFormData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoPunctuationKerning), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintTwoOnOne), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StrictFirstAndLastChars), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksAfterKinsoku), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksBeforeKinsoku), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SavePreviewPicture), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotValidateAgainstSchema), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveInvalidXml), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.IgnoreMixedContent), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlwaysShowPlaceholderText), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotDemarcateInvalidXml), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveXmlDataOnly), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseXsltWhenSaving), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveThroughXslt), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowXmlTags), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlwaysMergeEmptyNamespace), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UpdateFieldsOnOpen), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderShapeDefaults), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteDocumentWideProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteDocumentWideProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Compatibility), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentVariables), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsids), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UICompatibleWith97To2003), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AttachedSchema), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ThemeFontLanguages), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColorSchemeMapping), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotIncludeSubdocsInStats), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotAutoCompressPictures), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ForceUpgrade), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Captions), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ReadModeInkLockDown), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShapeDefaults), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DecimalSymbol), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListSeparator), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DocumentId), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictMode), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased), 0, 1, version: FileFormatVersions.Office2013),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId), 0, 1, version: FileFormatVersions.Office2013)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Settings>(deep);

        internal Settings(DocumentSettingsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the DocumentSettingsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(DocumentSettingsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the DocumentSettingsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(DocumentSettingsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the DocumentSettingsPart associated with this element.
        /// </summary>
        public DocumentSettingsPart DocumentSettingsPart
        {
            get => OpenXmlPart as DocumentSettingsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Web Page Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:webSettings.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Frameset &lt;w:frameset></description></item>
    ///   <item><description>Divs &lt;w:divs></description></item>
    ///   <item><description>WebPageEncoding &lt;w:encoding></description></item>
    ///   <item><description>OptimizeForBrowser &lt;w:optimizeForBrowser></description></item>
    ///   <item><description>RelyOnVML &lt;w:relyOnVML></description></item>
    ///   <item><description>AllowPNG &lt;w:allowPNG></description></item>
    ///   <item><description>DoNotRelyOnCSS &lt;w:doNotRelyOnCSS></description></item>
    ///   <item><description>DoNotSaveAsSingleFile &lt;w:doNotSaveAsSingleFile></description></item>
    ///   <item><description>DoNotOrganizeInFolder &lt;w:doNotOrganizeInFolder></description></item>
    ///   <item><description>DoNotUseLongFileNames &lt;w:doNotUseLongFileNames></description></item>
    ///   <item><description>PixelsPerInch &lt;w:pixelsPerInch></description></item>
    ///   <item><description>TargetScreenSize &lt;w:targetScreenSz></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Frameset))]
    [ChildElementInfo(typeof(Divs))]
    [ChildElementInfo(typeof(WebPageEncoding))]
    [ChildElementInfo(typeof(OptimizeForBrowser))]
    [ChildElementInfo(typeof(RelyOnVML))]
    [ChildElementInfo(typeof(AllowPNG))]
    [ChildElementInfo(typeof(DoNotRelyOnCSS))]
    [ChildElementInfo(typeof(DoNotSaveAsSingleFile))]
    [ChildElementInfo(typeof(DoNotOrganizeInFolder))]
    [ChildElementInfo(typeof(DoNotUseLongFileNames))]
    [ChildElementInfo(typeof(PixelsPerInch))]
    [ChildElementInfo(typeof(TargetScreenSize))]
    [SchemaAttr(23, "webSettings")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WebSettings : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the WebSettings class.
        /// </summary>
        public WebSettings() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WebSettings(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WebSettings(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WebSettings(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Frameset.</para>
        /// <para>Represents the following element tag in the schema: w:frameset.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Frameset Frameset
        {
            get => GetElement<Frameset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Divs.</para>
        /// <para>Represents the following element tag in the schema: w:divs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Divs Divs
        {
            get => GetElement<Divs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebPageEncoding.</para>
        /// <para>Represents the following element tag in the schema: w:encoding.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WebPageEncoding WebPageEncoding
        {
            get => GetElement<WebPageEncoding>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OptimizeForBrowser.</para>
        /// <para>Represents the following element tag in the schema: w:optimizeForBrowser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OptimizeForBrowser OptimizeForBrowser
        {
            get => GetElement<OptimizeForBrowser>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RelyOnVML.</para>
        /// <para>Represents the following element tag in the schema: w:relyOnVML.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RelyOnVML RelyOnVML
        {
            get => GetElement<RelyOnVML>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AllowPNG.</para>
        /// <para>Represents the following element tag in the schema: w:allowPNG.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AllowPNG AllowPNG
        {
            get => GetElement<AllowPNG>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotRelyOnCSS.</para>
        /// <para>Represents the following element tag in the schema: w:doNotRelyOnCSS.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotRelyOnCSS DoNotRelyOnCSS
        {
            get => GetElement<DoNotRelyOnCSS>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotSaveAsSingleFile.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSaveAsSingleFile.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotSaveAsSingleFile DoNotSaveAsSingleFile
        {
            get => GetElement<DoNotSaveAsSingleFile>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotOrganizeInFolder.</para>
        /// <para>Represents the following element tag in the schema: w:doNotOrganizeInFolder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotOrganizeInFolder DoNotOrganizeInFolder
        {
            get => GetElement<DoNotOrganizeInFolder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotUseLongFileNames.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseLongFileNames.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotUseLongFileNames DoNotUseLongFileNames
        {
            get => GetElement<DoNotUseLongFileNames>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PixelsPerInch.</para>
        /// <para>Represents the following element tag in the schema: w:pixelsPerInch.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PixelsPerInch PixelsPerInch
        {
            get => GetElement<PixelsPerInch>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TargetScreenSize.</para>
        /// <para>Represents the following element tag in the schema: w:targetScreenSz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TargetScreenSize TargetScreenSize
        {
            get => GetElement<TargetScreenSize>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frameset), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Divs), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RelyOnVML), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AllowPNG), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebSettings>(deep);

        internal WebSettings(WebSettingsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WebSettingsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WebSettingsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WebSettingsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WebSettingsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WebSettingsPart associated with this element.
        /// </summary>
        public WebSettingsPart WebSettingsPart
        {
            get => OpenXmlPart as WebSettingsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Font Table Root Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fonts.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Font &lt;w:font></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Font))]
    [SchemaAttr(23, "fonts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Fonts : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Fonts class.
        /// </summary>
        public Fonts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fonts(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Font), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);

        internal Fonts(FontTablePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FontTablePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FontTablePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FontTablePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FontTablePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FontTablePart associated with this element.
        /// </summary>
        public FontTablePart FontTablePart
        {
            get => OpenXmlPart as FontTablePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Numbering Definitions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numbering.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>NumberingPictureBullet &lt;w:numPicBullet></description></item>
    ///   <item><description>AbstractNum &lt;w:abstractNum></description></item>
    ///   <item><description>NumberingInstance &lt;w:num></description></item>
    ///   <item><description>NumberingIdMacAtCleanup &lt;w:numIdMacAtCleanup></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(NumberingPictureBullet))]
    [ChildElementInfo(typeof(AbstractNum))]
    [ChildElementInfo(typeof(NumberingInstance))]
    [ChildElementInfo(typeof(NumberingIdMacAtCleanup))]
    [SchemaAttr(23, "numbering")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Numbering : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Numbering class.
        /// </summary>
        public Numbering() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Numbering(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Numbering(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Numbering(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingPictureBullet), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNum), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingInstance), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingIdMacAtCleanup), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Numbering>(deep);

        internal Numbering(NumberingDefinitionsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the NumberingDefinitionsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(NumberingDefinitionsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the NumberingDefinitionsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(NumberingDefinitionsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the NumberingDefinitionsPart associated with this element.
        /// </summary>
        public NumberingDefinitionsPart NumberingDefinitionsPart
        {
            get => OpenXmlPart as NumberingDefinitionsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Style Definitions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styles.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocDefaults &lt;w:docDefaults></description></item>
    ///   <item><description>LatentStyles &lt;w:latentStyles></description></item>
    ///   <item><description>Style &lt;w:style></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocDefaults))]
    [ChildElementInfo(typeof(LatentStyles))]
    [ChildElementInfo(typeof(Style))]
    [SchemaAttr(23, "styles")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Styles : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Styles class.
        /// </summary>
        public Styles() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Styles(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Styles(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Styles(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Document Default Paragraph and Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:docDefaults.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocDefaults DocDefaults
        {
            get => GetElement<DocDefaults>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Latent Style Information.</para>
        /// <para>Represents the following element tag in the schema: w:latentStyles.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LatentStyles LatentStyles
        {
            get => GetElement<LatentStyles>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocDefaults), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LatentStyles), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Style), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Styles>(deep);
    }

    /// <summary>
    /// <para>Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:document.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentBackground &lt;w:background></description></item>
    ///   <item><description>Body &lt;w:body></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentBackground))]
    [ChildElementInfo(typeof(Body))]
    [SchemaAttr(23, "document")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Document : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Document class.
        /// </summary>
        public Document() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Document(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Document(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Document(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>conformance</para>
        /// <para>Represents the following attribute in the schema: w:conformance</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "conformance")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentConformance> Conformance { get; set; }

        /// <summary>
        /// <para>Document Background.</para>
        /// <para>Represents the following element tag in the schema: w:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentBackground DocumentBackground
        {
            get => GetElement<DocumentBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Body.</para>
        /// <para>Represents the following element tag in the schema: w:body.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Body Body
        {
            get => GetElement<Body>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentBackground), 0, 1)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Body), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Document>(deep);

        internal Document(MainDocumentPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the MainDocumentPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(MainDocumentPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the MainDocumentPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(MainDocumentPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the MainDocumentPart associated with this element.
        /// </summary>
        public MainDocumentPart MainDocumentPart
        {
            get => OpenXmlPart as MainDocumentPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Glossary Document Root Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:glossaryDocument.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentBackground &lt;w:background></description></item>
    ///   <item><description>DocParts &lt;w:docParts></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentBackground))]
    [ChildElementInfo(typeof(DocParts))]
    [SchemaAttr(23, "glossaryDocument")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GlossaryDocument : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class.
        /// </summary>
        public GlossaryDocument() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GlossaryDocument(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GlossaryDocument(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GlossaryDocument(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Document Background.</para>
        /// <para>Represents the following element tag in the schema: w:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentBackground DocumentBackground
        {
            get => GetElement<DocumentBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Glossary Document Entries.</para>
        /// <para>Represents the following element tag in the schema: w:docParts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocParts DocParts
        {
            get => GetElement<DocParts>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentBackground), 0, 1)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocParts), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GlossaryDocument>(deep);

        internal GlossaryDocument(GlossaryDocumentPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the GlossaryDocumentPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(GlossaryDocumentPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the GlossaryDocumentPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(GlossaryDocumentPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the GlossaryDocumentPart associated with this element.
        /// </summary>
        public GlossaryDocumentPart GlossaryDocumentPart
        {
            get => OpenXmlPart as GlossaryDocumentPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Previous Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrEx.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableWidth &lt;w:tblW></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableLayout &lt;w:tblLayout></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    ///   <item><description>TableLook &lt;w:tblLook></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableWidth))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableLayout))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [ChildElementInfo(typeof(TableLook))]
    [SchemaAttr(23, "tblPrEx")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousTablePropertyExceptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class.
        /// </summary>
        public PreviousTablePropertyExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTablePropertyExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTablePropertyExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTablePropertyExceptions(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preferred Table Width Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableWidth TableWidth
        {
            get => GetElement<TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Alignment Exception.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Spacing Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Indent from Leading Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Borders Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Shading Exception.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Layout Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLayout TableLayout
        {
            get => GetElement<TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Margin Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Settings Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLook TableLook
        {
            get => GetElement<TableLook>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTablePropertyExceptions>(deep);
    }

    /// <summary>
    /// <para>Previous Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    ///   <item><description>TableCellWidth &lt;w:tcW></description></item>
    ///   <item><description>GridSpan &lt;w:gridSpan></description></item>
    ///   <item><description>HorizontalMerge &lt;w:hMerge></description></item>
    ///   <item><description>VerticalMerge &lt;w:vMerge></description></item>
    ///   <item><description>TableCellBorders &lt;w:tcBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>NoWrap &lt;w:noWrap></description></item>
    ///   <item><description>TableCellMargin &lt;w:tcMar></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TableCellFitText &lt;w:tcFitText></description></item>
    ///   <item><description>TableCellVerticalAlignment &lt;w:vAlign></description></item>
    ///   <item><description>HideMark &lt;w:hideMark></description></item>
    ///   <item><description>CellInsertion &lt;w:cellIns></description></item>
    ///   <item><description>CellDeletion &lt;w:cellDel></description></item>
    ///   <item><description>CellMerge &lt;w:cellMerge></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [ChildElementInfo(typeof(TableCellWidth))]
    [ChildElementInfo(typeof(GridSpan))]
    [ChildElementInfo(typeof(HorizontalMerge))]
    [ChildElementInfo(typeof(VerticalMerge))]
    [ChildElementInfo(typeof(TableCellBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(NoWrap))]
    [ChildElementInfo(typeof(TableCellMargin))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TableCellFitText))]
    [ChildElementInfo(typeof(TableCellVerticalAlignment))]
    [ChildElementInfo(typeof(HideMark))]
    [ChildElementInfo(typeof(CellInsertion))]
    [ChildElementInfo(typeof(CellDeletion))]
    [ChildElementInfo(typeof(CellMerge))]
    [SchemaAttr(23, "tcPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class.
        /// </summary>
        public PreviousTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConditionalFormatStyle ConditionalFormatStyle
        {
            get => GetElement<ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tcW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellWidth TableCellWidth
        {
            get => GetElement<TableCellWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GridSpan.</para>
        /// <para>Represents the following element tag in the schema: w:gridSpan.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public GridSpan GridSpan
        {
            get => GetElement<GridSpan>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HorizontalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:hMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HorizontalMerge HorizontalMerge
        {
            get => GetElement<HorizontalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:vMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalMerge VerticalMerge
        {
            get => GetElement<VerticalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellBorders TableCellBorders
        {
            get => GetElement<TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoWrap NoWrap
        {
            get => GetElement<NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMargin TableCellMargin
        {
            get => GetElement<TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellFitText.</para>
        /// <para>Represents the following element tag in the schema: w:tcFitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellFitText TableCellFitText
        {
            get => GetElement<TableCellFitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellVerticalAlignment TableCellVerticalAlignment
        {
            get => GetElement<TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HideMark.</para>
        /// <para>Represents the following element tag in the schema: w:hideMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HideMark HideMark
        {
            get => GetElement<HideMark>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellWidth), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridSpan), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalMerge), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellFitText), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideMark), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellInsertion), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellDeletion), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellMerge), 0, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Table Row Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    ///   <item><description>DivId &lt;w:divId></description></item>
    ///   <item><description>GridBefore &lt;w:gridBefore></description></item>
    ///   <item><description>GridAfter &lt;w:gridAfter></description></item>
    ///   <item><description>WidthBeforeTableRow &lt;w:wBefore></description></item>
    ///   <item><description>WidthAfterTableRow &lt;w:wAfter></description></item>
    ///   <item><description>TableRowHeight &lt;w:trHeight></description></item>
    ///   <item><description>Hidden &lt;w:hidden></description></item>
    ///   <item><description>CantSplit &lt;w:cantSplit></description></item>
    ///   <item><description>TableHeader &lt;w:tblHeader></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [ChildElementInfo(typeof(DivId))]
    [ChildElementInfo(typeof(GridBefore))]
    [ChildElementInfo(typeof(GridAfter))]
    [ChildElementInfo(typeof(WidthBeforeTableRow))]
    [ChildElementInfo(typeof(WidthAfterTableRow))]
    [ChildElementInfo(typeof(TableRowHeight))]
    [ChildElementInfo(typeof(Hidden))]
    [ChildElementInfo(typeof(CantSplit))]
    [ChildElementInfo(typeof(TableHeader))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableJustification))]
    [SchemaAttr(23, "trPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousTableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class.
        /// </summary>
        public PreviousTableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableRowProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 0)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridBefore), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridAfter), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowHeight), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableStyle &lt;w:tblStyle></description></item>
    ///   <item><description>TablePositionProperties &lt;w:tblpPr></description></item>
    ///   <item><description>TableOverlap &lt;w:tblOverlap></description></item>
    ///   <item><description>BiDiVisual &lt;w:bidiVisual></description></item>
    ///   <item><description>TableWidth &lt;w:tblW></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableLayout &lt;w:tblLayout></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    ///   <item><description>TableLook &lt;w:tblLook></description></item>
    ///   <item><description>TableCaption &lt;w:tblCaption></description></item>
    ///   <item><description>TableDescription &lt;w:tblDescription></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableStyle))]
    [ChildElementInfo(typeof(TablePositionProperties))]
    [ChildElementInfo(typeof(TableOverlap))]
    [ChildElementInfo(typeof(BiDiVisual))]
    [ChildElementInfo(typeof(TableWidth))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableLayout))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [ChildElementInfo(typeof(TableLook))]
    [ChildElementInfo(typeof(TableCaption), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(TableDescription), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "tblPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class.
        /// </summary>
        public PreviousTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>TableStyle.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyle TableStyle
        {
            get => GetElement<TableStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TablePositionProperties.</para>
        /// <para>Represents the following element tag in the schema: w:tblpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TablePositionProperties TablePositionProperties
        {
            get => GetElement<TablePositionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:tblOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableOverlap TableOverlap
        {
            get => GetElement<TableOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDiVisual.</para>
        /// <para>Represents the following element tag in the schema: w:bidiVisual.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDiVisual BiDiVisual
        {
            get => GetElement<BiDiVisual>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableWidth TableWidth
        {
            get => GetElement<TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLayout.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLayout TableLayout
        {
            get => GetElement<TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLook.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLook TableLook
        {
            get => GetElement<TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCaption.</para>
        /// <para>Represents the following element tag in the schema: w:tblCaption.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCaption TableCaption
        {
            get => GetElement<TableCaption>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableDescription.</para>
        /// <para>Represents the following element tag in the schema: w:tblDescription.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableDescription TableDescription
        {
            get => GetElement<TableDescription>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyle), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableOverlap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDiVisual), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCaption), 0, 1, version: FileFormatVersions.Office2010),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableDescription), 0, 1, version: FileFormatVersions.Office2010)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Section Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FootnoteProperties &lt;w:footnotePr></description></item>
    ///   <item><description>EndnoteProperties &lt;w:endnotePr></description></item>
    ///   <item><description>SectionType &lt;w:type></description></item>
    ///   <item><description>PageSize &lt;w:pgSz></description></item>
    ///   <item><description>PageMargin &lt;w:pgMar></description></item>
    ///   <item><description>PaperSource &lt;w:paperSrc></description></item>
    ///   <item><description>PageBorders &lt;w:pgBorders></description></item>
    ///   <item><description>LineNumberType &lt;w:lnNumType></description></item>
    ///   <item><description>PageNumberType &lt;w:pgNumType></description></item>
    ///   <item><description>Columns &lt;w:cols></description></item>
    ///   <item><description>FormProtection &lt;w:formProt></description></item>
    ///   <item><description>VerticalTextAlignmentOnPage &lt;w:vAlign></description></item>
    ///   <item><description>NoEndnote &lt;w:noEndnote></description></item>
    ///   <item><description>TitlePage &lt;w:titlePg></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>GutterOnRight &lt;w:rtlGutter></description></item>
    ///   <item><description>DocGrid &lt;w:docGrid></description></item>
    ///   <item><description>PrinterSettingsReference &lt;w:printerSettings></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns &lt;w15:footnoteColumns></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FootnoteProperties))]
    [ChildElementInfo(typeof(EndnoteProperties))]
    [ChildElementInfo(typeof(SectionType))]
    [ChildElementInfo(typeof(PageSize))]
    [ChildElementInfo(typeof(PageMargin))]
    [ChildElementInfo(typeof(PaperSource))]
    [ChildElementInfo(typeof(PageBorders))]
    [ChildElementInfo(typeof(LineNumberType))]
    [ChildElementInfo(typeof(PageNumberType))]
    [ChildElementInfo(typeof(Columns))]
    [ChildElementInfo(typeof(FormProtection))]
    [ChildElementInfo(typeof(VerticalTextAlignmentOnPage))]
    [ChildElementInfo(typeof(NoEndnote))]
    [ChildElementInfo(typeof(TitlePage))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(GutterOnRight))]
    [ChildElementInfo(typeof(DocGrid))]
    [ChildElementInfo(typeof(PrinterSettingsReference))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), FileFormatVersions.Office2013)]
    [SchemaAttr(23, "sectPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousSectionProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class.
        /// </summary>
        public PreviousSectionProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousSectionProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousSectionProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousSectionProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Physical Section Mark Character Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRPr")]
        [Index(0)]
        public HexBinaryValue RsidRPr { get; set; }

        /// <summary>
        /// <para>Section Deletion Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidDel")]
        [Index(1)]
        public HexBinaryValue RsidDel { get; set; }

        /// <summary>
        /// <para>Section Addition Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidR")]
        [Index(2)]
        public HexBinaryValue RsidR { get; set; }

        /// <summary>
        /// <para>Section Properties Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidSect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidSect")]
        [Index(3)]
        public HexBinaryValue RsidSect { get; set; }

        /// <summary>
        /// <para>FootnoteProperties.</para>
        /// <para>Represents the following element tag in the schema: w:footnotePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FootnoteProperties FootnoteProperties
        {
            get => GetElement<FootnoteProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndnoteProperties.</para>
        /// <para>Represents the following element tag in the schema: w:endnotePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndnoteProperties EndnoteProperties
        {
            get => GetElement<EndnoteProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SectionType.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SectionType SectionType
        {
            get => GetElement<SectionType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageSize.</para>
        /// <para>Represents the following element tag in the schema: w:pgSz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageSize PageSize
        {
            get => GetElement<PageSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageMargin.</para>
        /// <para>Represents the following element tag in the schema: w:pgMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageMargin PageMargin
        {
            get => GetElement<PageMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PaperSource.</para>
        /// <para>Represents the following element tag in the schema: w:paperSrc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PaperSource PaperSource
        {
            get => GetElement<PaperSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pgBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBorders PageBorders
        {
            get => GetElement<PageBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>LineNumberType.</para>
        /// <para>Represents the following element tag in the schema: w:lnNumType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LineNumberType LineNumberType
        {
            get => GetElement<LineNumberType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageNumberType.</para>
        /// <para>Represents the following element tag in the schema: w:pgNumType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageNumberType PageNumberType
        {
            get => GetElement<PageNumberType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Columns.</para>
        /// <para>Represents the following element tag in the schema: w:cols.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Columns Columns
        {
            get => GetElement<Columns>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FormProtection.</para>
        /// <para>Represents the following element tag in the schema: w:formProt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FormProtection FormProtection
        {
            get => GetElement<FormProtection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignmentOnPage.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalTextAlignmentOnPage VerticalTextAlignmentOnPage
        {
            get => GetElement<VerticalTextAlignmentOnPage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoEndnote.</para>
        /// <para>Represents the following element tag in the schema: w:noEndnote.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoEndnote NoEndnote
        {
            get => GetElement<NoEndnote>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TitlePage.</para>
        /// <para>Represents the following element tag in the schema: w:titlePg.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TitlePage TitlePage
        {
            get => GetElement<TitlePage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GutterOnRight.</para>
        /// <para>Represents the following element tag in the schema: w:rtlGutter.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public GutterOnRight GutterOnRight
        {
            get => GetElement<GutterOnRight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DocGrid.</para>
        /// <para>Represents the following element tag in the schema: w:docGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocGrid DocGrid
        {
            get => GetElement<DocGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PrinterSettingsReference.</para>
        /// <para>Represents the following element tag in the schema: w:printerSettings.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrinterSettingsReference PrinterSettingsReference
        {
            get => GetElement<PrinterSettingsReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FootnoteColumns.</para>
        /// <para>Represents the following element tag in the schema: w15:footnoteColumns.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w15 = http://schemas.microsoft.com/office/word/2012/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns FootnoteColumns
        {
            get => GetElement<DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageSize), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageMargin), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PaperSource), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineNumberType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumberType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Columns), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormProtection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoEndnote), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TitlePage), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterOnRight), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocGrid), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), 0, 1, version: FileFormatVersions.Office2013)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousSectionProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphStyleId &lt;w:pStyle></description></item>
    ///   <item><description>KeepNext &lt;w:keepNext></description></item>
    ///   <item><description>KeepLines &lt;w:keepLines></description></item>
    ///   <item><description>PageBreakBefore &lt;w:pageBreakBefore></description></item>
    ///   <item><description>FrameProperties &lt;w:framePr></description></item>
    ///   <item><description>WidowControl &lt;w:widowControl></description></item>
    ///   <item><description>NumberingProperties &lt;w:numPr></description></item>
    ///   <item><description>SuppressLineNumbers &lt;w:suppressLineNumbers></description></item>
    ///   <item><description>ParagraphBorders &lt;w:pBdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>Tabs &lt;w:tabs></description></item>
    ///   <item><description>SuppressAutoHyphens &lt;w:suppressAutoHyphens></description></item>
    ///   <item><description>Kinsoku &lt;w:kinsoku></description></item>
    ///   <item><description>WordWrap &lt;w:wordWrap></description></item>
    ///   <item><description>OverflowPunctuation &lt;w:overflowPunct></description></item>
    ///   <item><description>TopLinePunctuation &lt;w:topLinePunct></description></item>
    ///   <item><description>AutoSpaceDE &lt;w:autoSpaceDE></description></item>
    ///   <item><description>AutoSpaceDN &lt;w:autoSpaceDN></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>AdjustRightIndent &lt;w:adjustRightInd></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>SpacingBetweenLines &lt;w:spacing></description></item>
    ///   <item><description>Indentation &lt;w:ind></description></item>
    ///   <item><description>ContextualSpacing &lt;w:contextualSpacing></description></item>
    ///   <item><description>MirrorIndents &lt;w:mirrorIndents></description></item>
    ///   <item><description>SuppressOverlap &lt;w:suppressOverlap></description></item>
    ///   <item><description>Justification &lt;w:jc></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TextAlignment &lt;w:textAlignment></description></item>
    ///   <item><description>TextBoxTightWrap &lt;w:textboxTightWrap></description></item>
    ///   <item><description>OutlineLevel &lt;w:outlineLvl></description></item>
    ///   <item><description>DivId &lt;w:divId></description></item>
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphStyleId))]
    [ChildElementInfo(typeof(KeepNext))]
    [ChildElementInfo(typeof(KeepLines))]
    [ChildElementInfo(typeof(PageBreakBefore))]
    [ChildElementInfo(typeof(FrameProperties))]
    [ChildElementInfo(typeof(WidowControl))]
    [ChildElementInfo(typeof(NumberingProperties))]
    [ChildElementInfo(typeof(SuppressLineNumbers))]
    [ChildElementInfo(typeof(ParagraphBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(Tabs))]
    [ChildElementInfo(typeof(SuppressAutoHyphens))]
    [ChildElementInfo(typeof(Kinsoku))]
    [ChildElementInfo(typeof(WordWrap))]
    [ChildElementInfo(typeof(OverflowPunctuation))]
    [ChildElementInfo(typeof(TopLinePunctuation))]
    [ChildElementInfo(typeof(AutoSpaceDE))]
    [ChildElementInfo(typeof(AutoSpaceDN))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(AdjustRightIndent))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(SpacingBetweenLines))]
    [ChildElementInfo(typeof(Indentation))]
    [ChildElementInfo(typeof(ContextualSpacing))]
    [ChildElementInfo(typeof(MirrorIndents))]
    [ChildElementInfo(typeof(SuppressOverlap))]
    [ChildElementInfo(typeof(Justification))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TextAlignment))]
    [ChildElementInfo(typeof(TextBoxTightWrap))]
    [ChildElementInfo(typeof(OutlineLevel))]
    [ChildElementInfo(typeof(DivId))]
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [SchemaAttr(23, "pPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphPropertiesExtended : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class.
        /// </summary>
        public ParagraphPropertiesExtended() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesExtended(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesExtended(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesExtended(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphStyleId ParagraphStyleId
        {
            get => GetElement<ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepNext KeepNext
        {
            get => GetElement<KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepLines KeepLines
        {
            get => GetElement<KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBreakBefore PageBreakBefore
        {
            get => GetElement<PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameProperties FrameProperties
        {
            get => GetElement<FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WidowControl WidowControl
        {
            get => GetElement<WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingProperties NumberingProperties
        {
            get => GetElement<NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressLineNumbers SuppressLineNumbers
        {
            get => GetElement<SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphBorders ParagraphBorders
        {
            get => GetElement<ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Tabs Tabs
        {
            get => GetElement<Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressAutoHyphens SuppressAutoHyphens
        {
            get => GetElement<SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kinsoku Kinsoku
        {
            get => GetElement<Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordWrap WordWrap
        {
            get => GetElement<WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OverflowPunctuation OverflowPunctuation
        {
            get => GetElement<OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLinePunctuation TopLinePunctuation
        {
            get => GetElement<TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDE AutoSpaceDE
        {
            get => GetElement<AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDN AutoSpaceDN
        {
            get => GetElement<AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustRightIndent AdjustRightIndent
        {
            get => GetElement<AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingBetweenLines SpacingBetweenLines
        {
            get => GetElement<SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Indentation Indentation
        {
            get => GetElement<Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ContextualSpacing ContextualSpacing
        {
            get => GetElement<ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorIndents MirrorIndents
        {
            get => GetElement<MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressOverlap SuppressOverlap
        {
            get => GetElement<SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Justification Justification
        {
            get => GetElement<Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextAlignment TextAlignment
        {
            get => GetElement<TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxTightWrap TextBoxTightWrap
        {
            get => GetElement<TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OutlineLevel OutlineLevel
        {
            get => GetElement<OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DivId.</para>
        /// <para>Represents the following element tag in the schema: w:divId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DivId DivId
        {
            get => GetElement<DivId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConditionalFormatStyle ConditionalFormatStyle
        {
            get => GetElement<ConditionalFormatStyle>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesExtended>(deep);
    }

    /// <summary>
    /// <para>Previous Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunStyle &lt;w:rStyle></description></item>
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Highlight &lt;w:highlight></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>RightToLeftText &lt;w:rtl></description></item>
    ///   <item><description>ComplexScript &lt;w:cs></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Glow &lt;w14:glow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Shadow &lt;w14:shadow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Reflection &lt;w14:reflection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect &lt;w14:textOutline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.FillTextEffect &lt;w14:textFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Scene3D &lt;w14:scene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Properties3D &lt;w14:props3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Ligatures &lt;w14:ligatures></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberingFormat &lt;w14:numForm></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberSpacing &lt;w14:numSpacing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.StylisticSets &lt;w14:stylisticSets></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives &lt;w14:cntxtAlts></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunStyle))]
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Highlight))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(RightToLeftText))]
    [ChildElementInfo(typeof(ComplexScript))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class.
        /// </summary>
        public PreviousRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousRunProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousRunProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Run Properties for the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Inserted &lt;w:ins></description></item>
    ///   <item><description>Deleted &lt;w:del></description></item>
    ///   <item><description>MoveFrom &lt;w:moveFrom></description></item>
    ///   <item><description>MoveTo &lt;w:moveTo></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>RunStyle &lt;w:rStyle></description></item>
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Highlight &lt;w:highlight></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>RightToLeftText &lt;w:rtl></description></item>
    ///   <item><description>ComplexScript &lt;w:cs></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Glow &lt;w14:glow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Shadow &lt;w14:shadow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Reflection &lt;w14:reflection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect &lt;w14:textOutline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.FillTextEffect &lt;w14:textFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Scene3D &lt;w14:scene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Properties3D &lt;w14:props3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Ligatures &lt;w14:ligatures></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberingFormat &lt;w14:numForm></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberSpacing &lt;w14:numSpacing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.StylisticSets &lt;w14:stylisticSets></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives &lt;w14:cntxtAlts></description></item>
    ///   <item><description>OfficeMath &lt;w:oMath></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Inserted))]
    [ChildElementInfo(typeof(Deleted))]
    [ChildElementInfo(typeof(MoveFrom))]
    [ChildElementInfo(typeof(MoveTo))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(RunStyle))]
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Highlight))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(RightToLeftText))]
    [ChildElementInfo(typeof(ComplexScript))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(OfficeMath))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousParagraphMarkRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class.
        /// </summary>
        public PreviousParagraphMarkRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphMarkRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphMarkRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousParagraphMarkRunProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Inserted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Inserted Inserted
        {
            get => GetElement<Inserted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Deleted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:del.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Deleted Deleted
        {
            get => GetElement<Deleted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Source Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MoveFrom MoveFrom
        {
            get => GetElement<MoveFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Destination Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MoveTo MoveTo
        {
            get => GetElement<MoveTo>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFrom), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveTo), 0, 1),
                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OfficeMath), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousParagraphMarkRunProperties>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ilvl.</para>
    /// </summary>
    [SchemaAttr(23, "ilvl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingLevelReference : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingLevelReference class.
        /// </summary>
        public NumberingLevelReference() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 255L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingLevelReference>(deep);
    }

    /// <summary>
    /// <para>Numbering Definition Instance Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numId.</para>
    /// </summary>
    [SchemaAttr(23, "numId")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingId : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the NumberingId class.
        /// </summary>
        public NumberingId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingId>(deep);
    }

    /// <summary>
    /// <para>Starting Value.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    [SchemaAttr(23, "start")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StartNumberingValue : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the StartNumberingValue class.
        /// </summary>
        public StartNumberingValue() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartNumberingValue>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Reference.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:abstractNumId.</para>
    /// </summary>
    [SchemaAttr(23, "abstractNumId")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AbstractNumId : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNumId class.
        /// </summary>
        public AbstractNumId() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNumId>(deep);
    }

    /// <summary>
    /// <para>Defines the NonNegativeDecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class NonNegativeDecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NonNegativeDecimalNumberType class.
        /// </summary>
        protected NonNegativeDecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Previous Paragraph Numbering Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numberingChange.</para>
    /// </summary>
    [SchemaAttr(23, "numberingChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingChange : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingChange class.
        /// </summary>
        public NumberingChange() : base()
        {
        }

        /// <summary>
        /// <para>original</para>
        /// <para>Represents the following attribute in the schema: w:original</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "original")]
        [Index(0)]
        public StringValue Original { get; set; }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(1)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(2)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(3)]
        public StringValue Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingChange>(deep);
    }

    /// <summary>
    /// <para>Custom Tab Stop.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tab.</para>
    /// </summary>
    [SchemaAttr(23, "tab")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TabStop : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStop class.
        /// </summary>
        public TabStop() : base()
        {
        }

        /// <summary>
        /// <para>Tab Stop Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopValues> Val { get; set; }

        /// <summary>
        /// <para>Tab Leader Character</para>
        /// <para>Represents the following attribute in the schema: w:leader</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "leader")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopLeaderCharValues> Leader { get; set; }

        /// <summary>
        /// <para>Tab Stop Position</para>
        /// <para>Represents the following attribute in the schema: w:pos</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = -31680L, MaxInclusive = 31680L)]
        [SchemaAttr(23, "pos")]
        [Index(2)]
        public Int32Value Position { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStop>(deep);
    }

    /// <summary>
    /// <para>Run Properties for the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Inserted &lt;w:ins></description></item>
    ///   <item><description>Deleted &lt;w:del></description></item>
    ///   <item><description>MoveFrom &lt;w:moveFrom></description></item>
    ///   <item><description>MoveTo &lt;w:moveTo></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>RunStyle &lt;w:rStyle></description></item>
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Highlight &lt;w:highlight></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>RightToLeftText &lt;w:rtl></description></item>
    ///   <item><description>ComplexScript &lt;w:cs></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Glow &lt;w14:glow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Shadow &lt;w14:shadow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Reflection &lt;w14:reflection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect &lt;w14:textOutline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.FillTextEffect &lt;w14:textFill></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Scene3D &lt;w14:scene3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Properties3D &lt;w14:props3d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.Ligatures &lt;w14:ligatures></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberingFormat &lt;w14:numForm></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.NumberSpacing &lt;w14:numSpacing></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.StylisticSets &lt;w14:stylisticSets></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives &lt;w14:cntxtAlts></description></item>
    ///   <item><description>OfficeMath &lt;w:oMath></description></item>
    ///   <item><description>ParagraphMarkRunPropertiesChange &lt;w:rPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Inserted))]
    [ChildElementInfo(typeof(Deleted))]
    [ChildElementInfo(typeof(MoveFrom))]
    [ChildElementInfo(typeof(MoveTo))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(RunStyle))]
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Highlight))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(RightToLeftText))]
    [ChildElementInfo(typeof(ComplexScript))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(OfficeMath))]
    [ChildElementInfo(typeof(ParagraphMarkRunPropertiesChange))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphMarkRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class.
        /// </summary>
        public ParagraphMarkRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphMarkRunProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Inserted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Inserted Inserted
        {
            get => GetElement<Inserted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Deleted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:del.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Deleted Deleted
        {
            get => GetElement<Deleted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Source Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MoveFrom MoveFrom
        {
            get => GetElement<MoveFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Destination Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MoveTo MoveTo
        {
            get => GetElement<MoveTo>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFrom), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveTo), 0, 1),
                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OfficeMath), 0, 1)
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunPropertiesChange), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphMarkRunProperties>(deep);
    }

    /// <summary>
    /// <para>Section Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>HeaderReference &lt;w:headerReference></description></item>
    ///   <item><description>FooterReference &lt;w:footerReference></description></item>
    ///   <item><description>FootnoteProperties &lt;w:footnotePr></description></item>
    ///   <item><description>EndnoteProperties &lt;w:endnotePr></description></item>
    ///   <item><description>SectionType &lt;w:type></description></item>
    ///   <item><description>PageSize &lt;w:pgSz></description></item>
    ///   <item><description>PageMargin &lt;w:pgMar></description></item>
    ///   <item><description>PaperSource &lt;w:paperSrc></description></item>
    ///   <item><description>PageBorders &lt;w:pgBorders></description></item>
    ///   <item><description>LineNumberType &lt;w:lnNumType></description></item>
    ///   <item><description>PageNumberType &lt;w:pgNumType></description></item>
    ///   <item><description>Columns &lt;w:cols></description></item>
    ///   <item><description>FormProtection &lt;w:formProt></description></item>
    ///   <item><description>VerticalTextAlignmentOnPage &lt;w:vAlign></description></item>
    ///   <item><description>NoEndnote &lt;w:noEndnote></description></item>
    ///   <item><description>TitlePage &lt;w:titlePg></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>GutterOnRight &lt;w:rtlGutter></description></item>
    ///   <item><description>DocGrid &lt;w:docGrid></description></item>
    ///   <item><description>PrinterSettingsReference &lt;w:printerSettings></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns &lt;w15:footnoteColumns></description></item>
    ///   <item><description>SectionPropertiesChange &lt;w:sectPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(HeaderReference))]
    [ChildElementInfo(typeof(FooterReference))]
    [ChildElementInfo(typeof(FootnoteProperties))]
    [ChildElementInfo(typeof(EndnoteProperties))]
    [ChildElementInfo(typeof(SectionType))]
    [ChildElementInfo(typeof(PageSize))]
    [ChildElementInfo(typeof(PageMargin))]
    [ChildElementInfo(typeof(PaperSource))]
    [ChildElementInfo(typeof(PageBorders))]
    [ChildElementInfo(typeof(LineNumberType))]
    [ChildElementInfo(typeof(PageNumberType))]
    [ChildElementInfo(typeof(Columns))]
    [ChildElementInfo(typeof(FormProtection))]
    [ChildElementInfo(typeof(VerticalTextAlignmentOnPage))]
    [ChildElementInfo(typeof(NoEndnote))]
    [ChildElementInfo(typeof(TitlePage))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(GutterOnRight))]
    [ChildElementInfo(typeof(DocGrid))]
    [ChildElementInfo(typeof(PrinterSettingsReference))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(SectionPropertiesChange))]
    [SchemaAttr(23, "sectPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SectionProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionProperties class.
        /// </summary>
        public SectionProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SectionProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Physical Section Mark Character Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidRPr")]
        [Index(0)]
        public HexBinaryValue RsidRPr { get; set; }

        /// <summary>
        /// <para>Section Deletion Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidDel")]
        [Index(1)]
        public HexBinaryValue RsidDel { get; set; }

        /// <summary>
        /// <para>Section Addition Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidR")]
        [Index(2)]
        public HexBinaryValue RsidR { get; set; }

        /// <summary>
        /// <para>Section Properties Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidSect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "rsidSect")]
        [Index(3)]
        public HexBinaryValue RsidSect { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 6)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderReference), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FooterReference), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageSize), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageMargin), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PaperSource), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineNumberType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumberType), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Columns), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormProtection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoEndnote), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TitlePage), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterOnRight), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocGrid), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), 0, 1, version: FileFormatVersions.Office2013)
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionPropertiesChange), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionProperties>(deep);
    }

    /// <summary>
    /// <para>Custom Field Data.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldData.</para>
    /// </summary>
    [SchemaAttr(23, "fldData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FieldData : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldData class.
        /// </summary>
        public FieldData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldData class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public FieldData(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Base64BinaryValue { InnerText = text };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldData>(deep);
    }

    /// <summary>
    /// <para>Form Field Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ffData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FormFieldName &lt;w:name></description></item>
    ///   <item><description>Enabled &lt;w:enabled></description></item>
    ///   <item><description>CalculateOnExit &lt;w:calcOnExit></description></item>
    ///   <item><description>EntryMacro &lt;w:entryMacro></description></item>
    ///   <item><description>ExitMacro &lt;w:exitMacro></description></item>
    ///   <item><description>HelpText &lt;w:helpText></description></item>
    ///   <item><description>StatusText &lt;w:statusText></description></item>
    ///   <item><description>CheckBox &lt;w:checkBox></description></item>
    ///   <item><description>DropDownListFormField &lt;w:ddList></description></item>
    ///   <item><description>TextInput &lt;w:textInput></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FormFieldName))]
    [ChildElementInfo(typeof(Enabled))]
    [ChildElementInfo(typeof(CalculateOnExit))]
    [ChildElementInfo(typeof(EntryMacro))]
    [ChildElementInfo(typeof(ExitMacro))]
    [ChildElementInfo(typeof(HelpText))]
    [ChildElementInfo(typeof(StatusText))]
    [ChildElementInfo(typeof(CheckBox))]
    [ChildElementInfo(typeof(DropDownListFormField))]
    [ChildElementInfo(typeof(TextInput))]
    [SchemaAttr(23, "ffData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FormFieldData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldData class.
        /// </summary>
        public FormFieldData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormFieldData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormFieldData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FormFieldData(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldName), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Enabled), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CalculateOnExit), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EntryMacro), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ExitMacro), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HelpText), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StatusText), 0, 1),
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CheckBox), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DropDownListFormField), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextInput), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldData>(deep);
    }

    /// <summary>
    /// <para>Form Field Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FormFieldName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldName class.
        /// </summary>
        public FormFieldName() : base()
        {
        }

        /// <summary>
        /// <para>Form Field Name Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 20L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldName>(deep);
    }

    /// <summary>
    /// <para>Script Function to Execute on Form Field Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:entryMacro.</para>
    /// </summary>
    [SchemaAttr(23, "entryMacro")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EntryMacro : MacroNameType
    {
        /// <summary>
        /// Initializes a new instance of the EntryMacro class.
        /// </summary>
        public EntryMacro() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EntryMacro>(deep);
    }

    /// <summary>
    /// <para>Script Function to Execute on Form Field Exit.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:exitMacro.</para>
    /// </summary>
    [SchemaAttr(23, "exitMacro")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ExitMacro : MacroNameType
    {
        /// <summary>
        /// Initializes a new instance of the ExitMacro class.
        /// </summary>
        public ExitMacro() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExitMacro>(deep);
    }

    /// <summary>
    /// <para>Defines the MacroNameType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MacroNameType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MacroNameType class.
        /// </summary>
        protected MacroNameType() : base()
        {
        }

        /// <summary>
        /// <para>Name of Script Function</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 33L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Associated Help Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:helpText.</para>
    /// </summary>
    [SchemaAttr(23, "helpText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HelpText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HelpText class.
        /// </summary>
        public HelpText() : base()
        {
        }

        /// <summary>
        /// <para>Help Text Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues> Type { get; set; }

        /// <summary>
        /// <para>Help Text Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "val")]
        [Index(1)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HelpText>(deep);
    }

    /// <summary>
    /// <para>Associated Status Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:statusText.</para>
    /// </summary>
    [SchemaAttr(23, "statusText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StatusText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StatusText class.
        /// </summary>
        public StatusText() : base()
        {
        }

        /// <summary>
        /// <para>Status Text Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues> Type { get; set; }

        /// <summary>
        /// <para>Status Text Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 138L, Version = FileFormatVersions.Office2007)]
        [StringValidator(MaxLength = 140L, InitialVersion = FileFormatVersions.Office2010)]
        [SchemaAttr(23, "val")]
        [Index(1)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StatusText>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checkBox.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FormFieldSize &lt;w:size></description></item>
    ///   <item><description>AutomaticallySizeFormField &lt;w:sizeAuto></description></item>
    ///   <item><description>DefaultCheckBoxFormFieldState &lt;w:default></description></item>
    ///   <item><description>Checked &lt;w:checked></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FormFieldSize))]
    [ChildElementInfo(typeof(AutomaticallySizeFormField))]
    [ChildElementInfo(typeof(DefaultCheckBoxFormFieldState))]
    [ChildElementInfo(typeof(Checked))]
    [SchemaAttr(23, "checkBox")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CheckBox : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CheckBox class.
        /// </summary>
        public CheckBox() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CheckBox(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CheckBox(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CheckBox(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldSize), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutomaticallySizeFormField), 1, 1)
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultCheckBoxFormFieldState), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Checked), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CheckBox>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Form Field Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ddList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DropDownListSelection &lt;w:result></description></item>
    ///   <item><description>DefaultDropDownListItemIndex &lt;w:default></description></item>
    ///   <item><description>ListEntryFormField &lt;w:listEntry></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DropDownListSelection))]
    [ChildElementInfo(typeof(DefaultDropDownListItemIndex))]
    [ChildElementInfo(typeof(ListEntryFormField))]
    [SchemaAttr(23, "ddList")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DropDownListFormField : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class.
        /// </summary>
        public DropDownListFormField() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DropDownListFormField(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DropDownListFormField(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DropDownListFormField(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Drop-Down List Selection.</para>
        /// <para>Represents the following element tag in the schema: w:result.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DropDownListSelection DropDownListSelection
        {
            get => GetElement<DropDownListSelection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Drop-Down List Item Index.</para>
        /// <para>Represents the following element tag in the schema: w:default.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DefaultDropDownListItemIndex DefaultDropDownListItemIndex
        {
            get => GetElement<DefaultDropDownListItemIndex>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListEntryFormField), 0, 25)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DropDownListFormField>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textInput.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TextBoxFormFieldType &lt;w:type></description></item>
    ///   <item><description>DefaultTextBoxFormFieldString &lt;w:default></description></item>
    ///   <item><description>MaxLength &lt;w:maxLength></description></item>
    ///   <item><description>Format &lt;w:format></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TextBoxFormFieldType))]
    [ChildElementInfo(typeof(DefaultTextBoxFormFieldString))]
    [ChildElementInfo(typeof(MaxLength))]
    [ChildElementInfo(typeof(Format))]
    [SchemaAttr(23, "textInput")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextInput : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextInput class.
        /// </summary>
        public TextInput() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextInput(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextInput(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextInput(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Text Box Form Field Type.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxFormFieldType TextBoxFormFieldType
        {
            get => GetElement<TextBoxFormFieldType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Text Box Form Field String.</para>
        /// <para>Represents the following element tag in the schema: w:default.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DefaultTextBoxFormFieldString DefaultTextBoxFormFieldString
        {
            get => GetElement<DefaultTextBoxFormFieldString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Box Form Field Maximum Length.</para>
        /// <para>Represents the following element tag in the schema: w:maxLength.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MaxLength MaxLength
        {
            get => GetElement<MaxLength>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Box Form Field Formatting.</para>
        /// <para>Represents the following element tag in the schema: w:format.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Format Format
        {
            get => GetElement<Format>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MaxLength), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Format), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextInput>(deep);
    }

    /// <summary>
    /// <para>Default Drop-Down List Item Index.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    [SchemaAttr(23, "default")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DefaultDropDownListItemIndex : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DefaultDropDownListItemIndex class.
        /// </summary>
        public DefaultDropDownListItemIndex() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 24L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultDropDownListItemIndex>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listEntry.</para>
    /// </summary>
    [SchemaAttr(23, "listEntry")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ListEntryFormField : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the ListEntryFormField class.
        /// </summary>
        public ListEntryFormField() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListEntryFormField>(deep);
    }

    /// <summary>
    /// <para>Default Text Box Form Field String.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    [SchemaAttr(23, "default")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DefaultTextBoxFormFieldString : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTextBoxFormFieldString class.
        /// </summary>
        public DefaultTextBoxFormFieldString() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTextBoxFormFieldString>(deep);
    }

    /// <summary>
    /// <para>Frame Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FrameName : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the FrameName class.
        /// </summary>
        public FrameName() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameName>(deep);
    }

    /// <summary>
    /// <para>Defines the String255Type Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class String255Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the String255Type class.
        /// </summary>
        protected String255Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Text Box Form Field Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    [SchemaAttr(23, "type")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TextBoxFormFieldType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxFormFieldType class.
        /// </summary>
        public TextBoxFormFieldType() : base()
        {
        }

        /// <summary>
        /// <para>Text Box Form Field Type Values</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxFormFieldType>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Maximum Length.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:maxLength.</para>
    /// </summary>
    [SchemaAttr(23, "maxLength")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MaxLength : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MaxLength class.
        /// </summary>
        public MaxLength() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 1L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int16Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MaxLength>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Formatting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:format.</para>
    /// </summary>
    [SchemaAttr(23, "format")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Format : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Format class.
        /// </summary>
        public Format() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 64L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Format>(deep);
    }

    /// <summary>
    /// <para>Single Column Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:col.</para>
    /// </summary>
    [SchemaAttr(23, "col")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Column : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Column class.
        /// </summary>
        public Column() : base()
        {
        }

        /// <summary>
        /// <para>Column Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "w")]
        [Index(0)]
        public StringValue Width { get; set; }

        /// <summary>
        /// <para>Space Before Following Column</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "space")]
        [Index(1)]
        public StringValue Space { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Column>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Section Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousSectionProperties &lt;w:sectPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousSectionProperties))]
    [SchemaAttr(23, "sectPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SectionPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class.
        /// </summary>
        public SectionPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SectionPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Section Properties.</para>
        /// <para>Represents the following element tag in the schema: w:sectPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousSectionProperties PreviousSectionProperties
        {
            get => GetElement<PreviousSectionProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Run Properties on the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousParagraphMarkRunProperties &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousParagraphMarkRunProperties))]
    [SchemaAttr(23, "rPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphMarkRunPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class.
        /// </summary>
        public ParagraphMarkRunPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphMarkRunPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Run Properties for the Paragraph Mark.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousParagraphMarkRunProperties PreviousParagraphMarkRunProperties
        {
            get => GetElement<PreviousParagraphMarkRunProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphMarkRunPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>External Content Import Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altChunkPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>MatchSource &lt;w:matchSrc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(MatchSource))]
    [SchemaAttr(23, "altChunkPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AltChunkProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class.
        /// </summary>
        public AltChunkProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunkProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunkProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AltChunkProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Keep Source Formatting on Import.</para>
        /// <para>Represents the following element tag in the schema: w:matchSrc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MatchSource MatchSource
        {
            get => GetElement<MatchSource>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MatchSource), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltChunkProperties>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Alignment.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyAlign.</para>
    /// </summary>
    [SchemaAttr(23, "rubyAlign")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RubyAlign : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyAlign class.
        /// </summary>
        public RubyAlign() : base()
        {
        }

        /// <summary>
        /// <para>Phonetic Guide Text Alignment Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RubyAlignValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyAlign>(deep);
    }

    /// <summary>
    /// <para>Distance Between Phonetic Guide Text and Phonetic Guide Base Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hpsRaise.</para>
    /// </summary>
    [SchemaAttr(23, "hpsRaise")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PhoneticGuideRaise : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideRaise class.
        /// </summary>
        public PhoneticGuideRaise() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int16Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideRaise>(deep);
    }

    /// <summary>
    /// <para>Language ID for Phonetic Guide.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lid.</para>
    /// </summary>
    [SchemaAttr(23, "lid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LanguageId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LanguageId class.
        /// </summary>
        public LanguageId() : base()
        {
        }

        /// <summary>
        /// <para>Language Code</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LanguageId>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RubyAlign &lt;w:rubyAlign></description></item>
    ///   <item><description>PhoneticGuideTextFontSize &lt;w:hps></description></item>
    ///   <item><description>PhoneticGuideRaise &lt;w:hpsRaise></description></item>
    ///   <item><description>PhoneticGuideBaseTextSize &lt;w:hpsBaseText></description></item>
    ///   <item><description>LanguageId &lt;w:lid></description></item>
    ///   <item><description>Dirty &lt;w:dirty></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RubyAlign))]
    [ChildElementInfo(typeof(PhoneticGuideTextFontSize))]
    [ChildElementInfo(typeof(PhoneticGuideRaise))]
    [ChildElementInfo(typeof(PhoneticGuideBaseTextSize))]
    [ChildElementInfo(typeof(LanguageId))]
    [ChildElementInfo(typeof(Dirty))]
    [SchemaAttr(23, "rubyPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RubyProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyProperties class.
        /// </summary>
        public RubyProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Phonetic Guide Text Alignment.</para>
        /// <para>Represents the following element tag in the schema: w:rubyAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RubyAlign RubyAlign
        {
            get => GetElement<RubyAlign>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Text Font Size.</para>
        /// <para>Represents the following element tag in the schema: w:hps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PhoneticGuideTextFontSize PhoneticGuideTextFontSize
        {
            get => GetElement<PhoneticGuideTextFontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Distance Between Phonetic Guide Text and Phonetic Guide Base Text.</para>
        /// <para>Represents the following element tag in the schema: w:hpsRaise.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PhoneticGuideRaise PhoneticGuideRaise
        {
            get => GetElement<PhoneticGuideRaise>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Base Text Font Size.</para>
        /// <para>Represents the following element tag in the schema: w:hpsBaseText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PhoneticGuideBaseTextSize PhoneticGuideBaseTextSize
        {
            get => GetElement<PhoneticGuideBaseTextSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Language ID for Phonetic Guide.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LanguageId LanguageId
        {
            get => GetElement<LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Invalidated Field Cache.</para>
        /// <para>Represents the following element tag in the schema: w:dirty.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Dirty Dirty
        {
            get => GetElement<Dirty>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyAlign), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Dirty), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyProperties>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "rt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RubyContent : RubyContentType
    {
        /// <summary>
        /// Initializes a new instance of the RubyContent class.
        /// </summary>
        public RubyContent() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyContent(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyContent(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyContent(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                new CompositeParticle(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyContent>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Base Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyBase.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "rubyBase")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RubyBase : RubyContentType
    {
        /// <summary>
        /// Initializes a new instance of the RubyBase class.
        /// </summary>
        public RubyBase() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyBase(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyBase(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyBase(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                new CompositeParticle(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyBase>(deep);
    }

    /// <summary>
    /// <para>Defines the RubyContentType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRuby))]
    [ChildElementInfo(typeof(SimpleFieldRuby))]
    [ChildElementInfo(typeof(HyperlinkRuby))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(SdtRunRuby))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    public abstract partial class RubyContentType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyContentType class.
        /// </summary>
        protected RubyContentType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RubyContentType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RubyContentType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected RubyContentType(string outerXml) : base(outerXml)
        {
        }
    }

    /// <summary>
    /// <para>Custom XML Data Date Storage Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:storeMappedDataAs.</para>
    /// </summary>
    [SchemaAttr(23, "storeMappedDataAs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtDateMappingType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtDateMappingType class.
        /// </summary>
        public SdtDateMappingType() : base()
        {
        }

        /// <summary>
        /// <para>Date Storage Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DateFormatValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtDateMappingType>(deep);
    }

    /// <summary>
    /// <para>Date Picker Calendar Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:calendar.</para>
    /// </summary>
    [SchemaAttr(23, "calendar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Calendar : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Calendar class.
        /// </summary>
        public Calendar() : base()
        {
        }

        /// <summary>
        /// <para>Calendar Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CalendarValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Calendar>(deep);
    }

    /// <summary>
    /// <para>Combo Box List Item.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listItem.</para>
    /// </summary>
    [SchemaAttr(23, "listItem")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ListItem : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ListItem class.
        /// </summary>
        public ListItem() : base()
        {
        }

        /// <summary>
        /// <para>List Entry Display Text</para>
        /// <para>Represents the following attribute in the schema: w:displayText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "displayText")]
        [Index(0)]
        public StringValue DisplayText { get; set; }

        /// <summary>
        /// <para>List Entry Value</para>
        /// <para>Represents the following attribute in the schema: w:value</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "value")]
        [Index(1)]
        public StringValue Value { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListItem>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    ///   <item><description>SdtAlias &lt;w:alias></description></item>
    ///   <item><description>Lock &lt;w:lock></description></item>
    ///   <item><description>SdtPlaceholder &lt;w:placeholder></description></item>
    ///   <item><description>ShowingPlaceholder &lt;w:showingPlcHdr></description></item>
    ///   <item><description>DataBinding &lt;w:dataBinding></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.DataBinding &lt;w15:dataBinding></description></item>
    ///   <item><description>TemporarySdt &lt;w:temporary></description></item>
    ///   <item><description>SdtId &lt;w:id></description></item>
    ///   <item><description>Tag &lt;w:tag></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Color &lt;w15:color></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.Appearance &lt;w15:appearance></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked &lt;w15:webExtensionLinked></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated &lt;w15:webExtensionCreated></description></item>
    ///   <item><description>SdtContentEquation &lt;w:equation></description></item>
    ///   <item><description>SdtContentComboBox &lt;w:comboBox></description></item>
    ///   <item><description>SdtContentDate &lt;w:date></description></item>
    ///   <item><description>SdtContentDocPartObject &lt;w:docPartObj></description></item>
    ///   <item><description>SdtContentDocPartList &lt;w:docPartList></description></item>
    ///   <item><description>SdtContentDropDownList &lt;w:dropDownList></description></item>
    ///   <item><description>SdtContentPicture &lt;w:picture></description></item>
    ///   <item><description>SdtContentRichText &lt;w:richText></description></item>
    ///   <item><description>SdtContentText &lt;w:text></description></item>
    ///   <item><description>SdtContentCitation &lt;w:citation></description></item>
    ///   <item><description>SdtContentGroup &lt;w:group></description></item>
    ///   <item><description>SdtContentBibliography &lt;w:bibliography></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty &lt;w14:entityPicker></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox &lt;w14:checkbox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection &lt;w15:repeatingSection></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem &lt;w15:repeatingSectionItem></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(SdtAlias))]
    [ChildElementInfo(typeof(Lock))]
    [ChildElementInfo(typeof(SdtPlaceholder))]
    [ChildElementInfo(typeof(ShowingPlaceholder))]
    [ChildElementInfo(typeof(DataBinding))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.DataBinding), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(TemporarySdt))]
    [ChildElementInfo(typeof(SdtId))]
    [ChildElementInfo(typeof(Tag))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Color), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.Appearance), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(SdtContentEquation))]
    [ChildElementInfo(typeof(SdtContentComboBox))]
    [ChildElementInfo(typeof(SdtContentDate))]
    [ChildElementInfo(typeof(SdtContentDocPartObject))]
    [ChildElementInfo(typeof(SdtContentDocPartList))]
    [ChildElementInfo(typeof(SdtContentDropDownList))]
    [ChildElementInfo(typeof(SdtContentPicture))]
    [ChildElementInfo(typeof(SdtContentRichText))]
    [ChildElementInfo(typeof(SdtContentText))]
    [ChildElementInfo(typeof(SdtContentCitation))]
    [ChildElementInfo(typeof(SdtContentGroup))]
    [ChildElementInfo(typeof(SdtContentBibliography))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem), FileFormatVersions.Office2013)]
    [SchemaAttr(23, "sdtPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtProperties class.
        /// </summary>
        public SdtProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtAlias), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Lock), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtPlaceholder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowingPlaceholder), 0, 1),
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataBinding), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.DataBinding), 0, 1, version: FileFormatVersions.Office2013)
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TemporarySdt), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tag), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.Color), 0, 1, version: FileFormatVersions.Office2013),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.Appearance), 0, 1, version: FileFormatVersions.Office2013),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked), 1, 1, version: FileFormatVersions.Office2013),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated), 1, 1, version: FileFormatVersions.Office2013),
            new CompositeParticle(ParticleType.Choice, 0, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentEquation), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentComboBox), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDate), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartObject), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDropDownList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentPicture), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRichText), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentText), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentCitation), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentGroup), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentBibliography), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem), 1, 1, version: FileFormatVersions.Office2013)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtProperties>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag End Character Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtEndPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunProperties &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunProperties))]
    [SchemaAttr(23, "sdtEndPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtEndCharProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class.
        /// </summary>
        public SdtEndCharProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtEndCharProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtEndCharProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtEndCharProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtEndCharProperties>(deep);
    }

    /// <summary>
    /// <para>Block-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdtContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentBlock : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class.
        /// </summary>
        public SdtContentBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentBlock(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentBlock>(deep);
    }

    /// <summary>
    /// <para>Inline-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    ///   <item><description>CustomXmlRun &lt;w:customXml></description></item>
    ///   <item><description>SimpleField &lt;w:fldSimple></description></item>
    ///   <item><description>Hyperlink &lt;w:hyperlink></description></item>
    ///   <item><description>SdtRun &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>BidirectionalOverride &lt;w:bdo></description></item>
    ///   <item><description>BidirectionalEmbedding &lt;w:dir></description></item>
    ///   <item><description>SubDocumentReference &lt;w:subDoc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [ChildElementInfo(typeof(CustomXmlRun))]
    [ChildElementInfo(typeof(SimpleField))]
    [ChildElementInfo(typeof(Hyperlink))]
    [ChildElementInfo(typeof(SdtRun))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(BidirectionalOverride), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(BidirectionalEmbedding), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SubDocumentReference))]
    [SchemaAttr(23, "sdtContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentRun : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRun class.
        /// </summary>
        public SdtContentRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRun(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 0, 0)
        {
            new CompositeParticle(ParticleType.Group, 1, 1)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRun>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentRunRuby Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlRuby &lt;w:customXml></description></item>
    ///   <item><description>SimpleFieldRuby &lt;w:fldSimple></description></item>
    ///   <item><description>HyperlinkRuby &lt;w:hyperlink></description></item>
    ///   <item><description>Run &lt;w:r></description></item>
    ///   <item><description>SdtRunRuby &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Box &lt;m:box></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Math.Run &lt;m:r></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlRuby))]
    [ChildElementInfo(typeof(SimpleFieldRuby))]
    [ChildElementInfo(typeof(HyperlinkRuby))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(SdtRunRuby))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Paragraph))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.OfficeMath))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Accent))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Bar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Box))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.BorderBox))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Delimiter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.EquationArray))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Fraction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.MathFunction))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.GroupChar))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitLower))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.LimitUpper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Matrix))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Nary))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Phantom))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Radical))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.PreSubSuper))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Subscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.SubSuperscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Superscript))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Math.Run))]
    [SchemaAttr(23, "sdtContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentRunRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class.
        /// </summary>
        public SdtContentRunRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRunRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRunRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRunRuby(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                new CompositeParticle(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                        new CompositeParticle(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRunRuby>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCell &lt;w:tc></description></item>
    ///   <item><description>CustomXmlCell &lt;w:customXml></description></item>
    ///   <item><description>SdtCell &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableCell))]
    [ChildElementInfo(typeof(CustomXmlCell))]
    [ChildElementInfo(typeof(SdtCell))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdtContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentCell : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentCell class.
        /// </summary>
        public SdtContentCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentCell(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentCell>(deep);
    }

    /// <summary>
    /// <para>Row-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableRow &lt;w:tr></description></item>
    ///   <item><description>CustomXmlRow &lt;w:customXml></description></item>
    ///   <item><description>SdtRow &lt;w:sdt></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableRow))]
    [ChildElementInfo(typeof(CustomXmlRow))]
    [ChildElementInfo(typeof(SdtRow))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "sdtContent")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentRow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRow class.
        /// </summary>
        public SdtContentRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRow(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Group, 0, 0)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                    }
                                },
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                        new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRow>(deep);
    }

    /// <summary>
    /// <para>Custom XML Element Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>CustomXmlPlaceholder &lt;w:placeholder></description></item>
    ///   <item><description>CustomXmlAttribute &lt;w:attr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(CustomXmlPlaceholder))]
    [ChildElementInfo(typeof(CustomXmlAttribute))]
    [SchemaAttr(23, "customXmlPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class.
        /// </summary>
        public CustomXmlProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Custom XML Element Placeholder Text.</para>
        /// <para>Represents the following element tag in the schema: w:placeholder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CustomXmlPlaceholder CustomXmlPlaceholder
        {
            get => GetElement<CustomXmlPlaceholder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlAttribute), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlProperties>(deep);
    }

    /// <summary>
    /// <para>Custom XML Attribute.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attr.</para>
    /// </summary>
    [SchemaAttr(23, "attr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CustomXmlAttribute : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlAttribute class.
        /// </summary>
        public CustomXmlAttribute() : base()
        {
        }

        /// <summary>
        /// <para>uri</para>
        /// <para>Represents the following attribute in the schema: w:uri</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "uri")]
        [Index(0)]
        public StringValue Uri { get; set; }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(IsToken = true, IsNcName = true, MaxLength = 255L)]
        [SchemaAttr(23, "name")]
        [Index(1)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(2)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlAttribute>(deep);
    }

    /// <summary>
    /// <para>Grid Column Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridCol.</para>
    /// </summary>
    [SchemaAttr(23, "gridCol")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class GridColumn : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the GridColumn class.
        /// </summary>
        public GridColumn() : base()
        {
        }

        /// <summary>
        /// <para>Grid Column Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "w")]
        [Index(0)]
        public StringValue Width { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridColumn>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Grid Column Definitions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGridChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousTableGrid &lt;w:tblGrid></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousTableGrid))]
    [SchemaAttr(23, "tblGridChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableGridChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGridChange class.
        /// </summary>
        public TableGridChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGridChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGridChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGridChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(0)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Table Grid.</para>
        /// <para>Represents the following element tag in the schema: w:tblGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousTableGrid PreviousTableGrid
        {
            get => GetElement<PreviousTableGrid>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid), 1, 1, version: FileFormatVersions.Office2007),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid), 0, 1, version: FileFormatVersions.Office2010)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGridChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousTableCellProperties &lt;w:tcPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousTableCellProperties))]
    [SchemaAttr(23, "tcPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class.
        /// </summary>
        public TableCellPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousTableCellProperties PreviousTableCellProperties
        {
            get => GetElement<PreviousTableCellProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    ///   <item><description>TableCellWidth &lt;w:tcW></description></item>
    ///   <item><description>GridSpan &lt;w:gridSpan></description></item>
    ///   <item><description>HorizontalMerge &lt;w:hMerge></description></item>
    ///   <item><description>VerticalMerge &lt;w:vMerge></description></item>
    ///   <item><description>TableCellBorders &lt;w:tcBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>NoWrap &lt;w:noWrap></description></item>
    ///   <item><description>TableCellMargin &lt;w:tcMar></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TableCellFitText &lt;w:tcFitText></description></item>
    ///   <item><description>TableCellVerticalAlignment &lt;w:vAlign></description></item>
    ///   <item><description>HideMark &lt;w:hideMark></description></item>
    ///   <item><description>CellInsertion &lt;w:cellIns></description></item>
    ///   <item><description>CellDeletion &lt;w:cellDel></description></item>
    ///   <item><description>CellMerge &lt;w:cellMerge></description></item>
    ///   <item><description>TableCellPropertiesChange &lt;w:tcPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [ChildElementInfo(typeof(TableCellWidth))]
    [ChildElementInfo(typeof(GridSpan))]
    [ChildElementInfo(typeof(HorizontalMerge))]
    [ChildElementInfo(typeof(VerticalMerge))]
    [ChildElementInfo(typeof(TableCellBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(NoWrap))]
    [ChildElementInfo(typeof(TableCellMargin))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TableCellFitText))]
    [ChildElementInfo(typeof(TableCellVerticalAlignment))]
    [ChildElementInfo(typeof(HideMark))]
    [ChildElementInfo(typeof(CellInsertion))]
    [ChildElementInfo(typeof(CellDeletion))]
    [ChildElementInfo(typeof(CellMerge))]
    [ChildElementInfo(typeof(TableCellPropertiesChange))]
    [SchemaAttr(23, "tcPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellProperties class.
        /// </summary>
        public TableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConditionalFormatStyle ConditionalFormatStyle
        {
            get => GetElement<ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tcW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellWidth TableCellWidth
        {
            get => GetElement<TableCellWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GridSpan.</para>
        /// <para>Represents the following element tag in the schema: w:gridSpan.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public GridSpan GridSpan
        {
            get => GetElement<GridSpan>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HorizontalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:hMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HorizontalMerge HorizontalMerge
        {
            get => GetElement<HorizontalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:vMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalMerge VerticalMerge
        {
            get => GetElement<VerticalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellBorders TableCellBorders
        {
            get => GetElement<TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoWrap NoWrap
        {
            get => GetElement<NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMargin TableCellMargin
        {
            get => GetElement<TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellFitText.</para>
        /// <para>Represents the following element tag in the schema: w:tcFitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellFitText TableCellFitText
        {
            get => GetElement<TableCellFitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellVerticalAlignment TableCellVerticalAlignment
        {
            get => GetElement<TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HideMark.</para>
        /// <para>Represents the following element tag in the schema: w:hideMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HideMark HideMark
        {
            get => GetElement<HideMark>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellWidth), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridSpan), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalMerge), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellFitText), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideMark), 0, 1)
                        }
                    }
                },
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellInsertion), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellDeletion), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellMerge), 0, 1)
                        }
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellPropertiesChange), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousTableProperties &lt;w:tblPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousTableProperties))]
    [SchemaAttr(23, "tblPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TablePropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class.
        /// </summary>
        public TablePropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousTableProperties PreviousTableProperties
        {
            get => GetElement<PreviousTableProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrExChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousTablePropertyExceptions &lt;w:tblPrEx></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousTablePropertyExceptions))]
    [SchemaAttr(23, "tblPrExChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TablePropertyExceptionsChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class.
        /// </summary>
        public TablePropertyExceptionsChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptionsChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptionsChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertyExceptionsChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrEx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousTablePropertyExceptions PreviousTablePropertyExceptions
        {
            get => GetElement<PreviousTablePropertyExceptions>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertyExceptionsChange>(deep);
    }

    /// <summary>
    /// <para>Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableStyle &lt;w:tblStyle></description></item>
    ///   <item><description>TablePositionProperties &lt;w:tblpPr></description></item>
    ///   <item><description>TableOverlap &lt;w:tblOverlap></description></item>
    ///   <item><description>BiDiVisual &lt;w:bidiVisual></description></item>
    ///   <item><description>TableWidth &lt;w:tblW></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableLayout &lt;w:tblLayout></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    ///   <item><description>TableLook &lt;w:tblLook></description></item>
    ///   <item><description>TableCaption &lt;w:tblCaption></description></item>
    ///   <item><description>TableDescription &lt;w:tblDescription></description></item>
    ///   <item><description>TablePropertiesChange &lt;w:tblPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableStyle))]
    [ChildElementInfo(typeof(TablePositionProperties))]
    [ChildElementInfo(typeof(TableOverlap))]
    [ChildElementInfo(typeof(BiDiVisual))]
    [ChildElementInfo(typeof(TableWidth))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableLayout))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [ChildElementInfo(typeof(TableLook))]
    [ChildElementInfo(typeof(TableCaption), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(TableDescription), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(TablePropertiesChange))]
    [SchemaAttr(23, "tblPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>
        public TableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>TableStyle.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyle TableStyle
        {
            get => GetElement<TableStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TablePositionProperties.</para>
        /// <para>Represents the following element tag in the schema: w:tblpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TablePositionProperties TablePositionProperties
        {
            get => GetElement<TablePositionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:tblOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableOverlap TableOverlap
        {
            get => GetElement<TableOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDiVisual.</para>
        /// <para>Represents the following element tag in the schema: w:bidiVisual.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDiVisual BiDiVisual
        {
            get => GetElement<BiDiVisual>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableWidth TableWidth
        {
            get => GetElement<TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLayout.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLayout TableLayout
        {
            get => GetElement<TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLook.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLook TableLook
        {
            get => GetElement<TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCaption.</para>
        /// <para>Represents the following element tag in the schema: w:tblCaption.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCaption TableCaption
        {
            get => GetElement<TableCaption>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableDescription.</para>
        /// <para>Represents the following element tag in the schema: w:tblDescription.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableDescription TableDescription
        {
            get => GetElement<TableDescription>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Information for Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TablePropertiesChange TablePropertiesChange
        {
            get => GetElement<TablePropertiesChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyle), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDiVisual), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCaption), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableDescription), 0, 1, version: FileFormatVersions.Office2010)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Grid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GridColumn &lt;w:gridCol></description></item>
    ///   <item><description>TableGridChange &lt;w:tblGridChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(GridColumn))]
    [ChildElementInfo(typeof(TableGridChange))]
    [SchemaAttr(23, "tblGrid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableGrid : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGrid class.
        /// </summary>
        public TableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGrid(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridColumn), 0, 0)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableGridChange), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGrid>(deep);
    }

    /// <summary>
    /// <para>Footnote Placement.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pos.</para>
    /// </summary>
    [SchemaAttr(23, "pos")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnotePosition : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnotePosition class.
        /// </summary>
        public FootnotePosition() : base()
        {
        }

        /// <summary>
        /// <para>Footnote Position Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnotePositionValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnotePosition>(deep);
    }

    /// <summary>
    /// <para>Footnote Numbering Format.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numFmt.</para>
    /// </summary>
    [SchemaAttr(23, "numFmt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingFormat : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingFormat class.
        /// </summary>
        public NumberingFormat() : base()
        {
        }

        /// <summary>
        /// <para>Numbering Format Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues> Val { get; set; }

        /// <summary>
        /// <para>format, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:format</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "format")]
        [Index(1)]
        public StringValue Format { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingFormat>(deep);
    }

    /// <summary>
    /// <para>Endnote Placement.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pos.</para>
    /// </summary>
    [SchemaAttr(23, "pos")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnotePosition : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnotePosition class.
        /// </summary>
        public EndnotePosition() : base()
        {
        }

        /// <summary>
        /// <para>Endnote Position Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.EndnotePositionValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnotePosition>(deep);
    }

    /// <summary>
    /// <para>Special Footnote List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnote.</para>
    /// </summary>
    [SchemaAttr(23, "footnote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteSpecialReference : FootnoteEndnoteSeparatorReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteSpecialReference class.
        /// </summary>
        public FootnoteSpecialReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteSpecialReference>(deep);
    }

    /// <summary>
    /// <para>Special Endnote List.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnote.</para>
    /// </summary>
    [SchemaAttr(23, "endnote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnoteSpecialReference : FootnoteEndnoteSeparatorReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteSpecialReference class.
        /// </summary>
        public EndnoteSpecialReference() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteSpecialReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteSeparatorReferenceType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FootnoteEndnoteSeparatorReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteSeparatorReferenceType class.
        /// </summary>
        protected FootnoteEndnoteSeparatorReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>Footnote/Endnote ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = -2147483648L, MaxInclusive = 32767L)]
        [SchemaAttr(23, "id")]
        [Index(0)]
        public IntegerValue Id { get; set; }
    }

    /// <summary>
    /// <para>Index of Column Containing Unique Values for Record.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:column.</para>
    /// </summary>
    [SchemaAttr(23, "column")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ColumnIndex : UnsignedDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ColumnIndex class.
        /// </summary>
        public ColumnIndex() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnIndex>(deep);
    }

    /// <summary>
    /// <para>Column Delimiter for Data Source.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:colDelim.</para>
    /// </summary>
    [SchemaAttr(23, "colDelim")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ColumnDelimiter : UnsignedDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ColumnDelimiter class.
        /// </summary>
        public ColumnDelimiter() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnDelimiter>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedDecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedDecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedDecimalNumberType class.
        /// </summary>
        protected UnsignedDecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Unique Value for Record.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uniqueTag.</para>
    /// </summary>
    [SchemaAttr(23, "uniqueTag")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UniqueTag : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UniqueTag class.
        /// </summary>
        public UniqueTag() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Base64BinaryValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UniqueTag>(deep);
    }

    /// <summary>
    /// <para>Data About Single Data Source Record.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipientData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Active &lt;w:active></description></item>
    ///   <item><description>ColumnIndex &lt;w:column></description></item>
    ///   <item><description>UniqueTag &lt;w:uniqueTag></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Active))]
    [ChildElementInfo(typeof(ColumnIndex))]
    [ChildElementInfo(typeof(UniqueTag))]
    [SchemaAttr(23, "recipientData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RecipientData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RecipientData class.
        /// </summary>
        public RecipientData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RecipientData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RecipientData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RecipientData(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Record Is Included in Mail Merge.</para>
        /// <para>Represents the following element tag in the schema: w:active.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Active Active
        {
            get => GetElement<Active>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Index of Column Containing Unique Values for Record.</para>
        /// <para>Represents the following element tag in the schema: w:column.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ColumnIndex ColumnIndex
        {
            get => GetElement<ColumnIndex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Unique Value for Record.</para>
        /// <para>Represents the following element tag in the schema: w:uniqueTag.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UniqueTag UniqueTag
        {
            get => GetElement<UniqueTag>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Active), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnIndex), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UniqueTag), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecipientData>(deep);
    }

    /// <summary>
    /// <para>Merge Field Mapping.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    [SchemaAttr(23, "type")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MailMergeFieldType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMergeFieldType class.
        /// </summary>
        public MailMergeFieldType() : base()
        {
        }

        /// <summary>
        /// <para>Merge Field Mapping Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeOdsoFieldValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMergeFieldType>(deep);
    }

    /// <summary>
    /// <para>ODSO Data Source Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    [SchemaAttr(23, "type")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MailMergeSource : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMergeSource class.
        /// </summary>
        public MailMergeSource() : base()
        {
        }

        /// <summary>
        /// <para>Data Source Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeSourceValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMergeSource>(deep);
    }

    /// <summary>
    /// <para>External Data Source to Merge Field Mapping.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fieldMapData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>MailMergeFieldType &lt;w:type></description></item>
    ///   <item><description>Name &lt;w:name></description></item>
    ///   <item><description>MappedName &lt;w:mappedName></description></item>
    ///   <item><description>ColumnIndex &lt;w:column></description></item>
    ///   <item><description>LanguageId &lt;w:lid></description></item>
    ///   <item><description>DynamicAddress &lt;w:dynamicAddress></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(MailMergeFieldType))]
    [ChildElementInfo(typeof(Name))]
    [ChildElementInfo(typeof(MappedName))]
    [ChildElementInfo(typeof(ColumnIndex))]
    [ChildElementInfo(typeof(LanguageId))]
    [ChildElementInfo(typeof(DynamicAddress))]
    [SchemaAttr(23, "fieldMapData")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FieldMapData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldMapData class.
        /// </summary>
        public FieldMapData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldMapData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldMapData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FieldMapData(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Merge Field Mapping.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MailMergeFieldType MailMergeFieldType
        {
            get => GetElement<MailMergeFieldType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Name for Column.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Name Name
        {
            get => GetElement<Name>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Predefined Merge Field Name.</para>
        /// <para>Represents the following element tag in the schema: w:mappedName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MappedName MappedName
        {
            get => GetElement<MappedName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Index of Column Being Mapped.</para>
        /// <para>Represents the following element tag in the schema: w:column.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ColumnIndex ColumnIndex
        {
            get => GetElement<ColumnIndex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merge Field Name Language ID.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LanguageId LanguageId
        {
            get => GetElement<LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Country/Region-Based Address Field Ordering.</para>
        /// <para>Represents the following element tag in the schema: w:dynamicAddress.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DynamicAddress DynamicAddress
        {
            get => GetElement<DynamicAddress>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneAll;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.All, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Name), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MappedName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnIndex), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DynamicAddress), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldMapData>(deep);
    }

    /// <summary>
    /// <para>Source Document Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mainDocumentType.</para>
    /// </summary>
    [SchemaAttr(23, "mainDocumentType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MainDocumentType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MainDocumentType class.
        /// </summary>
        public MainDocumentType() : base()
        {
        }

        /// <summary>
        /// <para>Mail Merge Source Document Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDocumentValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MainDocumentType>(deep);
    }

    /// <summary>
    /// <para>Data Source Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataType.</para>
    /// </summary>
    [SchemaAttr(23, "dataType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DataType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DataType class.
        /// </summary>
        public DataType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDataValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataType>(deep);
    }

    /// <summary>
    /// <para>Merged Document Destination.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:destination.</para>
    /// </summary>
    [SchemaAttr(23, "destination")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Destination : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Destination class.
        /// </summary>
        public Destination() : base()
        {
        }

        /// <summary>
        /// <para>Mail Merge Merged Document Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDestinationValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Destination>(deep);
    }

    /// <summary>
    /// <para>Office Data Source Object Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:odso.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>UdlConnectionString &lt;w:udl></description></item>
    ///   <item><description>DataSourceTableName &lt;w:table></description></item>
    ///   <item><description>SourceReference &lt;w:src></description></item>
    ///   <item><description>ColumnDelimiter &lt;w:colDelim></description></item>
    ///   <item><description>MailMergeSource &lt;w:type></description></item>
    ///   <item><description>FirstRowHeader &lt;w:fHdr></description></item>
    ///   <item><description>FieldMapData &lt;w:fieldMapData></description></item>
    ///   <item><description>RecipientDataReference &lt;w:recipientData></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(UdlConnectionString))]
    [ChildElementInfo(typeof(DataSourceTableName))]
    [ChildElementInfo(typeof(SourceReference))]
    [ChildElementInfo(typeof(ColumnDelimiter))]
    [ChildElementInfo(typeof(MailMergeSource))]
    [ChildElementInfo(typeof(FirstRowHeader))]
    [ChildElementInfo(typeof(FieldMapData))]
    [ChildElementInfo(typeof(RecipientDataReference))]
    [SchemaAttr(23, "odso")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DataSourceObject : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceObject class.
        /// </summary>
        public DataSourceObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataSourceObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataSourceObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataSourceObject(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>UDL Connection String.</para>
        /// <para>Represents the following element tag in the schema: w:udl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UdlConnectionString UdlConnectionString
        {
            get => GetElement<UdlConnectionString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Table Name.</para>
        /// <para>Represents the following element tag in the schema: w:table.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DataSourceTableName DataSourceTableName
        {
            get => GetElement<DataSourceTableName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ODSO Data Source File Path.</para>
        /// <para>Represents the following element tag in the schema: w:src.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SourceReference SourceReference
        {
            get => GetElement<SourceReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Column Delimiter for Data Source.</para>
        /// <para>Represents the following element tag in the schema: w:colDelim.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ColumnDelimiter ColumnDelimiter
        {
            get => GetElement<ColumnDelimiter>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ODSO Data Source Type.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MailMergeSource MailMergeSource
        {
            get => GetElement<MailMergeSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Row of Data Source Contains Column Names.</para>
        /// <para>Represents the following element tag in the schema: w:fHdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FirstRowHeader FirstRowHeader
        {
            get => GetElement<FirstRowHeader>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SourceReference), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMergeSource), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldMapData), 0, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RecipientDataReference), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceObject>(deep);
    }

    /// <summary>
    /// <para>Single Document Variable.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docVar.</para>
    /// </summary>
    [SchemaAttr(23, "docVar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocumentVariable : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentVariable class.
        /// </summary>
        public DocumentVariable() : base()
        {
        }

        /// <summary>
        /// <para>Document Variable Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MinLength = 1L, MaxLength = 255L)]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>Document Variable Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MinLength = 0L, MaxLength = 65280L)]
        [SchemaAttr(23, "val")]
        [Index(1)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentVariable>(deep);
    }

    /// <summary>
    /// <para>Original Document Revision Save ID.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsidRoot.</para>
    /// </summary>
    [SchemaAttr(23, "rsidRoot")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RsidRoot : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the RsidRoot class.
        /// </summary>
        public RsidRoot() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RsidRoot>(deep);
    }

    /// <summary>
    /// <para>Single Session Revision Save ID.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsid.</para>
    /// </summary>
    [SchemaAttr(23, "rsid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Rsid : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the Rsid class.
        /// </summary>
        public Rsid() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rsid>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Identifier.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:nsid.</para>
    /// </summary>
    [SchemaAttr(23, "nsid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Nsid : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the Nsid class.
        /// </summary>
        public Nsid() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Nsid>(deep);
    }

    /// <summary>
    /// <para>Numbering Template Code.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tmpl.</para>
    /// </summary>
    [SchemaAttr(23, "tmpl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TemplateCode : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the TemplateCode class.
        /// </summary>
        public TemplateCode() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TemplateCode>(deep);
    }

    /// <summary>
    /// <para>Defines the LongHexNumberType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LongHexNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LongHexNumberType class.
        /// </summary>
        protected LongHexNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Long Hexadecimal Number Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public HexBinaryValue Val { get; set; }
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunPropertiesBaseStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class.
        /// </summary>
        public RunPropertiesBaseStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesBaseStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesBaseStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesBaseStyle(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunFonts RunFonts
        {
            get => GetElement<RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Bold Bold
        {
            get => GetElement<Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BoldComplexScript BoldComplexScript
        {
            get => GetElement<BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Italic Italic
        {
            get => GetElement<Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ItalicComplexScript ItalicComplexScript
        {
            get => GetElement<ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Caps Caps
        {
            get => GetElement<Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SmallCaps SmallCaps
        {
            get => GetElement<SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Strike Strike
        {
            get => GetElement<Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoubleStrike DoubleStrike
        {
            get => GetElement<DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shadow Shadow
        {
            get => GetElement<Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emboss Emboss
        {
            get => GetElement<Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Imprint Imprint
        {
            get => GetElement<Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoProof NoProof
        {
            get => GetElement<NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Vanish Vanish
        {
            get => GetElement<Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WebHidden WebHidden
        {
            get => GetElement<WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Color Color
        {
            get => GetElement<Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Spacing Spacing
        {
            get => GetElement<Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CharacterScale CharacterScale
        {
            get => GetElement<CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kern Kern
        {
            get => GetElement<Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSize FontSize
        {
            get => GetElement<FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSizeComplexScript FontSizeComplexScript
        {
            get => GetElement<FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Underline Underline
        {
            get => GetElement<Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextEffect TextEffect
        {
            get => GetElement<TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Border Border
        {
            get => GetElement<Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FitText FitText
        {
            get => GetElement<FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalTextAlignment VerticalTextAlignment
        {
            get => GetElement<VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emphasis Emphasis
        {
            get => GetElement<Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Languages Languages
        {
            get => GetElement<Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EastAsianLayout EastAsianLayout
        {
            get => GetElement<EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpecVanish SpecVanish
        {
            get => GetElement<SpecVanish>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesBaseStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>KeepNext &lt;w:keepNext></description></item>
    ///   <item><description>KeepLines &lt;w:keepLines></description></item>
    ///   <item><description>PageBreakBefore &lt;w:pageBreakBefore></description></item>
    ///   <item><description>FrameProperties &lt;w:framePr></description></item>
    ///   <item><description>WidowControl &lt;w:widowControl></description></item>
    ///   <item><description>NumberingProperties &lt;w:numPr></description></item>
    ///   <item><description>SuppressLineNumbers &lt;w:suppressLineNumbers></description></item>
    ///   <item><description>ParagraphBorders &lt;w:pBdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>Tabs &lt;w:tabs></description></item>
    ///   <item><description>SuppressAutoHyphens &lt;w:suppressAutoHyphens></description></item>
    ///   <item><description>Kinsoku &lt;w:kinsoku></description></item>
    ///   <item><description>WordWrap &lt;w:wordWrap></description></item>
    ///   <item><description>OverflowPunctuation &lt;w:overflowPunct></description></item>
    ///   <item><description>TopLinePunctuation &lt;w:topLinePunct></description></item>
    ///   <item><description>AutoSpaceDE &lt;w:autoSpaceDE></description></item>
    ///   <item><description>AutoSpaceDN &lt;w:autoSpaceDN></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>AdjustRightIndent &lt;w:adjustRightInd></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>SpacingBetweenLines &lt;w:spacing></description></item>
    ///   <item><description>Indentation &lt;w:ind></description></item>
    ///   <item><description>ContextualSpacing &lt;w:contextualSpacing></description></item>
    ///   <item><description>MirrorIndents &lt;w:mirrorIndents></description></item>
    ///   <item><description>SuppressOverlap &lt;w:suppressOverlap></description></item>
    ///   <item><description>Justification &lt;w:jc></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TextAlignment &lt;w:textAlignment></description></item>
    ///   <item><description>TextBoxTightWrap &lt;w:textboxTightWrap></description></item>
    ///   <item><description>OutlineLevel &lt;w:outlineLvl></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(KeepNext))]
    [ChildElementInfo(typeof(KeepLines))]
    [ChildElementInfo(typeof(PageBreakBefore))]
    [ChildElementInfo(typeof(FrameProperties))]
    [ChildElementInfo(typeof(WidowControl))]
    [ChildElementInfo(typeof(NumberingProperties))]
    [ChildElementInfo(typeof(SuppressLineNumbers))]
    [ChildElementInfo(typeof(ParagraphBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(Tabs))]
    [ChildElementInfo(typeof(SuppressAutoHyphens))]
    [ChildElementInfo(typeof(Kinsoku))]
    [ChildElementInfo(typeof(WordWrap))]
    [ChildElementInfo(typeof(OverflowPunctuation))]
    [ChildElementInfo(typeof(TopLinePunctuation))]
    [ChildElementInfo(typeof(AutoSpaceDE))]
    [ChildElementInfo(typeof(AutoSpaceDN))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(AdjustRightIndent))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(SpacingBetweenLines))]
    [ChildElementInfo(typeof(Indentation))]
    [ChildElementInfo(typeof(ContextualSpacing))]
    [ChildElementInfo(typeof(MirrorIndents))]
    [ChildElementInfo(typeof(SuppressOverlap))]
    [ChildElementInfo(typeof(Justification))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TextAlignment))]
    [ChildElementInfo(typeof(TextBoxTightWrap))]
    [ChildElementInfo(typeof(OutlineLevel))]
    [SchemaAttr(23, "pPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphPropertiesBaseStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class.
        /// </summary>
        public ParagraphPropertiesBaseStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesBaseStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesBaseStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesBaseStyle(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepNext KeepNext
        {
            get => GetElement<KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepLines KeepLines
        {
            get => GetElement<KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBreakBefore PageBreakBefore
        {
            get => GetElement<PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameProperties FrameProperties
        {
            get => GetElement<FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WidowControl WidowControl
        {
            get => GetElement<WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingProperties NumberingProperties
        {
            get => GetElement<NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressLineNumbers SuppressLineNumbers
        {
            get => GetElement<SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphBorders ParagraphBorders
        {
            get => GetElement<ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Tabs Tabs
        {
            get => GetElement<Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressAutoHyphens SuppressAutoHyphens
        {
            get => GetElement<SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kinsoku Kinsoku
        {
            get => GetElement<Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordWrap WordWrap
        {
            get => GetElement<WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OverflowPunctuation OverflowPunctuation
        {
            get => GetElement<OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLinePunctuation TopLinePunctuation
        {
            get => GetElement<TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDE AutoSpaceDE
        {
            get => GetElement<AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDN AutoSpaceDN
        {
            get => GetElement<AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustRightIndent AdjustRightIndent
        {
            get => GetElement<AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingBetweenLines SpacingBetweenLines
        {
            get => GetElement<SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Indentation Indentation
        {
            get => GetElement<Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ContextualSpacing ContextualSpacing
        {
            get => GetElement<ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorIndents MirrorIndents
        {
            get => GetElement<MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressOverlap SuppressOverlap
        {
            get => GetElement<SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Justification Justification
        {
            get => GetElement<Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextAlignment TextAlignment
        {
            get => GetElement<TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxTightWrap TextBoxTightWrap
        {
            get => GetElement<TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OutlineLevel OutlineLevel
        {
            get => GetElement<OutlineLevel>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesBaseStyle>(deep);
    }

    /// <summary>
    /// <para>Default Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrDefault.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunPropertiesBaseStyle &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunPropertiesBaseStyle))]
    [SchemaAttr(23, "rPrDefault")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RunPropertiesDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class.
        /// </summary>
        public RunPropertiesDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesDefault(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunPropertiesBaseStyle RunPropertiesBaseStyle
        {
            get => GetElement<RunPropertiesBaseStyle>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesDefault>(deep);
    }

    /// <summary>
    /// <para>Default Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPrDefault.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphPropertiesBaseStyle &lt;w:pPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphPropertiesBaseStyle))]
    [SchemaAttr(23, "pPrDefault")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphPropertiesDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class.
        /// </summary>
        public ParagraphPropertiesDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesDefault(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphPropertiesBaseStyle ParagraphPropertiesBaseStyle
        {
            get => GetElement<ParagraphPropertiesBaseStyle>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesDefault>(deep);
    }

    /// <summary>
    /// <para>Left and Right Margin for Frame.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marW.</para>
    /// </summary>
    [SchemaAttr(23, "marW")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MarginWidth : PixelsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the MarginWidth class.
        /// </summary>
        public MarginWidth() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MarginWidth>(deep);
    }

    /// <summary>
    /// <para>Top and Bottom Margin for Frame.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marH.</para>
    /// </summary>
    [SchemaAttr(23, "marH")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MarginHeight : PixelsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the MarginHeight class.
        /// </summary>
        public MarginHeight() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MarginHeight>(deep);
    }

    /// <summary>
    /// <para>Defines the PixelsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PixelsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PixelsMeasureType class.
        /// </summary>
        protected PixelsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Measurement in Pixels</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Scrollbar Display Option.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:scrollbar.</para>
    /// </summary>
    [SchemaAttr(23, "scrollbar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ScrollbarVisibility : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ScrollbarVisibility class.
        /// </summary>
        public ScrollbarVisibility() : base()
        {
        }

        /// <summary>
        /// <para>Scrollbar Display Option Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameScrollbarVisibilityValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScrollbarVisibility>(deep);
    }

    /// <summary>
    /// <para>Frameset Splitter Width.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:w.</para>
    /// </summary>
    [SchemaAttr(23, "w")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Width : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the Width class.
        /// </summary>
        public Width() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Width>(deep);
    }

    /// <summary>
    /// <para>Hyphenation Zone.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyphenationZone.</para>
    /// </summary>
    [SchemaAttr(23, "hyphenationZone")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HyphenationZone : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the HyphenationZone class.
        /// </summary>
        public HyphenationZone() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyphenationZone>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Horizontal Grid Unit Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridHorizontalSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "drawingGridHorizontalSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DrawingGridHorizontalSpacing : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridHorizontalSpacing class.
        /// </summary>
        public DrawingGridHorizontalSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridHorizontalSpacing>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Vertical Grid Unit Size.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridVerticalSpacing.</para>
    /// </summary>
    [SchemaAttr(23, "drawingGridVerticalSpacing")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DrawingGridVerticalSpacing : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridVerticalSpacing class.
        /// </summary>
        public DrawingGridVerticalSpacing() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridVerticalSpacing>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Horizontal Origin Point.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridHorizontalOrigin.</para>
    /// </summary>
    [SchemaAttr(23, "drawingGridHorizontalOrigin")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DrawingGridHorizontalOrigin : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridHorizontalOrigin class.
        /// </summary>
        public DrawingGridHorizontalOrigin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridHorizontalOrigin>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Vertical Origin Point.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridVerticalOrigin.</para>
    /// </summary>
    [SchemaAttr(23, "drawingGridVerticalOrigin")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DrawingGridVerticalOrigin : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridVerticalOrigin class.
        /// </summary>
        public DrawingGridVerticalOrigin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridVerticalOrigin>(deep);
    }

    /// <summary>
    /// <para>Defines the TwipsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TwipsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TwipsMeasureType class.
        /// </summary>
        protected TwipsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Measurement in Twentieths of a Point</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Frameset Splitter Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:framesetSplitbar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Width &lt;w:w></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>NoBorder &lt;w:noBorder></description></item>
    ///   <item><description>FlatBorders &lt;w:flatBorders></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Width))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(NoBorder))]
    [ChildElementInfo(typeof(FlatBorders))]
    [SchemaAttr(23, "framesetSplitbar")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FramesetSplitbar : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class.
        /// </summary>
        public FramesetSplitbar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FramesetSplitbar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FramesetSplitbar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FramesetSplitbar(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Frameset Splitter Width.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Width Width
        {
            get => GetElement<Width>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Color Color
        {
            get => GetElement<Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Frameset Splitters.</para>
        /// <para>Represents the following element tag in the schema: w:noBorder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoBorder NoBorder
        {
            get => GetElement<NoBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Border Style.</para>
        /// <para>Represents the following element tag in the schema: w:flatBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FlatBorders FlatBorders
        {
            get => GetElement<FlatBorders>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Width), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FlatBorders), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FramesetSplitbar>(deep);
    }

    /// <summary>
    /// <para>Frameset Layout.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frameLayout.</para>
    /// </summary>
    [SchemaAttr(23, "frameLayout")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FrameLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FrameLayout class.
        /// </summary>
        public FrameLayout() : base()
        {
        }

        /// <summary>
        /// <para>Frameset Layout Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameLayoutValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameLayout>(deep);
    }

    /// <summary>
    /// <para>Nested Frameset Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frameset.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FrameSize &lt;w:sz></description></item>
    ///   <item><description>FramesetSplitbar &lt;w:framesetSplitbar></description></item>
    ///   <item><description>FrameLayout &lt;w:frameLayout></description></item>
    ///   <item><description>Frameset &lt;w:frameset></description></item>
    ///   <item><description>Frame &lt;w:frame></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FrameSize))]
    [ChildElementInfo(typeof(FramesetSplitbar))]
    [ChildElementInfo(typeof(FrameLayout))]
    [ChildElementInfo(typeof(Frameset))]
    [ChildElementInfo(typeof(Frame))]
    [SchemaAttr(23, "frameset")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Frameset : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Frameset class.
        /// </summary>
        public Frameset() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frameset(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frameset(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Frameset(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Nested Frameset Size.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameSize FrameSize
        {
            get => GetElement<FrameSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Properties.</para>
        /// <para>Represents the following element tag in the schema: w:framesetSplitbar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FramesetSplitbar FramesetSplitbar
        {
            get => GetElement<FramesetSplitbar>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Layout.</para>
        /// <para>Represents the following element tag in the schema: w:frameLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameLayout FrameLayout
        {
            get => GetElement<FrameLayout>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameSize), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameLayout), 0, 1),
            new CompositeParticle(ParticleType.Sequence, 1, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frameset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frame), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Frameset>(deep);
    }

    /// <summary>
    /// <para>Single Frame Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frame.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FrameSize &lt;w:sz></description></item>
    ///   <item><description>FrameName &lt;w:name></description></item>
    ///   <item><description>SourceFileReference &lt;w:sourceFileName></description></item>
    ///   <item><description>MarginWidth &lt;w:marW></description></item>
    ///   <item><description>MarginHeight &lt;w:marH></description></item>
    ///   <item><description>ScrollbarVisibility &lt;w:scrollbar></description></item>
    ///   <item><description>NoResizeAllowed &lt;w:noResizeAllowed></description></item>
    ///   <item><description>LinkedToFile &lt;w:linkedToFile></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FrameSize))]
    [ChildElementInfo(typeof(FrameName))]
    [ChildElementInfo(typeof(SourceFileReference))]
    [ChildElementInfo(typeof(MarginWidth))]
    [ChildElementInfo(typeof(MarginHeight))]
    [ChildElementInfo(typeof(ScrollbarVisibility))]
    [ChildElementInfo(typeof(NoResizeAllowed))]
    [ChildElementInfo(typeof(LinkedToFile))]
    [SchemaAttr(23, "frame")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Frame : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Frame class.
        /// </summary>
        public Frame() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frame(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frame(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Frame(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Frame Size.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameSize FrameSize
        {
            get => GetElement<FrameSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frame Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameName FrameName
        {
            get => GetElement<FrameName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Source File for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:sourceFileName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SourceFileReference SourceFileReference
        {
            get => GetElement<SourceFileReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left and Right Margin for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:marW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MarginWidth MarginWidth
        {
            get => GetElement<MarginWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top and Bottom Margin for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:marH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MarginHeight MarginHeight
        {
            get => GetElement<MarginHeight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scrollbar Display Option.</para>
        /// <para>Represents the following element tag in the schema: w:scrollbar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ScrollbarVisibility ScrollbarVisibility
        {
            get => GetElement<ScrollbarVisibility>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frame Cannot Be Resized.</para>
        /// <para>Represents the following element tag in the schema: w:noResizeAllowed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoResizeAllowed NoResizeAllowed
        {
            get => GetElement<NoResizeAllowed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Maintain Link to Existing File.</para>
        /// <para>Represents the following element tag in the schema: w:linkedToFile.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LinkedToFile LinkedToFile
        {
            get => GetElement<LinkedToFile>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameSize), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SourceFileReference), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MarginWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MarginHeight), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkedToFile), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Frame>(deep);
    }

    /// <summary>
    /// <para>Content Between Numbering Symbol and Paragraph Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suff.</para>
    /// </summary>
    [SchemaAttr(23, "suff")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelSuffix : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelSuffix class.
        /// </summary>
        public LevelSuffix() : base()
        {
        }

        /// <summary>
        /// <para>Character Type Between Numbering and Text</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelSuffixValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelSuffix>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Text.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlText.</para>
    /// </summary>
    [SchemaAttr(23, "lvlText")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelText class.
        /// </summary>
        public LevelText() : base()
        {
        }

        /// <summary>
        /// <para>Level Text</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>Level Text Is Null Character</para>
        /// <para>Represents the following attribute in the schema: w:null</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "null")]
        [Index(1)]
        public OnOffValue Null { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelText>(deep);
    }

    /// <summary>
    /// <para>Legacy Numbering Level Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:legacy.</para>
    /// </summary>
    [SchemaAttr(23, "legacy")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LegacyNumbering : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LegacyNumbering class.
        /// </summary>
        public LegacyNumbering() : base()
        {
        }

        /// <summary>
        /// <para>Use Legacy Numbering Properties</para>
        /// <para>Represents the following attribute in the schema: w:legacy</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "legacy")]
        [Index(0)]
        public OnOffValue Legacy { get; set; }

        /// <summary>
        /// <para>Legacy Spacing</para>
        /// <para>Represents the following attribute in the schema: w:legacySpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(UInt32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(UInt32Value), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "legacySpace")]
        [Index(1)]
        public StringValue LegacySpace { get; set; }

        /// <summary>
        /// <para>Legacy Indent</para>
        /// <para>Represents the following attribute in the schema: w:legacyIndent</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "legacyIndent")]
        [Index(2)]
        public StringValue LegacyIndent { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LegacyNumbering>(deep);
    }

    /// <summary>
    /// <para>Justification.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlJc.</para>
    /// </summary>
    [SchemaAttr(23, "lvlJc")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelJustification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelJustification class.
        /// </summary>
        public LevelJustification() : base()
        {
        }

        /// <summary>
        /// <para>Alignment Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelJustificationValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelJustification>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Associated Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphStyleId &lt;w:pStyle></description></item>
    ///   <item><description>KeepNext &lt;w:keepNext></description></item>
    ///   <item><description>KeepLines &lt;w:keepLines></description></item>
    ///   <item><description>PageBreakBefore &lt;w:pageBreakBefore></description></item>
    ///   <item><description>FrameProperties &lt;w:framePr></description></item>
    ///   <item><description>WidowControl &lt;w:widowControl></description></item>
    ///   <item><description>NumberingProperties &lt;w:numPr></description></item>
    ///   <item><description>SuppressLineNumbers &lt;w:suppressLineNumbers></description></item>
    ///   <item><description>ParagraphBorders &lt;w:pBdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>Tabs &lt;w:tabs></description></item>
    ///   <item><description>SuppressAutoHyphens &lt;w:suppressAutoHyphens></description></item>
    ///   <item><description>Kinsoku &lt;w:kinsoku></description></item>
    ///   <item><description>WordWrap &lt;w:wordWrap></description></item>
    ///   <item><description>OverflowPunctuation &lt;w:overflowPunct></description></item>
    ///   <item><description>TopLinePunctuation &lt;w:topLinePunct></description></item>
    ///   <item><description>AutoSpaceDE &lt;w:autoSpaceDE></description></item>
    ///   <item><description>AutoSpaceDN &lt;w:autoSpaceDN></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>AdjustRightIndent &lt;w:adjustRightInd></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>SpacingBetweenLines &lt;w:spacing></description></item>
    ///   <item><description>Indentation &lt;w:ind></description></item>
    ///   <item><description>ContextualSpacing &lt;w:contextualSpacing></description></item>
    ///   <item><description>MirrorIndents &lt;w:mirrorIndents></description></item>
    ///   <item><description>SuppressOverlap &lt;w:suppressOverlap></description></item>
    ///   <item><description>Justification &lt;w:jc></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TextAlignment &lt;w:textAlignment></description></item>
    ///   <item><description>TextBoxTightWrap &lt;w:textboxTightWrap></description></item>
    ///   <item><description>OutlineLevel &lt;w:outlineLvl></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphStyleId))]
    [ChildElementInfo(typeof(KeepNext))]
    [ChildElementInfo(typeof(KeepLines))]
    [ChildElementInfo(typeof(PageBreakBefore))]
    [ChildElementInfo(typeof(FrameProperties))]
    [ChildElementInfo(typeof(WidowControl))]
    [ChildElementInfo(typeof(NumberingProperties))]
    [ChildElementInfo(typeof(SuppressLineNumbers))]
    [ChildElementInfo(typeof(ParagraphBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(Tabs))]
    [ChildElementInfo(typeof(SuppressAutoHyphens))]
    [ChildElementInfo(typeof(Kinsoku))]
    [ChildElementInfo(typeof(WordWrap))]
    [ChildElementInfo(typeof(OverflowPunctuation))]
    [ChildElementInfo(typeof(TopLinePunctuation))]
    [ChildElementInfo(typeof(AutoSpaceDE))]
    [ChildElementInfo(typeof(AutoSpaceDN))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(AdjustRightIndent))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(SpacingBetweenLines))]
    [ChildElementInfo(typeof(Indentation))]
    [ChildElementInfo(typeof(ContextualSpacing))]
    [ChildElementInfo(typeof(MirrorIndents))]
    [ChildElementInfo(typeof(SuppressOverlap))]
    [ChildElementInfo(typeof(Justification))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TextAlignment))]
    [ChildElementInfo(typeof(TextBoxTightWrap))]
    [ChildElementInfo(typeof(OutlineLevel))]
    [SchemaAttr(23, "pPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class.
        /// </summary>
        public PreviousParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphStyleId ParagraphStyleId
        {
            get => GetElement<ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepNext KeepNext
        {
            get => GetElement<KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepLines KeepLines
        {
            get => GetElement<KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBreakBefore PageBreakBefore
        {
            get => GetElement<PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameProperties FrameProperties
        {
            get => GetElement<FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WidowControl WidowControl
        {
            get => GetElement<WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingProperties NumberingProperties
        {
            get => GetElement<NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressLineNumbers SuppressLineNumbers
        {
            get => GetElement<SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphBorders ParagraphBorders
        {
            get => GetElement<ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Tabs Tabs
        {
            get => GetElement<Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressAutoHyphens SuppressAutoHyphens
        {
            get => GetElement<SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kinsoku Kinsoku
        {
            get => GetElement<Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordWrap WordWrap
        {
            get => GetElement<WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OverflowPunctuation OverflowPunctuation
        {
            get => GetElement<OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLinePunctuation TopLinePunctuation
        {
            get => GetElement<TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDE AutoSpaceDE
        {
            get => GetElement<AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDN AutoSpaceDN
        {
            get => GetElement<AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustRightIndent AdjustRightIndent
        {
            get => GetElement<AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingBetweenLines SpacingBetweenLines
        {
            get => GetElement<SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Indentation Indentation
        {
            get => GetElement<Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ContextualSpacing ContextualSpacing
        {
            get => GetElement<ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorIndents MirrorIndents
        {
            get => GetElement<MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressOverlap SuppressOverlap
        {
            get => GetElement<SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Justification Justification
        {
            get => GetElement<Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextAlignment TextAlignment
        {
            get => GetElement<TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxTightWrap TextBoxTightWrap
        {
            get => GetElement<TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OutlineLevel OutlineLevel
        {
            get => GetElement<OutlineLevel>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Numbering Symbol Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>RightToLeftText &lt;w:rtl></description></item>
    ///   <item><description>ComplexScript &lt;w:cs></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(RightToLeftText))]
    [ChildElementInfo(typeof(ComplexScript))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingSymbolRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class.
        /// </summary>
        public NumberingSymbolRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingSymbolRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingSymbolRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingSymbolRunProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunFonts RunFonts
        {
            get => GetElement<RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Bold Bold
        {
            get => GetElement<Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BoldComplexScript BoldComplexScript
        {
            get => GetElement<BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Italic Italic
        {
            get => GetElement<Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ItalicComplexScript ItalicComplexScript
        {
            get => GetElement<ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Caps Caps
        {
            get => GetElement<Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SmallCaps SmallCaps
        {
            get => GetElement<SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Strike Strike
        {
            get => GetElement<Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoubleStrike DoubleStrike
        {
            get => GetElement<DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shadow Shadow
        {
            get => GetElement<Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emboss Emboss
        {
            get => GetElement<Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Imprint Imprint
        {
            get => GetElement<Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoProof NoProof
        {
            get => GetElement<NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Vanish Vanish
        {
            get => GetElement<Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WebHidden WebHidden
        {
            get => GetElement<WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Color Color
        {
            get => GetElement<Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Spacing Spacing
        {
            get => GetElement<Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CharacterScale CharacterScale
        {
            get => GetElement<CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kern Kern
        {
            get => GetElement<Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSize FontSize
        {
            get => GetElement<FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSizeComplexScript FontSizeComplexScript
        {
            get => GetElement<FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Underline Underline
        {
            get => GetElement<Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextEffect TextEffect
        {
            get => GetElement<TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Border Border
        {
            get => GetElement<Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FitText FitText
        {
            get => GetElement<FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalTextAlignment VerticalTextAlignment
        {
            get => GetElement<VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RightToLeftText.</para>
        /// <para>Represents the following element tag in the schema: w:rtl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightToLeftText RightToLeftText
        {
            get => GetElement<RightToLeftText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ComplexScript ComplexScript
        {
            get => GetElement<ComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emphasis Emphasis
        {
            get => GetElement<Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Languages Languages
        {
            get => GetElement<Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EastAsianLayout EastAsianLayout
        {
            get => GetElement<EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpecVanish SpecVanish
        {
            get => GetElement<SpecVanish>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingSymbolRunProperties>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:multiLevelType.</para>
    /// </summary>
    [SchemaAttr(23, "multiLevelType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MultiLevelType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MultiLevelType class.
        /// </summary>
        public MultiLevelType() : base()
        {
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MultiLevelValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MultiLevelType>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>StartNumberingValue &lt;w:start></description></item>
    ///   <item><description>NumberingFormat &lt;w:numFmt></description></item>
    ///   <item><description>LevelRestart &lt;w:lvlRestart></description></item>
    ///   <item><description>ParagraphStyleIdInLevel &lt;w:pStyle></description></item>
    ///   <item><description>IsLegalNumberingStyle &lt;w:isLgl></description></item>
    ///   <item><description>LevelSuffix &lt;w:suff></description></item>
    ///   <item><description>LevelText &lt;w:lvlText></description></item>
    ///   <item><description>LevelPictureBulletId &lt;w:lvlPicBulletId></description></item>
    ///   <item><description>LegacyNumbering &lt;w:legacy></description></item>
    ///   <item><description>LevelJustification &lt;w:lvlJc></description></item>
    ///   <item><description>PreviousParagraphProperties &lt;w:pPr></description></item>
    ///   <item><description>NumberingSymbolRunProperties &lt;w:rPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(StartNumberingValue))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(LevelRestart))]
    [ChildElementInfo(typeof(ParagraphStyleIdInLevel))]
    [ChildElementInfo(typeof(IsLegalNumberingStyle))]
    [ChildElementInfo(typeof(LevelSuffix))]
    [ChildElementInfo(typeof(LevelText))]
    [ChildElementInfo(typeof(LevelPictureBulletId))]
    [ChildElementInfo(typeof(LegacyNumbering))]
    [ChildElementInfo(typeof(LevelJustification))]
    [ChildElementInfo(typeof(PreviousParagraphProperties))]
    [ChildElementInfo(typeof(NumberingSymbolRunProperties))]
    [SchemaAttr(23, "lvl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Level : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Level class.
        /// </summary>
        public Level() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Level</para>
        /// <para>Represents the following attribute in the schema: w:ilvl</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "ilvl")]
        [Index(0)]
        public Int32Value LevelIndex { get; set; }

        /// <summary>
        /// <para>Template Code</para>
        /// <para>Represents the following attribute in the schema: w:tplc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "tplc")]
        [Index(1)]
        public HexBinaryValue TemplateCode { get; set; }

        /// <summary>
        /// <para>Tentative Numbering</para>
        /// <para>Represents the following attribute in the schema: w:tentative</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "tentative")]
        [Index(2)]
        public OnOffValue Tentative { get; set; }

        /// <summary>
        /// <para>Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartNumberingValue StartNumberingValue
        {
            get => GetElement<StartNumberingValue>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingFormat NumberingFormat
        {
            get => GetElement<NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Restart Numbering Level Symbol.</para>
        /// <para>Represents the following element tag in the schema: w:lvlRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LevelRestart LevelRestart
        {
            get => GetElement<LevelRestart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Style's Associated Numbering Level.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphStyleIdInLevel ParagraphStyleIdInLevel
        {
            get => GetElement<ParagraphStyleIdInLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display All Levels Using Arabic Numerals.</para>
        /// <para>Represents the following element tag in the schema: w:isLgl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public IsLegalNumberingStyle IsLegalNumberingStyle
        {
            get => GetElement<IsLegalNumberingStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Content Between Numbering Symbol and Paragraph Text.</para>
        /// <para>Represents the following element tag in the schema: w:suff.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LevelSuffix LevelSuffix
        {
            get => GetElement<LevelSuffix>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Text.</para>
        /// <para>Represents the following element tag in the schema: w:lvlText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LevelText LevelText
        {
            get => GetElement<LevelText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Picture Numbering Symbol Definition Reference.</para>
        /// <para>Represents the following element tag in the schema: w:lvlPicBulletId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LevelPictureBulletId LevelPictureBulletId
        {
            get => GetElement<LevelPictureBulletId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Legacy Numbering Level Properties.</para>
        /// <para>Represents the following element tag in the schema: w:legacy.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LegacyNumbering LegacyNumbering
        {
            get => GetElement<LegacyNumbering>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:lvlJc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LevelJustification LevelJustification
        {
            get => GetElement<LevelJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Associated Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousParagraphProperties PreviousParagraphProperties
        {
            get => GetElement<PreviousParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Symbol Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingSymbolRunProperties NumberingSymbolRunProperties
        {
            get => GetElement<NumberingSymbolRunProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelRestart), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelSuffix), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelText), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelJustification), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Definition Override.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlOverride.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>StartOverrideNumberingValue &lt;w:startOverride></description></item>
    ///   <item><description>Level &lt;w:lvl></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(StartOverrideNumberingValue))]
    [ChildElementInfo(typeof(Level))]
    [SchemaAttr(23, "lvlOverride")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LevelOverride : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelOverride class.
        /// </summary>
        public LevelOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LevelOverride(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Level ID</para>
        /// <para>Represents the following attribute in the schema: w:ilvl</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "ilvl")]
        [Index(0)]
        public Int32Value LevelIndex { get; set; }

        /// <summary>
        /// <para>Numbering Level Starting Value Override.</para>
        /// <para>Represents the following element tag in the schema: w:startOverride.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StartOverrideNumberingValue StartOverrideNumberingValue
        {
            get => GetElement<StartOverrideNumberingValue>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Override Definition.</para>
        /// <para>Represents the following element tag in the schema: w:lvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Level Level
        {
            get => GetElement<Level>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Level), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelOverride>(deep);
    }

    /// <summary>
    /// <para>Picture Numbering Symbol Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numPicBullet.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PictureBulletBase &lt;w:pict></description></item>
    ///   <item><description>Drawing &lt;w:drawing></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PictureBulletBase))]
    [ChildElementInfo(typeof(Drawing))]
    [SchemaAttr(23, "numPicBullet")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingPictureBullet : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class.
        /// </summary>
        public NumberingPictureBullet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingPictureBullet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingPictureBullet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingPictureBullet(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>numPicBulletId</para>
        /// <para>Represents the following attribute in the schema: w:numPicBulletId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "numPicBulletId")]
        [Index(0)]
        public Int32Value NumberingPictureBulletId { get; set; }

        /// <summary>
        /// <para>PictureBulletBase.</para>
        /// <para>Represents the following element tag in the schema: w:pict.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PictureBulletBase PictureBulletBase
        {
            get => GetElement<PictureBulletBase>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Drawing.</para>
        /// <para>Represents the following element tag in the schema: w:drawing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Drawing Drawing
        {
            get => GetElement<Drawing>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingPictureBullet>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:abstractNum.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Nsid &lt;w:nsid></description></item>
    ///   <item><description>MultiLevelType &lt;w:multiLevelType></description></item>
    ///   <item><description>TemplateCode &lt;w:tmpl></description></item>
    ///   <item><description>AbstractNumDefinitionName &lt;w:name></description></item>
    ///   <item><description>StyleLink &lt;w:styleLink></description></item>
    ///   <item><description>NumberingStyleLink &lt;w:numStyleLink></description></item>
    ///   <item><description>Level &lt;w:lvl></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Nsid))]
    [ChildElementInfo(typeof(MultiLevelType))]
    [ChildElementInfo(typeof(TemplateCode))]
    [ChildElementInfo(typeof(AbstractNumDefinitionName))]
    [ChildElementInfo(typeof(StyleLink))]
    [ChildElementInfo(typeof(NumberingStyleLink))]
    [ChildElementInfo(typeof(Level))]
    [SchemaAttr(23, "abstractNum")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AbstractNum : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNum class.
        /// </summary>
        public AbstractNum() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AbstractNum(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AbstractNum(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AbstractNum(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Abstract Numbering Definition ID</para>
        /// <para>Represents the following attribute in the schema: w:abstractNumId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "abstractNumId")]
        [Index(0)]
        public Int32Value AbstractNumberId { get; set; }

        /// <summary>
        /// <para>Abstract Numbering Definition Identifier.</para>
        /// <para>Represents the following element tag in the schema: w:nsid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Nsid Nsid
        {
            get => GetElement<Nsid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Type.</para>
        /// <para>Represents the following element tag in the schema: w:multiLevelType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MultiLevelType MultiLevelType
        {
            get => GetElement<MultiLevelType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Template Code.</para>
        /// <para>Represents the following element tag in the schema: w:tmpl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TemplateCode TemplateCode
        {
            get => GetElement<TemplateCode>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AbstractNumDefinitionName AbstractNumDefinitionName
        {
            get => GetElement<AbstractNumDefinitionName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:styleLink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleLink StyleLink
        {
            get => GetElement<StyleLink>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Style Reference.</para>
        /// <para>Represents the following element tag in the schema: w:numStyleLink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingStyleLink NumberingStyleLink
        {
            get => GetElement<NumberingStyleLink>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Nsid), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MultiLevelType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TemplateCode), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLink), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Level), 0, 9)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNum>(deep);
    }

    /// <summary>
    /// <para>Numbering Definition Instance.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:num.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AbstractNumId &lt;w:abstractNumId></description></item>
    ///   <item><description>LevelOverride &lt;w:lvlOverride></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AbstractNumId))]
    [ChildElementInfo(typeof(LevelOverride))]
    [SchemaAttr(23, "num")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NumberingInstance : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingInstance class.
        /// </summary>
        public NumberingInstance() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingInstance(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingInstance(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingInstance(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Definition Instance ID</para>
        /// <para>Represents the following attribute in the schema: w:numId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "numId")]
        [Index(0)]
        public Int32Value NumberID { get; set; }

        /// <summary>
        /// <para>Abstract Numbering Definition Reference.</para>
        /// <para>Represents the following element tag in the schema: w:abstractNumId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AbstractNumId AbstractNumId
        {
            get => GetElement<AbstractNumId>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNumId), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelOverride), 0, 9)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingInstance>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>KeepNext &lt;w:keepNext></description></item>
    ///   <item><description>KeepLines &lt;w:keepLines></description></item>
    ///   <item><description>PageBreakBefore &lt;w:pageBreakBefore></description></item>
    ///   <item><description>FrameProperties &lt;w:framePr></description></item>
    ///   <item><description>WidowControl &lt;w:widowControl></description></item>
    ///   <item><description>NumberingProperties &lt;w:numPr></description></item>
    ///   <item><description>SuppressLineNumbers &lt;w:suppressLineNumbers></description></item>
    ///   <item><description>ParagraphBorders &lt;w:pBdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>Tabs &lt;w:tabs></description></item>
    ///   <item><description>SuppressAutoHyphens &lt;w:suppressAutoHyphens></description></item>
    ///   <item><description>Kinsoku &lt;w:kinsoku></description></item>
    ///   <item><description>WordWrap &lt;w:wordWrap></description></item>
    ///   <item><description>OverflowPunctuation &lt;w:overflowPunct></description></item>
    ///   <item><description>TopLinePunctuation &lt;w:topLinePunct></description></item>
    ///   <item><description>AutoSpaceDE &lt;w:autoSpaceDE></description></item>
    ///   <item><description>AutoSpaceDN &lt;w:autoSpaceDN></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>AdjustRightIndent &lt;w:adjustRightInd></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>SpacingBetweenLines &lt;w:spacing></description></item>
    ///   <item><description>Indentation &lt;w:ind></description></item>
    ///   <item><description>ContextualSpacing &lt;w:contextualSpacing></description></item>
    ///   <item><description>MirrorIndents &lt;w:mirrorIndents></description></item>
    ///   <item><description>SuppressOverlap &lt;w:suppressOverlap></description></item>
    ///   <item><description>Justification &lt;w:jc></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TextAlignment &lt;w:textAlignment></description></item>
    ///   <item><description>TextBoxTightWrap &lt;w:textboxTightWrap></description></item>
    ///   <item><description>OutlineLevel &lt;w:outlineLvl></description></item>
    ///   <item><description>ParagraphPropertiesChange &lt;w:pPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(KeepNext))]
    [ChildElementInfo(typeof(KeepLines))]
    [ChildElementInfo(typeof(PageBreakBefore))]
    [ChildElementInfo(typeof(FrameProperties))]
    [ChildElementInfo(typeof(WidowControl))]
    [ChildElementInfo(typeof(NumberingProperties))]
    [ChildElementInfo(typeof(SuppressLineNumbers))]
    [ChildElementInfo(typeof(ParagraphBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(Tabs))]
    [ChildElementInfo(typeof(SuppressAutoHyphens))]
    [ChildElementInfo(typeof(Kinsoku))]
    [ChildElementInfo(typeof(WordWrap))]
    [ChildElementInfo(typeof(OverflowPunctuation))]
    [ChildElementInfo(typeof(TopLinePunctuation))]
    [ChildElementInfo(typeof(AutoSpaceDE))]
    [ChildElementInfo(typeof(AutoSpaceDN))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(AdjustRightIndent))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(SpacingBetweenLines))]
    [ChildElementInfo(typeof(Indentation))]
    [ChildElementInfo(typeof(ContextualSpacing))]
    [ChildElementInfo(typeof(MirrorIndents))]
    [ChildElementInfo(typeof(SuppressOverlap))]
    [ChildElementInfo(typeof(Justification))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TextAlignment))]
    [ChildElementInfo(typeof(TextBoxTightWrap))]
    [ChildElementInfo(typeof(OutlineLevel))]
    [ChildElementInfo(typeof(ParagraphPropertiesChange))]
    [SchemaAttr(23, "pPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class.
        /// </summary>
        public StyleParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepNext KeepNext
        {
            get => GetElement<KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepLines KeepLines
        {
            get => GetElement<KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBreakBefore PageBreakBefore
        {
            get => GetElement<PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameProperties FrameProperties
        {
            get => GetElement<FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WidowControl WidowControl
        {
            get => GetElement<WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingProperties NumberingProperties
        {
            get => GetElement<NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressLineNumbers SuppressLineNumbers
        {
            get => GetElement<SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphBorders ParagraphBorders
        {
            get => GetElement<ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Tabs Tabs
        {
            get => GetElement<Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressAutoHyphens SuppressAutoHyphens
        {
            get => GetElement<SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kinsoku Kinsoku
        {
            get => GetElement<Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordWrap WordWrap
        {
            get => GetElement<WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OverflowPunctuation OverflowPunctuation
        {
            get => GetElement<OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLinePunctuation TopLinePunctuation
        {
            get => GetElement<TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDE AutoSpaceDE
        {
            get => GetElement<AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDN AutoSpaceDN
        {
            get => GetElement<AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustRightIndent AdjustRightIndent
        {
            get => GetElement<AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingBetweenLines SpacingBetweenLines
        {
            get => GetElement<SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Indentation Indentation
        {
            get => GetElement<Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ContextualSpacing ContextualSpacing
        {
            get => GetElement<ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorIndents MirrorIndents
        {
            get => GetElement<MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressOverlap SuppressOverlap
        {
            get => GetElement<SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Justification Justification
        {
            get => GetElement<Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextAlignment TextAlignment
        {
            get => GetElement<TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxTightWrap TextBoxTightWrap
        {
            get => GetElement<TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OutlineLevel OutlineLevel
        {
            get => GetElement<OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:pPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphPropertiesChange ParagraphPropertiesChange
        {
            get => GetElement<ParagraphPropertiesChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange), 0, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [SchemaAttr(23, "tblPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleConditionalFormattingTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Row Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Hidden &lt;w:hidden></description></item>
    ///   <item><description>CantSplit &lt;w:cantSplit></description></item>
    ///   <item><description>TableHeader &lt;w:tblHeader></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Hidden))]
    [ChildElementInfo(typeof(CantSplit))]
    [ChildElementInfo(typeof(TableHeader))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableJustification))]
    [SchemaAttr(23, "trPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleConditionalFormattingTableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableRowProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 0)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableCellBorders &lt;w:tcBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>NoWrap &lt;w:noWrap></description></item>
    ///   <item><description>TableCellMargin &lt;w:tcMar></description></item>
    ///   <item><description>TableCellVerticalAlignment &lt;w:vAlign></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableCellBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(NoWrap))]
    [ChildElementInfo(typeof(TableCellMargin))]
    [ChildElementInfo(typeof(TableCellVerticalAlignment))]
    [SchemaAttr(23, "tcPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleConditionalFormattingTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellBorders TableCellBorders
        {
            get => GetElement<TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoWrap NoWrap
        {
            get => GetElement<NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMargin TableCellMargin
        {
            get => GetElement<TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellVerticalAlignment TableCellVerticalAlignment
        {
            get => GetElement<TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Primary Style Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleName class.
        /// </summary>
        public StyleName() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Pattern = "[^,]*")]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleName>(deep);
    }

    /// <summary>
    /// <para>Optional User Interface Sorting Order.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uiPriority.</para>
    /// </summary>
    [SchemaAttr(23, "uiPriority")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class UIPriority : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UIPriority class.
        /// </summary>
        public UIPriority() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 99L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UIPriority>(deep);
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunFonts &lt;w:rFonts></description></item>
    ///   <item><description>Bold &lt;w:b></description></item>
    ///   <item><description>BoldComplexScript &lt;w:bCs></description></item>
    ///   <item><description>Italic &lt;w:i></description></item>
    ///   <item><description>ItalicComplexScript &lt;w:iCs></description></item>
    ///   <item><description>Caps &lt;w:caps></description></item>
    ///   <item><description>SmallCaps &lt;w:smallCaps></description></item>
    ///   <item><description>Strike &lt;w:strike></description></item>
    ///   <item><description>DoubleStrike &lt;w:dstrike></description></item>
    ///   <item><description>Outline &lt;w:outline></description></item>
    ///   <item><description>Shadow &lt;w:shadow></description></item>
    ///   <item><description>Emboss &lt;w:emboss></description></item>
    ///   <item><description>Imprint &lt;w:imprint></description></item>
    ///   <item><description>NoProof &lt;w:noProof></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>Vanish &lt;w:vanish></description></item>
    ///   <item><description>WebHidden &lt;w:webHidden></description></item>
    ///   <item><description>Color &lt;w:color></description></item>
    ///   <item><description>Spacing &lt;w:spacing></description></item>
    ///   <item><description>CharacterScale &lt;w:w></description></item>
    ///   <item><description>Kern &lt;w:kern></description></item>
    ///   <item><description>Position &lt;w:position></description></item>
    ///   <item><description>FontSize &lt;w:sz></description></item>
    ///   <item><description>FontSizeComplexScript &lt;w:szCs></description></item>
    ///   <item><description>Underline &lt;w:u></description></item>
    ///   <item><description>TextEffect &lt;w:effect></description></item>
    ///   <item><description>Border &lt;w:bdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>FitText &lt;w:fitText></description></item>
    ///   <item><description>VerticalTextAlignment &lt;w:vertAlign></description></item>
    ///   <item><description>Emphasis &lt;w:em></description></item>
    ///   <item><description>Languages &lt;w:lang></description></item>
    ///   <item><description>EastAsianLayout &lt;w:eastAsianLayout></description></item>
    ///   <item><description>SpecVanish &lt;w:specVanish></description></item>
    ///   <item><description>RunPropertiesChange &lt;w:rPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunFonts))]
    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(BoldComplexScript))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(ItalicComplexScript))]
    [ChildElementInfo(typeof(Caps))]
    [ChildElementInfo(typeof(SmallCaps))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(DoubleStrike))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Emboss))]
    [ChildElementInfo(typeof(Imprint))]
    [ChildElementInfo(typeof(NoProof))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(Vanish))]
    [ChildElementInfo(typeof(WebHidden))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(Spacing))]
    [ChildElementInfo(typeof(CharacterScale))]
    [ChildElementInfo(typeof(Kern))]
    [ChildElementInfo(typeof(Position))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(FontSizeComplexScript))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(TextEffect))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(FitText))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(Emphasis))]
    [ChildElementInfo(typeof(Languages))]
    [ChildElementInfo(typeof(EastAsianLayout))]
    [ChildElementInfo(typeof(SpecVanish))]
    [ChildElementInfo(typeof(RunPropertiesChange))]
    [SchemaAttr(23, "rPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class.
        /// </summary>
        public StyleRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleRunProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunFonts RunFonts
        {
            get => GetElement<RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Bold Bold
        {
            get => GetElement<Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BoldComplexScript BoldComplexScript
        {
            get => GetElement<BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Italic Italic
        {
            get => GetElement<Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ItalicComplexScript ItalicComplexScript
        {
            get => GetElement<ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Caps Caps
        {
            get => GetElement<Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SmallCaps SmallCaps
        {
            get => GetElement<SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Strike Strike
        {
            get => GetElement<Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoubleStrike DoubleStrike
        {
            get => GetElement<DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Outline Outline
        {
            get => GetElement<Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shadow Shadow
        {
            get => GetElement<Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emboss Emboss
        {
            get => GetElement<Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Imprint Imprint
        {
            get => GetElement<Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoProof NoProof
        {
            get => GetElement<NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Vanish Vanish
        {
            get => GetElement<Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WebHidden WebHidden
        {
            get => GetElement<WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Color Color
        {
            get => GetElement<Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Spacing Spacing
        {
            get => GetElement<Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CharacterScale CharacterScale
        {
            get => GetElement<CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kern Kern
        {
            get => GetElement<Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Position Position
        {
            get => GetElement<Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSize FontSize
        {
            get => GetElement<FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSizeComplexScript FontSizeComplexScript
        {
            get => GetElement<FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Underline Underline
        {
            get => GetElement<Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextEffect TextEffect
        {
            get => GetElement<TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Border Border
        {
            get => GetElement<Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FitText FitText
        {
            get => GetElement<FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public VerticalTextAlignment VerticalTextAlignment
        {
            get => GetElement<VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Emphasis Emphasis
        {
            get => GetElement<Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Languages Languages
        {
            get => GetElement<Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EastAsianLayout EastAsianLayout
        {
            get => GetElement<EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpecVanish SpecVanish
        {
            get => GetElement<SpecVanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:rPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunPropertiesChange RunPropertiesChange
        {
            get => GetElement<RunPropertiesChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                }
                            },
                            new CompositeParticle(ParticleType.Group, 0, 1)
                            {
                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                }
                            }
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange), 0, 1)
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleRunProperties>(deep);
    }

    /// <summary>
    /// <para>Style Table Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableStyleRowBandSize &lt;w:tblStyleRowBandSize></description></item>
    ///   <item><description>TableStyleColumnBandSize &lt;w:tblStyleColBandSize></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableStyleRowBandSize))]
    [ChildElementInfo(typeof(TableStyleColumnBandSize))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [SchemaAttr(23, "tblPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class.
        /// </summary>
        public StyleTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleTableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>TableStyleRowBandSize.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyleRowBandSize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleRowBandSize TableStyleRowBandSize
        {
            get => GetElement<TableStyleRowBandSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableStyleColumnBandSize.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyleColBandSize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleColumnBandSize TableStyleColumnBandSize
        {
            get => GetElement<TableStyleColumnBandSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleTableProperties>(deep);
    }

    /// <summary>
    /// <para>Style Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>NoWrap &lt;w:noWrap></description></item>
    ///   <item><description>TableCellMargin &lt;w:tcMar></description></item>
    ///   <item><description>TableCellVerticalAlignment &lt;w:vAlign></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(NoWrap))]
    [ChildElementInfo(typeof(TableCellMargin))]
    [ChildElementInfo(typeof(TableCellVerticalAlignment))]
    [SchemaAttr(23, "tcPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StyleTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class.
        /// </summary>
        public StyleTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoWrap NoWrap
        {
            get => GetElement<NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMargin TableCellMargin
        {
            get => GetElement<TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellVerticalAlignment TableCellVerticalAlignment
        {
            get => GetElement<TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Group, 0, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Style Conditional Table Formatting Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStylePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>StyleParagraphProperties &lt;w:pPr></description></item>
    ///   <item><description>RunPropertiesBaseStyle &lt;w:rPr></description></item>
    ///   <item><description>TableStyleConditionalFormattingTableProperties &lt;w:tblPr></description></item>
    ///   <item><description>TableStyleConditionalFormattingTableRowProperties &lt;w:trPr></description></item>
    ///   <item><description>TableStyleConditionalFormattingTableCellProperties &lt;w:tcPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(StyleParagraphProperties))]
    [ChildElementInfo(typeof(RunPropertiesBaseStyle))]
    [ChildElementInfo(typeof(TableStyleConditionalFormattingTableProperties))]
    [ChildElementInfo(typeof(TableStyleConditionalFormattingTableRowProperties))]
    [ChildElementInfo(typeof(TableStyleConditionalFormattingTableCellProperties))]
    [SchemaAttr(23, "tblStylePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableStyleProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class.
        /// </summary>
        public TableStyleProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableStyleOverrideValues> Type { get; set; }

        /// <summary>
        /// <para>Table Style Conditional Formatting Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleParagraphProperties StyleParagraphProperties
        {
            get => GetElement<StyleParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunPropertiesBaseStyle RunPropertiesBaseStyle
        {
            get => GetElement<RunPropertiesBaseStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleConditionalFormattingTableProperties TableStyleConditionalFormattingTableProperties
        {
            get => GetElement<TableStyleConditionalFormattingTableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleConditionalFormattingTableRowProperties TableStyleConditionalFormattingTableRowProperties
        {
            get => GetElement<TableStyleConditionalFormattingTableRowProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleConditionalFormattingTableCellProperties TableStyleConditionalFormattingTableCellProperties
        {
            get => GetElement<TableStyleConditionalFormattingTableCellProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleProperties>(deep);
    }

    /// <summary>
    /// <para>Latent Style Exception.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lsdException.</para>
    /// </summary>
    [SchemaAttr(23, "lsdException")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LatentStyleExceptionInfo : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LatentStyleExceptionInfo class.
        /// </summary>
        public LatentStyleExceptionInfo() : base()
        {
        }

        /// <summary>
        /// <para>Primary Style Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>Latent Style Locking Setting</para>
        /// <para>Represents the following attribute in the schema: w:locked</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "locked")]
        [Index(1)]
        public OnOffValue Locked { get; set; }

        /// <summary>
        /// <para>Override default sorting order</para>
        /// <para>Represents the following attribute in the schema: w:uiPriority</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 99L)]
        [SchemaAttr(23, "uiPriority")]
        [Index(2)]
        public Int32Value UiPriority { get; set; }

        /// <summary>
        /// <para>Semi hidden text override</para>
        /// <para>Represents the following attribute in the schema: w:semiHidden</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "semiHidden")]
        [Index(3)]
        public OnOffValue SemiHidden { get; set; }

        /// <summary>
        /// <para>Unhide when used</para>
        /// <para>Represents the following attribute in the schema: w:unhideWhenUsed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "unhideWhenUsed")]
        [Index(4)]
        public OnOffValue UnhideWhenUsed { get; set; }

        /// <summary>
        /// <para>Latent Style Primary Style Setting</para>
        /// <para>Represents the following attribute in the schema: w:qFormat</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "qFormat")]
        [Index(5)]
        public OnOffValue PrimaryStyle { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatentStyleExceptionInfo>(deep);
    }

    /// <summary>
    /// <para>Document Default Paragraph and Run Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RunPropertiesDefault &lt;w:rPrDefault></description></item>
    ///   <item><description>ParagraphPropertiesDefault &lt;w:pPrDefault></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RunPropertiesDefault))]
    [ChildElementInfo(typeof(ParagraphPropertiesDefault))]
    [SchemaAttr(23, "docDefaults")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocDefaults : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocDefaults class.
        /// </summary>
        public DocDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocDefaults(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Default Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPrDefault.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RunPropertiesDefault RunPropertiesDefault
        {
            get => GetElement<RunPropertiesDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPrDefault.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphPropertiesDefault ParagraphPropertiesDefault
        {
            get => GetElement<ParagraphPropertiesDefault>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocDefaults>(deep);
    }

    /// <summary>
    /// <para>Latent Style Information.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:latentStyles.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>LatentStyleExceptionInfo &lt;w:lsdException></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(LatentStyleExceptionInfo))]
    [SchemaAttr(23, "latentStyles")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LatentStyles : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LatentStyles class.
        /// </summary>
        public LatentStyles() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LatentStyles(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LatentStyles(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LatentStyles(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Default Style Locking Setting</para>
        /// <para>Represents the following attribute in the schema: w:defLockedState</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "defLockedState")]
        [Index(0)]
        public OnOffValue DefaultLockedState { get; set; }

        /// <summary>
        /// <para>Default User Interface Priority Setting</para>
        /// <para>Represents the following attribute in the schema: w:defUIPriority</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 99L)]
        [SchemaAttr(23, "defUIPriority")]
        [Index(1)]
        public Int32Value DefaultUiPriority { get; set; }

        /// <summary>
        /// <para>Default Semi-Hidden Setting</para>
        /// <para>Represents the following attribute in the schema: w:defSemiHidden</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "defSemiHidden")]
        [Index(2)]
        public OnOffValue DefaultSemiHidden { get; set; }

        /// <summary>
        /// <para>Default Hidden Until Used Setting</para>
        /// <para>Represents the following attribute in the schema: w:defUnhideWhenUsed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "defUnhideWhenUsed")]
        [Index(3)]
        public OnOffValue DefaultUnhideWhenUsed { get; set; }

        /// <summary>
        /// <para>Default Primary Style Setting</para>
        /// <para>Represents the following attribute in the schema: w:defQFormat</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "defQFormat")]
        [Index(4)]
        public OnOffValue DefaultPrimaryStyle { get; set; }

        /// <summary>
        /// <para>Latent Style Count</para>
        /// <para>Represents the following attribute in the schema: w:count</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "count")]
        [Index(5)]
        public Int32Value Count { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LatentStyleExceptionInfo), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatentStyles>(deep);
    }

    /// <summary>
    /// <para>Style Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:style.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>StyleName &lt;w:name></description></item>
    ///   <item><description>Aliases &lt;w:aliases></description></item>
    ///   <item><description>BasedOn &lt;w:basedOn></description></item>
    ///   <item><description>NextParagraphStyle &lt;w:next></description></item>
    ///   <item><description>LinkedStyle &lt;w:link></description></item>
    ///   <item><description>AutoRedefine &lt;w:autoRedefine></description></item>
    ///   <item><description>StyleHidden &lt;w:hidden></description></item>
    ///   <item><description>UIPriority &lt;w:uiPriority></description></item>
    ///   <item><description>SemiHidden &lt;w:semiHidden></description></item>
    ///   <item><description>UnhideWhenUsed &lt;w:unhideWhenUsed></description></item>
    ///   <item><description>PrimaryStyle &lt;w:qFormat></description></item>
    ///   <item><description>Locked &lt;w:locked></description></item>
    ///   <item><description>Personal &lt;w:personal></description></item>
    ///   <item><description>PersonalCompose &lt;w:personalCompose></description></item>
    ///   <item><description>PersonalReply &lt;w:personalReply></description></item>
    ///   <item><description>Rsid &lt;w:rsid></description></item>
    ///   <item><description>StyleParagraphProperties &lt;w:pPr></description></item>
    ///   <item><description>StyleRunProperties &lt;w:rPr></description></item>
    ///   <item><description>StyleTableProperties &lt;w:tblPr></description></item>
    ///   <item><description>TableStyleConditionalFormattingTableRowProperties &lt;w:trPr></description></item>
    ///   <item><description>StyleTableCellProperties &lt;w:tcPr></description></item>
    ///   <item><description>TableStyleProperties &lt;w:tblStylePr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(StyleName))]
    [ChildElementInfo(typeof(Aliases))]
    [ChildElementInfo(typeof(BasedOn))]
    [ChildElementInfo(typeof(NextParagraphStyle))]
    [ChildElementInfo(typeof(LinkedStyle))]
    [ChildElementInfo(typeof(AutoRedefine))]
    [ChildElementInfo(typeof(StyleHidden))]
    [ChildElementInfo(typeof(UIPriority))]
    [ChildElementInfo(typeof(SemiHidden))]
    [ChildElementInfo(typeof(UnhideWhenUsed))]
    [ChildElementInfo(typeof(PrimaryStyle))]
    [ChildElementInfo(typeof(Locked))]
    [ChildElementInfo(typeof(Personal))]
    [ChildElementInfo(typeof(PersonalCompose))]
    [ChildElementInfo(typeof(PersonalReply))]
    [ChildElementInfo(typeof(Rsid))]
    [ChildElementInfo(typeof(StyleParagraphProperties))]
    [ChildElementInfo(typeof(StyleRunProperties))]
    [ChildElementInfo(typeof(StyleTableProperties))]
    [ChildElementInfo(typeof(TableStyleConditionalFormattingTableRowProperties))]
    [ChildElementInfo(typeof(StyleTableCellProperties))]
    [ChildElementInfo(typeof(TableStyleProperties))]
    [SchemaAttr(23, "style")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Style : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Style class.
        /// </summary>
        public Style() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Style(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Style(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Style(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.StyleValues> Type { get; set; }

        /// <summary>
        /// <para>Style ID</para>
        /// <para>Represents the following attribute in the schema: w:styleId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 253L)]
        [SchemaAttr(23, "styleId")]
        [Index(1)]
        public StringValue StyleId { get; set; }

        /// <summary>
        /// <para>Default Style</para>
        /// <para>Represents the following attribute in the schema: w:default</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "default")]
        [Index(2)]
        public OnOffValue Default { get; set; }

        /// <summary>
        /// <para>User-Defined Style</para>
        /// <para>Represents the following attribute in the schema: w:customStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "customStyle")]
        [Index(3)]
        public OnOffValue CustomStyle { get; set; }

        /// <summary>
        /// <para>Primary Style Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleName StyleName
        {
            get => GetElement<StyleName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Alternate Style Names.</para>
        /// <para>Represents the following element tag in the schema: w:aliases.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Aliases Aliases
        {
            get => GetElement<Aliases>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Parent Style ID.</para>
        /// <para>Represents the following element tag in the schema: w:basedOn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BasedOn BasedOn
        {
            get => GetElement<BasedOn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style For Next Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:next.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NextParagraphStyle NextParagraphStyle
        {
            get => GetElement<NextParagraphStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Linked Style Reference.</para>
        /// <para>Represents the following element tag in the schema: w:link.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LinkedStyle LinkedStyle
        {
            get => GetElement<LinkedStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Automatically Merge User Formatting Into Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:autoRedefine.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoRedefine AutoRedefine
        {
            get => GetElement<AutoRedefine>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hide Style From User Interface.</para>
        /// <para>Represents the following element tag in the schema: w:hidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleHidden StyleHidden
        {
            get => GetElement<StyleHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Optional User Interface Sorting Order.</para>
        /// <para>Represents the following element tag in the schema: w:uiPriority.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UIPriority UIPriority
        {
            get => GetElement<UIPriority>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hide Style From Main User Interface.</para>
        /// <para>Represents the following element tag in the schema: w:semiHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SemiHidden SemiHidden
        {
            get => GetElement<SemiHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Semi-Hidden Property When Style Is Used.</para>
        /// <para>Represents the following element tag in the schema: w:unhideWhenUsed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UnhideWhenUsed UnhideWhenUsed
        {
            get => GetElement<UnhideWhenUsed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Primary Style.</para>
        /// <para>Represents the following element tag in the schema: w:qFormat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrimaryStyle PrimaryStyle
        {
            get => GetElement<PrimaryStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Cannot Be Applied.</para>
        /// <para>Represents the following element tag in the schema: w:locked.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Locked Locked
        {
            get => GetElement<Locked>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Text Style.</para>
        /// <para>Represents the following element tag in the schema: w:personal.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Personal Personal
        {
            get => GetElement<Personal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Composition Style.</para>
        /// <para>Represents the following element tag in the schema: w:personalCompose.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PersonalCompose PersonalCompose
        {
            get => GetElement<PersonalCompose>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Reply Style.</para>
        /// <para>Represents the following element tag in the schema: w:personalReply.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PersonalReply PersonalReply
        {
            get => GetElement<PersonalReply>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:rsid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Rsid Rsid
        {
            get => GetElement<Rsid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleParagraphProperties StyleParagraphProperties
        {
            get => GetElement<StyleParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleRunProperties StyleRunProperties
        {
            get => GetElement<StyleRunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleTableProperties StyleTableProperties
        {
            get => GetElement<StyleTableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableStyleConditionalFormattingTableRowProperties TableStyleConditionalFormattingTableRowProperties
        {
            get => GetElement<TableStyleConditionalFormattingTableRowProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleTableCellProperties StyleTableCellProperties
        {
            get => GetElement<StyleTableCellProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Aliases), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BasedOn), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkedStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoRedefine), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleHidden), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UIPriority), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SemiHidden), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Locked), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Personal), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PersonalCompose), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PersonalReply), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsid), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleProperties), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Style>(deep);
    }

    /// <summary>
    /// <para>Properties for a Single Font.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:font.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltName &lt;w:altName></description></item>
    ///   <item><description>Panose1Number &lt;w:panose1></description></item>
    ///   <item><description>FontCharSet &lt;w:charset></description></item>
    ///   <item><description>FontFamily &lt;w:family></description></item>
    ///   <item><description>NotTrueType &lt;w:notTrueType></description></item>
    ///   <item><description>Pitch &lt;w:pitch></description></item>
    ///   <item><description>FontSignature &lt;w:sig></description></item>
    ///   <item><description>EmbedRegularFont &lt;w:embedRegular></description></item>
    ///   <item><description>EmbedBoldFont &lt;w:embedBold></description></item>
    ///   <item><description>EmbedItalicFont &lt;w:embedItalic></description></item>
    ///   <item><description>EmbedBoldItalicFont &lt;w:embedBoldItalic></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltName))]
    [ChildElementInfo(typeof(Panose1Number))]
    [ChildElementInfo(typeof(FontCharSet))]
    [ChildElementInfo(typeof(FontFamily))]
    [ChildElementInfo(typeof(NotTrueType))]
    [ChildElementInfo(typeof(Pitch))]
    [ChildElementInfo(typeof(FontSignature))]
    [ChildElementInfo(typeof(EmbedRegularFont))]
    [ChildElementInfo(typeof(EmbedBoldFont))]
    [ChildElementInfo(typeof(EmbedItalicFont))]
    [ChildElementInfo(typeof(EmbedBoldItalicFont))]
    [SchemaAttr(23, "font")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Font : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Font class.
        /// </summary>
        public Font() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Font(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Font(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Font(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>AltName.</para>
        /// <para>Represents the following element tag in the schema: w:altName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AltName AltName
        {
            get => GetElement<AltName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Panose1Number.</para>
        /// <para>Represents the following element tag in the schema: w:panose1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Panose1Number Panose1Number
        {
            get => GetElement<Panose1Number>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontCharSet.</para>
        /// <para>Represents the following element tag in the schema: w:charset.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontCharSet FontCharSet
        {
            get => GetElement<FontCharSet>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontFamily.</para>
        /// <para>Represents the following element tag in the schema: w:family.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontFamily FontFamily
        {
            get => GetElement<FontFamily>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NotTrueType.</para>
        /// <para>Represents the following element tag in the schema: w:notTrueType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NotTrueType NotTrueType
        {
            get => GetElement<NotTrueType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pitch.</para>
        /// <para>Represents the following element tag in the schema: w:pitch.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Pitch Pitch
        {
            get => GetElement<Pitch>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSignature.</para>
        /// <para>Represents the following element tag in the schema: w:sig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FontSignature FontSignature
        {
            get => GetElement<FontSignature>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedRegularFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedRegular.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedRegularFont EmbedRegularFont
        {
            get => GetElement<EmbedRegularFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedBoldFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedBold.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedBoldFont EmbedBoldFont
        {
            get => GetElement<EmbedBoldFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedItalicFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedItalic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedItalicFont EmbedItalicFont
        {
            get => GetElement<EmbedItalicFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedBoldItalicFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedBoldItalic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EmbedBoldItalicFont EmbedBoldItalicFont
        {
            get => GetElement<EmbedBoldItalicFont>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Panose1Number), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontCharSet), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontFamily), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NotTrueType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Pitch), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSignature), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Font>(deep);
    }

    /// <summary>
    /// <para>Left Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marLeft.</para>
    /// </summary>
    [SchemaAttr(23, "marLeft")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class LeftMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the LeftMarginDiv class.
        /// </summary>
        public LeftMarginDiv() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Right Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marRight.</para>
    /// </summary>
    [SchemaAttr(23, "marRight")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RightMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the RightMarginDiv class.
        /// </summary>
        public RightMarginDiv() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Top Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marTop.</para>
    /// </summary>
    [SchemaAttr(23, "marTop")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TopMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the TopMarginDiv class.
        /// </summary>
        public TopMarginDiv() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Bottom Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marBottom.</para>
    /// </summary>
    [SchemaAttr(23, "marBottom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BottomMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the BottomMarginDiv class.
        /// </summary>
        public BottomMarginDiv() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Defines the SignedTwipsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class SignedTwipsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SignedTwipsMeasureType class.
        /// </summary>
        protected SignedTwipsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Positive or Negative Value in Twentieths of a Point</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }
    }

    /// <summary>
    /// <para>Set of Borders for HTML div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TopBorder &lt;w:top></description></item>
    ///   <item><description>LeftBorder &lt;w:left></description></item>
    ///   <item><description>BottomBorder &lt;w:bottom></description></item>
    ///   <item><description>RightBorder &lt;w:right></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [SchemaAttr(23, "divBdr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DivBorder : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DivBorder class.
        /// </summary>
        public DivBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DivBorder(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Top Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopBorder TopBorder
        {
            get => GetElement<TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftBorder LeftBorder
        {
            get => GetElement<LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomBorder BottomBorder
        {
            get => GetElement<BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightBorder RightBorder
        {
            get => GetElement<RightBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivBorder>(deep);
    }

    /// <summary>
    /// <para>Child div Elements Contained within Current div.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divsChild.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Div &lt;w:div></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "divsChild")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DivsChild : DivsType
    {
        /// <summary>
        /// Initializes a new instance of the DivsChild class.
        /// </summary>
        public DivsChild() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivsChild(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivsChild(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DivsChild(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Div), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivsChild>(deep);
    }

    /// <summary>
    /// <para>Defines the Divs Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Div &lt;w:div></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "divs")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Divs : DivsType
    {
        /// <summary>
        /// Initializes a new instance of the Divs class.
        /// </summary>
        public Divs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Divs(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Divs(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Divs(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Div), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Divs>(deep);
    }

    /// <summary>
    /// <para>Defines the DivsType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Div &lt;w:div></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Div))]
    public abstract partial class DivsType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DivsType class.
        /// </summary>
        protected DivsType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DivsType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DivsType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected DivsType(string outerXml) : base(outerXml)
        {
        }
    }

    /// <summary>
    /// <para>Information About Single HTML div Element.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:div.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>BlockQuote &lt;w:blockQuote></description></item>
    ///   <item><description>BodyDiv &lt;w:bodyDiv></description></item>
    ///   <item><description>LeftMarginDiv &lt;w:marLeft></description></item>
    ///   <item><description>RightMarginDiv &lt;w:marRight></description></item>
    ///   <item><description>TopMarginDiv &lt;w:marTop></description></item>
    ///   <item><description>BottomMarginDiv &lt;w:marBottom></description></item>
    ///   <item><description>DivBorder &lt;w:divBdr></description></item>
    ///   <item><description>DivsChild &lt;w:divsChild></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(BlockQuote))]
    [ChildElementInfo(typeof(BodyDiv))]
    [ChildElementInfo(typeof(LeftMarginDiv))]
    [ChildElementInfo(typeof(RightMarginDiv))]
    [ChildElementInfo(typeof(TopMarginDiv))]
    [ChildElementInfo(typeof(BottomMarginDiv))]
    [ChildElementInfo(typeof(DivBorder))]
    [ChildElementInfo(typeof(DivsChild))]
    [SchemaAttr(23, "div")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Div : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Div class.
        /// </summary>
        public Div() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Div(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Div(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Div(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>div Data ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 1L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -1L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(0)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Data for HTML blockquote Element.</para>
        /// <para>Represents the following element tag in the schema: w:blockQuote.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BlockQuote BlockQuote
        {
            get => GetElement<BlockQuote>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data for HTML body Element.</para>
        /// <para>Represents the following element tag in the schema: w:bodyDiv.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BodyDiv BodyDiv
        {
            get => GetElement<BodyDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marLeft.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LeftMarginDiv LeftMarginDiv
        {
            get => GetElement<LeftMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marRight.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RightMarginDiv RightMarginDiv
        {
            get => GetElement<RightMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marTop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopMarginDiv TopMarginDiv
        {
            get => GetElement<TopMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marBottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BottomMarginDiv BottomMarginDiv
        {
            get => GetElement<BottomMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Set of Borders for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:divBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DivBorder DivBorder
        {
            get => GetElement<DivBorder>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BlockQuote), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BodyDiv), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivBorder), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivsChild), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Div>(deep);
    }

    /// <summary>
    /// <para>Comment Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comment.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [SchemaAttr(23, "comment")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Comment : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Comment class.
        /// </summary>
        public Comment() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comment(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comment(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Comment(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>initials</para>
        /// <para>Represents the following attribute in the schema: w:initials</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 9L)]
        [SchemaAttr(23, "initials")]
        [Index(0)]
        public StringValue Initials { get; set; }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(1)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(2)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(3)]
        public StringValue Id { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comment>(deep);
    }

    /// <summary>
    /// <para>Footnote Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnote.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "footnote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Footnote : FootnoteEndnoteType
    {
        /// <summary>
        /// Initializes a new instance of the Footnote class.
        /// </summary>
        public Footnote() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnote(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnote(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footnote(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 1, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footnote>(deep);
    }

    /// <summary>
    /// <para>Endnote Content.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnote.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "endnote")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Endnote : FootnoteEndnoteType
    {
        /// <summary>
        /// Initializes a new instance of the Endnote class.
        /// </summary>
        public Endnote() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnote(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnote(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Endnote(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 1, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Endnote>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    public abstract partial class FootnoteEndnoteType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class.
        /// </summary>
        protected FootnoteEndnoteType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FootnoteEndnoteType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FootnoteEndnoteType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected FootnoteEndnoteType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Footnote/Endnote Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "type")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnoteEndnoteValues> Type { get; set; }

        /// <summary>
        /// <para>Footnote/Endnote ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = -2147483648L, MaxInclusive = 32767L)]
        [SchemaAttr(23, "id")]
        [Index(1)]
        public IntegerValue Id { get; set; }
    }

    /// <summary>
    /// <para>Entry Insertion Behavior.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:behavior.</para>
    /// </summary>
    [SchemaAttr(23, "behavior")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Behavior : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Behavior class.
        /// </summary>
        public Behavior() : base()
        {
        }

        /// <summary>
        /// <para>Insertion Behavior Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartBehaviorValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Behavior>(deep);
    }

    /// <summary>
    /// <para>Entry Type.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    [SchemaAttr(23, "type")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartType class.
        /// </summary>
        public DocPartType() : base()
        {
        }

        /// <summary>
        /// <para>Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartType>(deep);
    }

    /// <summary>
    /// <para>Gallery Associated With Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gallery.</para>
    /// </summary>
    [SchemaAttr(23, "gallery")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Gallery : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gallery class.
        /// </summary>
        public Gallery() : base()
        {
        }

        /// <summary>
        /// <para>Gallery Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartGalleryValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gallery>(deep);
    }

    /// <summary>
    /// <para>Single Automatic Captioning Setting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoCaption.</para>
    /// </summary>
    [SchemaAttr(23, "autoCaption")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoCaption : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoCaption class.
        /// </summary>
        public AutoCaption() : base()
        {
        }

        /// <summary>
        /// <para>Identifier of Object to be Automatically Captioned</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>Caption Used for Automatic Captioning</para>
        /// <para>Represents the following attribute in the schema: w:caption</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "caption")]
        [Index(1)]
        public StringValue Caption { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoCaption>(deep);
    }

    /// <summary>
    /// <para>Single Caption Type Definition.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:caption.</para>
    /// </summary>
    [SchemaAttr(23, "caption")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Caption : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Caption class.
        /// </summary>
        public Caption() : base()
        {
        }

        /// <summary>
        /// <para>Caption Type Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>Automatic Caption Placement</para>
        /// <para>Represents the following attribute in the schema: w:pos</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "pos")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CaptionPositionValues> Position { get; set; }

        /// <summary>
        /// <para>Include Chapter Number in Field for Caption</para>
        /// <para>Represents the following attribute in the schema: w:chapNum</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "chapNum")]
        [Index(2)]
        public OnOffValue ChapterNumber { get; set; }

        /// <summary>
        /// <para>Style for Chapter Headings</para>
        /// <para>Represents the following attribute in the schema: w:heading</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "heading")]
        [Index(3)]
        public Int32Value Heading { get; set; }

        /// <summary>
        /// <para>Do Not Include Name In Caption</para>
        /// <para>Represents the following attribute in the schema: w:noLabel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "noLabel")]
        [Index(4)]
        public OnOffValue NoLabel { get; set; }

        /// <summary>
        /// <para>Caption Numbering Format</para>
        /// <para>Represents the following attribute in the schema: w:numFmt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "numFmt")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues> NumberFormat { get; set; }

        /// <summary>
        /// <para>Chapter Number/Item Index Separator</para>
        /// <para>Represents the following attribute in the schema: w:sep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "sep")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues> Separator { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Caption>(deep);
    }

    /// <summary>
    /// <para>Automatic Captioning Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoCaptions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AutoCaption &lt;w:autoCaption></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AutoCaption))]
    [SchemaAttr(23, "autoCaptions")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class AutoCaptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoCaptions class.
        /// </summary>
        public AutoCaptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AutoCaptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AutoCaptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AutoCaptions(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoCaption), 1, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoCaptions>(deep);
    }

    /// <summary>
    /// <para>Document Background.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:background.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Background &lt;v:background></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Background))]
    [SchemaAttr(23, "background")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocumentBackground : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentBackground class.
        /// </summary>
        public DocumentBackground() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentBackground(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentBackground(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocumentBackground(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>), UnionId = 0)]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 3L, UnionId = 0)]
        [SchemaAttr(23, "color")]
        [Index(0)]
        public StringValue Color { get; set; }

        /// <summary>
        /// <para>themeColor</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "themeColor")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues> ThemeColor { get; set; }

        /// <summary>
        /// <para>themeTint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeTint")]
        [Index(2)]
        public StringValue ThemeTint { get; set; }

        /// <summary>
        /// <para>themeShade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "themeShade")]
        [Index(3)]
        public StringValue ThemeShade { get; set; }

        /// <summary>
        /// <para>Background.</para>
        /// <para>Represents the following element tag in the schema: v:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:v = urn:schemas-microsoft-com:vml
        /// </remark>
        public DocumentFormat.OpenXml.Vml.Background Background
        {
            get => GetElement<DocumentFormat.OpenXml.Vml.Background>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 0, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Background), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentBackground>(deep);
    }

    /// <summary>
    /// <para>List of Glossary Document Entries.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docParts.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPart &lt;w:docPart></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPart))]
    [SchemaAttr(23, "docParts")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocParts : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocParts class.
        /// </summary>
        public DocParts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocParts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocParts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocParts(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPart), 0, 0, version: FileFormatVersions.Office2007),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPart), 1, 0, version: FileFormatVersions.Office2010)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocParts>(deep);
    }

    /// <summary>
    /// <para>Entry Name.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    [SchemaAttr(23, "name")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartName class.
        /// </summary>
        public DocPartName() : base()
        {
        }

        /// <summary>
        /// <para>Name Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>Built-In Entry</para>
        /// <para>Represents the following attribute in the schema: w:decorated</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "decorated")]
        [Index(1)]
        public OnOffValue Decorated { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartName>(deep);
    }

    /// <summary>
    /// <para>Entry Categorization.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:category.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Name &lt;w:name></description></item>
    ///   <item><description>Gallery &lt;w:gallery></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Name))]
    [ChildElementInfo(typeof(Gallery))]
    [SchemaAttr(23, "category")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Category : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Category class.
        /// </summary>
        public Category() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Category(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Category(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Category(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Category Associated With Entry.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Name Name
        {
            get => GetElement<Name>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Gallery Associated With Entry.</para>
        /// <para>Represents the following element tag in the schema: w:gallery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Gallery Gallery
        {
            get => GetElement<Gallery>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Name), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Gallery), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Category>(deep);
    }

    /// <summary>
    /// <para>Entry Types.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:types.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartType &lt;w:type></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPartType))]
    [SchemaAttr(23, "types")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartTypes : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartTypes class.
        /// </summary>
        public DocPartTypes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartTypes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartTypes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartTypes(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Entry Is Of All Types</para>
        /// <para>Represents the following attribute in the schema: w:all</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "all")]
        [Index(0)]
        public OnOffValue All { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartType), 1, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartTypes>(deep);
    }

    /// <summary>
    /// <para>Entry Insertion Behaviors.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:behaviors.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Behavior &lt;w:behavior></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Behavior))]
    [SchemaAttr(23, "behaviors")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Behaviors : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Behaviors class.
        /// </summary>
        public Behaviors() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Behaviors(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Behaviors(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Behaviors(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Behavior), 1, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Behaviors>(deep);
    }

    /// <summary>
    /// <para>Entry ID.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:guid.</para>
    /// </summary>
    [SchemaAttr(23, "guid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartId class.
        /// </summary>
        public DocPartId() : base()
        {
        }

        /// <summary>
        /// <para>GUID Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(IsToken = true, Pattern = "\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartId>(deep);
    }

    /// <summary>
    /// <para>Glossary Document Entry Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartName &lt;w:name></description></item>
    ///   <item><description>StyleId &lt;w:style></description></item>
    ///   <item><description>Category &lt;w:category></description></item>
    ///   <item><description>DocPartTypes &lt;w:types></description></item>
    ///   <item><description>Behaviors &lt;w:behaviors></description></item>
    ///   <item><description>Description &lt;w:description></description></item>
    ///   <item><description>DocPartId &lt;w:guid></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPartName))]
    [ChildElementInfo(typeof(StyleId))]
    [ChildElementInfo(typeof(Category))]
    [ChildElementInfo(typeof(DocPartTypes))]
    [ChildElementInfo(typeof(Behaviors))]
    [ChildElementInfo(typeof(Description))]
    [ChildElementInfo(typeof(DocPartId))]
    [SchemaAttr(23, "docPartPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartProperties class.
        /// </summary>
        public DocPartProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Entry Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartName DocPartName
        {
            get => GetElement<DocPartName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Associated Paragraph Style Name.</para>
        /// <para>Represents the following element tag in the schema: w:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StyleId StyleId
        {
            get => GetElement<StyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Categorization.</para>
        /// <para>Represents the following element tag in the schema: w:category.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Category Category
        {
            get => GetElement<Category>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Types.</para>
        /// <para>Represents the following element tag in the schema: w:types.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartTypes DocPartTypes
        {
            get => GetElement<DocPartTypes>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Insertion Behaviors.</para>
        /// <para>Represents the following element tag in the schema: w:behaviors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Behaviors Behaviors
        {
            get => GetElement<Behaviors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Description for Entry.</para>
        /// <para>Represents the following element tag in the schema: w:description.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Description Description
        {
            get => GetElement<Description>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry ID.</para>
        /// <para>Represents the following element tag in the schema: w:guid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartId DocPartId
        {
            get => GetElement<DocPartId>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Category), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartTypes), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Behaviors), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Description), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartId), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartProperties>(deep);
    }

    /// <summary>
    /// <para>Contents of Glossary Document Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartBody.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>SectionProperties &lt;w:sectPr></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "docPartBody")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPartBody : BodyType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartBody class.
        /// </summary>
        public DocPartBody() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartBody(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartBody(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartBody(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartBody>(deep);
    }

    /// <summary>
    /// <para>Defines the Body Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:body.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>SectionProperties &lt;w:sectPr></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "body")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Body : BodyType
    {
        /// <summary>
        /// Initializes a new instance of the Body class.
        /// </summary>
        public Body() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Body(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Body(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Body(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Group, 0, 0)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Body>(deep);
    }

    /// <summary>
    /// <para>Defines the BodyType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>AltChunk &lt;w:altChunk></description></item>
    ///   <item><description>CustomXmlBlock &lt;w:customXml></description></item>
    ///   <item><description>SdtBlock &lt;w:sdt></description></item>
    ///   <item><description>Paragraph &lt;w:p></description></item>
    ///   <item><description>Table &lt;w:tbl></description></item>
    ///   <item><description>ProofError &lt;w:proofErr></description></item>
    ///   <item><description>PermStart &lt;w:permStart></description></item>
    ///   <item><description>PermEnd &lt;w:permEnd></description></item>
    ///   <item><description>BookmarkStart &lt;w:bookmarkStart></description></item>
    ///   <item><description>BookmarkEnd &lt;w:bookmarkEnd></description></item>
    ///   <item><description>CommentRangeStart &lt;w:commentRangeStart></description></item>
    ///   <item><description>CommentRangeEnd &lt;w:commentRangeEnd></description></item>
    ///   <item><description>MoveFromRangeStart &lt;w:moveFromRangeStart></description></item>
    ///   <item><description>MoveFromRangeEnd &lt;w:moveFromRangeEnd></description></item>
    ///   <item><description>MoveToRangeStart &lt;w:moveToRangeStart></description></item>
    ///   <item><description>MoveToRangeEnd &lt;w:moveToRangeEnd></description></item>
    ///   <item><description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart></description></item>
    ///   <item><description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd></description></item>
    ///   <item><description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart></description></item>
    ///   <item><description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart></description></item>
    ///   <item><description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd></description></item>
    ///   <item><description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart></description></item>
    ///   <item><description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd></description></item>
    ///   <item><description>InsertedRun &lt;w:ins></description></item>
    ///   <item><description>DeletedRun &lt;w:del></description></item>
    ///   <item><description>MoveFromRun &lt;w:moveFrom></description></item>
    ///   <item><description>MoveToRun &lt;w:moveTo></description></item>
    ///   <item><description>ContentPart &lt;w:contentPart></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel></description></item>
    ///   <item><description>SectionProperties &lt;w:sectPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(AltChunk))]
    [ChildElementInfo(typeof(CustomXmlBlock))]
    [ChildElementInfo(typeof(SdtBlock))]
    [ChildElementInfo(typeof(Paragraph))]
    [ChildElementInfo(typeof(Table))]
    [ChildElementInfo(typeof(ProofError))]
    [ChildElementInfo(typeof(PermStart))]
    [ChildElementInfo(typeof(PermEnd))]
    [ChildElementInfo(typeof(BookmarkStart))]
    [ChildElementInfo(typeof(BookmarkEnd))]
    [ChildElementInfo(typeof(CommentRangeStart))]
    [ChildElementInfo(typeof(CommentRangeEnd))]
    [ChildElementInfo(typeof(MoveFromRangeStart))]
    [ChildElementInfo(typeof(MoveFromRangeEnd))]
    [ChildElementInfo(typeof(MoveToRangeStart))]
    [ChildElementInfo(typeof(MoveToRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlInsRangeStart))]
    [ChildElementInfo(typeof(CustomXmlInsRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlDelRangeStart))]
    [ChildElementInfo(typeof(CustomXmlDelRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveFromRangeEnd))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeStart))]
    [ChildElementInfo(typeof(CustomXmlMoveToRangeEnd))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(InsertedRun))]
    [ChildElementInfo(typeof(DeletedRun))]
    [ChildElementInfo(typeof(MoveFromRun))]
    [ChildElementInfo(typeof(MoveToRun))]
    [ChildElementInfo(typeof(ContentPart), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SectionProperties))]
    public abstract partial class BodyType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BodyType class.
        /// </summary>
        protected BodyType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected BodyType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected BodyType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected BodyType(string outerXml) : base(outerXml)
        {
        }
    }

    /// <summary>
    /// <para>Glossary Document Entry.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPart.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartProperties &lt;w:docPartPr></description></item>
    ///   <item><description>DocPartBody &lt;w:docPartBody></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPartProperties))]
    [ChildElementInfo(typeof(DocPartBody))]
    [SchemaAttr(23, "docPart")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocPart : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPart class.
        /// </summary>
        public DocPart() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPart(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPart(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPart(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Glossary Document Entry Properties.</para>
        /// <para>Represents the following element tag in the schema: w:docPartPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartProperties DocPartProperties
        {
            get => GetElement<DocPartProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Contents of Glossary Document Entry.</para>
        /// <para>Represents the following element tag in the schema: w:docPartBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartBody DocPartBody
        {
            get => GetElement<DocPartBody>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartProperties), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartBody), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPart>(deep);
    }

    /// <summary>
    /// <para>Defines the CompatibilitySetting Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:compatSetting.</para>
    /// </summary>
    [SchemaAttr(23, "compatSetting")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CompatibilitySetting : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CompatibilitySetting class.
        /// </summary>
        public CompatibilitySetting() : base()
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "name")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CompatSettingNameValues> Name { get; set; }

        /// <summary>
        /// <para>uri</para>
        /// <para>Represents the following attribute in the schema: w:uri</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "uri")]
        [Index(1)]
        public StringValue Uri { get; set; }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(2)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CompatibilitySetting>(deep);
    }

    /// <summary>
    /// <para>Table Cell Left Margin Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    [SchemaAttr(23, "left")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellLeftMargin : TableWidthDxaNilType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellLeftMargin class.
        /// </summary>
        public TableCellLeftMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellLeftMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Right Margin Default.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    [SchemaAttr(23, "right")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableCellRightMargin : TableWidthDxaNilType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellRightMargin class.
        /// </summary>
        public TableCellRightMargin() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellRightMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidthDxaNilType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TableWidthDxaNilType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableWidthDxaNilType class.
        /// </summary>
        protected TableWidthDxaNilType() : base()
        {
        }

        /// <summary>
        /// <para>w</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "w")]
        [Index(0)]
        public Int16Value Width { get; set; }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "type")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthValues> Type { get; set; }
    }

    /// <summary>
    /// <para>Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrEx.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>TableWidth &lt;w:tblW></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableIndentation &lt;w:tblInd></description></item>
    ///   <item><description>TableBorders &lt;w:tblBorders></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>TableLayout &lt;w:tblLayout></description></item>
    ///   <item><description>TableCellMarginDefault &lt;w:tblCellMar></description></item>
    ///   <item><description>TableLook &lt;w:tblLook></description></item>
    ///   <item><description>TablePropertyExceptionsChange &lt;w:tblPrExChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(TableWidth))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableIndentation))]
    [ChildElementInfo(typeof(TableBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(TableLayout))]
    [ChildElementInfo(typeof(TableCellMarginDefault))]
    [ChildElementInfo(typeof(TableLook))]
    [ChildElementInfo(typeof(TablePropertyExceptionsChange))]
    [SchemaAttr(23, "tblPrEx")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TablePropertyExceptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class.
        /// </summary>
        public TablePropertyExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertyExceptions(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preferred Table Width Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableWidth TableWidth
        {
            get => GetElement<TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Alignment Exception.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableJustification TableJustification
        {
            get => GetElement<TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Spacing Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellSpacing TableCellSpacing
        {
            get => GetElement<TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Indent from Leading Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableIndentation TableIndentation
        {
            get => GetElement<TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Borders Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableBorders TableBorders
        {
            get => GetElement<TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Shading Exception.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Layout Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLayout TableLayout
        {
            get => GetElement<TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Margin Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableCellMarginDefault TableCellMarginDefault
        {
            get => GetElement<TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Settings Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TableLook TableLook
        {
            get => GetElement<TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Information for Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrExChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TablePropertyExceptionsChange TablePropertyExceptionsChange
        {
            get => GetElement<TablePropertyExceptionsChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange), 0, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertyExceptions>(deep);
    }

    /// <summary>
    /// <para>Table Row Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    ///   <item><description>DivId &lt;w:divId></description></item>
    ///   <item><description>GridBefore &lt;w:gridBefore></description></item>
    ///   <item><description>GridAfter &lt;w:gridAfter></description></item>
    ///   <item><description>WidthBeforeTableRow &lt;w:wBefore></description></item>
    ///   <item><description>WidthAfterTableRow &lt;w:wAfter></description></item>
    ///   <item><description>TableRowHeight &lt;w:trHeight></description></item>
    ///   <item><description>Hidden &lt;w:hidden></description></item>
    ///   <item><description>CantSplit &lt;w:cantSplit></description></item>
    ///   <item><description>TableHeader &lt;w:tblHeader></description></item>
    ///   <item><description>TableCellSpacing &lt;w:tblCellSpacing></description></item>
    ///   <item><description>TableJustification &lt;w:jc></description></item>
    ///   <item><description>Inserted &lt;w:ins></description></item>
    ///   <item><description>Deleted &lt;w:del></description></item>
    ///   <item><description>TableRowPropertiesChange &lt;w:trPrChange></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion &lt;w14:conflictIns></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion &lt;w14:conflictDel></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [ChildElementInfo(typeof(DivId))]
    [ChildElementInfo(typeof(GridBefore))]
    [ChildElementInfo(typeof(GridAfter))]
    [ChildElementInfo(typeof(WidthBeforeTableRow))]
    [ChildElementInfo(typeof(WidthAfterTableRow))]
    [ChildElementInfo(typeof(TableRowHeight))]
    [ChildElementInfo(typeof(Hidden))]
    [ChildElementInfo(typeof(CantSplit))]
    [ChildElementInfo(typeof(TableHeader))]
    [ChildElementInfo(typeof(TableCellSpacing))]
    [ChildElementInfo(typeof(TableJustification))]
    [ChildElementInfo(typeof(Inserted))]
    [ChildElementInfo(typeof(Deleted))]
    [ChildElementInfo(typeof(TableRowPropertiesChange))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), FileFormatVersions.Office2010)]
    [SchemaAttr(23, "trPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowProperties class.
        /// </summary>
        public TableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRowProperties(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Choice, 1, 0)
            {
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridAfter), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowHeight), 0, 1)
                    }
                },
                new CompositeParticle(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowPropertiesChange), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                {
                    new CompositeParticle(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Row Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>PreviousTableRowProperties &lt;w:trPr></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(PreviousTableRowProperties))]
    [SchemaAttr(23, "trPrChange")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TableRowPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class.
        /// </summary>
        public TableRowPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRowPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 255L)]
        [SchemaAttr(23, "author")]
        [Index(0)]
        public StringValue Author { get; set; }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "date")]
        [Index(1)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [NumberValidator(MaxInclusive = -2L, SimpleType = typeof(Int32Value), UnionId = 0)]
        [SchemaAttr(23, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Previous Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PreviousTableRowProperties PreviousTableRowProperties
        {
            get => GetElement<PreviousTableRowProperties>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties), 1, 1)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ParagraphStyleId &lt;w:pStyle></description></item>
    ///   <item><description>KeepNext &lt;w:keepNext></description></item>
    ///   <item><description>KeepLines &lt;w:keepLines></description></item>
    ///   <item><description>PageBreakBefore &lt;w:pageBreakBefore></description></item>
    ///   <item><description>FrameProperties &lt;w:framePr></description></item>
    ///   <item><description>WidowControl &lt;w:widowControl></description></item>
    ///   <item><description>NumberingProperties &lt;w:numPr></description></item>
    ///   <item><description>SuppressLineNumbers &lt;w:suppressLineNumbers></description></item>
    ///   <item><description>ParagraphBorders &lt;w:pBdr></description></item>
    ///   <item><description>Shading &lt;w:shd></description></item>
    ///   <item><description>Tabs &lt;w:tabs></description></item>
    ///   <item><description>SuppressAutoHyphens &lt;w:suppressAutoHyphens></description></item>
    ///   <item><description>Kinsoku &lt;w:kinsoku></description></item>
    ///   <item><description>WordWrap &lt;w:wordWrap></description></item>
    ///   <item><description>OverflowPunctuation &lt;w:overflowPunct></description></item>
    ///   <item><description>TopLinePunctuation &lt;w:topLinePunct></description></item>
    ///   <item><description>AutoSpaceDE &lt;w:autoSpaceDE></description></item>
    ///   <item><description>AutoSpaceDN &lt;w:autoSpaceDN></description></item>
    ///   <item><description>BiDi &lt;w:bidi></description></item>
    ///   <item><description>AdjustRightIndent &lt;w:adjustRightInd></description></item>
    ///   <item><description>SnapToGrid &lt;w:snapToGrid></description></item>
    ///   <item><description>SpacingBetweenLines &lt;w:spacing></description></item>
    ///   <item><description>Indentation &lt;w:ind></description></item>
    ///   <item><description>ContextualSpacing &lt;w:contextualSpacing></description></item>
    ///   <item><description>MirrorIndents &lt;w:mirrorIndents></description></item>
    ///   <item><description>SuppressOverlap &lt;w:suppressOverlap></description></item>
    ///   <item><description>Justification &lt;w:jc></description></item>
    ///   <item><description>TextDirection &lt;w:textDirection></description></item>
    ///   <item><description>TextAlignment &lt;w:textAlignment></description></item>
    ///   <item><description>TextBoxTightWrap &lt;w:textboxTightWrap></description></item>
    ///   <item><description>OutlineLevel &lt;w:outlineLvl></description></item>
    ///   <item><description>DivId &lt;w:divId></description></item>
    ///   <item><description>ConditionalFormatStyle &lt;w:cnfStyle></description></item>
    ///   <item><description>ParagraphMarkRunProperties &lt;w:rPr></description></item>
    ///   <item><description>SectionProperties &lt;w:sectPr></description></item>
    ///   <item><description>ParagraphPropertiesChange &lt;w:pPrChange></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ParagraphStyleId))]
    [ChildElementInfo(typeof(KeepNext))]
    [ChildElementInfo(typeof(KeepLines))]
    [ChildElementInfo(typeof(PageBreakBefore))]
    [ChildElementInfo(typeof(FrameProperties))]
    [ChildElementInfo(typeof(WidowControl))]
    [ChildElementInfo(typeof(NumberingProperties))]
    [ChildElementInfo(typeof(SuppressLineNumbers))]
    [ChildElementInfo(typeof(ParagraphBorders))]
    [ChildElementInfo(typeof(Shading))]
    [ChildElementInfo(typeof(Tabs))]
    [ChildElementInfo(typeof(SuppressAutoHyphens))]
    [ChildElementInfo(typeof(Kinsoku))]
    [ChildElementInfo(typeof(WordWrap))]
    [ChildElementInfo(typeof(OverflowPunctuation))]
    [ChildElementInfo(typeof(TopLinePunctuation))]
    [ChildElementInfo(typeof(AutoSpaceDE))]
    [ChildElementInfo(typeof(AutoSpaceDN))]
    [ChildElementInfo(typeof(BiDi))]
    [ChildElementInfo(typeof(AdjustRightIndent))]
    [ChildElementInfo(typeof(SnapToGrid))]
    [ChildElementInfo(typeof(SpacingBetweenLines))]
    [ChildElementInfo(typeof(Indentation))]
    [ChildElementInfo(typeof(ContextualSpacing))]
    [ChildElementInfo(typeof(MirrorIndents))]
    [ChildElementInfo(typeof(SuppressOverlap))]
    [ChildElementInfo(typeof(Justification))]
    [ChildElementInfo(typeof(TextDirection))]
    [ChildElementInfo(typeof(TextAlignment))]
    [ChildElementInfo(typeof(TextBoxTightWrap))]
    [ChildElementInfo(typeof(OutlineLevel))]
    [ChildElementInfo(typeof(DivId))]
    [ChildElementInfo(typeof(ConditionalFormatStyle))]
    [ChildElementInfo(typeof(ParagraphMarkRunProperties))]
    [ChildElementInfo(typeof(SectionProperties))]
    [ChildElementInfo(typeof(ParagraphPropertiesChange))]
    [SchemaAttr(23, "pPr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class.
        /// </summary>
        public ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphStyleId ParagraphStyleId
        {
            get => GetElement<ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepNext KeepNext
        {
            get => GetElement<KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public KeepLines KeepLines
        {
            get => GetElement<KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PageBreakBefore PageBreakBefore
        {
            get => GetElement<PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FrameProperties FrameProperties
        {
            get => GetElement<FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WidowControl WidowControl
        {
            get => GetElement<WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingProperties NumberingProperties
        {
            get => GetElement<NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressLineNumbers SuppressLineNumbers
        {
            get => GetElement<SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphBorders ParagraphBorders
        {
            get => GetElement<ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Shading Shading
        {
            get => GetElement<Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Tabs Tabs
        {
            get => GetElement<Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressAutoHyphens SuppressAutoHyphens
        {
            get => GetElement<SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Kinsoku Kinsoku
        {
            get => GetElement<Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordWrap WordWrap
        {
            get => GetElement<WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OverflowPunctuation OverflowPunctuation
        {
            get => GetElement<OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TopLinePunctuation TopLinePunctuation
        {
            get => GetElement<TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDE AutoSpaceDE
        {
            get => GetElement<AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceDN AutoSpaceDN
        {
            get => GetElement<AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BiDi BiDi
        {
            get => GetElement<BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustRightIndent AdjustRightIndent
        {
            get => GetElement<AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SnapToGrid SnapToGrid
        {
            get => GetElement<SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingBetweenLines SpacingBetweenLines
        {
            get => GetElement<SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Indentation Indentation
        {
            get => GetElement<Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ContextualSpacing ContextualSpacing
        {
            get => GetElement<ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MirrorIndents MirrorIndents
        {
            get => GetElement<MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressOverlap SuppressOverlap
        {
            get => GetElement<SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Justification Justification
        {
            get => GetElement<Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextDirection TextDirection
        {
            get => GetElement<TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextAlignment TextAlignment
        {
            get => GetElement<TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TextBoxTightWrap TextBoxTightWrap
        {
            get => GetElement<TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OutlineLevel OutlineLevel
        {
            get => GetElement<OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DivId.</para>
        /// <para>Represents the following element tag in the schema: w:divId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DivId DivId
        {
            get => GetElement<DivId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConditionalFormatStyle ConditionalFormatStyle
        {
            get => GetElement<ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Run Properties for the Paragraph Mark.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphMarkRunProperties ParagraphMarkRunProperties
        {
            get => GetElement<ParagraphMarkRunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Section Properties.</para>
        /// <para>Represents the following element tag in the schema: w:sectPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SectionProperties SectionProperties
        {
            get => GetElement<SectionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:pPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ParagraphPropertiesChange ParagraphPropertiesChange
        {
            get => GetElement<ParagraphPropertiesChange>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                        }
                    },
                    new CompositeParticle(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                        }
                    }
                },
                new CompositeParticle(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1)
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange), 0, 1)
                    }
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the Control Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:control.</para>
    /// </summary>
    [SchemaAttr(23, "control")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Control : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Control class.
        /// </summary>
        public Control() : base()
        {
        }

        /// <summary>
        /// <para>Unique Name for Embedded Control</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "name")]
        [Index(0)]
        public StringValue Name { get; set; }

        /// <summary>
        /// <para>Associated VML Data Reference</para>
        /// <para>Represents the following attribute in the schema: w:shapeid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(MaxLength = 254L)]
        [SchemaAttr(23, "shapeid")]
        [Index(1)]
        public StringValue ShapeId { get; set; }

        /// <summary>
        /// <para>Embedded Control Properties Relationship Reference</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [SchemaAttr(19, "id")]
        [Index(2)]
        public StringValue Id { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Control>(deep);
    }

    /// <summary>
    /// <para>Previous Table Grid.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>GridColumn &lt;w:gridCol></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(GridColumn))]
    [SchemaAttr(23, "tblGrid")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PreviousTableGrid : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class.
        /// </summary>
        public PreviousTableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableGrid(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridColumn), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectEmbed Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:objectEmbed.</para>
    /// </summary>
    [SchemaAttr(23, "objectEmbed")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ObjectEmbed : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectEmbed class.
        /// </summary>
        public ObjectEmbed() : base()
        {
        }

        /// <summary>
        /// <para>drawAspect</para>
        /// <para>Represents the following attribute in the schema: w:drawAspect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "drawAspect")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect> drawAspect { get; set; }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(1)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>progId</para>
        /// <para>Represents the following attribute in the schema: w:progId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "progId")]
        [Index(2)]
        public StringValue ProgId { get; set; }

        /// <summary>
        /// <para>shapeId</para>
        /// <para>Represents the following attribute in the schema: w:shapeId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "shapeId")]
        [Index(3)]
        public StringValue ShapeId { get; set; }

        /// <summary>
        /// <para>fieldCodes</para>
        /// <para>Represents the following attribute in the schema: w:fieldCodes</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fieldCodes")]
        [Index(4)]
        public StringValue FieldCodes { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectEmbed>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectLink Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:objectLink.</para>
    /// </summary>
    [SchemaAttr(23, "objectLink")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ObjectLink : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectLink class.
        /// </summary>
        public ObjectLink() : base()
        {
        }

        /// <summary>
        /// <para>updateMode</para>
        /// <para>Represents the following attribute in the schema: w:updateMode</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "updateMode")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectUpdateMode> UpdateMode { get; set; }

        /// <summary>
        /// <para>lockedField</para>
        /// <para>Represents the following attribute in the schema: w:lockedField</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "lockedField")]
        [Index(1)]
        public OnOffValue LockedField { get; set; }

        /// <summary>
        /// <para>drawAspect</para>
        /// <para>Represents the following attribute in the schema: w:drawAspect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "drawAspect")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect> drawAspect { get; set; }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(3)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>progId</para>
        /// <para>Represents the following attribute in the schema: w:progId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "progId")]
        [Index(4)]
        public StringValue ProgId { get; set; }

        /// <summary>
        /// <para>shapeId</para>
        /// <para>Represents the following attribute in the schema: w:shapeId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "shapeId")]
        [Index(5)]
        public StringValue ShapeId { get; set; }

        /// <summary>
        /// <para>fieldCodes</para>
        /// <para>Represents the following attribute in the schema: w:fieldCodes</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fieldCodes")]
        [Index(6)]
        public StringValue FieldCodes { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectLink>(deep);
    }

    /// <summary>
    /// <para>Defines the Lock Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lock.</para>
    /// </summary>
    [SchemaAttr(23, "lock")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Lock : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Lock class.
        /// </summary>
        public Lock() : base()
        {
        }

        /// <summary>
        /// <para>Locking Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LockingValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Lock>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtPlaceholder Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:placeholder.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartReference &lt;w:docPart></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPartReference))]
    [SchemaAttr(23, "placeholder")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtPlaceholder : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class.
        /// </summary>
        public SdtPlaceholder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtPlaceholder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtPlaceholder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtPlaceholder(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Document Part Reference.</para>
        /// <para>Represents the following element tag in the schema: w:docPart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartReference DocPartReference
        {
            get => GetElement<DocPartReference>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartReference), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the DataBinding Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataBinding.</para>
    /// </summary>
    [SchemaAttr(23, "dataBinding")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DataBinding : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DataBinding class.
        /// </summary>
        public DataBinding() : base()
        {
        }

        /// <summary>
        /// <para>XML Namespace Prefix Mappings</para>
        /// <para>Represents the following attribute in the schema: w:prefixMappings</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "prefixMappings")]
        [Index(0)]
        public StringValue PrefixMappings { get; set; }

        /// <summary>
        /// <para>XPath</para>
        /// <para>Represents the following attribute in the schema: w:xpath</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "xpath")]
        [Index(1)]
        public StringValue XPath { get; set; }

        /// <summary>
        /// <para>Custom XML Data Storage ID</para>
        /// <para>Represents the following attribute in the schema: w:storeItemID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "storeItemID")]
        [Index(2)]
        public StringValue StoreItemId { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataBinding>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentComboBox Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comboBox.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ListItem &lt;w:listItem></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ListItem))]
    [SchemaAttr(23, "comboBox")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentComboBox : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class.
        /// </summary>
        public SdtContentComboBox() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentComboBox(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentComboBox(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentComboBox(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Combo Box Last Saved Value</para>
        /// <para>Represents the following attribute in the schema: w:lastValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "lastValue")]
        [Index(0)]
        public StringValue LastValue { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListItem), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentComboBox>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDate Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:date.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DateFormat &lt;w:dateFormat></description></item>
    ///   <item><description>LanguageId &lt;w:lid></description></item>
    ///   <item><description>SdtDateMappingType &lt;w:storeMappedDataAs></description></item>
    ///   <item><description>Calendar &lt;w:calendar></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DateFormat))]
    [ChildElementInfo(typeof(LanguageId))]
    [ChildElementInfo(typeof(SdtDateMappingType))]
    [ChildElementInfo(typeof(Calendar))]
    [SchemaAttr(23, "date")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentDate : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDate class.
        /// </summary>
        public SdtContentDate() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDate(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDate(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDate(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Last Known Date in XML Schema DateTime Format</para>
        /// <para>Represents the following attribute in the schema: w:fullDate</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "fullDate")]
        [Index(0)]
        public DateTimeValue FullDate { get; set; }

        /// <summary>
        /// <para>Date Display Mask.</para>
        /// <para>Represents the following element tag in the schema: w:dateFormat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateFormat DateFormat
        {
            get => GetElement<DateFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Date Picker Language ID.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LanguageId LanguageId
        {
            get => GetElement<LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Custom XML Data Date Storage Format.</para>
        /// <para>Represents the following element tag in the schema: w:storeMappedDataAs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SdtDateMappingType SdtDateMappingType
        {
            get => GetElement<SdtDateMappingType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Date Picker Calendar Type.</para>
        /// <para>Represents the following element tag in the schema: w:calendar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Calendar Calendar
        {
            get => GetElement<Calendar>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DateFormat), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Calendar), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDate>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDocPartObject Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartObj.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartGallery &lt;w:docPartGallery></description></item>
    ///   <item><description>DocPartCategory &lt;w:docPartCategory></description></item>
    ///   <item><description>DocPartUnique &lt;w:docPartUnique></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "docPartObj")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentDocPartObject : SdtDocPartType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class.
        /// </summary>
        public SdtContentDocPartObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDocPartObject(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartGallery), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartCategory), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartUnique), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDocPartObject>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDocPartList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartGallery &lt;w:docPartGallery></description></item>
    ///   <item><description>DocPartCategory &lt;w:docPartCategory></description></item>
    ///   <item><description>DocPartUnique &lt;w:docPartUnique></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "docPartList")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentDocPartList : SdtDocPartType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class.
        /// </summary>
        public SdtContentDocPartList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDocPartList(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartGallery), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartCategory), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartUnique), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDocPartList>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtDocPartType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocPartGallery &lt;w:docPartGallery></description></item>
    ///   <item><description>DocPartCategory &lt;w:docPartCategory></description></item>
    ///   <item><description>DocPartUnique &lt;w:docPartUnique></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocPartGallery))]
    [ChildElementInfo(typeof(DocPartCategory))]
    [ChildElementInfo(typeof(DocPartUnique))]
    public abstract partial class SdtDocPartType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class.
        /// </summary>
        protected SdtDocPartType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected SdtDocPartType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected SdtDocPartType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected SdtDocPartType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Document Part Gallery Filter.</para>
        /// <para>Represents the following element tag in the schema: w:docPartGallery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartGallery DocPartGallery
        {
            get => GetElement<DocPartGallery>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Document Part Category Filter.</para>
        /// <para>Represents the following element tag in the schema: w:docPartCategory.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartCategory DocPartCategory
        {
            get => GetElement<DocPartCategory>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Built-In Document Part.</para>
        /// <para>Represents the following element tag in the schema: w:docPartUnique.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocPartUnique DocPartUnique
        {
            get => GetElement<DocPartUnique>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    }

    /// <summary>
    /// <para>Defines the SdtContentDropDownList Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dropDownList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>ListItem &lt;w:listItem></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(ListItem))]
    [SchemaAttr(23, "dropDownList")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentDropDownList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class.
        /// </summary>
        public SdtContentDropDownList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDropDownList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDropDownList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDropDownList(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Drop-down List Last Saved Value</para>
        /// <para>Represents the following attribute in the schema: w:lastValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "lastValue")]
        [Index(0)]
        public StringValue LastValue { get; set; }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListItem), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDropDownList>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentText Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:text.</para>
    /// </summary>
    [SchemaAttr(23, "text")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SdtContentText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentText class.
        /// </summary>
        public SdtContentText() : base()
        {
        }

        /// <summary>
        /// <para>Allow Soft Line Breaks</para>
        /// <para>Represents the following attribute in the schema: w:multiLine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "multiLine")]
        [Index(0)]
        public OnOffValue MultiLine { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentText>(deep);
    }

    /// <summary>
    /// <para>Write Protection.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:writeProtection.</para>
    /// </summary>
    [SchemaAttr(23, "writeProtection")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class WriteProtection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the WriteProtection class.
        /// </summary>
        public WriteProtection() : base()
        {
        }

        /// <summary>
        /// <para>Recommend Write Protection in User Interface</para>
        /// <para>Represents the following attribute in the schema: w:recommended</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "recommended")]
        [Index(0)]
        public OnOffValue Recommended { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProviderType")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues> CryptographicProviderType { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Class</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmClass</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmClass")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues> CryptographicAlgorithmClass { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmType")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues> CryptographicAlgorithmType { get; set; }

        /// <summary>
        /// <para>Cryptographic Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmSid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmSid")]
        [Index(4)]
        public Int32Value CryptographicAlgorithmSid { get; set; }

        /// <summary>
        /// <para>Iterations to Run Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptSpinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 5000000L)]
        [SchemaAttr(23, "cryptSpinCount")]
        [Index(5)]
        public UInt32Value CryptographicSpinCount { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider</para>
        /// <para>Represents the following attribute in the schema: w:cryptProvider</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProvider")]
        [Index(6)]
        public StringValue CryptographicProvider { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:algIdExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "algIdExt")]
        [Index(7)]
        public HexBinaryValue AlgorithmIdExtensibility { get; set; }

        /// <summary>
        /// <para>Algorithm Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:algIdExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "algIdExtSource")]
        [Index(8)]
        public StringValue AlgorithmIdExtensibilitySource { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider Type Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "cryptProviderTypeExt")]
        [Index(9)]
        public HexBinaryValue CryptographicProviderTypeExtensibility { get; set; }

        /// <summary>
        /// <para>Provider Type Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProviderTypeExtSource")]
        [Index(10)]
        public StringValue CryptographicProviderTypeExtSource { get; set; }

        /// <summary>
        /// <para>Password Hash</para>
        /// <para>Represents the following attribute in the schema: w:hash</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hash")]
        [Index(11)]
        public Base64BinaryValue Hash { get; set; }

        /// <summary>
        /// <para>Salt for Password Verifier</para>
        /// <para>Represents the following attribute in the schema: w:salt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "salt")]
        [Index(12)]
        public Base64BinaryValue Salt { get; set; }

        /// <summary>
        /// <para>algorithmName, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:algorithmName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "algorithmName")]
        [Index(13)]
        public StringValue AlgorithmName { get; set; }

        /// <summary>
        /// <para>hashValue, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:hashValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "hashValue")]
        [Index(14)]
        public Base64BinaryValue HashValue { get; set; }

        /// <summary>
        /// <para>saltValue, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:saltValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "saltValue")]
        [Index(15)]
        public Base64BinaryValue SaltValue { get; set; }

        /// <summary>
        /// <para>spinCount, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:spinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "spinCount")]
        [Index(16)]
        public Int32Value SpinCount { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WriteProtection>(deep);
    }

    /// <summary>
    /// <para>Document View Setting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:view.</para>
    /// </summary>
    [SchemaAttr(23, "view")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class View : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the View class.
        /// </summary>
        public View() : base()
        {
        }

        /// <summary>
        /// <para>Document View Setting  Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ViewValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<View>(deep);
    }

    /// <summary>
    /// <para>Magnification Setting.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:zoom.</para>
    /// </summary>
    [SchemaAttr(23, "zoom")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Zoom : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Zoom class.
        /// </summary>
        public Zoom() : base()
        {
        }

        /// <summary>
        /// <para>Zoom Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PresetZoomValues> Val { get; set; }

        /// <summary>
        /// <para>Zoom Percentage</para>
        /// <para>Represents the following attribute in the schema: w:percent</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", Version = FileFormatVersions.Office2010, UnionId = 0)]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [NumberValidator(SimpleType = typeof(Int32Value), InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [SchemaAttr(23, "percent")]
        [Index(1)]
        public StringValue Percent { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Zoom>(deep);
    }

    /// <summary>
    /// <para>Grammar Checking Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:activeWritingStyle.</para>
    /// </summary>
    [SchemaAttr(23, "activeWritingStyle")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ActiveWritingStyle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ActiveWritingStyle class.
        /// </summary>
        public ActiveWritingStyle() : base()
        {
        }

        /// <summary>
        /// <para>Writing Style Language</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "lang")]
        [Index(0)]
        public StringValue Language { get; set; }

        /// <summary>
        /// <para>Grammatical Engine ID</para>
        /// <para>Represents the following attribute in the schema: w:vendorID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "vendorID")]
        [Index(1)]
        public UInt16Value VendorID { get; set; }

        /// <summary>
        /// <para>Grammatical Check Engine Version</para>
        /// <para>Represents the following attribute in the schema: w:dllVersion</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "dllVersion")]
        [Index(2)]
        public Int32Value DllVersion { get; set; }

        /// <summary>
        /// <para>Natural Language Grammar Check</para>
        /// <para>Represents the following attribute in the schema: w:nlCheck</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "nlCheck")]
        [Index(3)]
        public OnOffValue NaturalLanguageGrammarCheck { get; set; }

        /// <summary>
        /// <para>Check Stylistic Rules With Grammar</para>
        /// <para>Represents the following attribute in the schema: w:checkStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "checkStyle")]
        [Index(4)]
        public OnOffValue CheckStyle { get; set; }

        /// <summary>
        /// <para>Application Name</para>
        /// <para>Represents the following attribute in the schema: w:appName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "appName")]
        [Index(5)]
        public StringValue ApplicationName { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ActiveWritingStyle>(deep);
    }

    /// <summary>
    /// <para>Spelling and Grammatical Checking State.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:proofState.</para>
    /// </summary>
    [SchemaAttr(23, "proofState")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ProofState : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ProofState class.
        /// </summary>
        public ProofState() : base()
        {
        }

        /// <summary>
        /// <para>Spell Checking State</para>
        /// <para>Represents the following attribute in the schema: w:spelling</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "spelling")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues> Spelling { get; set; }

        /// <summary>
        /// <para>Grammatical Checking State</para>
        /// <para>Represents the following attribute in the schema: w:grammar</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "grammar")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues> Grammar { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProofState>(deep);
    }

    /// <summary>
    /// <para>Suggested Filtering for List of Document Styles.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:stylePaneFormatFilter.</para>
    /// </summary>
    [SchemaAttr(23, "stylePaneFormatFilter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StylePaneFormatFilter : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StylePaneFormatFilter class.
        /// </summary>
        public StylePaneFormatFilter() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 2L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public HexBinaryValue Val { get; set; }

        /// <summary>
        /// <para>allStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:allStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "allStyles")]
        [Index(1)]
        public OnOffValue AllStyles { get; set; }

        /// <summary>
        /// <para>customStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:customStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "customStyles")]
        [Index(2)]
        public OnOffValue CustomStyles { get; set; }

        /// <summary>
        /// <para>latentStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:latentStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "latentStyles")]
        [Index(3)]
        public OnOffValue LatentStyles { get; set; }

        /// <summary>
        /// <para>stylesInUse, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:stylesInUse</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "stylesInUse")]
        [Index(4)]
        public OnOffValue StylesInUse { get; set; }

        /// <summary>
        /// <para>headingStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:headingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "headingStyles")]
        [Index(5)]
        public OnOffValue HeadingStyles { get; set; }

        /// <summary>
        /// <para>numberingStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:numberingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "numberingStyles")]
        [Index(6)]
        public OnOffValue NumberingStyles { get; set; }

        /// <summary>
        /// <para>tableStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:tableStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "tableStyles")]
        [Index(7)]
        public OnOffValue TableStyles { get; set; }

        /// <summary>
        /// <para>directFormattingOnRuns, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnRuns</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "directFormattingOnRuns")]
        [Index(8)]
        public OnOffValue DirectFormattingOnRuns { get; set; }

        /// <summary>
        /// <para>directFormattingOnParagraphs, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnParagraphs</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "directFormattingOnParagraphs")]
        [Index(9)]
        public OnOffValue DirectFormattingOnParagraphs { get; set; }

        /// <summary>
        /// <para>directFormattingOnNumbering, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnNumbering</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "directFormattingOnNumbering")]
        [Index(10)]
        public OnOffValue DirectFormattingOnNumbering { get; set; }

        /// <summary>
        /// <para>directFormattingOnTables, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnTables</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "directFormattingOnTables")]
        [Index(11)]
        public OnOffValue DirectFormattingOnTables { get; set; }

        /// <summary>
        /// <para>clearFormatting, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:clearFormatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "clearFormatting")]
        [Index(12)]
        public OnOffValue ClearFormatting { get; set; }

        /// <summary>
        /// <para>top3HeadingStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:top3HeadingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "top3HeadingStyles")]
        [Index(13)]
        public OnOffValue Top3HeadingStyles { get; set; }

        /// <summary>
        /// <para>visibleStyles, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:visibleStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "visibleStyles")]
        [Index(14)]
        public OnOffValue VisibleStyles { get; set; }

        /// <summary>
        /// <para>alternateStyleNames, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:alternateStyleNames</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "alternateStyleNames")]
        [Index(15)]
        public OnOffValue AlternateStyleNames { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylePaneFormatFilter>(deep);
    }

    /// <summary>
    /// <para>Suggested Sorting for List of Document Styles.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:stylePaneSortMethod.</para>
    /// </summary>
    [SchemaAttr(23, "stylePaneSortMethod")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class StylePaneSortMethods : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StylePaneSortMethods class.
        /// </summary>
        public StylePaneSortMethods() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(SimpleType = typeof(HexBinaryValue), Length = 2L, Version = FileFormatVersions.Office2007)]
        [EnumValidator(SimpleType = typeof(EnumValue<DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethodsValues>), InitialVersion = FileFormatVersions.Office2010)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylePaneSortMethods>(deep);
    }

    /// <summary>
    /// <para>Document Classification.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:documentType.</para>
    /// </summary>
    [SchemaAttr(23, "documentType")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocumentType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentType class.
        /// </summary>
        public DocumentType() : base()
        {
        }

        /// <summary>
        /// <para>Document Classification Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentTypeValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentType>(deep);
    }

    /// <summary>
    /// <para>Mail Merge Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailMerge.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>MainDocumentType &lt;w:mainDocumentType></description></item>
    ///   <item><description>LinkToQuery &lt;w:linkToQuery></description></item>
    ///   <item><description>DataType &lt;w:dataType></description></item>
    ///   <item><description>ConnectString &lt;w:connectString></description></item>
    ///   <item><description>Query &lt;w:query></description></item>
    ///   <item><description>DataSourceReference &lt;w:dataSource></description></item>
    ///   <item><description>HeaderSource &lt;w:headerSource></description></item>
    ///   <item><description>DoNotSuppressBlankLines &lt;w:doNotSuppressBlankLines></description></item>
    ///   <item><description>Destination &lt;w:destination></description></item>
    ///   <item><description>AddressFieldName &lt;w:addressFieldName></description></item>
    ///   <item><description>MailSubject &lt;w:mailSubject></description></item>
    ///   <item><description>MailAsAttachment &lt;w:mailAsAttachment></description></item>
    ///   <item><description>ViewMergedData &lt;w:viewMergedData></description></item>
    ///   <item><description>ActiveRecord &lt;w:activeRecord></description></item>
    ///   <item><description>CheckErrors &lt;w:checkErrors></description></item>
    ///   <item><description>DataSourceObject &lt;w:odso></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(MainDocumentType))]
    [ChildElementInfo(typeof(LinkToQuery))]
    [ChildElementInfo(typeof(DataType))]
    [ChildElementInfo(typeof(ConnectString))]
    [ChildElementInfo(typeof(Query))]
    [ChildElementInfo(typeof(DataSourceReference))]
    [ChildElementInfo(typeof(HeaderSource))]
    [ChildElementInfo(typeof(DoNotSuppressBlankLines))]
    [ChildElementInfo(typeof(Destination))]
    [ChildElementInfo(typeof(AddressFieldName))]
    [ChildElementInfo(typeof(MailSubject))]
    [ChildElementInfo(typeof(MailAsAttachment))]
    [ChildElementInfo(typeof(ViewMergedData))]
    [ChildElementInfo(typeof(ActiveRecord))]
    [ChildElementInfo(typeof(CheckErrors))]
    [ChildElementInfo(typeof(DataSourceObject))]
    [SchemaAttr(23, "mailMerge")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class MailMerge : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMerge class.
        /// </summary>
        public MailMerge() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMerge(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMerge(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MailMerge(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Source Document Type.</para>
        /// <para>Represents the following element tag in the schema: w:mainDocumentType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MainDocumentType MainDocumentType
        {
            get => GetElement<MainDocumentType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Query Contains Link to External Query File.</para>
        /// <para>Represents the following element tag in the schema: w:linkToQuery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LinkToQuery LinkToQuery
        {
            get => GetElement<LinkToQuery>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Type.</para>
        /// <para>Represents the following element tag in the schema: w:dataType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DataType DataType
        {
            get => GetElement<DataType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Connection String.</para>
        /// <para>Represents the following element tag in the schema: w:connectString.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConnectString ConnectString
        {
            get => GetElement<ConnectString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Query For Data Source Records To Merge.</para>
        /// <para>Represents the following element tag in the schema: w:query.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Query Query
        {
            get => GetElement<Query>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source File Path.</para>
        /// <para>Represents the following element tag in the schema: w:dataSource.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DataSourceReference DataSourceReference
        {
            get => GetElement<DataSourceReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Header Definition File Path.</para>
        /// <para>Represents the following element tag in the schema: w:headerSource.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HeaderSource HeaderSource
        {
            get => GetElement<HeaderSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Blank Lines from Merged Documents.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressBlankLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotSuppressBlankLines DoNotSuppressBlankLines
        {
            get => GetElement<DoNotSuppressBlankLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged Document Destination.</para>
        /// <para>Represents the following element tag in the schema: w:destination.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Destination Destination
        {
            get => GetElement<Destination>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Column Containing E-mail Address.</para>
        /// <para>Represents the following element tag in the schema: w:addressFieldName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AddressFieldName AddressFieldName
        {
            get => GetElement<AddressFieldName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged E-mail or Fax Subject Line.</para>
        /// <para>Represents the following element tag in the schema: w:mailSubject.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MailSubject MailSubject
        {
            get => GetElement<MailSubject>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged Document To E-Mail Attachment.</para>
        /// <para>Represents the following element tag in the schema: w:mailAsAttachment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MailAsAttachment MailAsAttachment
        {
            get => GetElement<MailAsAttachment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>View Merged Data Within Document.</para>
        /// <para>Represents the following element tag in the schema: w:viewMergedData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ViewMergedData ViewMergedData
        {
            get => GetElement<ViewMergedData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Record Currently Displayed In Merged Document.</para>
        /// <para>Represents the following element tag in the schema: w:activeRecord.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ActiveRecord ActiveRecord
        {
            get => GetElement<ActiveRecord>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Mail Merge Error Reporting Setting.</para>
        /// <para>Represents the following element tag in the schema: w:checkErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CheckErrors CheckErrors
        {
            get => GetElement<CheckErrors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Office Data Source Object Settings.</para>
        /// <para>Represents the following element tag in the schema: w:odso.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DataSourceObject DataSourceObject
        {
            get => GetElement<DataSourceObject>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MainDocumentType), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkToQuery), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataType), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConnectString), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Query), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceReference), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderSource), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Destination), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AddressFieldName), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailSubject), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ViewMergedData), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ActiveRecord), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CheckErrors), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceObject), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMerge>(deep);
    }

    /// <summary>
    /// <para>Visibility of Annotation Types.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:revisionView.</para>
    /// </summary>
    [SchemaAttr(23, "revisionView")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class RevisionView : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RevisionView class.
        /// </summary>
        public RevisionView() : base()
        {
        }

        /// <summary>
        /// <para>Display Visual Indicator Of Markup Area</para>
        /// <para>Represents the following attribute in the schema: w:markup</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "markup")]
        [Index(0)]
        public OnOffValue Markup { get; set; }

        /// <summary>
        /// <para>Display Comments</para>
        /// <para>Represents the following attribute in the schema: w:comments</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "comments")]
        [Index(1)]
        public OnOffValue Comments { get; set; }

        /// <summary>
        /// <para>Display Content Revisions</para>
        /// <para>Represents the following attribute in the schema: w:insDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "insDel")]
        [Index(2)]
        public OnOffValue DisplayRevision { get; set; }

        /// <summary>
        /// <para>Display Formatting Revisions</para>
        /// <para>Represents the following attribute in the schema: w:formatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "formatting")]
        [Index(3)]
        public OnOffValue Formatting { get; set; }

        /// <summary>
        /// <para>Display Ink Annotations</para>
        /// <para>Represents the following attribute in the schema: w:inkAnnotations</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "inkAnnotations")]
        [Index(4)]
        public OnOffValue InkAnnotations { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionView>(deep);
    }

    /// <summary>
    /// <para>Document Editing Restrictions.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:documentProtection.</para>
    /// </summary>
    [SchemaAttr(23, "documentProtection")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocumentProtection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentProtection class.
        /// </summary>
        public DocumentProtection() : base()
        {
        }

        /// <summary>
        /// <para>Document Editing Restrictions</para>
        /// <para>Represents the following attribute in the schema: w:edit</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "edit")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentProtectionValues> Edit { get; set; }

        /// <summary>
        /// <para>Only Allow Formatting With Unlocked Styles</para>
        /// <para>Represents the following attribute in the schema: w:formatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "formatting")]
        [Index(1)]
        public OnOffValue Formatting { get; set; }

        /// <summary>
        /// <para>Enforce Document Protection Settings</para>
        /// <para>Represents the following attribute in the schema: w:enforcement</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "enforcement")]
        [Index(2)]
        public OnOffValue Enforcement { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProviderType")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues> CryptographicProviderType { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Class</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmClass</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmClass")]
        [Index(4)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues> CryptographicAlgorithmClass { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmType")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues> CryptographicAlgorithmType { get; set; }

        /// <summary>
        /// <para>Cryptographic Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmSid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptAlgorithmSid")]
        [Index(6)]
        public Int32Value CryptographicAlgorithmSid { get; set; }

        /// <summary>
        /// <para>Iterations to Run Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptSpinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [NumberValidator(MaxInclusive = 5000000L)]
        [SchemaAttr(23, "cryptSpinCount")]
        [Index(7)]
        public UInt32Value CryptographicSpinCount { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider</para>
        /// <para>Represents the following attribute in the schema: w:cryptProvider</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProvider")]
        [Index(8)]
        public StringValue CryptographicProvider { get; set; }

        /// <summary>
        /// <para>Cryptographic Algorithm Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:algIdExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "algIdExt")]
        [Index(9)]
        public HexBinaryValue AlgorithmIdExtensibility { get; set; }

        /// <summary>
        /// <para>Algorithm Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:algIdExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "algIdExtSource")]
        [Index(10)]
        public StringValue AlgorithmIdExtensibilitySource { get; set; }

        /// <summary>
        /// <para>Cryptographic Provider Type Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "cryptProviderTypeExt")]
        [Index(11)]
        public HexBinaryValue CryptographicProviderTypeExtensibility { get; set; }

        /// <summary>
        /// <para>Provider Type Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "cryptProviderTypeExtSource")]
        [Index(12)]
        public StringValue CryptographicProviderTypeExtSource { get; set; }

        /// <summary>
        /// <para>Password Hash</para>
        /// <para>Represents the following attribute in the schema: w:hash</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hash")]
        [Index(13)]
        public Base64BinaryValue Hash { get; set; }

        /// <summary>
        /// <para>Salt for Password Verifier</para>
        /// <para>Represents the following attribute in the schema: w:salt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "salt")]
        [Index(14)]
        public Base64BinaryValue Salt { get; set; }

        /// <summary>
        /// <para>algorithmName, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:algorithmName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "algorithmName")]
        [Index(15)]
        public StringValue AlgorithmName { get; set; }

        /// <summary>
        /// <para>hashValue, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:hashValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "hashValue")]
        [Index(16)]
        public Base64BinaryValue HashValue { get; set; }

        /// <summary>
        /// <para>saltValue, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:saltValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "saltValue")]
        [Index(17)]
        public Base64BinaryValue SaltValue { get; set; }

        /// <summary>
        /// <para>spinCount, this property is only available in Office2010, Office2013, Office2016</para>
        /// <para>Represents the following attribute in the schema: w:spinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [OfficeAvailability(FileFormatVersions.Office2010)]
        [SchemaAttr(23, "spinCount")]
        [Index(18)]
        public Int32Value SpinCount { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentProtection>(deep);
    }

    /// <summary>
    /// <para>Distance Between Automatic Tab Stops.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:defaultTabStop.</para>
    /// </summary>
    [SchemaAttr(23, "defaultTabStop")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DefaultTabStop : NonNegativeShortType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTabStop class.
        /// </summary>
        public DefaultTabStop() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTabStop>(deep);
    }

    /// <summary>
    /// <para>Number of Pages Per Booklet.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldPrintingSheets.</para>
    /// </summary>
    [SchemaAttr(23, "bookFoldPrintingSheets")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class BookFoldPrintingSheets : NonNegativeShortType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldPrintingSheets class.
        /// </summary>
        public BookFoldPrintingSheets() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldPrintingSheets>(deep);
    }

    /// <summary>
    /// <para>Defines the NonNegativeShortType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class NonNegativeShortType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NonNegativeShortType class.
        /// </summary>
        protected NonNegativeShortType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int16Value Val { get; set; }
    }

    /// <summary>
    /// <para>Maximum Number of Consecutively Hyphenated Lines.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:consecutiveHyphenLimit.</para>
    /// </summary>
    [SchemaAttr(23, "consecutiveHyphenLimit")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ConsecutiveHyphenLimit : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConsecutiveHyphenLimit class.
        /// </summary>
        public ConsecutiveHyphenLimit() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public UInt16Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConsecutiveHyphenLimit>(deep);
    }

    /// <summary>
    /// <para>Percentage of Document to Use When Generating Summary.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:summaryLength.</para>
    /// </summary>
    [SchemaAttr(23, "summaryLength")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SummaryLength : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SummaryLength class.
        /// </summary>
        public SummaryLength() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 100L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SummaryLength>(deep);
    }

    /// <summary>
    /// <para>Distance between Horizontal Gridlines.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayHorizontalDrawingGridEvery.</para>
    /// </summary>
    [SchemaAttr(23, "displayHorizontalDrawingGridEvery")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DisplayHorizontalDrawingGrid : UnsignedInt7Type
    {
        /// <summary>
        /// Initializes a new instance of the DisplayHorizontalDrawingGrid class.
        /// </summary>
        public DisplayHorizontalDrawingGrid() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayHorizontalDrawingGrid>(deep);
    }

    /// <summary>
    /// <para>Distance between Vertical Gridlines.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayVerticalDrawingGridEvery.</para>
    /// </summary>
    [SchemaAttr(23, "displayVerticalDrawingGridEvery")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DisplayVerticalDrawingGrid : UnsignedInt7Type
    {
        /// <summary>
        /// Initializes a new instance of the DisplayVerticalDrawingGrid class.
        /// </summary>
        public DisplayVerticalDrawingGrid() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayVerticalDrawingGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedInt7Type Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedInt7Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedInt7Type class.
        /// </summary>
        protected UnsignedInt7Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(MinInclusive = 0L, MaxInclusive = 127L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public Int32Value Val { get; set; }
    }

    /// <summary>
    /// <para>Character-Level Whitespace Compression.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:characterSpacingControl.</para>
    /// </summary>
    [SchemaAttr(23, "characterSpacingControl")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class CharacterSpacingControl : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterSpacingControl class.
        /// </summary>
        public CharacterSpacingControl() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterSpacingControl>(deep);
    }

    /// <summary>
    /// <para>Custom Set of Characters Which Cannot End a Line.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLineBreaksAfter.</para>
    /// </summary>
    [SchemaAttr(23, "noLineBreaksAfter")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoLineBreaksAfterKinsoku : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoLineBreaksAfterKinsoku class.
        /// </summary>
        public NoLineBreaksAfterKinsoku() : base()
        {
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "lang")]
        [Index(0)]
        public StringValue Language { get; set; }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 50L)]
        [SchemaAttr(23, "val")]
        [Index(1)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLineBreaksAfterKinsoku>(deep);
    }

    /// <summary>
    /// <para>Custom Set Of Characters Which Cannot Begin A Line.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLineBreaksBefore.</para>
    /// </summary>
    [SchemaAttr(23, "noLineBreaksBefore")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class NoLineBreaksBeforeKinsoku : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoLineBreaksBeforeKinsoku class.
        /// </summary>
        public NoLineBreaksBeforeKinsoku() : base()
        {
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 84L)]
        [SchemaAttr(23, "lang")]
        [Index(0)]
        public StringValue Language { get; set; }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(MaxLength = 100L)]
        [SchemaAttr(23, "val")]
        [Index(1)]
        public StringValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLineBreaksBeforeKinsoku>(deep);
    }

    /// <summary>
    /// <para>Custom XSL Transform To Use When Saving As XML File.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveThroughXslt.</para>
    /// </summary>
    [SchemaAttr(23, "saveThroughXslt")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class SaveThroughXslt : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SaveThroughXslt class.
        /// </summary>
        public SaveThroughXslt() : base()
        {
        }

        /// <summary>
        /// <para>XSL Transformation Location</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [SchemaAttr(19, "id")]
        [Index(0)]
        public StringValue Id { get; set; }

        /// <summary>
        /// <para>Local Identifier for XSL Transform</para>
        /// <para>Represents the following attribute in the schema: w:solutionID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "solutionID")]
        [Index(1)]
        public StringValue SolutionId { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveThroughXslt>(deep);
    }

    /// <summary>
    /// <para>Default Properties for VML Objects in Header and Footer.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hdrShapeDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeDefaults &lt;o:shapedefaults></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeLayout &lt;o:shapelayout></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "hdrShapeDefaults")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class HeaderShapeDefaults : ShapeDefaultsType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class.
        /// </summary>
        public HeaderShapeDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeaderShapeDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeaderShapeDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HeaderShapeDefaults(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 0, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderShapeDefaults>(deep);
    }

    /// <summary>
    /// <para>Default Properties for VML Objects in Main Document.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shapeDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeDefaults &lt;o:shapedefaults></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeLayout &lt;o:shapelayout></description></item>
    /// </list>
    /// </remark>
    [SchemaAttr(23, "shapeDefaults")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ShapeDefaults : ShapeDefaultsType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class.
        /// </summary>
        public ShapeDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeDefaults(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 0, 0)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults), 1, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout), 1, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeDefaults>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapeDefaultsType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeDefaults &lt;o:shapedefaults></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Office.ShapeLayout &lt;o:shapelayout></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout))]
    public abstract partial class ShapeDefaultsType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class.
        /// </summary>
        protected ShapeDefaultsType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ShapeDefaultsType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ShapeDefaultsType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ShapeDefaultsType(string outerXml) : base(outerXml)
        {
        }
    }

    /// <summary>
    /// <para>Document-Wide Footnote Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>FootnotePosition &lt;w:pos></description></item>
    ///   <item><description>NumberingFormat &lt;w:numFmt></description></item>
    ///   <item><description>NumberingStart &lt;w:numStart></description></item>
    ///   <item><description>NumberingRestart &lt;w:numRestart></description></item>
    ///   <item><description>FootnoteSpecialReference &lt;w:footnote></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(FootnotePosition))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(NumberingStart))]
    [ChildElementInfo(typeof(NumberingRestart))]
    [ChildElementInfo(typeof(FootnoteSpecialReference))]
    [SchemaAttr(23, "footnotePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FootnoteDocumentWideProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class.
        /// </summary>
        public FootnoteDocumentWideProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteDocumentWideProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteDocumentWideProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FootnoteDocumentWideProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FootnotePosition FootnotePosition
        {
            get => GetElement<FootnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingFormat NumberingFormat
        {
            get => GetElement<NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingStart NumberingStart
        {
            get => GetElement<NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingRestart NumberingRestart
        {
            get => GetElement<NumberingRestart>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnotePosition), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteSpecialReference), 0, 3)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteDocumentWideProperties>(deep);
    }

    /// <summary>
    /// <para>Document-Wide Endnote Properties.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>EndnotePosition &lt;w:pos></description></item>
    ///   <item><description>NumberingFormat &lt;w:numFmt></description></item>
    ///   <item><description>NumberingStart &lt;w:numStart></description></item>
    ///   <item><description>NumberingRestart &lt;w:numRestart></description></item>
    ///   <item><description>EndnoteSpecialReference &lt;w:endnote></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(EndnotePosition))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(NumberingStart))]
    [ChildElementInfo(typeof(NumberingRestart))]
    [ChildElementInfo(typeof(EndnoteSpecialReference))]
    [SchemaAttr(23, "endnotePr")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EndnoteDocumentWideProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class.
        /// </summary>
        public EndnoteDocumentWideProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteDocumentWideProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteDocumentWideProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndnoteDocumentWideProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Endnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EndnotePosition EndnotePosition
        {
            get => GetElement<EndnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Endnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingFormat NumberingFormat
        {
            get => GetElement<NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingStart NumberingStart
        {
            get => GetElement<NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NumberingRestart NumberingRestart
        {
            get => GetElement<NumberingRestart>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnotePosition), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                new CompositeParticle(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                    }
                }
            },
            new CompositeParticle(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteSpecialReference), 0, 3)
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteDocumentWideProperties>(deep);
    }

    /// <summary>
    /// <para>Compatibility Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:compat.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>UseSingleBorderForContiguousCells &lt;w:useSingleBorderforContiguousCells></description></item>
    ///   <item><description>WordPerfectJustification &lt;w:wpJustification></description></item>
    ///   <item><description>NoTabHangIndent &lt;w:noTabHangInd></description></item>
    ///   <item><description>NoLeading &lt;w:noLeading></description></item>
    ///   <item><description>SpaceForUnderline &lt;w:spaceForUL></description></item>
    ///   <item><description>NoColumnBalance &lt;w:noColumnBalance></description></item>
    ///   <item><description>BalanceSingleByteDoubleByteWidth &lt;w:balanceSingleByteDoubleByteWidth></description></item>
    ///   <item><description>NoExtraLineSpacing &lt;w:noExtraLineSpacing></description></item>
    ///   <item><description>DoNotLeaveBackslashAlone &lt;w:doNotLeaveBackslashAlone></description></item>
    ///   <item><description>UnderlineTrailingSpaces &lt;w:ulTrailSpace></description></item>
    ///   <item><description>DoNotExpandShiftReturn &lt;w:doNotExpandShiftReturn></description></item>
    ///   <item><description>SpacingInWholePoints &lt;w:spacingInWholePoints></description></item>
    ///   <item><description>LineWrapLikeWord6 &lt;w:lineWrapLikeWord6></description></item>
    ///   <item><description>PrintBodyTextBeforeHeader &lt;w:printBodyTextBeforeHeader></description></item>
    ///   <item><description>PrintColorBlackWhite &lt;w:printColBlack></description></item>
    ///   <item><description>WordPerfectSpaceWidth &lt;w:wpSpaceWidth></description></item>
    ///   <item><description>ShowBreaksInFrames &lt;w:showBreaksInFrames></description></item>
    ///   <item><description>SubFontBySize &lt;w:subFontBySize></description></item>
    ///   <item><description>SuppressBottomSpacing &lt;w:suppressBottomSpacing></description></item>
    ///   <item><description>SuppressTopSpacing &lt;w:suppressTopSpacing></description></item>
    ///   <item><description>SuppressSpacingAtTopOfPage &lt;w:suppressSpacingAtTopOfPage></description></item>
    ///   <item><description>SuppressTopSpacingWordPerfect &lt;w:suppressTopSpacingWP></description></item>
    ///   <item><description>SuppressSpacingBeforeAfterPageBreak &lt;w:suppressSpBfAfterPgBrk></description></item>
    ///   <item><description>SwapBordersFacingPages &lt;w:swapBordersFacingPages></description></item>
    ///   <item><description>ConvertMailMergeEscape &lt;w:convMailMergeEsc></description></item>
    ///   <item><description>TruncateFontHeightsLikeWordPerfect &lt;w:truncateFontHeightsLikeWP6></description></item>
    ///   <item><description>MacWordSmallCaps &lt;w:mwSmallCaps></description></item>
    ///   <item><description>UsePrinterMetrics &lt;w:usePrinterMetrics></description></item>
    ///   <item><description>DoNotSuppressParagraphBorders &lt;w:doNotSuppressParagraphBorders></description></item>
    ///   <item><description>WrapTrailSpaces &lt;w:wrapTrailSpaces></description></item>
    ///   <item><description>FootnoteLayoutLikeWord8 &lt;w:footnoteLayoutLikeWW8></description></item>
    ///   <item><description>ShapeLayoutLikeWord8 &lt;w:shapeLayoutLikeWW8></description></item>
    ///   <item><description>AlignTablesRowByRow &lt;w:alignTablesRowByRow></description></item>
    ///   <item><description>ForgetLastTabAlignment &lt;w:forgetLastTabAlignment></description></item>
    ///   <item><description>AdjustLineHeightInTable &lt;w:adjustLineHeightInTable></description></item>
    ///   <item><description>AutoSpaceLikeWord95 &lt;w:autoSpaceLikeWord95></description></item>
    ///   <item><description>NoSpaceRaiseLower &lt;w:noSpaceRaiseLower></description></item>
    ///   <item><description>DoNotUseHTMLParagraphAutoSpacing &lt;w:doNotUseHTMLParagraphAutoSpacing></description></item>
    ///   <item><description>LayoutRawTableWidth &lt;w:layoutRawTableWidth></description></item>
    ///   <item><description>LayoutTableRowsApart &lt;w:layoutTableRowsApart></description></item>
    ///   <item><description>UseWord97LineBreakRules &lt;w:useWord97LineBreakRules></description></item>
    ///   <item><description>DoNotBreakWrappedTables &lt;w:doNotBreakWrappedTables></description></item>
    ///   <item><description>DoNotSnapToGridInCell &lt;w:doNotSnapToGridInCell></description></item>
    ///   <item><description>SelectFieldWithFirstOrLastChar &lt;w:selectFldWithFirstOrLastChar></description></item>
    ///   <item><description>ApplyBreakingRules &lt;w:applyBreakingRules></description></item>
    ///   <item><description>DoNotWrapTextWithPunctuation &lt;w:doNotWrapTextWithPunct></description></item>
    ///   <item><description>DoNotUseEastAsianBreakRules &lt;w:doNotUseEastAsianBreakRules></description></item>
    ///   <item><description>UseWord2002TableStyleRules &lt;w:useWord2002TableStyleRules></description></item>
    ///   <item><description>GrowAutofit &lt;w:growAutofit></description></item>
    ///   <item><description>UseFarEastLayout &lt;w:useFELayout></description></item>
    ///   <item><description>UseNormalStyleForList &lt;w:useNormalStyleForList></description></item>
    ///   <item><description>DoNotUseIndentAsNumberingTabStop &lt;w:doNotUseIndentAsNumberingTabStop></description></item>
    ///   <item><description>UseAltKinsokuLineBreakRules &lt;w:useAltKinsokuLineBreakRules></description></item>
    ///   <item><description>AllowSpaceOfSameStyleInTable &lt;w:allowSpaceOfSameStyleInTable></description></item>
    ///   <item><description>DoNotSuppressIndentation &lt;w:doNotSuppressIndentation></description></item>
    ///   <item><description>DoNotAutofitConstrainedTables &lt;w:doNotAutofitConstrainedTables></description></item>
    ///   <item><description>AutofitToFirstFixedWidthCell &lt;w:autofitToFirstFixedWidthCell></description></item>
    ///   <item><description>UnderlineTabInNumberingList &lt;w:underlineTabInNumList></description></item>
    ///   <item><description>DisplayHangulFixedWidth &lt;w:displayHangulFixedWidth></description></item>
    ///   <item><description>SplitPageBreakAndParagraphMark &lt;w:splitPgBreakAndParaMark></description></item>
    ///   <item><description>DoNotVerticallyAlignCellWithShape &lt;w:doNotVertAlignCellWithSp></description></item>
    ///   <item><description>DoNotBreakConstrainedForcedTable &lt;w:doNotBreakConstrainedForcedTable></description></item>
    ///   <item><description>DoNotVerticallyAlignInTextBox &lt;w:doNotVertAlignInTxbx></description></item>
    ///   <item><description>UseAnsiKerningPairs &lt;w:useAnsiKerningPairs></description></item>
    ///   <item><description>CachedColumnBalance &lt;w:cachedColBalance></description></item>
    ///   <item><description>CompatibilitySetting &lt;w:compatSetting></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(UseSingleBorderForContiguousCells))]
    [ChildElementInfo(typeof(WordPerfectJustification))]
    [ChildElementInfo(typeof(NoTabHangIndent))]
    [ChildElementInfo(typeof(NoLeading))]
    [ChildElementInfo(typeof(SpaceForUnderline))]
    [ChildElementInfo(typeof(NoColumnBalance))]
    [ChildElementInfo(typeof(BalanceSingleByteDoubleByteWidth))]
    [ChildElementInfo(typeof(NoExtraLineSpacing))]
    [ChildElementInfo(typeof(DoNotLeaveBackslashAlone))]
    [ChildElementInfo(typeof(UnderlineTrailingSpaces))]
    [ChildElementInfo(typeof(DoNotExpandShiftReturn))]
    [ChildElementInfo(typeof(SpacingInWholePoints))]
    [ChildElementInfo(typeof(LineWrapLikeWord6))]
    [ChildElementInfo(typeof(PrintBodyTextBeforeHeader))]
    [ChildElementInfo(typeof(PrintColorBlackWhite))]
    [ChildElementInfo(typeof(WordPerfectSpaceWidth))]
    [ChildElementInfo(typeof(ShowBreaksInFrames))]
    [ChildElementInfo(typeof(SubFontBySize))]
    [ChildElementInfo(typeof(SuppressBottomSpacing))]
    [ChildElementInfo(typeof(SuppressTopSpacing))]
    [ChildElementInfo(typeof(SuppressSpacingAtTopOfPage))]
    [ChildElementInfo(typeof(SuppressTopSpacingWordPerfect))]
    [ChildElementInfo(typeof(SuppressSpacingBeforeAfterPageBreak))]
    [ChildElementInfo(typeof(SwapBordersFacingPages))]
    [ChildElementInfo(typeof(ConvertMailMergeEscape))]
    [ChildElementInfo(typeof(TruncateFontHeightsLikeWordPerfect))]
    [ChildElementInfo(typeof(MacWordSmallCaps))]
    [ChildElementInfo(typeof(UsePrinterMetrics))]
    [ChildElementInfo(typeof(DoNotSuppressParagraphBorders))]
    [ChildElementInfo(typeof(WrapTrailSpaces))]
    [ChildElementInfo(typeof(FootnoteLayoutLikeWord8))]
    [ChildElementInfo(typeof(ShapeLayoutLikeWord8))]
    [ChildElementInfo(typeof(AlignTablesRowByRow))]
    [ChildElementInfo(typeof(ForgetLastTabAlignment))]
    [ChildElementInfo(typeof(AdjustLineHeightInTable))]
    [ChildElementInfo(typeof(AutoSpaceLikeWord95))]
    [ChildElementInfo(typeof(NoSpaceRaiseLower))]
    [ChildElementInfo(typeof(DoNotUseHTMLParagraphAutoSpacing))]
    [ChildElementInfo(typeof(LayoutRawTableWidth))]
    [ChildElementInfo(typeof(LayoutTableRowsApart))]
    [ChildElementInfo(typeof(UseWord97LineBreakRules))]
    [ChildElementInfo(typeof(DoNotBreakWrappedTables))]
    [ChildElementInfo(typeof(DoNotSnapToGridInCell))]
    [ChildElementInfo(typeof(SelectFieldWithFirstOrLastChar))]
    [ChildElementInfo(typeof(ApplyBreakingRules))]
    [ChildElementInfo(typeof(DoNotWrapTextWithPunctuation))]
    [ChildElementInfo(typeof(DoNotUseEastAsianBreakRules))]
    [ChildElementInfo(typeof(UseWord2002TableStyleRules))]
    [ChildElementInfo(typeof(GrowAutofit))]
    [ChildElementInfo(typeof(UseFarEastLayout))]
    [ChildElementInfo(typeof(UseNormalStyleForList))]
    [ChildElementInfo(typeof(DoNotUseIndentAsNumberingTabStop))]
    [ChildElementInfo(typeof(UseAltKinsokuLineBreakRules))]
    [ChildElementInfo(typeof(AllowSpaceOfSameStyleInTable))]
    [ChildElementInfo(typeof(DoNotSuppressIndentation))]
    [ChildElementInfo(typeof(DoNotAutofitConstrainedTables))]
    [ChildElementInfo(typeof(AutofitToFirstFixedWidthCell))]
    [ChildElementInfo(typeof(UnderlineTabInNumberingList))]
    [ChildElementInfo(typeof(DisplayHangulFixedWidth))]
    [ChildElementInfo(typeof(SplitPageBreakAndParagraphMark))]
    [ChildElementInfo(typeof(DoNotVerticallyAlignCellWithShape))]
    [ChildElementInfo(typeof(DoNotBreakConstrainedForcedTable))]
    [ChildElementInfo(typeof(DoNotVerticallyAlignInTextBox))]
    [ChildElementInfo(typeof(UseAnsiKerningPairs))]
    [ChildElementInfo(typeof(CachedColumnBalance))]
    [ChildElementInfo(typeof(CompatibilitySetting))]
    [SchemaAttr(23, "compat")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Compatibility : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Compatibility class.
        /// </summary>
        public Compatibility() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compatibility(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compatibility(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Compatibility(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Use Simplified Rules For Table Border Conflicts.</para>
        /// <para>Represents the following element tag in the schema: w:useSingleBorderforContiguousCells.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseSingleBorderForContiguousCells UseSingleBorderForContiguousCells
        {
            get => GetElement<UseSingleBorderForContiguousCells>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 6.x Paragraph Justification.</para>
        /// <para>Represents the following element tag in the schema: w:wpJustification.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordPerfectJustification WordPerfectJustification
        {
            get => GetElement<WordPerfectJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Create Custom Tab Stop for Hanging Indent.</para>
        /// <para>Represents the following element tag in the schema: w:noTabHangInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoTabHangIndent NoTabHangIndent
        {
            get => GetElement<NoTabHangIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Add Leading Between Lines of Text.</para>
        /// <para>Represents the following element tag in the schema: w:noLeading.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoLeading NoLeading
        {
            get => GetElement<NoLeading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Add Additional Space Below Baseline For Underlined East Asian Text.</para>
        /// <para>Represents the following element tag in the schema: w:spaceForUL.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpaceForUnderline SpaceForUnderline
        {
            get => GetElement<SpaceForUnderline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Balance Text Columns within a Section.</para>
        /// <para>Represents the following element tag in the schema: w:noColumnBalance.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoColumnBalance NoColumnBalance
        {
            get => GetElement<NoColumnBalance>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Balance Single Byte and Double Byte Characters.</para>
        /// <para>Represents the following element tag in the schema: w:balanceSingleByteDoubleByteWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public BalanceSingleByteDoubleByteWidth BalanceSingleByteDoubleByteWidth
        {
            get => GetElement<BalanceSingleByteDoubleByteWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Center Content on Lines With Exact Line Height.</para>
        /// <para>Represents the following element tag in the schema: w:noExtraLineSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoExtraLineSpacing NoExtraLineSpacing
        {
            get => GetElement<NoExtraLineSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Convert Backslash To Yen Sign When Entered.</para>
        /// <para>Represents the following element tag in the schema: w:doNotLeaveBackslashAlone.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotLeaveBackslashAlone DoNotLeaveBackslashAlone
        {
            get => GetElement<DoNotLeaveBackslashAlone>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline All Trailing Spaces.</para>
        /// <para>Represents the following element tag in the schema: w:ulTrailSpace.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UnderlineTrailingSpaces UnderlineTrailingSpaces
        {
            get => GetElement<UnderlineTrailingSpaces>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Justify Lines Ending in Soft Line Break.</para>
        /// <para>Represents the following element tag in the schema: w:doNotExpandShiftReturn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotExpandShiftReturn DoNotExpandShiftReturn
        {
            get => GetElement<DoNotExpandShiftReturn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Expand/Condense Text By Whole Points.</para>
        /// <para>Represents the following element tag in the schema: w:spacingInWholePoints.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SpacingInWholePoints SpacingInWholePoints
        {
            get => GetElement<SpacingInWholePoints>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 6.0 Line Wrapping for East Asian Text.</para>
        /// <para>Represents the following element tag in the schema: w:lineWrapLikeWord6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LineWrapLikeWord6 LineWrapLikeWord6
        {
            get => GetElement<LineWrapLikeWord6>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Body Text before Header/Footer Contents.</para>
        /// <para>Represents the following element tag in the schema: w:printBodyTextBeforeHeader.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrintBodyTextBeforeHeader PrintBodyTextBeforeHeader
        {
            get => GetElement<PrintBodyTextBeforeHeader>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Colors as Black And White without Dithering.</para>
        /// <para>Represents the following element tag in the schema: w:printColBlack.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public PrintColorBlackWhite PrintColorBlackWhite
        {
            get => GetElement<PrintColorBlackWhite>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space width.</para>
        /// <para>Represents the following element tag in the schema: w:wpSpaceWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WordPerfectSpaceWidth WordPerfectSpaceWidth
        {
            get => GetElement<WordPerfectSpaceWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display Page/Column Breaks Present in Frames.</para>
        /// <para>Represents the following element tag in the schema: w:showBreaksInFrames.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ShowBreaksInFrames ShowBreaksInFrames
        {
            get => GetElement<ShowBreaksInFrames>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Increase Priority Of Font Size During Font Substitution.</para>
        /// <para>Represents the following element tag in the schema: w:subFontBySize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SubFontBySize SubFontBySize
        {
            get => GetElement<SubFontBySize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Exact Line Height for Last Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressBottomSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressBottomSpacing SuppressBottomSpacing
        {
            get => GetElement<SuppressBottomSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Minimum and Exact Line Height for First Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressTopSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressTopSpacing SuppressTopSpacing
        {
            get => GetElement<SuppressTopSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Minimum Line Height for First Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressSpacingAtTopOfPage.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressSpacingAtTopOfPage SuppressSpacingAtTopOfPage
        {
            get => GetElement<SuppressSpacingAtTopOfPage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 5.x Line Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:suppressTopSpacingWP.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressTopSpacingWordPerfect SuppressTopSpacingWordPerfect
        {
            get => GetElement<SuppressTopSpacingWordPerfect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Use Space Before On First Line After a Page Break.</para>
        /// <para>Represents the following element tag in the schema: w:suppressSpBfAfterPgBrk.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SuppressSpacingBeforeAfterPageBreak SuppressSpacingBeforeAfterPageBreak
        {
            get => GetElement<SuppressSpacingBeforeAfterPageBreak>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Swap Paragraph Borders on Odd Numbered Pages.</para>
        /// <para>Represents the following element tag in the schema: w:swapBordersFacingPages.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SwapBordersFacingPages SwapBordersFacingPages
        {
            get => GetElement<SwapBordersFacingPages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Treat Backslash Quotation Delimiter as Two Quotation Marks.</para>
        /// <para>Represents the following element tag in the schema: w:convMailMergeEsc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ConvertMailMergeEscape ConvertMailMergeEscape
        {
            get => GetElement<ConvertMailMergeEscape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 6.x Font Height Calculation.</para>
        /// <para>Represents the following element tag in the schema: w:truncateFontHeightsLikeWP6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public TruncateFontHeightsLikeWordPerfect TruncateFontHeightsLikeWordPerfect
        {
            get => GetElement<TruncateFontHeightsLikeWordPerfect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 5.x for the Macintosh Small Caps Formatting.</para>
        /// <para>Represents the following element tag in the schema: w:mwSmallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public MacWordSmallCaps MacWordSmallCaps
        {
            get => GetElement<MacWordSmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Printer Metrics To Display Documents.</para>
        /// <para>Represents the following element tag in the schema: w:usePrinterMetrics.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UsePrinterMetrics UsePrinterMetrics
        {
            get => GetElement<UsePrinterMetrics>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Suppress Paragraph Borders Next To Frames.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressParagraphBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotSuppressParagraphBorders DoNotSuppressParagraphBorders
        {
            get => GetElement<DoNotSuppressParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Wrap Trailing Spaces.</para>
        /// <para>Represents the following element tag in the schema: w:wrapTrailSpaces.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public WrapTrailSpaces WrapTrailSpaces
        {
            get => GetElement<WrapTrailSpaces>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 6.x/95/97 Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:footnoteLayoutLikeWW8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public FootnoteLayoutLikeWord8 FootnoteLayoutLikeWord8
        {
            get => GetElement<FootnoteLayoutLikeWord8>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 97 Text Wrapping Around Floating Objects.</para>
        /// <para>Represents the following element tag in the schema: w:shapeLayoutLikeWW8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ShapeLayoutLikeWord8 ShapeLayoutLikeWord8
        {
            get => GetElement<ShapeLayoutLikeWord8>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Align Table Rows Independently.</para>
        /// <para>Represents the following element tag in the schema: w:alignTablesRowByRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AlignTablesRowByRow AlignTablesRowByRow
        {
            get => GetElement<AlignTablesRowByRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned.</para>
        /// <para>Represents the following element tag in the schema: w:forgetLastTabAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ForgetLastTabAlignment ForgetLastTabAlignment
        {
            get => GetElement<ForgetLastTabAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Add Document Grid Line Pitch To Lines in Table Cells.</para>
        /// <para>Represents the following element tag in the schema: w:adjustLineHeightInTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AdjustLineHeightInTable AdjustLineHeightInTable
        {
            get => GetElement<AdjustLineHeightInTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 95 Full-Width Character Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceLikeWord95.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutoSpaceLikeWord95 AutoSpaceLikeWord95
        {
            get => GetElement<AutoSpaceLikeWord95>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Increase Line Height for Raised/Lowered Text.</para>
        /// <para>Represents the following element tag in the schema: w:noSpaceRaiseLower.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public NoSpaceRaiseLower NoSpaceRaiseLower
        {
            get => GetElement<NoSpaceRaiseLower>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Fixed Paragraph Spacing for HTML Auto Setting.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseHTMLParagraphAutoSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotUseHTMLParagraphAutoSpacing DoNotUseHTMLParagraphAutoSpacing
        {
            get => GetElement<DoNotUseHTMLParagraphAutoSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Space Before Table When Deciding If Table Should Wrap Floating Object.</para>
        /// <para>Represents the following element tag in the schema: w:layoutRawTableWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LayoutRawTableWidth LayoutRawTableWidth
        {
            get => GetElement<LayoutRawTableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Table Rows to Wrap Inline Objects Independently.</para>
        /// <para>Represents the following element tag in the schema: w:layoutTableRowsApart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public LayoutTableRowsApart LayoutTableRowsApart
        {
            get => GetElement<LayoutTableRowsApart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 97 East Asian Line Breaking.</para>
        /// <para>Represents the following element tag in the schema: w:useWord97LineBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseWord97LineBreakRules UseWord97LineBreakRules
        {
            get => GetElement<UseWord97LineBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Allow Floating Tables To Break Across Pages.</para>
        /// <para>Represents the following element tag in the schema: w:doNotBreakWrappedTables.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotBreakWrappedTables DoNotBreakWrappedTables
        {
            get => GetElement<DoNotBreakWrappedTables>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Snap to Document Grid in Table Cells with Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSnapToGridInCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotSnapToGridInCell DoNotSnapToGridInCell
        {
            get => GetElement<DoNotSnapToGridInCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Select Field When First or Last Character Is Selected.</para>
        /// <para>Represents the following element tag in the schema: w:selectFldWithFirstOrLastChar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SelectFieldWithFirstOrLastChar SelectFieldWithFirstOrLastChar
        {
            get => GetElement<SelectFieldWithFirstOrLastChar>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Legacy Ethiopic and Amharic Line Breaking Rules.</para>
        /// <para>Represents the following element tag in the schema: w:applyBreakingRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ApplyBreakingRules ApplyBreakingRules
        {
            get => GetElement<ApplyBreakingRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Allow Hanging Punctuation With Character Grid.</para>
        /// <para>Represents the following element tag in the schema: w:doNotWrapTextWithPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotWrapTextWithPunctuation DoNotWrapTextWithPunctuation
        {
            get => GetElement<DoNotWrapTextWithPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Compress Compressible Characters When Using Document Grid.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseEastAsianBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotUseEastAsianBreakRules DoNotUseEastAsianBreakRules
        {
            get => GetElement<DoNotUseEastAsianBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 2002 Table Style Rules.</para>
        /// <para>Represents the following element tag in the schema: w:useWord2002TableStyleRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseWord2002TableStyleRules UseWord2002TableStyleRules
        {
            get => GetElement<UseWord2002TableStyleRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Tables to AutoFit Into Page Margins.</para>
        /// <para>Represents the following element tag in the schema: w:growAutofit.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public GrowAutofit GrowAutofit
        {
            get => GetElement<GrowAutofit>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Bypass East Asian/Complex Script Layout Code.</para>
        /// <para>Represents the following element tag in the schema: w:useFELayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseFarEastLayout UseFarEastLayout
        {
            get => GetElement<UseFarEastLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text.</para>
        /// <para>Represents the following element tag in the schema: w:useNormalStyleForList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseNormalStyleForList UseNormalStyleForList
        {
            get => GetElement<UseNormalStyleForList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Hanging Indent When Creating Tab Stop After Numbering.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseIndentAsNumberingTabStop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotUseIndentAsNumberingTabStop DoNotUseIndentAsNumberingTabStop
        {
            get => GetElement<DoNotUseIndentAsNumberingTabStop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Alternate Set of East Asian Line Breaking Rules.</para>
        /// <para>Represents the following element tag in the schema: w:useAltKinsokuLineBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseAltKinsokuLineBreakRules UseAltKinsokuLineBreakRules
        {
            get => GetElement<UseAltKinsokuLineBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Contextual Spacing of Paragraphs in Tables.</para>
        /// <para>Represents the following element tag in the schema: w:allowSpaceOfSameStyleInTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AllowSpaceOfSameStyleInTable AllowSpaceOfSameStyleInTable
        {
            get => GetElement<AllowSpaceOfSameStyleInTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Ignore Floating Objects When Calculating Paragraph Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressIndentation.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotSuppressIndentation DoNotSuppressIndentation
        {
            get => GetElement<DoNotSuppressIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not AutoFit Tables To Fit Next To Wrapped Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotAutofitConstrainedTables.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotAutofitConstrainedTables DoNotAutofitConstrainedTables
        {
            get => GetElement<DoNotAutofitConstrainedTables>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Table Columns To Exceed Preferred Widths of Constituent Cells.</para>
        /// <para>Represents the following element tag in the schema: w:autofitToFirstFixedWidthCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public AutofitToFirstFixedWidthCell AutofitToFirstFixedWidthCell
        {
            get => GetElement<AutofitToFirstFixedWidthCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline Following Character Following Numbering.</para>
        /// <para>Represents the following element tag in the schema: w:underlineTabInNumList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UnderlineTabInNumberingList UnderlineTabInNumberingList
        {
            get => GetElement<UnderlineTabInNumberingList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Always Use Fixed Width for Hangul Characters.</para>
        /// <para>Represents the following element tag in the schema: w:displayHangulFixedWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DisplayHangulFixedWidth DisplayHangulFixedWidth
        {
            get => GetElement<DisplayHangulFixedWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Always Move Paragraph Mark to Page after a Page Break.</para>
        /// <para>Represents the following element tag in the schema: w:splitPgBreakAndParaMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public SplitPageBreakAndParagraphMark SplitPageBreakAndParagraphMark
        {
            get => GetElement<SplitPageBreakAndParagraphMark>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Vertically Align Cells Containing Floating Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotVertAlignCellWithSp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotVerticallyAlignCellWithShape DoNotVerticallyAlignCellWithShape
        {
            get => GetElement<DoNotVerticallyAlignCellWithShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Break Table Rows Around Floating Tables.</para>
        /// <para>Represents the following element tag in the schema: w:doNotBreakConstrainedForcedTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotBreakConstrainedForcedTable DoNotBreakConstrainedForcedTable
        {
            get => GetElement<DoNotBreakConstrainedForcedTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Vertical Alignment in Textboxes.</para>
        /// <para>Represents the following element tag in the schema: w:doNotVertAlignInTxbx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DoNotVerticallyAlignInTextBox DoNotVerticallyAlignInTextBox
        {
            get => GetElement<DoNotVerticallyAlignInTextBox>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use ANSI Kerning Pairs from Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:useAnsiKerningPairs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UseAnsiKerningPairs UseAnsiKerningPairs
        {
            get => GetElement<UseAnsiKerningPairs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Cached Paragraph Information for Column Balancing.</para>
        /// <para>Represents the following element tag in the schema: w:cachedColBalance.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public CachedColumnBalance CachedColumnBalance
        {
            get => GetElement<CachedColumnBalance>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLeading), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubFontBySize), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GrowAutofit), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CompatibilitySetting), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Compatibility>(deep);
    }

    /// <summary>
    /// <para>Document Variables.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docVars.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentVariable &lt;w:docVar></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentVariable))]
    [SchemaAttr(23, "docVars")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class DocumentVariables : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentVariables class.
        /// </summary>
        public DocumentVariables() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentVariables(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentVariables(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocumentVariables(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentVariable), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentVariables>(deep);
    }

    /// <summary>
    /// <para>Listing of All Revision Save ID Values.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsids.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>RsidRoot &lt;w:rsidRoot></description></item>
    ///   <item><description>Rsid &lt;w:rsid></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(RsidRoot))]
    [ChildElementInfo(typeof(Rsid))]
    [SchemaAttr(23, "rsids")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Rsids : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Rsids class.
        /// </summary>
        public Rsids() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Rsids(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Rsids(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Rsids(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Original Document Revision Save ID.</para>
        /// <para>Represents the following element tag in the schema: w:rsidRoot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public RsidRoot RsidRoot
        {
            get => GetElement<RsidRoot>();
            set => SetElement(value);
        }

        internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RsidRoot), 0, 1),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsid), 0, 0)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rsids>(deep);
    }

    /// <summary>
    /// <para>Theme Color Mappings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:clrSchemeMapping.</para>
    /// </summary>
    [SchemaAttr(23, "clrSchemeMapping")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ColorSchemeMapping : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorSchemeMapping class.
        /// </summary>
        public ColorSchemeMapping() : base()
        {
        }

        /// <summary>
        /// <para>Background 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:bg1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "bg1")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Background1 { get; set; }

        /// <summary>
        /// <para>Text 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:t1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "t1")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Text1 { get; set; }

        /// <summary>
        /// <para>Background 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:bg2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "bg2")]
        [Index(2)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Background2 { get; set; }

        /// <summary>
        /// <para>Text 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:t2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "t2")]
        [Index(3)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Text2 { get; set; }

        /// <summary>
        /// <para>Accent 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent1")]
        [Index(4)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent1 { get; set; }

        /// <summary>
        /// <para>Accent 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent2")]
        [Index(5)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent2 { get; set; }

        /// <summary>
        /// <para>Accent3 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent3</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent3")]
        [Index(6)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent3 { get; set; }

        /// <summary>
        /// <para>Accent4 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent4</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent4")]
        [Index(7)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent4 { get; set; }

        /// <summary>
        /// <para>Accent5 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent5</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent5")]
        [Index(8)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent5 { get; set; }

        /// <summary>
        /// <para>Accent6 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent6</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "accent6")]
        [Index(9)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Accent6 { get; set; }

        /// <summary>
        /// <para>Hyperlink Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:hyperlink</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "hyperlink")]
        [Index(10)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> Hyperlink { get; set; }

        /// <summary>
        /// <para>Followed Hyperlink Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:followedHyperlink</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "followedHyperlink")]
        [Index(11)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues> FollowedHyperlink { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorSchemeMapping>(deep);
    }

    /// <summary>
    /// <para>Caption Settings.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:captions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>Caption &lt;w:caption></description></item>
    ///   <item><description>AutoCaptions &lt;w:autoCaptions></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(Caption))]
    [ChildElementInfo(typeof(AutoCaptions))]
    [SchemaAttr(23, "captions")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Captions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Captions class.
        /// </summary>
        public Captions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Captions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Captions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Captions(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Sequence, 1, 1)
        {
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caption), 1, 0),
            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoCaptions), 0, 1)
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Captions>(deep);
    }

    /// <summary>
    /// <para>Freeze Document Layout.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:readModeInkLockDown.</para>
    /// </summary>
    [SchemaAttr(23, "readModeInkLockDown")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class ReadModeInkLockDown : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ReadModeInkLockDown class.
        /// </summary>
        public ReadModeInkLockDown() : base()
        {
        }

        /// <summary>
        /// <para>Use Actual Pages, Not Virtual Pages</para>
        /// <para>Represents the following attribute in the schema: w:actualPg</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "actualPg")]
        [Index(0)]
        public OnOffValue UseActualPages { get; set; }

        /// <summary>
        /// <para>Virtual Page Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "w")]
        [Index(1)]
        public UInt32Value Width { get; set; }

        /// <summary>
        /// <para>Virtual Page Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "h")]
        [Index(2)]
        public UInt32Value Height { get; set; }

        /// <summary>
        /// <para>Font Size Scaling</para>
        /// <para>Represents the following attribute in the schema: w:fontSz</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", Version = FileFormatVersions.Office2010, UnionId = 0)]
        [NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2010, UnionId = 0)]
        [StringValidator(Pattern = "-?[0-9]+(\\.[0-9]+)?%", InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [NumberValidator(SimpleType = typeof(Int32Value), InitialVersion = FileFormatVersions.Office2013, UnionId = 1)]
        [SchemaAttr(23, "fontSz")]
        [Index(3)]
        public StringValue FontSize { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReadModeInkLockDown>(deep);
    }

    /// <summary>
    /// <para>Defines the TargetScreenSize Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:targetScreenSz.</para>
    /// </summary>
    [SchemaAttr(23, "targetScreenSz")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class TargetScreenSize : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TargetScreenSize class.
        /// </summary>
        public TargetScreenSize() : base()
        {
        }

        /// <summary>
        /// <para>Target Screen Size Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TargetScreenSizeValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TargetScreenSize>(deep);
    }

    /// <summary>
    /// <para>Defines the PictureBulletBase Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pict.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description>DocumentFormat.OpenXml.Vml.Group &lt;v:group></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.ImageFile &lt;v:image></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Line &lt;v:line></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Oval &lt;v:oval></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.PolyLine &lt;v:polyline></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Rectangle &lt;v:rect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.RoundRectangle &lt;v:roundrect></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shape &lt;v:shape></description></item>
    ///   <item><description>DocumentFormat.OpenXml.Vml.Shapetype &lt;v:shapetype></description></item>
    /// </list>
    /// </remark>
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Group))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.ImageFile))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Line))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Oval))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.PolyLine))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Rectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shape))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Vml.Shapetype))]
    [SchemaAttr(23, "pict")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class PictureBulletBase : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class.
        /// </summary>
        public PictureBulletBase() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBulletBase(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBulletBase(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureBulletBase(string outerXml) : base(outerXml)
        {
        }

        private static readonly CompiledParticle _constraint = new CompositeParticle(ParticleType.Choice, 0, 0)
        {
            new CompositeParticle(ParticleType.Group, 1, 1)
            {
                new CompositeParticle(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                }
            }
        }.Compile();

        internal override CompiledParticle CompiledParticle => _constraint;

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureBulletBase>(deep);
    }

    /// <summary>
    /// <para>Defines the Panose1Number Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:panose1.</para>
    /// </summary>
    [SchemaAttr(23, "panose1")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Panose1Number : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Panose1Number class.
        /// </summary>
        public Panose1Number() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 10L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public HexBinaryValue Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Panose1Number>(deep);
    }

    /// <summary>
    /// <para>Defines the FontCharSet Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:charset.</para>
    /// </summary>
    [SchemaAttr(23, "charset")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FontCharSet : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontCharSet class.
        /// </summary>
        public FontCharSet() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(Pattern = "[0-9a-fA-F]*", MinLength = 1L, MaxLength = 2L)]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public StringValue Val { get; set; }

        /// <summary>
        /// <para>characterSet</para>
        /// <para>Represents the following attribute in the schema: w:characterSet</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "characterSet")]
        [Index(1)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.StrictCharacterSet> StrictCharacterSet { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontCharSet>(deep);
    }

    /// <summary>
    /// <para>Defines the FontFamily Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:family.</para>
    /// </summary>
    [SchemaAttr(23, "family")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FontFamily : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontFamily class.
        /// </summary>
        public FontFamily() : base()
        {
        }

        /// <summary>
        /// <para>Font Family Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontFamilyValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontFamily>(deep);
    }

    /// <summary>
    /// <para>Defines the Pitch Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pitch.</para>
    /// </summary>
    [SchemaAttr(23, "pitch")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class Pitch : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Pitch class.
        /// </summary>
        public Pitch() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(23, "val")]
        [Index(0)]
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontPitchValues> Val { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pitch>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSignature Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sig.</para>
    /// </summary>
    [SchemaAttr(23, "sig")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class FontSignature : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontSignature class.
        /// </summary>
        public FontSignature() : base()
        {
        }

        /// <summary>
        /// <para>First 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb0</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "usb0")]
        [Index(0)]
        public HexBinaryValue UnicodeSignature0 { get; set; }

        /// <summary>
        /// <para>Second 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "usb1")]
        [Index(1)]
        public HexBinaryValue UnicodeSignature1 { get; set; }

        /// <summary>
        /// <para>Third 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "usb2")]
        [Index(2)]
        public HexBinaryValue UnicodeSignature2 { get; set; }

        /// <summary>
        /// <para>Fourth 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb3</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "usb3")]
        [Index(3)]
        public HexBinaryValue UnicodeSignature3 { get; set; }

        /// <summary>
        /// <para>Lower 32 Bits of Code Page Bit Field</para>
        /// <para>Represents the following attribute in the schema: w:csb0</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "csb0")]
        [Index(4)]
        public HexBinaryValue CodePageSignature0 { get; set; }

        /// <summary>
        /// <para>Upper 32 Bits of Code Page Bit Field</para>
        /// <para>Represents the following attribute in the schema: w:csb1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [RequiredValidator()]
        [StringValidator(Length = 4L)]
        [SchemaAttr(23, "csb1")]
        [Index(5)]
        public HexBinaryValue CodePageSignature1 { get; set; }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSignature>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedRegularFont Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedRegular.</para>
    /// </summary>
    [SchemaAttr(23, "embedRegular")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedRegularFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedRegularFont class.
        /// </summary>
        public EmbedRegularFont() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedRegularFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedBoldFont Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedBold.</para>
    /// </summary>
    [SchemaAttr(23, "embedBold")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedBoldFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedBoldFont class.
        /// </summary>
        public EmbedBoldFont() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedBoldFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedItalicFont Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedItalic.</para>
    /// </summary>
    [SchemaAttr(23, "embedItalic")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedItalicFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedItalicFont class.
        /// </summary>
        public EmbedItalicFont() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedItalicFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedBoldItalicFont Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedBoldItalic.</para>
    /// </summary>
    [SchemaAttr(23, "embedBoldItalic")]
    [OfficeAvailability(FileFormatVersions.Office2007)]
    public partial class EmbedBoldItalicFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedBoldItalicFont class.
        /// </summary>
        public EmbedBoldItalicFont() : base()
        {
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedBoldItalicFont>(deep);
    }

    /// <summary>
    /// <para>Defines the FontRelationshipType Class.</para>
    /// <para>This class is available in Office 2007 or above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FontRelationshipType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontRelationshipType class.
        /// </summary>
        protected FontRelationshipType() : base()
        {
        }

        /// <summary>
        /// <para>fontKey</para>
        /// <para>Represents the following attribute in the schema: w:fontKey</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [StringValidator(IsToken = true, Pattern = "\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}")]
        [SchemaAttr(23, "fontKey")]
        [Index(0)]
        public StringValue FontKey { get; set; }

        /// <summary>
        /// <para>subsetted</para>
        /// <para>Represents the following attribute in the schema: w:subsetted</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        [SchemaAttr(23, "subsetted")]
        [Index(1)]
        public OnOffValue Subsetted { get; set; }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        [RequiredValidator()]
        [SchemaAttr(19, "id")]
        [Index(2)]
        public StringValue Id { get; set; }
    }

    /// <summary>
    /// Defines the OnOffOnlyValues enumeration.
    /// </summary>
    public enum OnOffOnlyValues
    {
        ///<summary>
        ///on.
        ///<para>When the item is serialized out as xml, its value is "on".</para>
        ///</summary>
        [EnumString("on")]
        On,
        ///<summary>
        ///off.
        ///<para>When the item is serialized out as xml, its value is "off".</para>
        ///</summary>
        [EnumString("off")]
        Off,
    }

    /// <summary>
    /// Defines the HighlightColorValues enumeration.
    /// </summary>
    public enum HighlightColorValues
    {
        ///<summary>
        ///Black Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "black".</para>
        ///</summary>
        [EnumString("black")]
        Black,
        ///<summary>
        ///Blue Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "blue".</para>
        ///</summary>
        [EnumString("blue")]
        Blue,
        ///<summary>
        ///Cyan Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "cyan".</para>
        ///</summary>
        [EnumString("cyan")]
        Cyan,
        ///<summary>
        ///Green Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "green".</para>
        ///</summary>
        [EnumString("green")]
        Green,
        ///<summary>
        ///Magenta Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "magenta".</para>
        ///</summary>
        [EnumString("magenta")]
        Magenta,
        ///<summary>
        ///Red Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "red".</para>
        ///</summary>
        [EnumString("red")]
        Red,
        ///<summary>
        ///Yellow Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "yellow".</para>
        ///</summary>
        [EnumString("yellow")]
        Yellow,
        ///<summary>
        ///White Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "white".</para>
        ///</summary>
        [EnumString("white")]
        White,
        ///<summary>
        ///Dark Blue Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkBlue".</para>
        ///</summary>
        [EnumString("darkBlue")]
        DarkBlue,
        ///<summary>
        ///Dark Cyan Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkCyan".</para>
        ///</summary>
        [EnumString("darkCyan")]
        DarkCyan,
        ///<summary>
        ///Dark Green Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkGreen".</para>
        ///</summary>
        [EnumString("darkGreen")]
        DarkGreen,
        ///<summary>
        ///Dark Magenta Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkMagenta".</para>
        ///</summary>
        [EnumString("darkMagenta")]
        DarkMagenta,
        ///<summary>
        ///Dark Red Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkRed".</para>
        ///</summary>
        [EnumString("darkRed")]
        DarkRed,
        ///<summary>
        ///Dark Yellow Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkYellow".</para>
        ///</summary>
        [EnumString("darkYellow")]
        DarkYellow,
        ///<summary>
        ///Dark Gray Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "darkGray".</para>
        ///</summary>
        [EnumString("darkGray")]
        DarkGray,
        ///<summary>
        ///Light Gray Highlighting Color.
        ///<para>When the item is serialized out as xml, its value is "lightGray".</para>
        ///</summary>
        [EnumString("lightGray")]
        LightGray,
        ///<summary>
        ///No Text Highlighting.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the AutomaticColorValues enumeration.
    /// </summary>
    public enum AutomaticColorValues
    {
        ///<summary>
        ///Automatically Determined Color.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
    }

    /// <summary>
    /// Defines the UnderlineValues enumeration.
    /// </summary>
    public enum UnderlineValues
    {
        ///<summary>
        ///Single Underline.
        ///<para>When the item is serialized out as xml, its value is "single".</para>
        ///</summary>
        [EnumString("single")]
        Single,
        ///<summary>
        ///Underline Non-Space Characters Only.
        ///<para>When the item is serialized out as xml, its value is "words".</para>
        ///</summary>
        [EnumString("words")]
        Words,
        ///<summary>
        ///Double Underline.
        ///<para>When the item is serialized out as xml, its value is "double".</para>
        ///</summary>
        [EnumString("double")]
        Double,
        ///<summary>
        ///Thick Underline.
        ///<para>When the item is serialized out as xml, its value is "thick".</para>
        ///</summary>
        [EnumString("thick")]
        Thick,
        ///<summary>
        ///Dotted Underline.
        ///<para>When the item is serialized out as xml, its value is "dotted".</para>
        ///</summary>
        [EnumString("dotted")]
        Dotted,
        ///<summary>
        ///Thick Dotted Underline.
        ///<para>When the item is serialized out as xml, its value is "dottedHeavy".</para>
        ///</summary>
        [EnumString("dottedHeavy")]
        DottedHeavy,
        ///<summary>
        ///Dashed Underline.
        ///<para>When the item is serialized out as xml, its value is "dash".</para>
        ///</summary>
        [EnumString("dash")]
        Dash,
        ///<summary>
        ///Thick Dashed Underline.
        ///<para>When the item is serialized out as xml, its value is "dashedHeavy".</para>
        ///</summary>
        [EnumString("dashedHeavy")]
        DashedHeavy,
        ///<summary>
        ///Long Dashed Underline.
        ///<para>When the item is serialized out as xml, its value is "dashLong".</para>
        ///</summary>
        [EnumString("dashLong")]
        DashLong,
        ///<summary>
        ///Thick Long Dashed Underline.
        ///<para>When the item is serialized out as xml, its value is "dashLongHeavy".</para>
        ///</summary>
        [EnumString("dashLongHeavy")]
        DashLongHeavy,
        ///<summary>
        ///Dash-Dot Underline.
        ///<para>When the item is serialized out as xml, its value is "dotDash".</para>
        ///</summary>
        [EnumString("dotDash")]
        DotDash,
        ///<summary>
        ///Thick Dash-Dot Underline.
        ///<para>When the item is serialized out as xml, its value is "dashDotHeavy".</para>
        ///</summary>
        [EnumString("dashDotHeavy")]
        DashDotHeavy,
        ///<summary>
        ///Dash-Dot-Dot Underline.
        ///<para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        ///</summary>
        [EnumString("dotDotDash")]
        DotDotDash,
        ///<summary>
        ///Thick Dash-Dot-Dot Underline.
        ///<para>When the item is serialized out as xml, its value is "dashDotDotHeavy".</para>
        ///</summary>
        [EnumString("dashDotDotHeavy")]
        DashDotDotHeavy,
        ///<summary>
        ///Wave Underline.
        ///<para>When the item is serialized out as xml, its value is "wave".</para>
        ///</summary>
        [EnumString("wave")]
        Wave,
        ///<summary>
        ///Heavy Wave Underline.
        ///<para>When the item is serialized out as xml, its value is "wavyHeavy".</para>
        ///</summary>
        [EnumString("wavyHeavy")]
        WavyHeavy,
        ///<summary>
        ///Double Wave Underline.
        ///<para>When the item is serialized out as xml, its value is "wavyDouble".</para>
        ///</summary>
        [EnumString("wavyDouble")]
        WavyDouble,
        ///<summary>
        ///No Underline.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the TextEffectValues enumeration.
    /// </summary>
    public enum TextEffectValues
    {
        ///<summary>
        ///Blinking Background Animation.
        ///<para>When the item is serialized out as xml, its value is "blinkBackground".</para>
        ///</summary>
        [EnumString("blinkBackground")]
        BlinkBackground,
        ///<summary>
        ///Colored Lights Animation.
        ///<para>When the item is serialized out as xml, its value is "lights".</para>
        ///</summary>
        [EnumString("lights")]
        Lights,
        ///<summary>
        ///Black Dashed Line Animation.
        ///<para>When the item is serialized out as xml, its value is "antsBlack".</para>
        ///</summary>
        [EnumString("antsBlack")]
        AntsBlack,
        ///<summary>
        ///Marching Red Ants.
        ///<para>When the item is serialized out as xml, its value is "antsRed".</para>
        ///</summary>
        [EnumString("antsRed")]
        AntsRed,
        ///<summary>
        ///Shimmer Animation.
        ///<para>When the item is serialized out as xml, its value is "shimmer".</para>
        ///</summary>
        [EnumString("shimmer")]
        Shimmer,
        ///<summary>
        ///Sparkling Lights Animation.
        ///<para>When the item is serialized out as xml, its value is "sparkle".</para>
        ///</summary>
        [EnumString("sparkle")]
        Sparkle,
        ///<summary>
        ///No Animation.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the VerticalPositionValues enumeration.
    /// </summary>
    public enum VerticalPositionValues
    {
        ///<summary>
        ///Regular Vertical Positioning.
        ///<para>When the item is serialized out as xml, its value is "baseline".</para>
        ///</summary>
        [EnumString("baseline")]
        Baseline,
        ///<summary>
        ///Superscript.
        ///<para>When the item is serialized out as xml, its value is "superscript".</para>
        ///</summary>
        [EnumString("superscript")]
        Superscript,
        ///<summary>
        ///Subscript.
        ///<para>When the item is serialized out as xml, its value is "subscript".</para>
        ///</summary>
        [EnumString("subscript")]
        Subscript,
    }

    /// <summary>
    /// Defines the EmphasisMarkValues enumeration.
    /// </summary>
    public enum EmphasisMarkValues
    {
        ///<summary>
        ///No Emphasis Mark.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Dot Emphasis Mark Above Characters.
        ///<para>When the item is serialized out as xml, its value is "dot".</para>
        ///</summary>
        [EnumString("dot")]
        Dot,
        ///<summary>
        ///Comma Emphasis Mark Above Characters.
        ///<para>When the item is serialized out as xml, its value is "comma".</para>
        ///</summary>
        [EnumString("comma")]
        Comma,
        ///<summary>
        ///Circle Emphasis Mark Above Characters.
        ///<para>When the item is serialized out as xml, its value is "circle".</para>
        ///</summary>
        [EnumString("circle")]
        Circle,
        ///<summary>
        ///Dot Emphasis Mark Below Characters.
        ///<para>When the item is serialized out as xml, its value is "underDot".</para>
        ///</summary>
        [EnumString("underDot")]
        UnderDot,
    }

    /// <summary>
    /// Defines the CombineBracketValues enumeration.
    /// </summary>
    public enum CombineBracketValues
    {
        ///<summary>
        ///No Enclosing Brackets.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Round Brackets.
        ///<para>When the item is serialized out as xml, its value is "round".</para>
        ///</summary>
        [EnumString("round")]
        Round,
        ///<summary>
        ///Square Brackets.
        ///<para>When the item is serialized out as xml, its value is "square".</para>
        ///</summary>
        [EnumString("square")]
        Square,
        ///<summary>
        ///Angle Brackets.
        ///<para>When the item is serialized out as xml, its value is "angle".</para>
        ///</summary>
        [EnumString("angle")]
        Angle,
        ///<summary>
        ///Curly Brackets.
        ///<para>When the item is serialized out as xml, its value is "curly".</para>
        ///</summary>
        [EnumString("curly")]
        Curly,
    }

    /// <summary>
    /// Defines the HorizontalAlignmentValues enumeration.
    /// </summary>
    public enum HorizontalAlignmentValues
    {
        ///<summary>
        ///Left Aligned Horizontally.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///Centered Horizontally.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Right Aligned Horizontally.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
        ///<summary>
        ///Inside.
        ///<para>When the item is serialized out as xml, its value is "inside".</para>
        ///</summary>
        [EnumString("inside")]
        Inside,
        ///<summary>
        ///Outside.
        ///<para>When the item is serialized out as xml, its value is "outside".</para>
        ///</summary>
        [EnumString("outside")]
        Outside,
    }

    /// <summary>
    /// Defines the VerticalAlignmentValues enumeration.
    /// </summary>
    public enum VerticalAlignmentValues
    {
        ///<summary>
        ///In line With Text.
        ///<para>When the item is serialized out as xml, its value is "inline".</para>
        ///</summary>
        [EnumString("inline")]
        Inline,
        ///<summary>
        ///Top.
        ///<para>When the item is serialized out as xml, its value is "top".</para>
        ///</summary>
        [EnumString("top")]
        Top,
        ///<summary>
        ///Centered Vertically.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Bottom.
        ///<para>When the item is serialized out as xml, its value is "bottom".</para>
        ///</summary>
        [EnumString("bottom")]
        Bottom,
        ///<summary>
        ///Inside Anchor Extents.
        ///<para>When the item is serialized out as xml, its value is "inside".</para>
        ///</summary>
        [EnumString("inside")]
        Inside,
        ///<summary>
        ///Outside Anchor Extents.
        ///<para>When the item is serialized out as xml, its value is "outside".</para>
        ///</summary>
        [EnumString("outside")]
        Outside,
    }

    /// <summary>
    /// Defines the HeightRuleValues enumeration.
    /// </summary>
    public enum HeightRuleValues
    {
        ///<summary>
        ///Determine Height Based On Contents.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
        ///<summary>
        ///Exact Height.
        ///<para>When the item is serialized out as xml, its value is "exact".</para>
        ///</summary>
        [EnumString("exact")]
        Exact,
        ///<summary>
        ///Minimum Height.
        ///<para>When the item is serialized out as xml, its value is "atLeast".</para>
        ///</summary>
        [EnumString("atLeast")]
        AtLeast,
    }

    /// <summary>
    /// Defines the TextWrappingValues enumeration.
    /// </summary>
    public enum TextWrappingValues
    {
        ///<summary>
        ///Default Text Wrapping Around Frame.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
        ///<summary>
        ///No Text Wrapping Beside Frame.
        ///<para>When the item is serialized out as xml, its value is "notBeside".</para>
        ///</summary>
        [EnumString("notBeside")]
        NotBeside,
        ///<summary>
        ///Allow Text Wrapping Around Frame.
        ///<para>When the item is serialized out as xml, its value is "around".</para>
        ///</summary>
        [EnumString("around")]
        Around,
        ///<summary>
        ///Tight Text Wrapping Around Frame.
        ///<para>When the item is serialized out as xml, its value is "tight".</para>
        ///</summary>
        [EnumString("tight")]
        Tight,
        ///<summary>
        ///Through Text Wrapping Around Frame.
        ///<para>When the item is serialized out as xml, its value is "through".</para>
        ///</summary>
        [EnumString("through")]
        Through,
        ///<summary>
        ///No Text Wrapping Around Frame.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the VerticalAnchorValues enumeration.
    /// </summary>
    public enum VerticalAnchorValues
    {
        ///<summary>
        ///Relative To Vertical Text Extents.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
        ///<summary>
        ///Relative To Margin.
        ///<para>When the item is serialized out as xml, its value is "margin".</para>
        ///</summary>
        [EnumString("margin")]
        Margin,
        ///<summary>
        ///Relative To Page.
        ///<para>When the item is serialized out as xml, its value is "page".</para>
        ///</summary>
        [EnumString("page")]
        Page,
    }

    /// <summary>
    /// Defines the HorizontalAnchorValues enumeration.
    /// </summary>
    public enum HorizontalAnchorValues
    {
        ///<summary>
        ///Relative to Text Extents.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
        ///<summary>
        ///Relative To Margin.
        ///<para>When the item is serialized out as xml, its value is "margin".</para>
        ///</summary>
        [EnumString("margin")]
        Margin,
        ///<summary>
        ///Relative to Page.
        ///<para>When the item is serialized out as xml, its value is "page".</para>
        ///</summary>
        [EnumString("page")]
        Page,
    }

    /// <summary>
    /// Defines the DropCapLocationValues enumeration.
    /// </summary>
    public enum DropCapLocationValues
    {
        ///<summary>
        ///Not Drop Cap.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Drop Cap Inside Margin.
        ///<para>When the item is serialized out as xml, its value is "drop".</para>
        ///</summary>
        [EnumString("drop")]
        Drop,
        ///<summary>
        ///Drop Cap Outside Margin.
        ///<para>When the item is serialized out as xml, its value is "margin".</para>
        ///</summary>
        [EnumString("margin")]
        Margin,
    }

    /// <summary>
    /// Defines the TabStopLeaderCharValues enumeration.
    /// </summary>
    public enum TabStopLeaderCharValues
    {
        ///<summary>
        ///No tab stop leader.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Dotted leader line.
        ///<para>When the item is serialized out as xml, its value is "dot".</para>
        ///</summary>
        [EnumString("dot")]
        Dot,
        ///<summary>
        ///Dashed tab stop leader line.
        ///<para>When the item is serialized out as xml, its value is "hyphen".</para>
        ///</summary>
        [EnumString("hyphen")]
        Hyphen,
        ///<summary>
        ///Solid leader line.
        ///<para>When the item is serialized out as xml, its value is "underscore".</para>
        ///</summary>
        [EnumString("underscore")]
        Underscore,
        ///<summary>
        ///Heavy solid leader line.
        ///<para>When the item is serialized out as xml, its value is "heavy".</para>
        ///</summary>
        [EnumString("heavy")]
        Heavy,
        ///<summary>
        ///Middle dot leader line.
        ///<para>When the item is serialized out as xml, its value is "middleDot".</para>
        ///</summary>
        [EnumString("middleDot")]
        MiddleDot,
    }

    /// <summary>
    /// Defines the LineSpacingRuleValues enumeration.
    /// </summary>
    public enum LineSpacingRuleValues
    {
        ///<summary>
        ///Automatically Determined Line Height.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
        ///<summary>
        ///Exact Line Height.
        ///<para>When the item is serialized out as xml, its value is "exact".</para>
        ///</summary>
        [EnumString("exact")]
        Exact,
        ///<summary>
        ///Minimum Line Height.
        ///<para>When the item is serialized out as xml, its value is "atLeast".</para>
        ///</summary>
        [EnumString("atLeast")]
        AtLeast,
    }

    /// <summary>
    /// Defines the TableRowAlignmentValues enumeration.
    /// </summary>
    public enum TableRowAlignmentValues
    {
        ///<summary>
        ///left.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///right.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
    }

    /// <summary>
    /// Defines the ViewValues enumeration.
    /// </summary>
    public enum ViewValues
    {
        ///<summary>
        ///Default View.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Print Layout View.
        ///<para>When the item is serialized out as xml, its value is "print".</para>
        ///</summary>
        [EnumString("print")]
        Print,
        ///<summary>
        ///Outline View.
        ///<para>When the item is serialized out as xml, its value is "outline".</para>
        ///</summary>
        [EnumString("outline")]
        Outline,
        ///<summary>
        ///Master Document View.
        ///<para>When the item is serialized out as xml, its value is "masterPages".</para>
        ///</summary>
        [EnumString("masterPages")]
        MasterPages,
        ///<summary>
        ///Draft View.
        ///<para>When the item is serialized out as xml, its value is "normal".</para>
        ///</summary>
        [EnumString("normal")]
        Normal,
        ///<summary>
        ///Web Page View.
        ///<para>When the item is serialized out as xml, its value is "web".</para>
        ///</summary>
        [EnumString("web")]
        Web,
    }

    /// <summary>
    /// Defines the PresetZoomValues enumeration.
    /// </summary>
    public enum PresetZoomValues
    {
        ///<summary>
        ///No Preset Magnification.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Display One Full Page.
        ///<para>When the item is serialized out as xml, its value is "fullPage".</para>
        ///</summary>
        [EnumString("fullPage")]
        FullPage,
        ///<summary>
        ///Display Page Width.
        ///<para>When the item is serialized out as xml, its value is "bestFit".</para>
        ///</summary>
        [EnumString("bestFit")]
        BestFit,
        ///<summary>
        ///Display Text Width.
        ///<para>When the item is serialized out as xml, its value is "textFit".</para>
        ///</summary>
        [EnumString("textFit")]
        TextFit,
    }

    /// <summary>
    /// Defines the ProofingStateValues enumeration.
    /// </summary>
    public enum ProofingStateValues
    {
        ///<summary>
        ///Check Completed.
        ///<para>When the item is serialized out as xml, its value is "clean".</para>
        ///</summary>
        [EnumString("clean")]
        Clean,
        ///<summary>
        ///Check Not Completed.
        ///<para>When the item is serialized out as xml, its value is "dirty".</para>
        ///</summary>
        [EnumString("dirty")]
        Dirty,
    }

    /// <summary>
    /// Defines the DocumentTypeValues enumeration.
    /// </summary>
    public enum DocumentTypeValues
    {
        ///<summary>
        ///Default Document.
        ///<para>When the item is serialized out as xml, its value is "notSpecified".</para>
        ///</summary>
        [EnumString("notSpecified")]
        NotSpecified,
        ///<summary>
        ///Letter.
        ///<para>When the item is serialized out as xml, its value is "letter".</para>
        ///</summary>
        [EnumString("letter")]
        Letter,
        ///<summary>
        ///E-Mail Message.
        ///<para>When the item is serialized out as xml, its value is "eMail".</para>
        ///</summary>
        [EnumString("eMail")]
        Email,
    }

    /// <summary>
    /// Defines the DocumentProtectionValues enumeration.
    /// </summary>
    public enum DocumentProtectionValues
    {
        ///<summary>
        ///No Editing Restrictions.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Allow No Editing.
        ///<para>When the item is serialized out as xml, its value is "readOnly".</para>
        ///</summary>
        [EnumString("readOnly")]
        ReadOnly,
        ///<summary>
        ///Allow Editing of Comments.
        ///<para>When the item is serialized out as xml, its value is "comments".</para>
        ///</summary>
        [EnumString("comments")]
        Comments,
        ///<summary>
        ///Allow Editing With Revision Tracking.
        ///<para>When the item is serialized out as xml, its value is "trackedChanges".</para>
        ///</summary>
        [EnumString("trackedChanges")]
        TrackedChanges,
        ///<summary>
        ///Allow Editing of Form Fields.
        ///<para>When the item is serialized out as xml, its value is "forms".</para>
        ///</summary>
        [EnumString("forms")]
        Forms,
    }

    /// <summary>
    /// Defines the MailMergeDocumentValues enumeration.
    /// </summary>
    public enum MailMergeDocumentValues
    {
        ///<summary>
        ///Catalog Source Document.
        ///<para>When the item is serialized out as xml, its value is "catalog".</para>
        ///</summary>
        [EnumString("catalog")]
        Catalog,
        ///<summary>
        ///Envelope Source Document.
        ///<para>When the item is serialized out as xml, its value is "envelopes".</para>
        ///</summary>
        [EnumString("envelopes")]
        Envelope,
        ///<summary>
        ///Mailing Label Source Document.
        ///<para>When the item is serialized out as xml, its value is "mailingLabels".</para>
        ///</summary>
        [EnumString("mailingLabels")]
        MailingLabel,
        ///<summary>
        ///Form Letter Source Document.
        ///<para>When the item is serialized out as xml, its value is "formLetters".</para>
        ///</summary>
        [EnumString("formLetters")]
        FormLetter,
        ///<summary>
        ///E-Mail Source Document.
        ///<para>When the item is serialized out as xml, its value is "email".</para>
        ///</summary>
        [EnumString("email")]
        Email,
        ///<summary>
        ///Fax Source Document.
        ///<para>When the item is serialized out as xml, its value is "fax".</para>
        ///</summary>
        [EnumString("fax")]
        Fax,
    }

    /// <summary>
    /// Defines the MailMergeDataValues enumeration.
    /// </summary>
    public enum MailMergeDataValues
    {
        ///<summary>
        ///Text File Data Source.
        ///<para>When the item is serialized out as xml, its value is "textFile".</para>
        ///</summary>
        [EnumString("textFile")]
        TextFile,
        ///<summary>
        ///Database Data Source.
        ///<para>When the item is serialized out as xml, its value is "database".</para>
        ///</summary>
        [EnumString("database")]
        Database,
        ///<summary>
        ///Spreadsheet Data Source.
        ///<para>When the item is serialized out as xml, its value is "spreadsheet".</para>
        ///</summary>
        [EnumString("spreadsheet")]
        Spreadsheet,
        ///<summary>
        ///Query Data Source.
        ///<para>When the item is serialized out as xml, its value is "query".</para>
        ///</summary>
        [EnumString("query")]
        Query,
        ///<summary>
        ///Open Database Connectivity Data Source.
        ///<para>When the item is serialized out as xml, its value is "odbc".</para>
        ///</summary>
        [EnumString("odbc")]
        Odbc,
        ///<summary>
        ///Office Data Source Object Data Source.
        ///<para>When the item is serialized out as xml, its value is "native".</para>
        ///</summary>
        [EnumString("native")]
        Native,
    }

    /// <summary>
    /// Defines the MailMergeDestinationValues enumeration.
    /// </summary>
    public enum MailMergeDestinationValues
    {
        ///<summary>
        ///Send Merged Documents to New Documents.
        ///<para>When the item is serialized out as xml, its value is "newDocument".</para>
        ///</summary>
        [EnumString("newDocument")]
        NewDocument,
        ///<summary>
        ///Send Merged Documents to Printer.
        ///<para>When the item is serialized out as xml, its value is "printer".</para>
        ///</summary>
        [EnumString("printer")]
        Printer,
        ///<summary>
        ///Send Merged Documents as E-mail Messages.
        ///<para>When the item is serialized out as xml, its value is "email".</para>
        ///</summary>
        [EnumString("email")]
        Email,
        ///<summary>
        ///Send Merged Documents as Faxes.
        ///<para>When the item is serialized out as xml, its value is "fax".</para>
        ///</summary>
        [EnumString("fax")]
        Fax,
    }

    /// <summary>
    /// Defines the MailMergeOdsoFieldValues enumeration.
    /// </summary>
    public enum MailMergeOdsoFieldValues
    {
        ///<summary>
        ///Field Not Mapped.
        ///<para>When the item is serialized out as xml, its value is "null".</para>
        ///</summary>
        [EnumString("null")]
        Null,
        ///<summary>
        ///Field Mapping to Data Source Column.
        ///<para>When the item is serialized out as xml, its value is "dbColumn".</para>
        ///</summary>
        [EnumString("dbColumn")]
        DbColumn,
    }

    /// <summary>
    /// Defines the VerticalTextAlignmentValues enumeration.
    /// </summary>
    public enum VerticalTextAlignmentValues
    {
        ///<summary>
        ///Align Text at Top.
        ///<para>When the item is serialized out as xml, its value is "top".</para>
        ///</summary>
        [EnumString("top")]
        Top,
        ///<summary>
        ///Align Text at Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Align Text at Baseline.
        ///<para>When the item is serialized out as xml, its value is "baseline".</para>
        ///</summary>
        [EnumString("baseline")]
        Baseline,
        ///<summary>
        ///Align Text at Bottom.
        ///<para>When the item is serialized out as xml, its value is "bottom".</para>
        ///</summary>
        [EnumString("bottom")]
        Bottom,
        ///<summary>
        ///Automatically Determine Alignment.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
    }

    /// <summary>
    /// Defines the DisplacedByCustomXmlValues enumeration.
    /// </summary>
    public enum DisplacedByCustomXmlValues
    {
        ///<summary>
        ///Displaced by Next Custom XML Markup Tag.
        ///<para>When the item is serialized out as xml, its value is "next".</para>
        ///</summary>
        [EnumString("next")]
        Next,
        ///<summary>
        ///Displaced by Previous Custom XML Markup Tag.
        ///<para>When the item is serialized out as xml, its value is "prev".</para>
        ///</summary>
        [EnumString("prev")]
        Previous,
    }

    /// <summary>
    /// Defines the VerticalMergeRevisionValues enumeration.
    /// </summary>
    public enum VerticalMergeRevisionValues
    {
        ///<summary>
        ///Vertically Merged Cell.
        ///<para>When the item is serialized out as xml, its value is "cont".</para>
        ///</summary>
        [EnumString("cont")]
        Continue,
        ///<summary>
        ///Vertically Split Cell.
        ///<para>When the item is serialized out as xml, its value is "rest".</para>
        ///</summary>
        [EnumString("rest")]
        Restart,
    }

    /// <summary>
    /// Defines the TextBoxTightWrapValues enumeration.
    /// </summary>
    public enum TextBoxTightWrapValues
    {
        ///<summary>
        ///Do Not Tight Wrap.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Tight Wrap All Lines.
        ///<para>When the item is serialized out as xml, its value is "allLines".</para>
        ///</summary>
        [EnumString("allLines")]
        AllLines,
        ///<summary>
        ///Tight Wrap First and Last Lines.
        ///<para>When the item is serialized out as xml, its value is "firstAndLastLine".</para>
        ///</summary>
        [EnumString("firstAndLastLine")]
        FirstAndLastLine,
        ///<summary>
        ///Tight Wrap First Line.
        ///<para>When the item is serialized out as xml, its value is "firstLineOnly".</para>
        ///</summary>
        [EnumString("firstLineOnly")]
        FirstLineOnly,
        ///<summary>
        ///Tight Wrap Last Line.
        ///<para>When the item is serialized out as xml, its value is "lastLineOnly".</para>
        ///</summary>
        [EnumString("lastLineOnly")]
        LastLineOnly,
    }

    /// <summary>
    /// Defines the FieldCharValues enumeration.
    /// </summary>
    public enum FieldCharValues
    {
        ///<summary>
        ///Start Character.
        ///<para>When the item is serialized out as xml, its value is "begin".</para>
        ///</summary>
        [EnumString("begin")]
        Begin,
        ///<summary>
        ///Separator Character.
        ///<para>When the item is serialized out as xml, its value is "separate".</para>
        ///</summary>
        [EnumString("separate")]
        Separate,
        ///<summary>
        ///End Character.
        ///<para>When the item is serialized out as xml, its value is "end".</para>
        ///</summary>
        [EnumString("end")]
        End,
    }

    /// <summary>
    /// Defines the InfoTextValues enumeration.
    /// </summary>
    public enum InfoTextValues
    {
        ///<summary>
        ///Literal Text.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
        ///<summary>
        ///Glossary Document Entry.
        ///<para>When the item is serialized out as xml, its value is "autoText".</para>
        ///</summary>
        [EnumString("autoText")]
        AutoText,
    }

    /// <summary>
    /// Defines the TextBoxFormFieldValues enumeration.
    /// </summary>
    public enum TextBoxFormFieldValues
    {
        ///<summary>
        ///Text Box.
        ///<para>When the item is serialized out as xml, its value is "regular".</para>
        ///</summary>
        [EnumString("regular")]
        Regular,
        ///<summary>
        ///Number.
        ///<para>When the item is serialized out as xml, its value is "number".</para>
        ///</summary>
        [EnumString("number")]
        Number,
        ///<summary>
        ///Date.
        ///<para>When the item is serialized out as xml, its value is "date".</para>
        ///</summary>
        [EnumString("date")]
        Date,
        ///<summary>
        ///Current Time Display.
        ///<para>When the item is serialized out as xml, its value is "currentTime".</para>
        ///</summary>
        [EnumString("currentTime")]
        CurrentTime,
        ///<summary>
        ///Current Date Display.
        ///<para>When the item is serialized out as xml, its value is "currentDate".</para>
        ///</summary>
        [EnumString("currentDate")]
        CurrentDate,
        ///<summary>
        ///Field Calculation.
        ///<para>When the item is serialized out as xml, its value is "calculated".</para>
        ///</summary>
        [EnumString("calculated")]
        Calculated,
    }

    /// <summary>
    /// Defines the SectionMarkValues enumeration.
    /// </summary>
    public enum SectionMarkValues
    {
        ///<summary>
        ///Next Page Section Break.
        ///<para>When the item is serialized out as xml, its value is "nextPage".</para>
        ///</summary>
        [EnumString("nextPage")]
        NextPage,
        ///<summary>
        ///Column Section Break.
        ///<para>When the item is serialized out as xml, its value is "nextColumn".</para>
        ///</summary>
        [EnumString("nextColumn")]
        NextColumn,
        ///<summary>
        ///Continuous Section Break.
        ///<para>When the item is serialized out as xml, its value is "continuous".</para>
        ///</summary>
        [EnumString("continuous")]
        Continuous,
        ///<summary>
        ///Even Page Section Break.
        ///<para>When the item is serialized out as xml, its value is "evenPage".</para>
        ///</summary>
        [EnumString("evenPage")]
        EvenPage,
        ///<summary>
        ///Odd Page Section Break.
        ///<para>When the item is serialized out as xml, its value is "oddPage".</para>
        ///</summary>
        [EnumString("oddPage")]
        OddPage,
    }

    /// <summary>
    /// Defines the PageOrientationValues enumeration.
    /// </summary>
    public enum PageOrientationValues
    {
        ///<summary>
        ///Portrait Mode.
        ///<para>When the item is serialized out as xml, its value is "portrait".</para>
        ///</summary>
        [EnumString("portrait")]
        Portrait,
        ///<summary>
        ///Landscape Mode.
        ///<para>When the item is serialized out as xml, its value is "landscape".</para>
        ///</summary>
        [EnumString("landscape")]
        Landscape,
    }

    /// <summary>
    /// Defines the PageBorderZOrderValues enumeration.
    /// </summary>
    public enum PageBorderZOrderValues
    {
        ///<summary>
        ///Page Border Ahead of Text.
        ///<para>When the item is serialized out as xml, its value is "front".</para>
        ///</summary>
        [EnumString("front")]
        Front,
        ///<summary>
        ///Page Border Behind Text.
        ///<para>When the item is serialized out as xml, its value is "back".</para>
        ///</summary>
        [EnumString("back")]
        Back,
    }

    /// <summary>
    /// Defines the PageBorderDisplayValues enumeration.
    /// </summary>
    public enum PageBorderDisplayValues
    {
        ///<summary>
        ///Display Page Border on All Pages.
        ///<para>When the item is serialized out as xml, its value is "allPages".</para>
        ///</summary>
        [EnumString("allPages")]
        AllPages,
        ///<summary>
        ///Display Page Border on First Page.
        ///<para>When the item is serialized out as xml, its value is "firstPage".</para>
        ///</summary>
        [EnumString("firstPage")]
        FirstPage,
        ///<summary>
        ///Display Page Border on All Pages Except First.
        ///<para>When the item is serialized out as xml, its value is "notFirstPage".</para>
        ///</summary>
        [EnumString("notFirstPage")]
        NotFirstPage,
    }

    /// <summary>
    /// Defines the PageBorderOffsetValues enumeration.
    /// </summary>
    public enum PageBorderOffsetValues
    {
        ///<summary>
        ///Page Border Is Positioned Relative to Page Edges.
        ///<para>When the item is serialized out as xml, its value is "page".</para>
        ///</summary>
        [EnumString("page")]
        Page,
        ///<summary>
        ///Page Border Is Positioned Relative to Text Extents.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
    }

    /// <summary>
    /// Defines the ChapterSeparatorValues enumeration.
    /// </summary>
    public enum ChapterSeparatorValues
    {
        ///<summary>
        ///Hyphen Chapter Separator.
        ///<para>When the item is serialized out as xml, its value is "hyphen".</para>
        ///</summary>
        [EnumString("hyphen")]
        Hyphen,
        ///<summary>
        ///Period Chapter Separator.
        ///<para>When the item is serialized out as xml, its value is "period".</para>
        ///</summary>
        [EnumString("period")]
        Period,
        ///<summary>
        ///Colon Chapter Separator.
        ///<para>When the item is serialized out as xml, its value is "colon".</para>
        ///</summary>
        [EnumString("colon")]
        Colon,
        ///<summary>
        ///Em Dash Chapter Separator.
        ///<para>When the item is serialized out as xml, its value is "emDash".</para>
        ///</summary>
        [EnumString("emDash")]
        EmDash,
        ///<summary>
        ///En Dash Chapter Separator.
        ///<para>When the item is serialized out as xml, its value is "enDash".</para>
        ///</summary>
        [EnumString("enDash")]
        EnDash,
    }

    /// <summary>
    /// Defines the LineNumberRestartValues enumeration.
    /// </summary>
    public enum LineNumberRestartValues
    {
        ///<summary>
        ///Restart Line Numbering on Each Page.
        ///<para>When the item is serialized out as xml, its value is "newPage".</para>
        ///</summary>
        [EnumString("newPage")]
        NewPage,
        ///<summary>
        ///Restart Line Numbering for Each Section.
        ///<para>When the item is serialized out as xml, its value is "newSection".</para>
        ///</summary>
        [EnumString("newSection")]
        NewSection,
        ///<summary>
        ///Continue Line Numbering From Previous Section.
        ///<para>When the item is serialized out as xml, its value is "continuous".</para>
        ///</summary>
        [EnumString("continuous")]
        Continuous,
    }

    /// <summary>
    /// Defines the VerticalJustificationValues enumeration.
    /// </summary>
    public enum VerticalJustificationValues
    {
        ///<summary>
        ///Align Top.
        ///<para>When the item is serialized out as xml, its value is "top".</para>
        ///</summary>
        [EnumString("top")]
        Top,
        ///<summary>
        ///Align Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Vertical Justification.
        ///<para>When the item is serialized out as xml, its value is "both".</para>
        ///</summary>
        [EnumString("both")]
        Both,
        ///<summary>
        ///Align Bottom.
        ///<para>When the item is serialized out as xml, its value is "bottom".</para>
        ///</summary>
        [EnumString("bottom")]
        Bottom,
    }

    /// <summary>
    /// Defines the TableVerticalAlignmentValues enumeration.
    /// </summary>
    public enum TableVerticalAlignmentValues
    {
        ///<summary>
        ///top.
        ///<para>When the item is serialized out as xml, its value is "top".</para>
        ///</summary>
        [EnumString("top")]
        Top,
        ///<summary>
        ///center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///bottom.
        ///<para>When the item is serialized out as xml, its value is "bottom".</para>
        ///</summary>
        [EnumString("bottom")]
        Bottom,
    }

    /// <summary>
    /// Defines the DocGridValues enumeration.
    /// </summary>
    public enum DocGridValues
    {
        ///<summary>
        ///No Document Grid.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
        ///<summary>
        ///Line Grid Only.
        ///<para>When the item is serialized out as xml, its value is "lines".</para>
        ///</summary>
        [EnumString("lines")]
        Lines,
        ///<summary>
        ///Line and Character Grid.
        ///<para>When the item is serialized out as xml, its value is "linesAndChars".</para>
        ///</summary>
        [EnumString("linesAndChars")]
        LinesAndChars,
        ///<summary>
        ///Character Grid Only.
        ///<para>When the item is serialized out as xml, its value is "snapToChars".</para>
        ///</summary>
        [EnumString("snapToChars")]
        SnapToChars,
    }

    /// <summary>
    /// Defines the HeaderFooterValues enumeration.
    /// </summary>
    public enum HeaderFooterValues
    {
        ///<summary>
        ///Even Numbered Pages Only.
        ///<para>When the item is serialized out as xml, its value is "even".</para>
        ///</summary>
        [EnumString("even")]
        Even,
        ///<summary>
        ///Default Header or Footer.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
        ///<summary>
        ///First Page Only.
        ///<para>When the item is serialized out as xml, its value is "first".</para>
        ///</summary>
        [EnumString("first")]
        First,
    }

    /// <summary>
    /// Defines the FootnoteEndnoteValues enumeration.
    /// </summary>
    public enum FootnoteEndnoteValues
    {
        ///<summary>
        ///Normal Footnote/Endnote.
        ///<para>When the item is serialized out as xml, its value is "normal".</para>
        ///</summary>
        [EnumString("normal")]
        Normal,
        ///<summary>
        ///Separator.
        ///<para>When the item is serialized out as xml, its value is "separator".</para>
        ///</summary>
        [EnumString("separator")]
        Separator,
        ///<summary>
        ///Continuation Separator.
        ///<para>When the item is serialized out as xml, its value is "continuationSeparator".</para>
        ///</summary>
        [EnumString("continuationSeparator")]
        ContinuationSeparator,
        ///<summary>
        ///Continuation Notice Separator.
        ///<para>When the item is serialized out as xml, its value is "continuationNotice".</para>
        ///</summary>
        [EnumString("continuationNotice")]
        ContinuationNotice,
    }

    /// <summary>
    /// Defines the BreakValues enumeration.
    /// </summary>
    public enum BreakValues
    {
        ///<summary>
        ///Page Break.
        ///<para>When the item is serialized out as xml, its value is "page".</para>
        ///</summary>
        [EnumString("page")]
        Page,
        ///<summary>
        ///Column Break.
        ///<para>When the item is serialized out as xml, its value is "column".</para>
        ///</summary>
        [EnumString("column")]
        Column,
        ///<summary>
        ///Line Break.
        ///<para>When the item is serialized out as xml, its value is "textWrapping".</para>
        ///</summary>
        [EnumString("textWrapping")]
        TextWrapping,
    }

    /// <summary>
    /// Defines the BreakTextRestartLocationValues enumeration.
    /// </summary>
    public enum BreakTextRestartLocationValues
    {
        ///<summary>
        ///Restart On Next Line.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Restart In Next Text Region When In Leftmost Position.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///Restart In Next Text Region When In Rightmost Position.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
        ///<summary>
        ///Restart On Next Full Line.
        ///<para>When the item is serialized out as xml, its value is "all".</para>
        ///</summary>
        [EnumString("all")]
        All,
    }

    /// <summary>
    /// Defines the AbsolutePositionTabAlignmentValues enumeration.
    /// </summary>
    public enum AbsolutePositionTabAlignmentValues
    {
        ///<summary>
        ///Left.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Right.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
    }

    /// <summary>
    /// Defines the AbsolutePositionTabPositioningBaseValues enumeration.
    /// </summary>
    public enum AbsolutePositionTabPositioningBaseValues
    {
        ///<summary>
        ///Relative To Text Margins.
        ///<para>When the item is serialized out as xml, its value is "margin".</para>
        ///</summary>
        [EnumString("margin")]
        Margin,
        ///<summary>
        ///Relative To Indents.
        ///<para>When the item is serialized out as xml, its value is "indent".</para>
        ///</summary>
        [EnumString("indent")]
        Indent,
    }

    /// <summary>
    /// Defines the AbsolutePositionTabLeaderCharValues enumeration.
    /// </summary>
    public enum AbsolutePositionTabLeaderCharValues
    {
        ///<summary>
        ///No Leader Character.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Dot Leader Character.
        ///<para>When the item is serialized out as xml, its value is "dot".</para>
        ///</summary>
        [EnumString("dot")]
        Dot,
        ///<summary>
        ///Hyphen Leader Character.
        ///<para>When the item is serialized out as xml, its value is "hyphen".</para>
        ///</summary>
        [EnumString("hyphen")]
        Hyphen,
        ///<summary>
        ///Underscore Leader Character.
        ///<para>When the item is serialized out as xml, its value is "underscore".</para>
        ///</summary>
        [EnumString("underscore")]
        Underscore,
        ///<summary>
        ///Centered Dot Leader Character.
        ///<para>When the item is serialized out as xml, its value is "middleDot".</para>
        ///</summary>
        [EnumString("middleDot")]
        MiddleDot,
    }

    /// <summary>
    /// Defines the ProofingErrorValues enumeration.
    /// </summary>
    public enum ProofingErrorValues
    {
        ///<summary>
        ///Start of Region Marked as Spelling Error.
        ///<para>When the item is serialized out as xml, its value is "spellStart".</para>
        ///</summary>
        [EnumString("spellStart")]
        SpellStart,
        ///<summary>
        ///End of Region Marked as Spelling Error.
        ///<para>When the item is serialized out as xml, its value is "spellEnd".</para>
        ///</summary>
        [EnumString("spellEnd")]
        SpellEnd,
        ///<summary>
        ///Start of Region Marked as Grammatical Error.
        ///<para>When the item is serialized out as xml, its value is "gramStart".</para>
        ///</summary>
        [EnumString("gramStart")]
        GrammarStart,
        ///<summary>
        ///End of Region Marked as Grammatical Error.
        ///<para>When the item is serialized out as xml, its value is "gramEnd".</para>
        ///</summary>
        [EnumString("gramEnd")]
        GrammarEnd,
    }

    /// <summary>
    /// Defines the RangePermissionEditingGroupValues enumeration.
    /// </summary>
    public enum RangePermissionEditingGroupValues
    {
        ///<summary>
        ///No Users Have Editing Permissions.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///All Users Have Editing Permissions.
        ///<para>When the item is serialized out as xml, its value is "everyone".</para>
        ///</summary>
        [EnumString("everyone")]
        Everyone,
        ///<summary>
        ///Administrator Group.
        ///<para>When the item is serialized out as xml, its value is "administrators".</para>
        ///</summary>
        [EnumString("administrators")]
        Administrators,
        ///<summary>
        ///Contributors Group.
        ///<para>When the item is serialized out as xml, its value is "contributors".</para>
        ///</summary>
        [EnumString("contributors")]
        Contributors,
        ///<summary>
        ///Editors Group.
        ///<para>When the item is serialized out as xml, its value is "editors".</para>
        ///</summary>
        [EnumString("editors")]
        Editors,
        ///<summary>
        ///Owners Group.
        ///<para>When the item is serialized out as xml, its value is "owners".</para>
        ///</summary>
        [EnumString("owners")]
        Owners,
        ///<summary>
        ///Current Group.
        ///<para>When the item is serialized out as xml, its value is "current".</para>
        ///</summary>
        [EnumString("current")]
        Current,
    }

    /// <summary>
    /// Defines the FontTypeHintValues enumeration.
    /// </summary>
    public enum FontTypeHintValues
    {
        ///<summary>
        ///High ANSI Font.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
        ///<summary>
        ///East Asian Font.
        ///<para>When the item is serialized out as xml, its value is "eastAsia".</para>
        ///</summary>
        [EnumString("eastAsia")]
        EastAsia,
        ///<summary>
        ///Complex Script Font.
        ///<para>When the item is serialized out as xml, its value is "cs".</para>
        ///</summary>
        [EnumString("cs")]
        ComplexScript,
    }

    /// <summary>
    /// Defines the ThemeFontValues enumeration.
    /// </summary>
    public enum ThemeFontValues
    {
        ///<summary>
        ///Major East Asian Theme Font.
        ///<para>When the item is serialized out as xml, its value is "majorEastAsia".</para>
        ///</summary>
        [EnumString("majorEastAsia")]
        MajorEastAsia,
        ///<summary>
        ///Major Complex Script Theme Font.
        ///<para>When the item is serialized out as xml, its value is "majorBidi".</para>
        ///</summary>
        [EnumString("majorBidi")]
        MajorBidi,
        ///<summary>
        ///Major ASCII Theme Font.
        ///<para>When the item is serialized out as xml, its value is "majorAscii".</para>
        ///</summary>
        [EnumString("majorAscii")]
        MajorAscii,
        ///<summary>
        ///Major High ANSI Theme Font.
        ///<para>When the item is serialized out as xml, its value is "majorHAnsi".</para>
        ///</summary>
        [EnumString("majorHAnsi")]
        MajorHighAnsi,
        ///<summary>
        ///Minor East Asian Theme Font.
        ///<para>When the item is serialized out as xml, its value is "minorEastAsia".</para>
        ///</summary>
        [EnumString("minorEastAsia")]
        MinorEastAsia,
        ///<summary>
        ///Minor Complex Script Theme Font.
        ///<para>When the item is serialized out as xml, its value is "minorBidi".</para>
        ///</summary>
        [EnumString("minorBidi")]
        MinorBidi,
        ///<summary>
        ///Minor ASCII Theme Font.
        ///<para>When the item is serialized out as xml, its value is "minorAscii".</para>
        ///</summary>
        [EnumString("minorAscii")]
        MinorAscii,
        ///<summary>
        ///Minor High ANSI Theme Font.
        ///<para>When the item is serialized out as xml, its value is "minorHAnsi".</para>
        ///</summary>
        [EnumString("minorHAnsi")]
        MinorHighAnsi,
    }

    /// <summary>
    /// Defines the RubyAlignValues enumeration.
    /// </summary>
    public enum RubyAlignValues
    {
        ///<summary>
        ///Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Distribute All Characters.
        ///<para>When the item is serialized out as xml, its value is "distributeLetter".</para>
        ///</summary>
        [EnumString("distributeLetter")]
        DistributeLetter,
        ///<summary>
        ///Distribute all Characters w/ Additional Space On Either Side.
        ///<para>When the item is serialized out as xml, its value is "distributeSpace".</para>
        ///</summary>
        [EnumString("distributeSpace")]
        DistributeSpace,
        ///<summary>
        ///Left Aligned.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///Right Aligned.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
        ///<summary>
        ///Vertically Aligned to Right of Base Text.
        ///<para>When the item is serialized out as xml, its value is "rightVertical".</para>
        ///</summary>
        [EnumString("rightVertical")]
        RightVertical,
    }

    /// <summary>
    /// Defines the LockingValues enumeration.
    /// </summary>
    public enum LockingValues
    {
        ///<summary>
        ///SDT Cannot Be Deleted.
        ///<para>When the item is serialized out as xml, its value is "sdtLocked".</para>
        ///</summary>
        [EnumString("sdtLocked")]
        SdtLocked,
        ///<summary>
        ///Contents Cannot Be Edited At Runtime.
        ///<para>When the item is serialized out as xml, its value is "contentLocked".</para>
        ///</summary>
        [EnumString("contentLocked")]
        ContentLocked,
        ///<summary>
        ///No Locking.
        ///<para>When the item is serialized out as xml, its value is "unlocked".</para>
        ///</summary>
        [EnumString("unlocked")]
        Unlocked,
        ///<summary>
        ///Contents Cannot Be Edited At Runtime And SDT Cannot Be Deleted.
        ///<para>When the item is serialized out as xml, its value is "sdtContentLocked".</para>
        ///</summary>
        [EnumString("sdtContentLocked")]
        SdtContentLocked,
    }

    /// <summary>
    /// Defines the DateFormatValues enumeration.
    /// </summary>
    public enum DateFormatValues
    {
        ///<summary>
        ///Same As Display.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
        ///<summary>
        ///XML Schema Date Format.
        ///<para>When the item is serialized out as xml, its value is "date".</para>
        ///</summary>
        [EnumString("date")]
        Date,
        ///<summary>
        ///XML Schema DateTime Format.
        ///<para>When the item is serialized out as xml, its value is "dateTime".</para>
        ///</summary>
        [EnumString("dateTime")]
        DateTime,
    }

    /// <summary>
    /// Defines the TableWidthUnitValues enumeration.
    /// </summary>
    public enum TableWidthUnitValues
    {
        ///<summary>
        ///No Width.
        ///<para>When the item is serialized out as xml, its value is "nil".</para>
        ///</summary>
        [EnumString("nil")]
        Nil,
        ///<summary>
        ///Width in Fiftieths of a Percent.
        ///<para>When the item is serialized out as xml, its value is "pct".</para>
        ///</summary>
        [EnumString("pct")]
        Pct,
        ///<summary>
        ///Width in Twentieths of a Point.
        ///<para>When the item is serialized out as xml, its value is "dxa".</para>
        ///</summary>
        [EnumString("dxa")]
        Dxa,
        ///<summary>
        ///Automatically Determined Width.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
    }

    /// <summary>
    /// Defines the TableWidthValues enumeration.
    /// </summary>
    public enum TableWidthValues
    {
        ///<summary>
        ///nil.
        ///<para>When the item is serialized out as xml, its value is "nil".</para>
        ///</summary>
        [EnumString("nil")]
        Nil,
        ///<summary>
        ///dxa.
        ///<para>When the item is serialized out as xml, its value is "dxa".</para>
        ///</summary>
        [EnumString("dxa")]
        Dxa,
    }

    /// <summary>
    /// Defines the MergedCellValues enumeration.
    /// </summary>
    public enum MergedCellValues
    {
        ///<summary>
        ///Continue Merged Region.
        ///<para>When the item is serialized out as xml, its value is "continue".</para>
        ///</summary>
        [EnumString("continue")]
        Continue,
        ///<summary>
        ///Start/Restart Merged Region.
        ///<para>When the item is serialized out as xml, its value is "restart".</para>
        ///</summary>
        [EnumString("restart")]
        Restart,
    }

    /// <summary>
    /// Defines the TableLayoutValues enumeration.
    /// </summary>
    public enum TableLayoutValues
    {
        ///<summary>
        ///Fixed Width Table Layout.
        ///<para>When the item is serialized out as xml, its value is "fixed".</para>
        ///</summary>
        [EnumString("fixed")]
        Fixed,
        ///<summary>
        ///AutoFit Table Layout.
        ///<para>When the item is serialized out as xml, its value is "autofit".</para>
        ///</summary>
        [EnumString("autofit")]
        Autofit,
    }

    /// <summary>
    /// Defines the TableOverlapValues enumeration.
    /// </summary>
    public enum TableOverlapValues
    {
        ///<summary>
        ///Floating Table Cannot Overlap.
        ///<para>When the item is serialized out as xml, its value is "never".</para>
        ///</summary>
        [EnumString("never")]
        Never,
        ///<summary>
        ///Floating Table Can Overlap.
        ///<para>When the item is serialized out as xml, its value is "overlap".</para>
        ///</summary>
        [EnumString("overlap")]
        Overlap,
    }

    /// <summary>
    /// Defines the FootnotePositionValues enumeration.
    /// </summary>
    public enum FootnotePositionValues
    {
        ///<summary>
        ///Footnotes Positioned at Page Bottom.
        ///<para>When the item is serialized out as xml, its value is "pageBottom".</para>
        ///</summary>
        [EnumString("pageBottom")]
        PageBottom,
        ///<summary>
        ///Footnotes Positioned Beneath Text.
        ///<para>When the item is serialized out as xml, its value is "beneathText".</para>
        ///</summary>
        [EnumString("beneathText")]
        BeneathText,
        ///<summary>
        ///Footnotes Positioned At End of Section.
        ///<para>When the item is serialized out as xml, its value is "sectEnd".</para>
        ///</summary>
        [EnumString("sectEnd")]
        SectionEnd,
    }

    /// <summary>
    /// Defines the EndnotePositionValues enumeration.
    /// </summary>
    public enum EndnotePositionValues
    {
        ///<summary>
        ///Endnotes Positioned at End of Section.
        ///<para>When the item is serialized out as xml, its value is "sectEnd".</para>
        ///</summary>
        [EnumString("sectEnd")]
        SectionEnd,
        ///<summary>
        ///Endnotes Positioned at End of Document.
        ///<para>When the item is serialized out as xml, its value is "docEnd".</para>
        ///</summary>
        [EnumString("docEnd")]
        DocumentEnd,
    }

    /// <summary>
    /// Defines the RestartNumberValues enumeration.
    /// </summary>
    public enum RestartNumberValues
    {
        ///<summary>
        ///Continue Numbering From Previous Section.
        ///<para>When the item is serialized out as xml, its value is "continuous".</para>
        ///</summary>
        [EnumString("continuous")]
        Continuous,
        ///<summary>
        ///Restart Numbering For Each Section.
        ///<para>When the item is serialized out as xml, its value is "eachSect".</para>
        ///</summary>
        [EnumString("eachSect")]
        EachSection,
        ///<summary>
        ///Restart Numbering On Each Page.
        ///<para>When the item is serialized out as xml, its value is "eachPage".</para>
        ///</summary>
        [EnumString("eachPage")]
        EachPage,
    }

    /// <summary>
    /// Defines the MailMergeSourceValues enumeration.
    /// </summary>
    public enum MailMergeSourceValues
    {
        ///<summary>
        ///Database Data Source.
        ///<para>When the item is serialized out as xml, its value is "database".</para>
        ///</summary>
        [EnumString("database")]
        Database,
        ///<summary>
        ///Address Book Data Source.
        ///<para>When the item is serialized out as xml, its value is "addressBook".</para>
        ///</summary>
        [EnumString("addressBook")]
        AddressBook,
        ///<summary>
        ///Alternate Document Format Data Source.
        ///<para>When the item is serialized out as xml, its value is "document1".</para>
        ///</summary>
        [EnumString("document1")]
        Document1,
        ///<summary>
        ///Alternate Document Format Data Source Two.
        ///<para>When the item is serialized out as xml, its value is "document2".</para>
        ///</summary>
        [EnumString("document2")]
        Document2,
        ///<summary>
        ///Text File Data Source.
        ///<para>When the item is serialized out as xml, its value is "text".</para>
        ///</summary>
        [EnumString("text")]
        Text,
        ///<summary>
        ///E-Mail Program Data Source.
        ///<para>When the item is serialized out as xml, its value is "email".</para>
        ///</summary>
        [EnumString("email")]
        Email,
        ///<summary>
        ///Native Data Source.
        ///<para>When the item is serialized out as xml, its value is "native".</para>
        ///</summary>
        [EnumString("native")]
        Native,
        ///<summary>
        ///Legacy Document Format Data Source.
        ///<para>When the item is serialized out as xml, its value is "legacy".</para>
        ///</summary>
        [EnumString("legacy")]
        Legacy,
        ///<summary>
        ///Aggregate Data Source.
        ///<para>When the item is serialized out as xml, its value is "master".</para>
        ///</summary>
        [EnumString("master")]
        Master,
    }

    /// <summary>
    /// Defines the TargetScreenSizeValues enumeration.
    /// </summary>
    public enum TargetScreenSizeValues
    {
        ///<summary>
        ///Optimize for 544x376.
        ///<para>When the item is serialized out as xml, its value is "544x376".</para>
        ///</summary>
        [EnumString("544x376")]
        Sz544x376,
        ///<summary>
        ///Optimize for 640x480.
        ///<para>When the item is serialized out as xml, its value is "640x480".</para>
        ///</summary>
        [EnumString("640x480")]
        Sz640x480,
        ///<summary>
        ///Optimize for 720x512.
        ///<para>When the item is serialized out as xml, its value is "720x512".</para>
        ///</summary>
        [EnumString("720x512")]
        Sz720x512,
        ///<summary>
        ///Optimize for 800x600.
        ///<para>When the item is serialized out as xml, its value is "800x600".</para>
        ///</summary>
        [EnumString("800x600")]
        Sz800x600,
        ///<summary>
        ///Optimize for 1024x768.
        ///<para>When the item is serialized out as xml, its value is "1024x768".</para>
        ///</summary>
        [EnumString("1024x768")]
        Sz1024x768,
        ///<summary>
        ///Optimize for 1152x882.
        ///<para>When the item is serialized out as xml, its value is "1152x882".</para>
        ///</summary>
        [EnumString("1152x882")]
        Sz1152x882,
        ///<summary>
        ///Optimize for 1152x900.
        ///<para>When the item is serialized out as xml, its value is "1152x900".</para>
        ///</summary>
        [EnumString("1152x900")]
        Sz1152x900,
        ///<summary>
        ///Optimize for 1280x1024.
        ///<para>When the item is serialized out as xml, its value is "1280x1024".</para>
        ///</summary>
        [EnumString("1280x1024")]
        Sz1280x1024,
        ///<summary>
        ///Optimize for 1600x1200.
        ///<para>When the item is serialized out as xml, its value is "1600x1200".</para>
        ///</summary>
        [EnumString("1600x1200")]
        Sz1600x1200,
        ///<summary>
        ///Optimize for 1800x1440.
        ///<para>When the item is serialized out as xml, its value is "1800x1440".</para>
        ///</summary>
        [EnumString("1800x1440")]
        Sz1800x1440,
        ///<summary>
        ///Optimize for 1920x1200.
        ///<para>When the item is serialized out as xml, its value is "1920x1200".</para>
        ///</summary>
        [EnumString("1920x1200")]
        Sz1920x1200,
    }

    /// <summary>
    /// Defines the CharacterSpacingValues enumeration.
    /// </summary>
    public enum CharacterSpacingValues
    {
        ///<summary>
        ///Do Not Compress Whitespace.
        ///<para>When the item is serialized out as xml, its value is "doNotCompress".</para>
        ///</summary>
        [EnumString("doNotCompress")]
        DoNotCompress,
        ///<summary>
        ///Compress Whitespace From Punctuation Characters.
        ///<para>When the item is serialized out as xml, its value is "compressPunctuation".</para>
        ///</summary>
        [EnumString("compressPunctuation")]
        CompressPunctuation,
        ///<summary>
        ///Compress Whitespace From Both Japanese Kana And Punctuation Characters.
        ///<para>When the item is serialized out as xml, its value is "compressPunctuationAndJapaneseKana".</para>
        ///</summary>
        [EnumString("compressPunctuationAndJapaneseKana")]
        CompressPunctuationAndJapaneseKana,
    }

    /// <summary>
    /// Defines the ColorSchemeIndexValues enumeration.
    /// </summary>
    public enum ColorSchemeIndexValues
    {
        ///<summary>
        ///Dark 1 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "dark1".</para>
        ///</summary>
        [EnumString("dark1")]
        Dark1,
        ///<summary>
        ///Light 1 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "light1".</para>
        ///</summary>
        [EnumString("light1")]
        Light1,
        ///<summary>
        ///Dark 2 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "dark2".</para>
        ///</summary>
        [EnumString("dark2")]
        Dark2,
        ///<summary>
        ///Light 2 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "light2".</para>
        ///</summary>
        [EnumString("light2")]
        Light2,
        ///<summary>
        ///Accent 1 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent1".</para>
        ///</summary>
        [EnumString("accent1")]
        Accent1,
        ///<summary>
        ///Accent 2 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent2".</para>
        ///</summary>
        [EnumString("accent2")]
        Accent2,
        ///<summary>
        ///Accent 3 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent3".</para>
        ///</summary>
        [EnumString("accent3")]
        Accent3,
        ///<summary>
        ///Accent4 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent4".</para>
        ///</summary>
        [EnumString("accent4")]
        Accent4,
        ///<summary>
        ///Accent5 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent5".</para>
        ///</summary>
        [EnumString("accent5")]
        Accent5,
        ///<summary>
        ///Accent 6 Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "accent6".</para>
        ///</summary>
        [EnumString("accent6")]
        Accent6,
        ///<summary>
        ///Hyperlink Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "hyperlink".</para>
        ///</summary>
        [EnumString("hyperlink")]
        Hyperlink,
        ///<summary>
        ///Followed Hyperlink Theme Color Reference.
        ///<para>When the item is serialized out as xml, its value is "followedHyperlink".</para>
        ///</summary>
        [EnumString("followedHyperlink")]
        FollowedHyperlink,
    }

    /// <summary>
    /// Defines the FrameScrollbarVisibilityValues enumeration.
    /// </summary>
    public enum FrameScrollbarVisibilityValues
    {
        ///<summary>
        ///Always Show Scrollbar.
        ///<para>When the item is serialized out as xml, its value is "on".</para>
        ///</summary>
        [EnumString("on")]
        On,
        ///<summary>
        ///Never Show Scrollbar.
        ///<para>When the item is serialized out as xml, its value is "off".</para>
        ///</summary>
        [EnumString("off")]
        Off,
        ///<summary>
        ///Automatically Show Scrollbar As Needed.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
    }

    /// <summary>
    /// Defines the FrameLayoutValues enumeration.
    /// </summary>
    public enum FrameLayoutValues
    {
        ///<summary>
        ///Stack Frames Vertically.
        ///<para>When the item is serialized out as xml, its value is "rows".</para>
        ///</summary>
        [EnumString("rows")]
        Rows,
        ///<summary>
        ///Stack Frames Horizontally.
        ///<para>When the item is serialized out as xml, its value is "cols".</para>
        ///</summary>
        [EnumString("cols")]
        Columns,
        ///<summary>
        ///Do Not Stack Frames.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the LevelSuffixValues enumeration.
    /// </summary>
    public enum LevelSuffixValues
    {
        ///<summary>
        ///Tab Between Numbering and Text.
        ///<para>When the item is serialized out as xml, its value is "tab".</para>
        ///</summary>
        [EnumString("tab")]
        Tab,
        ///<summary>
        ///Space Between Numbering and Text.
        ///<para>When the item is serialized out as xml, its value is "space".</para>
        ///</summary>
        [EnumString("space")]
        Space,
        ///<summary>
        ///Nothing Between Numbering and Text.
        ///<para>When the item is serialized out as xml, its value is "nothing".</para>
        ///</summary>
        [EnumString("nothing")]
        Nothing,
    }

    /// <summary>
    /// Defines the MultiLevelValues enumeration.
    /// </summary>
    public enum MultiLevelValues
    {
        ///<summary>
        ///Single Level Numbering Definition.
        ///<para>When the item is serialized out as xml, its value is "singleLevel".</para>
        ///</summary>
        [EnumString("singleLevel")]
        SingleLevel,
        ///<summary>
        ///Multilevel Numbering Definition.
        ///<para>When the item is serialized out as xml, its value is "multilevel".</para>
        ///</summary>
        [EnumString("multilevel")]
        Multilevel,
        ///<summary>
        ///Hybrid Multilevel Numbering Definition.
        ///<para>When the item is serialized out as xml, its value is "hybridMultilevel".</para>
        ///</summary>
        [EnumString("hybridMultilevel")]
        HybridMultilevel,
    }

    /// <summary>
    /// Defines the TableStyleOverrideValues enumeration.
    /// </summary>
    public enum TableStyleOverrideValues
    {
        ///<summary>
        ///Whole table formatting.
        ///<para>When the item is serialized out as xml, its value is "wholeTable".</para>
        ///</summary>
        [EnumString("wholeTable")]
        WholeTable,
        ///<summary>
        ///First Row Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "firstRow".</para>
        ///</summary>
        [EnumString("firstRow")]
        FirstRow,
        ///<summary>
        ///Last table row formatting.
        ///<para>When the item is serialized out as xml, its value is "lastRow".</para>
        ///</summary>
        [EnumString("lastRow")]
        LastRow,
        ///<summary>
        ///First Column Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "firstCol".</para>
        ///</summary>
        [EnumString("firstCol")]
        FirstColumn,
        ///<summary>
        ///Last table column formatting.
        ///<para>When the item is serialized out as xml, its value is "lastCol".</para>
        ///</summary>
        [EnumString("lastCol")]
        LastColumn,
        ///<summary>
        ///Banded Column Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "band1Vert".</para>
        ///</summary>
        [EnumString("band1Vert")]
        Band1Vertical,
        ///<summary>
        ///Even Column Stripe Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "band2Vert".</para>
        ///</summary>
        [EnumString("band2Vert")]
        Band2Vertical,
        ///<summary>
        ///Banded Row Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "band1Horz".</para>
        ///</summary>
        [EnumString("band1Horz")]
        Band1Horizontal,
        ///<summary>
        ///Even Row Stripe Conditional Formatting.
        ///<para>When the item is serialized out as xml, its value is "band2Horz".</para>
        ///</summary>
        [EnumString("band2Horz")]
        Band2Horizontal,
        ///<summary>
        ///Top right table cell formatting.
        ///<para>When the item is serialized out as xml, its value is "neCell".</para>
        ///</summary>
        [EnumString("neCell")]
        NorthEastCell,
        ///<summary>
        ///Top left table cell formatting.
        ///<para>When the item is serialized out as xml, its value is "nwCell".</para>
        ///</summary>
        [EnumString("nwCell")]
        NorthWestCell,
        ///<summary>
        ///Bottom right table cell formatting.
        ///<para>When the item is serialized out as xml, its value is "seCell".</para>
        ///</summary>
        [EnumString("seCell")]
        SouthEastCell,
        ///<summary>
        ///Bottom left table cell formatting.
        ///<para>When the item is serialized out as xml, its value is "swCell".</para>
        ///</summary>
        [EnumString("swCell")]
        SouthWestCell,
    }

    /// <summary>
    /// Defines the StyleValues enumeration.
    /// </summary>
    public enum StyleValues
    {
        ///<summary>
        ///Paragraph Style.
        ///<para>When the item is serialized out as xml, its value is "paragraph".</para>
        ///</summary>
        [EnumString("paragraph")]
        Paragraph,
        ///<summary>
        ///Character Style.
        ///<para>When the item is serialized out as xml, its value is "character".</para>
        ///</summary>
        [EnumString("character")]
        Character,
        ///<summary>
        ///Table Style.
        ///<para>When the item is serialized out as xml, its value is "table".</para>
        ///</summary>
        [EnumString("table")]
        Table,
        ///<summary>
        ///Numbering Style.
        ///<para>When the item is serialized out as xml, its value is "numbering".</para>
        ///</summary>
        [EnumString("numbering")]
        Numbering,
    }

    /// <summary>
    /// Defines the FontFamilyValues enumeration.
    /// </summary>
    public enum FontFamilyValues
    {
        ///<summary>
        ///Novelty Font.
        ///<para>When the item is serialized out as xml, its value is "decorative".</para>
        ///</summary>
        [EnumString("decorative")]
        Decorative,
        ///<summary>
        ///Monospace Font.
        ///<para>When the item is serialized out as xml, its value is "modern".</para>
        ///</summary>
        [EnumString("modern")]
        Modern,
        ///<summary>
        ///Proportional Font With Serifs.
        ///<para>When the item is serialized out as xml, its value is "roman".</para>
        ///</summary>
        [EnumString("roman")]
        Roman,
        ///<summary>
        ///Script Font.
        ///<para>When the item is serialized out as xml, its value is "script".</para>
        ///</summary>
        [EnumString("script")]
        Script,
        ///<summary>
        ///Proportional Font Without Serifs.
        ///<para>When the item is serialized out as xml, its value is "swiss".</para>
        ///</summary>
        [EnumString("swiss")]
        Swiss,
        ///<summary>
        ///No Font Family.
        ///<para>When the item is serialized out as xml, its value is "auto".</para>
        ///</summary>
        [EnumString("auto")]
        Auto,
    }

    /// <summary>
    /// Defines the FontPitchValues enumeration.
    /// </summary>
    public enum FontPitchValues
    {
        ///<summary>
        ///Fixed Width.
        ///<para>When the item is serialized out as xml, its value is "fixed".</para>
        ///</summary>
        [EnumString("fixed")]
        Fixed,
        ///<summary>
        ///Proportional Width.
        ///<para>When the item is serialized out as xml, its value is "variable".</para>
        ///</summary>
        [EnumString("variable")]
        Variable,
        ///<summary>
        ///Default.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
    }

    /// <summary>
    /// Defines the ThemeColorValues enumeration.
    /// </summary>
    public enum ThemeColorValues
    {
        ///<summary>
        ///Dark 1 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "dark1".</para>
        ///</summary>
        [EnumString("dark1")]
        Dark1,
        ///<summary>
        ///Light 1 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "light1".</para>
        ///</summary>
        [EnumString("light1")]
        Light1,
        ///<summary>
        ///Dark 2 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "dark2".</para>
        ///</summary>
        [EnumString("dark2")]
        Dark2,
        ///<summary>
        ///Light 2 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "light2".</para>
        ///</summary>
        [EnumString("light2")]
        Light2,
        ///<summary>
        ///Accent 1 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent1".</para>
        ///</summary>
        [EnumString("accent1")]
        Accent1,
        ///<summary>
        ///Accent 2 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent2".</para>
        ///</summary>
        [EnumString("accent2")]
        Accent2,
        ///<summary>
        ///Accent 3 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent3".</para>
        ///</summary>
        [EnumString("accent3")]
        Accent3,
        ///<summary>
        ///Accent 4 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent4".</para>
        ///</summary>
        [EnumString("accent4")]
        Accent4,
        ///<summary>
        ///Accent 5 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent5".</para>
        ///</summary>
        [EnumString("accent5")]
        Accent5,
        ///<summary>
        ///Accent 6 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "accent6".</para>
        ///</summary>
        [EnumString("accent6")]
        Accent6,
        ///<summary>
        ///Hyperlink Theme Color.
        ///<para>When the item is serialized out as xml, its value is "hyperlink".</para>
        ///</summary>
        [EnumString("hyperlink")]
        Hyperlink,
        ///<summary>
        ///Followed Hyperlink Theme Color.
        ///<para>When the item is serialized out as xml, its value is "followedHyperlink".</para>
        ///</summary>
        [EnumString("followedHyperlink")]
        FollowedHyperlink,
        ///<summary>
        ///No Theme Color.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Background 1 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "background1".</para>
        ///</summary>
        [EnumString("background1")]
        Background1,
        ///<summary>
        ///Text 1 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "text1".</para>
        ///</summary>
        [EnumString("text1")]
        Text1,
        ///<summary>
        ///Background 2 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "background2".</para>
        ///</summary>
        [EnumString("background2")]
        Background2,
        ///<summary>
        ///Text 2 Theme Color.
        ///<para>When the item is serialized out as xml, its value is "text2".</para>
        ///</summary>
        [EnumString("text2")]
        Text2,
    }

    /// <summary>
    /// Defines the DocPartBehaviorValues enumeration.
    /// </summary>
    public enum DocPartBehaviorValues
    {
        ///<summary>
        ///Insert Content At Specified Location.
        ///<para>When the item is serialized out as xml, its value is "content".</para>
        ///</summary>
        [EnumString("content")]
        Content,
        ///<summary>
        ///Ensure Entry Is In New Paragraph.
        ///<para>When the item is serialized out as xml, its value is "p".</para>
        ///</summary>
        [EnumString("p")]
        Paragraph,
        ///<summary>
        ///Ensure Entry Is On New Page.
        ///<para>When the item is serialized out as xml, its value is "pg".</para>
        ///</summary>
        [EnumString("pg")]
        Page,
    }

    /// <summary>
    /// Defines the DocPartValues enumeration.
    /// </summary>
    public enum DocPartValues
    {
        ///<summary>
        ///No Type.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Normal.
        ///<para>When the item is serialized out as xml, its value is "normal".</para>
        ///</summary>
        [EnumString("normal")]
        Normal,
        ///<summary>
        ///Automatically Replace Name With Content.
        ///<para>When the item is serialized out as xml, its value is "autoExp".</para>
        ///</summary>
        [EnumString("autoExp")]
        AutoExp,
        ///<summary>
        ///AutoText User Interface Entry.
        ///<para>When the item is serialized out as xml, its value is "toolbar".</para>
        ///</summary>
        [EnumString("toolbar")]
        Toolbar,
        ///<summary>
        ///AutoCorrect Entry.
        ///<para>When the item is serialized out as xml, its value is "speller".</para>
        ///</summary>
        [EnumString("speller")]
        Speller,
        ///<summary>
        ///Form Field Help Text.
        ///<para>When the item is serialized out as xml, its value is "formFld".</para>
        ///</summary>
        [EnumString("formFld")]
        FormField,
        ///<summary>
        ///Structured Document Tag Placeholder Text.
        ///<para>When the item is serialized out as xml, its value is "bbPlcHdr".</para>
        ///</summary>
        [EnumString("bbPlcHdr")]
        SdtPlaceholder,
    }

    /// <summary>
    /// Defines the DocPartGalleryValues enumeration.
    /// </summary>
    public enum DocPartGalleryValues
    {
        ///<summary>
        ///Structured Document Tag Placeholder Text Gallery.
        ///<para>When the item is serialized out as xml, its value is "placeholder".</para>
        ///</summary>
        [EnumString("placeholder")]
        Placeholder,
        ///<summary>
        ///All Galleries.
        ///<para>When the item is serialized out as xml, its value is "any".</para>
        ///</summary>
        [EnumString("any")]
        Any,
        ///<summary>
        ///No Gallery Classification.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
        ///<summary>
        ///Document Parts Gallery.
        ///<para>When the item is serialized out as xml, its value is "docParts".</para>
        ///</summary>
        [EnumString("docParts")]
        DocumentPart,
        ///<summary>
        ///Cover Page Gallery.
        ///<para>When the item is serialized out as xml, its value is "coverPg".</para>
        ///</summary>
        [EnumString("coverPg")]
        CoverPage,
        ///<summary>
        ///Equations Gallery.
        ///<para>When the item is serialized out as xml, its value is "eq".</para>
        ///</summary>
        [EnumString("eq")]
        Equation,
        ///<summary>
        ///Footers Gallery.
        ///<para>When the item is serialized out as xml, its value is "ftrs".</para>
        ///</summary>
        [EnumString("ftrs")]
        Footer,
        ///<summary>
        ///Headers Gallery.
        ///<para>When the item is serialized out as xml, its value is "hdrs".</para>
        ///</summary>
        [EnumString("hdrs")]
        Header,
        ///<summary>
        ///Page Numbers Gallery.
        ///<para>When the item is serialized out as xml, its value is "pgNum".</para>
        ///</summary>
        [EnumString("pgNum")]
        PageNumber,
        ///<summary>
        ///Table Gallery.
        ///<para>When the item is serialized out as xml, its value is "tbls".</para>
        ///</summary>
        [EnumString("tbls")]
        Table,
        ///<summary>
        ///Watermark Gallery.
        ///<para>When the item is serialized out as xml, its value is "watermarks".</para>
        ///</summary>
        [EnumString("watermarks")]
        WaterMark,
        ///<summary>
        ///AutoText Gallery.
        ///<para>When the item is serialized out as xml, its value is "autoTxt".</para>
        ///</summary>
        [EnumString("autoTxt")]
        AutoText,
        ///<summary>
        ///Text Box Gallery.
        ///<para>When the item is serialized out as xml, its value is "txtBox".</para>
        ///</summary>
        [EnumString("txtBox")]
        TextBox,
        ///<summary>
        ///Page Numbers At Top Gallery.
        ///<para>When the item is serialized out as xml, its value is "pgNumT".</para>
        ///</summary>
        [EnumString("pgNumT")]
        PageNumberTop,
        ///<summary>
        ///Page Numbers At Bottom Gallery.
        ///<para>When the item is serialized out as xml, its value is "pgNumB".</para>
        ///</summary>
        [EnumString("pgNumB")]
        PageNumberBottom,
        ///<summary>
        ///Page Numbers At Margins Gallery.
        ///<para>When the item is serialized out as xml, its value is "pgNumMargins".</para>
        ///</summary>
        [EnumString("pgNumMargins")]
        PageNumberMargins,
        ///<summary>
        ///Table of Contents Gallery.
        ///<para>When the item is serialized out as xml, its value is "tblOfContents".</para>
        ///</summary>
        [EnumString("tblOfContents")]
        TableOfContents,
        ///<summary>
        ///Bibliography Gallery.
        ///<para>When the item is serialized out as xml, its value is "bib".</para>
        ///</summary>
        [EnumString("bib")]
        Bibliography,
        ///<summary>
        ///Custom Quick Parts Gallery.
        ///<para>When the item is serialized out as xml, its value is "custQuickParts".</para>
        ///</summary>
        [EnumString("custQuickParts")]
        CustomQuickParts,
        ///<summary>
        ///Custom Cover Page Gallery.
        ///<para>When the item is serialized out as xml, its value is "custCoverPg".</para>
        ///</summary>
        [EnumString("custCoverPg")]
        CustomCoverPage,
        ///<summary>
        ///Custom Equation Gallery.
        ///<para>When the item is serialized out as xml, its value is "custEq".</para>
        ///</summary>
        [EnumString("custEq")]
        CustomEquation,
        ///<summary>
        ///Custom Footer Gallery.
        ///<para>When the item is serialized out as xml, its value is "custFtrs".</para>
        ///</summary>
        [EnumString("custFtrs")]
        CustomFooter,
        ///<summary>
        ///Custom Header Gallery.
        ///<para>When the item is serialized out as xml, its value is "custHdrs".</para>
        ///</summary>
        [EnumString("custHdrs")]
        CustomHeaders,
        ///<summary>
        ///Custom Page Number Gallery.
        ///<para>When the item is serialized out as xml, its value is "custPgNum".</para>
        ///</summary>
        [EnumString("custPgNum")]
        CustomPageNumber,
        ///<summary>
        ///Custom Table Gallery.
        ///<para>When the item is serialized out as xml, its value is "custTbls".</para>
        ///</summary>
        [EnumString("custTbls")]
        CustomTable,
        ///<summary>
        ///Custom Watermark Gallery.
        ///<para>When the item is serialized out as xml, its value is "custWatermarks".</para>
        ///</summary>
        [EnumString("custWatermarks")]
        CustomWatermark,
        ///<summary>
        ///Custom AutoText Gallery.
        ///<para>When the item is serialized out as xml, its value is "custAutoTxt".</para>
        ///</summary>
        [EnumString("custAutoTxt")]
        CustomAutoText,
        ///<summary>
        ///Custom Text Box Gallery.
        ///<para>When the item is serialized out as xml, its value is "custTxtBox".</para>
        ///</summary>
        [EnumString("custTxtBox")]
        CustomTextBox,
        ///<summary>
        ///Custom Page Number At Top Gallery.
        ///<para>When the item is serialized out as xml, its value is "custPgNumT".</para>
        ///</summary>
        [EnumString("custPgNumT")]
        CustomPageNumberTop,
        ///<summary>
        ///Custom Page Number At Bottom Gallery.
        ///<para>When the item is serialized out as xml, its value is "custPgNumB".</para>
        ///</summary>
        [EnumString("custPgNumB")]
        CustomPageNumberBottom,
        ///<summary>
        ///Custom Page Number At Margins Gallery.
        ///<para>When the item is serialized out as xml, its value is "custPgNumMargins".</para>
        ///</summary>
        [EnumString("custPgNumMargins")]
        CustomPageNumberMargin,
        ///<summary>
        ///Custom Table of Contents Gallery.
        ///<para>When the item is serialized out as xml, its value is "custTblOfContents".</para>
        ///</summary>
        [EnumString("custTblOfContents")]
        CustomTableOfContents,
        ///<summary>
        ///Custom Bibliography Gallery.
        ///<para>When the item is serialized out as xml, its value is "custBib".</para>
        ///</summary>
        [EnumString("custBib")]
        CustomBibliography,
        ///<summary>
        ///Custom 1 Gallery.
        ///<para>When the item is serialized out as xml, its value is "custom1".</para>
        ///</summary>
        [EnumString("custom1")]
        Custom1,
        ///<summary>
        ///Custom 2 Gallery.
        ///<para>When the item is serialized out as xml, its value is "custom2".</para>
        ///</summary>
        [EnumString("custom2")]
        Custom2,
        ///<summary>
        ///Custom 3 Gallery.
        ///<para>When the item is serialized out as xml, its value is "custom3".</para>
        ///</summary>
        [EnumString("custom3")]
        Custom3,
        ///<summary>
        ///Custom 4 Gallery.
        ///<para>When the item is serialized out as xml, its value is "custom4".</para>
        ///</summary>
        [EnumString("custom4")]
        Custom4,
        ///<summary>
        ///Custom 5 Gallery.
        ///<para>When the item is serialized out as xml, its value is "custom5".</para>
        ///</summary>
        [EnumString("custom5")]
        Custom5,
    }

    /// <summary>
    /// Automatic Caption Positioning Values
    /// </summary>
    public enum CaptionPositionValues
    {
        ///<summary>
        ///Position Caption Above Object.
        ///<para>When the item is serialized out as xml, its value is "above".</para>
        ///</summary>
        [EnumString("above")]
        Above,
        ///<summary>
        ///Position Caption Below Object.
        ///<para>When the item is serialized out as xml, its value is "below".</para>
        ///</summary>
        [EnumString("below")]
        Below,
    }

    /// <summary>
    /// Horizontal Alignment Type
    /// </summary>
    public enum LevelJustificationValues
    {
        ///<summary>
        ///Align Left.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///Align Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Align Right.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
    }

    /// <summary>
    /// Defines the ShadingPatternValues enumeration.
    /// </summary>
    public enum ShadingPatternValues
    {
        ///<summary>
        ///No Pattern.
        ///<para>When the item is serialized out as xml, its value is "nil".</para>
        ///</summary>
        [EnumString("nil")]
        Nil,
        ///<summary>
        ///No Pattern.
        ///<para>When the item is serialized out as xml, its value is "clear".</para>
        ///</summary>
        [EnumString("clear")]
        Clear,
        ///<summary>
        ///100% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "solid".</para>
        ///</summary>
        [EnumString("solid")]
        Solid,
        ///<summary>
        ///Horizontal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "horzStripe".</para>
        ///</summary>
        [EnumString("horzStripe")]
        HorizontalStripe,
        ///<summary>
        ///Vertical Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "vertStripe".</para>
        ///</summary>
        [EnumString("vertStripe")]
        VerticalStripe,
        ///<summary>
        ///Reverse Diagonal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "reverseDiagStripe".</para>
        ///</summary>
        [EnumString("reverseDiagStripe")]
        ReverseDiagonalStripe,
        ///<summary>
        ///Diagonal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "diagStripe".</para>
        ///</summary>
        [EnumString("diagStripe")]
        DiagonalStripe,
        ///<summary>
        ///Horizontal Cross Pattern.
        ///<para>When the item is serialized out as xml, its value is "horzCross".</para>
        ///</summary>
        [EnumString("horzCross")]
        HorizontalCross,
        ///<summary>
        ///Diagonal Cross Pattern.
        ///<para>When the item is serialized out as xml, its value is "diagCross".</para>
        ///</summary>
        [EnumString("diagCross")]
        DiagonalCross,
        ///<summary>
        ///Thin Horizontal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinHorzStripe".</para>
        ///</summary>
        [EnumString("thinHorzStripe")]
        ThinHorizontalStripe,
        ///<summary>
        ///Thin Vertical Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinVertStripe".</para>
        ///</summary>
        [EnumString("thinVertStripe")]
        ThinVerticalStripe,
        ///<summary>
        ///Thin Reverse Diagonal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinReverseDiagStripe".</para>
        ///</summary>
        [EnumString("thinReverseDiagStripe")]
        ThinReverseDiagonalStripe,
        ///<summary>
        ///Thin Diagonal Stripe Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinDiagStripe".</para>
        ///</summary>
        [EnumString("thinDiagStripe")]
        ThinDiagonalStripe,
        ///<summary>
        ///Thin Horizontal Cross Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinHorzCross".</para>
        ///</summary>
        [EnumString("thinHorzCross")]
        ThinHorizontalCross,
        ///<summary>
        ///Thin Diagonal Cross Pattern.
        ///<para>When the item is serialized out as xml, its value is "thinDiagCross".</para>
        ///</summary>
        [EnumString("thinDiagCross")]
        ThinDiagonalCross,
        ///<summary>
        ///5% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct5".</para>
        ///</summary>
        [EnumString("pct5")]
        Percent5,
        ///<summary>
        ///10% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct10".</para>
        ///</summary>
        [EnumString("pct10")]
        Percent10,
        ///<summary>
        ///12.5% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct12".</para>
        ///</summary>
        [EnumString("pct12")]
        Percent12,
        ///<summary>
        ///15% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct15".</para>
        ///</summary>
        [EnumString("pct15")]
        Percent15,
        ///<summary>
        ///20% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct20".</para>
        ///</summary>
        [EnumString("pct20")]
        Percent20,
        ///<summary>
        ///25% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct25".</para>
        ///</summary>
        [EnumString("pct25")]
        Percent25,
        ///<summary>
        ///30% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct30".</para>
        ///</summary>
        [EnumString("pct30")]
        Percent30,
        ///<summary>
        ///35% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct35".</para>
        ///</summary>
        [EnumString("pct35")]
        Percent35,
        ///<summary>
        ///37.5% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct37".</para>
        ///</summary>
        [EnumString("pct37")]
        Percent37,
        ///<summary>
        ///40% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct40".</para>
        ///</summary>
        [EnumString("pct40")]
        Percent40,
        ///<summary>
        ///45% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct45".</para>
        ///</summary>
        [EnumString("pct45")]
        Percent45,
        ///<summary>
        ///50% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct50".</para>
        ///</summary>
        [EnumString("pct50")]
        Percent50,
        ///<summary>
        ///55% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct55".</para>
        ///</summary>
        [EnumString("pct55")]
        Percent55,
        ///<summary>
        ///60% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct60".</para>
        ///</summary>
        [EnumString("pct60")]
        Percent60,
        ///<summary>
        ///62.5% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct62".</para>
        ///</summary>
        [EnumString("pct62")]
        Percent62,
        ///<summary>
        ///65% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct65".</para>
        ///</summary>
        [EnumString("pct65")]
        Percent65,
        ///<summary>
        ///70% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct70".</para>
        ///</summary>
        [EnumString("pct70")]
        Percent70,
        ///<summary>
        ///75% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct75".</para>
        ///</summary>
        [EnumString("pct75")]
        Percent75,
        ///<summary>
        ///80% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct80".</para>
        ///</summary>
        [EnumString("pct80")]
        Percent80,
        ///<summary>
        ///85% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct85".</para>
        ///</summary>
        [EnumString("pct85")]
        Percent85,
        ///<summary>
        ///87.5% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct87".</para>
        ///</summary>
        [EnumString("pct87")]
        Percent87,
        ///<summary>
        ///90% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct90".</para>
        ///</summary>
        [EnumString("pct90")]
        Percent90,
        ///<summary>
        ///95% Fill Pattern.
        ///<para>When the item is serialized out as xml, its value is "pct95".</para>
        ///</summary>
        [EnumString("pct95")]
        Percent95,
    }

    /// <summary>
    /// Defines the StylePaneSortMethodsValues enumeration.
    /// </summary>
    public enum StylePaneSortMethodsValues
    {
        ///<summary>
        ///0000.
        ///<para>When the item is serialized out as xml, its value is "0000".</para>
        ///</summary>
        [EnumString("0000")]
        Zero,
        ///<summary>
        ///name.
        ///<para>When the item is serialized out as xml, its value is "name".</para>
        ///</summary>
        [EnumString("name")]
        Name,
        ///<summary>
        ///0001.
        ///<para>When the item is serialized out as xml, its value is "0001".</para>
        ///</summary>
        [EnumString("0001")]
        One,
        ///<summary>
        ///priority.
        ///<para>When the item is serialized out as xml, its value is "priority".</para>
        ///</summary>
        [EnumString("priority")]
        Priority,
        ///<summary>
        ///0002.
        ///<para>When the item is serialized out as xml, its value is "0002".</para>
        ///</summary>
        [EnumString("0002")]
        Two,
        ///<summary>
        ///font.
        ///<para>When the item is serialized out as xml, its value is "font".</para>
        ///</summary>
        [EnumString("font")]
        Font,
        ///<summary>
        ///0003.
        ///<para>When the item is serialized out as xml, its value is "0003".</para>
        ///</summary>
        [EnumString("0003")]
        Three,
        ///<summary>
        ///basedOn.
        ///<para>When the item is serialized out as xml, its value is "basedOn".</para>
        ///</summary>
        [EnumString("basedOn")]
        BasedOn,
        ///<summary>
        ///0004.
        ///<para>When the item is serialized out as xml, its value is "0004".</para>
        ///</summary>
        [EnumString("0004")]
        Four,
        ///<summary>
        ///type.
        ///<para>When the item is serialized out as xml, its value is "type".</para>
        ///</summary>
        [EnumString("type")]
        Type,
        ///<summary>
        ///0005.
        ///<para>When the item is serialized out as xml, its value is "0005".</para>
        ///</summary>
        [EnumString("0005")]
        Five,
        ///<summary>
        ///default.
        ///<para>When the item is serialized out as xml, its value is "default".</para>
        ///</summary>
        [EnumString("default")]
        Default,
    }

    /// <summary>
    /// Defines the DirectionValues enumeration.
    /// </summary>
    public enum DirectionValues
    {
        ///<summary>
        ///ltr.
        ///<para>When the item is serialized out as xml, its value is "ltr".</para>
        ///</summary>
        [EnumString("ltr")]
        Ltr,
        ///<summary>
        ///rtl.
        ///<para>When the item is serialized out as xml, its value is "rtl".</para>
        ///</summary>
        [EnumString("rtl")]
        Rtl,
    }

    /// <summary>
    /// Defines the CalendarValues enumeration.
    /// </summary>
    public enum CalendarValues
    {
        ///<summary>
        ///Gregorian.
        ///<para>When the item is serialized out as xml, its value is "gregorian".</para>
        ///</summary>
        [EnumString("gregorian")]
        Gregorian,
        ///<summary>
        ///Hijri.
        ///<para>When the item is serialized out as xml, its value is "hijri".</para>
        ///</summary>
        [EnumString("hijri")]
        Hijri,
        ///<summary>
        ///umalqura.
        ///<para>When the item is serialized out as xml, its value is "umalqura".</para>
        ///</summary>
        [EnumString("umalqura")]
        Umalqura,
        ///<summary>
        ///Hebrew.
        ///<para>When the item is serialized out as xml, its value is "hebrew".</para>
        ///</summary>
        [EnumString("hebrew")]
        Hebrew,
        ///<summary>
        ///Taiwan.
        ///<para>When the item is serialized out as xml, its value is "taiwan".</para>
        ///</summary>
        [EnumString("taiwan")]
        Taiwan,
        ///<summary>
        ///Japanese Emperor Era.
        ///<para>When the item is serialized out as xml, its value is "japan".</para>
        ///</summary>
        [EnumString("japan")]
        Japan,
        ///<summary>
        ///Thai.
        ///<para>When the item is serialized out as xml, its value is "thai".</para>
        ///</summary>
        [EnumString("thai")]
        Thai,
        ///<summary>
        ///Korean Tangun Era.
        ///<para>When the item is serialized out as xml, its value is "korea".</para>
        ///</summary>
        [EnumString("korea")]
        Korea,
        ///<summary>
        ///Saka Era.
        ///<para>When the item is serialized out as xml, its value is "saka".</para>
        ///</summary>
        [EnumString("saka")]
        Saka,
        ///<summary>
        ///Gregorian transliterated English.
        ///<para>When the item is serialized out as xml, its value is "gregorianXlitEnglish".</para>
        ///</summary>
        [EnumString("gregorianXlitEnglish")]
        GregorianTransliteratedEnglish,
        ///<summary>
        ///Gregorian transliterated French.
        ///<para>When the item is serialized out as xml, its value is "gregorianXlitFrench".</para>
        ///</summary>
        [EnumString("gregorianXlitFrench")]
        GregorianTransliteratedFrench,
        ///<summary>
        ///gregorianUs.
        ///<para>When the item is serialized out as xml, its value is "gregorianUs".</para>
        ///</summary>
        [EnumString("gregorianUs")]
        GregorianUs,
        ///<summary>
        ///gregorianMeFrench.
        ///<para>When the item is serialized out as xml, its value is "gregorianMeFrench".</para>
        ///</summary>
        [EnumString("gregorianMeFrench")]
        GregorianMeFrench,
        ///<summary>
        ///gregorianArabic.
        ///<para>When the item is serialized out as xml, its value is "gregorianArabic".</para>
        ///</summary>
        [EnumString("gregorianArabic")]
        GregorianArabic,
        ///<summary>
        ///none.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
    }

    /// <summary>
    /// Defines the NumberFormatValues enumeration.
    /// </summary>
    public enum NumberFormatValues
    {
        ///<summary>
        ///Decimal Numbers.
        ///<para>When the item is serialized out as xml, its value is "decimal".</para>
        ///</summary>
        [EnumString("decimal")]
        Decimal,
        ///<summary>
        ///Uppercase Roman Numerals.
        ///<para>When the item is serialized out as xml, its value is "upperRoman".</para>
        ///</summary>
        [EnumString("upperRoman")]
        UpperRoman,
        ///<summary>
        ///Lowercase Roman Numerals.
        ///<para>When the item is serialized out as xml, its value is "lowerRoman".</para>
        ///</summary>
        [EnumString("lowerRoman")]
        LowerRoman,
        ///<summary>
        ///Uppercase Latin Alphabet.
        ///<para>When the item is serialized out as xml, its value is "upperLetter".</para>
        ///</summary>
        [EnumString("upperLetter")]
        UpperLetter,
        ///<summary>
        ///Lowercase Latin Alphabet.
        ///<para>When the item is serialized out as xml, its value is "lowerLetter".</para>
        ///</summary>
        [EnumString("lowerLetter")]
        LowerLetter,
        ///<summary>
        ///Ordinal.
        ///<para>When the item is serialized out as xml, its value is "ordinal".</para>
        ///</summary>
        [EnumString("ordinal")]
        Ordinal,
        ///<summary>
        ///Cardinal Text.
        ///<para>When the item is serialized out as xml, its value is "cardinalText".</para>
        ///</summary>
        [EnumString("cardinalText")]
        CardinalText,
        ///<summary>
        ///Ordinal Text.
        ///<para>When the item is serialized out as xml, its value is "ordinalText".</para>
        ///</summary>
        [EnumString("ordinalText")]
        OrdinalText,
        ///<summary>
        ///Hexadecimal Numbering.
        ///<para>When the item is serialized out as xml, its value is "hex".</para>
        ///</summary>
        [EnumString("hex")]
        Hex,
        ///<summary>
        ///Chicago Manual of Style.
        ///<para>When the item is serialized out as xml, its value is "chicago".</para>
        ///</summary>
        [EnumString("chicago")]
        Chicago,
        ///<summary>
        ///Ideographs.
        ///<para>When the item is serialized out as xml, its value is "ideographDigital".</para>
        ///</summary>
        [EnumString("ideographDigital")]
        IdeographDigital,
        ///<summary>
        ///Japanese Counting System.
        ///<para>When the item is serialized out as xml, its value is "japaneseCounting".</para>
        ///</summary>
        [EnumString("japaneseCounting")]
        JapaneseCounting,
        ///<summary>
        ///AIUEO Order Hiragana.
        ///<para>When the item is serialized out as xml, its value is "aiueo".</para>
        ///</summary>
        [EnumString("aiueo")]
        Aiueo,
        ///<summary>
        ///Iroha Ordered Katakana.
        ///<para>When the item is serialized out as xml, its value is "iroha".</para>
        ///</summary>
        [EnumString("iroha")]
        Iroha,
        ///<summary>
        ///Double Byte Arabic Numerals.
        ///<para>When the item is serialized out as xml, its value is "decimalFullWidth".</para>
        ///</summary>
        [EnumString("decimalFullWidth")]
        DecimalFullWidth,
        ///<summary>
        ///Single Byte Arabic Numerals.
        ///<para>When the item is serialized out as xml, its value is "decimalHalfWidth".</para>
        ///</summary>
        [EnumString("decimalHalfWidth")]
        DecimalHalfWidth,
        ///<summary>
        ///Japanese Legal Numbering.
        ///<para>When the item is serialized out as xml, its value is "japaneseLegal".</para>
        ///</summary>
        [EnumString("japaneseLegal")]
        JapaneseLegal,
        ///<summary>
        ///Japanese Digital Ten Thousand Counting System.
        ///<para>When the item is serialized out as xml, its value is "japaneseDigitalTenThousand".</para>
        ///</summary>
        [EnumString("japaneseDigitalTenThousand")]
        JapaneseDigitalTenThousand,
        ///<summary>
        ///Decimal Numbers Enclosed in a Circle.
        ///<para>When the item is serialized out as xml, its value is "decimalEnclosedCircle".</para>
        ///</summary>
        [EnumString("decimalEnclosedCircle")]
        DecimalEnclosedCircle,
        ///<summary>
        ///Double Byte Arabic Numerals Alternate.
        ///<para>When the item is serialized out as xml, its value is "decimalFullWidth2".</para>
        ///</summary>
        [EnumString("decimalFullWidth2")]
        DecimalFullWidth2,
        ///<summary>
        ///Full-Width AIUEO Order Hiragana.
        ///<para>When the item is serialized out as xml, its value is "aiueoFullWidth".</para>
        ///</summary>
        [EnumString("aiueoFullWidth")]
        AiueoFullWidth,
        ///<summary>
        ///Full-Width Iroha Ordered Katakana.
        ///<para>When the item is serialized out as xml, its value is "irohaFullWidth".</para>
        ///</summary>
        [EnumString("irohaFullWidth")]
        IrohaFullWidth,
        ///<summary>
        ///Initial Zero Arabic Numerals.
        ///<para>When the item is serialized out as xml, its value is "decimalZero".</para>
        ///</summary>
        [EnumString("decimalZero")]
        DecimalZero,
        ///<summary>
        ///Bullet.
        ///<para>When the item is serialized out as xml, its value is "bullet".</para>
        ///</summary>
        [EnumString("bullet")]
        Bullet,
        ///<summary>
        ///Korean Ganada Numbering.
        ///<para>When the item is serialized out as xml, its value is "ganada".</para>
        ///</summary>
        [EnumString("ganada")]
        Ganada,
        ///<summary>
        ///Korean Chosung Numbering.
        ///<para>When the item is serialized out as xml, its value is "chosung".</para>
        ///</summary>
        [EnumString("chosung")]
        Chosung,
        ///<summary>
        ///Decimal Numbers Followed by a Period.
        ///<para>When the item is serialized out as xml, its value is "decimalEnclosedFullstop".</para>
        ///</summary>
        [EnumString("decimalEnclosedFullstop")]
        DecimalEnclosedFullstop,
        ///<summary>
        ///Decimal Numbers Enclosed in Parenthesis.
        ///<para>When the item is serialized out as xml, its value is "decimalEnclosedParen".</para>
        ///</summary>
        [EnumString("decimalEnclosedParen")]
        DecimalEnclosedParen,
        ///<summary>
        ///Decimal Numbers Enclosed in a Circle.
        ///<para>When the item is serialized out as xml, its value is "decimalEnclosedCircleChinese".</para>
        ///</summary>
        [EnumString("decimalEnclosedCircleChinese")]
        DecimalEnclosedCircleChinese,
        ///<summary>
        ///Ideographs Enclosed in a Circle.
        ///<para>When the item is serialized out as xml, its value is "ideographEnclosedCircle".</para>
        ///</summary>
        [EnumString("ideographEnclosedCircle")]
        IdeographEnclosedCircle,
        ///<summary>
        ///Traditional Ideograph Format.
        ///<para>When the item is serialized out as xml, its value is "ideographTraditional".</para>
        ///</summary>
        [EnumString("ideographTraditional")]
        IdeographTraditional,
        ///<summary>
        ///Zodiac Ideograph Format.
        ///<para>When the item is serialized out as xml, its value is "ideographZodiac".</para>
        ///</summary>
        [EnumString("ideographZodiac")]
        IdeographZodiac,
        ///<summary>
        ///Traditional Zodiac Ideograph Format.
        ///<para>When the item is serialized out as xml, its value is "ideographZodiacTraditional".</para>
        ///</summary>
        [EnumString("ideographZodiacTraditional")]
        IdeographZodiacTraditional,
        ///<summary>
        ///Taiwanese Counting System.
        ///<para>When the item is serialized out as xml, its value is "taiwaneseCounting".</para>
        ///</summary>
        [EnumString("taiwaneseCounting")]
        TaiwaneseCounting,
        ///<summary>
        ///Traditional Legal Ideograph Format.
        ///<para>When the item is serialized out as xml, its value is "ideographLegalTraditional".</para>
        ///</summary>
        [EnumString("ideographLegalTraditional")]
        IdeographLegalTraditional,
        ///<summary>
        ///Taiwanese Counting Thousand System.
        ///<para>When the item is serialized out as xml, its value is "taiwaneseCountingThousand".</para>
        ///</summary>
        [EnumString("taiwaneseCountingThousand")]
        TaiwaneseCountingThousand,
        ///<summary>
        ///Taiwanese Digital Counting System.
        ///<para>When the item is serialized out as xml, its value is "taiwaneseDigital".</para>
        ///</summary>
        [EnumString("taiwaneseDigital")]
        TaiwaneseDigital,
        ///<summary>
        ///Chinese Counting System.
        ///<para>When the item is serialized out as xml, its value is "chineseCounting".</para>
        ///</summary>
        [EnumString("chineseCounting")]
        ChineseCounting,
        ///<summary>
        ///Chinese Legal Simplified Format.
        ///<para>When the item is serialized out as xml, its value is "chineseLegalSimplified".</para>
        ///</summary>
        [EnumString("chineseLegalSimplified")]
        ChineseLegalSimplified,
        ///<summary>
        ///Chinese Counting Thousand System.
        ///<para>When the item is serialized out as xml, its value is "chineseCountingThousand".</para>
        ///</summary>
        [EnumString("chineseCountingThousand")]
        ChineseCountingThousand,
        ///<summary>
        ///Korean Digital Counting System.
        ///<para>When the item is serialized out as xml, its value is "koreanDigital".</para>
        ///</summary>
        [EnumString("koreanDigital")]
        KoreanDigital,
        ///<summary>
        ///Korean Counting System.
        ///<para>When the item is serialized out as xml, its value is "koreanCounting".</para>
        ///</summary>
        [EnumString("koreanCounting")]
        KoreanCounting,
        ///<summary>
        ///Korean Legal Numbering.
        ///<para>When the item is serialized out as xml, its value is "koreanLegal".</para>
        ///</summary>
        [EnumString("koreanLegal")]
        KoreanLegal,
        ///<summary>
        ///Korean Digital Counting System Alternate.
        ///<para>When the item is serialized out as xml, its value is "koreanDigital2".</para>
        ///</summary>
        [EnumString("koreanDigital2")]
        KoreanDigital2,
        ///<summary>
        ///Vietnamese Numerals.
        ///<para>When the item is serialized out as xml, its value is "vietnameseCounting".</para>
        ///</summary>
        [EnumString("vietnameseCounting")]
        VietnameseCounting,
        ///<summary>
        ///Lowercase Russian Alphabet.
        ///<para>When the item is serialized out as xml, its value is "russianLower".</para>
        ///</summary>
        [EnumString("russianLower")]
        RussianLower,
        ///<summary>
        ///Uppercase Russian Alphabet.
        ///<para>When the item is serialized out as xml, its value is "russianUpper".</para>
        ///</summary>
        [EnumString("russianUpper")]
        RussianUpper,
        ///<summary>
        ///No Numbering.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Number With Dashes.
        ///<para>When the item is serialized out as xml, its value is "numberInDash".</para>
        ///</summary>
        [EnumString("numberInDash")]
        NumberInDash,
        ///<summary>
        ///Hebrew Numerals.
        ///<para>When the item is serialized out as xml, its value is "hebrew1".</para>
        ///</summary>
        [EnumString("hebrew1")]
        Hebrew1,
        ///<summary>
        ///Hebrew Alphabet.
        ///<para>When the item is serialized out as xml, its value is "hebrew2".</para>
        ///</summary>
        [EnumString("hebrew2")]
        Hebrew2,
        ///<summary>
        ///Arabic Alphabet.
        ///<para>When the item is serialized out as xml, its value is "arabicAlpha".</para>
        ///</summary>
        [EnumString("arabicAlpha")]
        ArabicAlpha,
        ///<summary>
        ///Arabic Abjad Numerals.
        ///<para>When the item is serialized out as xml, its value is "arabicAbjad".</para>
        ///</summary>
        [EnumString("arabicAbjad")]
        ArabicAbjad,
        ///<summary>
        ///Hindi Vowels.
        ///<para>When the item is serialized out as xml, its value is "hindiVowels".</para>
        ///</summary>
        [EnumString("hindiVowels")]
        HindiVowels,
        ///<summary>
        ///Hindi Consonants.
        ///<para>When the item is serialized out as xml, its value is "hindiConsonants".</para>
        ///</summary>
        [EnumString("hindiConsonants")]
        HindiConsonants,
        ///<summary>
        ///Hindi Numbers.
        ///<para>When the item is serialized out as xml, its value is "hindiNumbers".</para>
        ///</summary>
        [EnumString("hindiNumbers")]
        HindiNumbers,
        ///<summary>
        ///Hindi Counting System.
        ///<para>When the item is serialized out as xml, its value is "hindiCounting".</para>
        ///</summary>
        [EnumString("hindiCounting")]
        HindiCounting,
        ///<summary>
        ///Thai Letters.
        ///<para>When the item is serialized out as xml, its value is "thaiLetters".</para>
        ///</summary>
        [EnumString("thaiLetters")]
        ThaiLetters,
        ///<summary>
        ///Thai Numerals.
        ///<para>When the item is serialized out as xml, its value is "thaiNumbers".</para>
        ///</summary>
        [EnumString("thaiNumbers")]
        ThaiNumbers,
        ///<summary>
        ///Thai Counting System.
        ///<para>When the item is serialized out as xml, its value is "thaiCounting".</para>
        ///</summary>
        [EnumString("thaiCounting")]
        ThaiCounting,
        ///<summary>
        ///bahtText.
        ///<para>When the item is serialized out as xml, its value is "bahtText".</para>
        ///</summary>
        [EnumString("bahtText")]
        BahtText,
        ///<summary>
        ///dollarText.
        ///<para>When the item is serialized out as xml, its value is "dollarText".</para>
        ///</summary>
        [EnumString("dollarText")]
        DollarText,
        ///<summary>
        ///custom.
        ///<para>When the item is serialized out as xml, its value is "custom".</para>
        ///</summary>
        [EnumString("custom")]
        Custom,
    }

    /// <summary>
    /// Defines the TextDirectionValues enumeration.
    /// </summary>
    public enum TextDirectionValues
    {
        ///<summary>
        ///Left to Right, Top to Bottom.
        ///<para>When the item is serialized out as xml, its value is "lrTb".</para>
        ///</summary>
        [EnumString("lrTb")]
        LefToRightTopToBottom,
        ///<summary>
        ///tb.
        ///<para>When the item is serialized out as xml, its value is "tb".</para>
        ///</summary>
        [EnumString("tb")]
        LeftToRightTopToBottom2010,
        ///<summary>
        ///Top to Bottom, Right to Left.
        ///<para>When the item is serialized out as xml, its value is "tbRl".</para>
        ///</summary>
        [EnumString("tbRl")]
        TopToBottomRightToLeft,
        ///<summary>
        ///rl.
        ///<para>When the item is serialized out as xml, its value is "rl".</para>
        ///</summary>
        [EnumString("rl")]
        TopToBottomRightToLeft2010,
        ///<summary>
        ///Bottom to Top, Left to Right.
        ///<para>When the item is serialized out as xml, its value is "btLr".</para>
        ///</summary>
        [EnumString("btLr")]
        BottomToTopLeftToRight,
        ///<summary>
        ///lr.
        ///<para>When the item is serialized out as xml, its value is "lr".</para>
        ///</summary>
        [EnumString("lr")]
        BottomToTopLeftToRight2010,
        ///<summary>
        ///Left to Right, Top to Bottom Rotated.
        ///<para>When the item is serialized out as xml, its value is "lrTbV".</para>
        ///</summary>
        [EnumString("lrTbV")]
        LefttoRightTopToBottomRotated,
        ///<summary>
        ///tbV.
        ///<para>When the item is serialized out as xml, its value is "tbV".</para>
        ///</summary>
        [EnumString("tbV")]
        LeftToRightTopToBottomRotated2010,
        ///<summary>
        ///Top to Bottom, Right to Left Rotated.
        ///<para>When the item is serialized out as xml, its value is "tbRlV".</para>
        ///</summary>
        [EnumString("tbRlV")]
        TopToBottomRightToLeftRotated,
        ///<summary>
        ///rlV.
        ///<para>When the item is serialized out as xml, its value is "rlV".</para>
        ///</summary>
        [EnumString("rlV")]
        TopToBottomRightToLeftRotated2010,
        ///<summary>
        ///Top to Bottom, Left to Right Rotated.
        ///<para>When the item is serialized out as xml, its value is "tbLrV".</para>
        ///</summary>
        [EnumString("tbLrV")]
        TopToBottomLeftToRightRotated,
        ///<summary>
        ///lrV.
        ///<para>When the item is serialized out as xml, its value is "lrV".</para>
        ///</summary>
        [EnumString("lrV")]
        TopToBottomLeftToRightRotated2010,
    }

    /// <summary>
    /// Defines the CryptAlgorithmValues enumeration.
    /// </summary>
    public enum CryptAlgorithmValues
    {
        ///<summary>
        ///Any Type.
        ///<para>When the item is serialized out as xml, its value is "typeAny".</para>
        ///</summary>
        [EnumString("typeAny")]
        TypeAny,
        ///<summary>
        ///custom.
        ///<para>When the item is serialized out as xml, its value is "custom".</para>
        ///</summary>
        [EnumString("custom")]
        Custom,
    }

    /// <summary>
    /// Defines the CryptAlgorithmClassValues enumeration.
    /// </summary>
    public enum CryptAlgorithmClassValues
    {
        ///<summary>
        ///Hashing.
        ///<para>When the item is serialized out as xml, its value is "hash".</para>
        ///</summary>
        [EnumString("hash")]
        Hash,
        ///<summary>
        ///custom.
        ///<para>When the item is serialized out as xml, its value is "custom".</para>
        ///</summary>
        [EnumString("custom")]
        Custom,
    }

    /// <summary>
    /// Defines the CryptProviderValues enumeration.
    /// </summary>
    public enum CryptProviderValues
    {
        ///<summary>
        ///AES Provider.
        ///<para>When the item is serialized out as xml, its value is "rsaAES".</para>
        ///</summary>
        [EnumString("rsaAES")]
        RsaAdvancedEncryptionStandard,
        ///<summary>
        ///Any Provider.
        ///<para>When the item is serialized out as xml, its value is "rsaFull".</para>
        ///</summary>
        [EnumString("rsaFull")]
        RsaFull,
        ///<summary>
        ///custom.
        ///<para>When the item is serialized out as xml, its value is "custom".</para>
        ///</summary>
        [EnumString("custom")]
        Custom,
    }

    /// <summary>
    /// Defines the JustificationValues enumeration.
    /// </summary>
    public enum JustificationValues
    {
        ///<summary>
        ///Align Left.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///start.
        ///<para>When the item is serialized out as xml, its value is "start".</para>
        ///</summary>
        [EnumString("start")]
        Start,
        ///<summary>
        ///Align Center.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Align Right.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
        ///<summary>
        ///end.
        ///<para>When the item is serialized out as xml, its value is "end".</para>
        ///</summary>
        [EnumString("end")]
        End,
        ///<summary>
        ///Justified.
        ///<para>When the item is serialized out as xml, its value is "both".</para>
        ///</summary>
        [EnumString("both")]
        Both,
        ///<summary>
        ///Medium Kashida Length.
        ///<para>When the item is serialized out as xml, its value is "mediumKashida".</para>
        ///</summary>
        [EnumString("mediumKashida")]
        MediumKashida,
        ///<summary>
        ///Distribute All Characters Equally.
        ///<para>When the item is serialized out as xml, its value is "distribute".</para>
        ///</summary>
        [EnumString("distribute")]
        Distribute,
        ///<summary>
        ///Align to List Tab.
        ///<para>When the item is serialized out as xml, its value is "numTab".</para>
        ///</summary>
        [EnumString("numTab")]
        NumTab,
        ///<summary>
        ///Widest Kashida Length.
        ///<para>When the item is serialized out as xml, its value is "highKashida".</para>
        ///</summary>
        [EnumString("highKashida")]
        HighKashida,
        ///<summary>
        ///Low Kashida Length.
        ///<para>When the item is serialized out as xml, its value is "lowKashida".</para>
        ///</summary>
        [EnumString("lowKashida")]
        LowKashida,
        ///<summary>
        ///Thai Language Justification.
        ///<para>When the item is serialized out as xml, its value is "thaiDistribute".</para>
        ///</summary>
        [EnumString("thaiDistribute")]
        ThaiDistribute,
    }

    /// <summary>
    /// Defines the TabStopValues enumeration.
    /// </summary>
    public enum TabStopValues
    {
        ///<summary>
        ///No Tab Stop.
        ///<para>When the item is serialized out as xml, its value is "clear".</para>
        ///</summary>
        [EnumString("clear")]
        Clear,
        ///<summary>
        ///Left Tab.
        ///<para>When the item is serialized out as xml, its value is "left".</para>
        ///</summary>
        [EnumString("left")]
        Left,
        ///<summary>
        ///start.
        ///<para>When the item is serialized out as xml, its value is "start".</para>
        ///</summary>
        [EnumString("start")]
        Start,
        ///<summary>
        ///Centered Tab.
        ///<para>When the item is serialized out as xml, its value is "center".</para>
        ///</summary>
        [EnumString("center")]
        Center,
        ///<summary>
        ///Right Tab.
        ///<para>When the item is serialized out as xml, its value is "right".</para>
        ///</summary>
        [EnumString("right")]
        Right,
        ///<summary>
        ///end.
        ///<para>When the item is serialized out as xml, its value is "end".</para>
        ///</summary>
        [EnumString("end")]
        End,
        ///<summary>
        ///Decimal Tab.
        ///<para>When the item is serialized out as xml, its value is "decimal".</para>
        ///</summary>
        [EnumString("decimal")]
        Decimal,
        ///<summary>
        ///Bar Tab.
        ///<para>When the item is serialized out as xml, its value is "bar".</para>
        ///</summary>
        [EnumString("bar")]
        Bar,
        ///<summary>
        ///List Tab.
        ///<para>When the item is serialized out as xml, its value is "num".</para>
        ///</summary>
        [EnumString("num")]
        Number,
    }

    /// <summary>
    /// Defines the BorderValues enumeration.
    /// </summary>
    public enum BorderValues
    {
        ///<summary>
        ///No Border.
        ///<para>When the item is serialized out as xml, its value is "nil".</para>
        ///</summary>
        [EnumString("nil")]
        Nil,
        ///<summary>
        ///No Border.
        ///<para>When the item is serialized out as xml, its value is "none".</para>
        ///</summary>
        [EnumString("none")]
        None,
        ///<summary>
        ///Single Line Border.
        ///<para>When the item is serialized out as xml, its value is "single".</para>
        ///</summary>
        [EnumString("single")]
        Single,
        ///<summary>
        ///Single Line Border.
        ///<para>When the item is serialized out as xml, its value is "thick".</para>
        ///</summary>
        [EnumString("thick")]
        Thick,
        ///<summary>
        ///Double Line Border.
        ///<para>When the item is serialized out as xml, its value is "double".</para>
        ///</summary>
        [EnumString("double")]
        Double,
        ///<summary>
        ///Dotted Line Border.
        ///<para>When the item is serialized out as xml, its value is "dotted".</para>
        ///</summary>
        [EnumString("dotted")]
        Dotted,
        ///<summary>
        ///Dashed Line Border.
        ///<para>When the item is serialized out as xml, its value is "dashed".</para>
        ///</summary>
        [EnumString("dashed")]
        Dashed,
        ///<summary>
        ///Dot Dash Line Border.
        ///<para>When the item is serialized out as xml, its value is "dotDash".</para>
        ///</summary>
        [EnumString("dotDash")]
        DotDash,
        ///<summary>
        ///Dot Dot Dash Line Border.
        ///<para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        ///</summary>
        [EnumString("dotDotDash")]
        DotDotDash,
        ///<summary>
        ///Triple Line Border.
        ///<para>When the item is serialized out as xml, its value is "triple".</para>
        ///</summary>
        [EnumString("triple")]
        Triple,
        ///<summary>
        ///Thin, Thick Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickSmallGap".</para>
        ///</summary>
        [EnumString("thinThickSmallGap")]
        ThinThickSmallGap,
        ///<summary>
        ///Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thickThinSmallGap".</para>
        ///</summary>
        [EnumString("thickThinSmallGap")]
        ThickThinSmallGap,
        ///<summary>
        ///Thin, Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickThinSmallGap".</para>
        ///</summary>
        [EnumString("thinThickThinSmallGap")]
        ThinThickThinSmallGap,
        ///<summary>
        ///Thin, Thick Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickMediumGap".</para>
        ///</summary>
        [EnumString("thinThickMediumGap")]
        ThinThickMediumGap,
        ///<summary>
        ///Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thickThinMediumGap".</para>
        ///</summary>
        [EnumString("thickThinMediumGap")]
        ThickThinMediumGap,
        ///<summary>
        ///Thin, Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickThinMediumGap".</para>
        ///</summary>
        [EnumString("thinThickThinMediumGap")]
        ThinThickThinMediumGap,
        ///<summary>
        ///Thin, Thick Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickLargeGap".</para>
        ///</summary>
        [EnumString("thinThickLargeGap")]
        ThinThickLargeGap,
        ///<summary>
        ///Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thickThinLargeGap".</para>
        ///</summary>
        [EnumString("thickThinLargeGap")]
        ThickThinLargeGap,
        ///<summary>
        ///Thin, Thick, Thin Line Border.
        ///<para>When the item is serialized out as xml, its value is "thinThickThinLargeGap".</para>
        ///</summary>
        [EnumString("thinThickThinLargeGap")]
        ThinThickThinLargeGap,
        ///<summary>
        ///Wavy Line Border.
        ///<para>When the item is serialized out as xml, its value is "wave".</para>
        ///</summary>
        [EnumString("wave")]
        Wave,
        ///<summary>
        ///Double Wave Line Border.
        ///<para>When the item is serialized out as xml, its value is "doubleWave".</para>
        ///</summary>
        [EnumString("doubleWave")]
        DoubleWave,
        ///<summary>
        ///Dashed Line Border.
        ///<para>When the item is serialized out as xml, its value is "dashSmallGap".</para>
        ///</summary>
        [EnumString("dashSmallGap")]
        DashSmallGap,
        ///<summary>
        ///Dash Dot Strokes Line Border.
        ///<para>When the item is serialized out as xml, its value is "dashDotStroked".</para>
        ///</summary>
        [EnumString("dashDotStroked")]
        DashDotStroked,
        ///<summary>
        ///3D Embossed Line Border.
        ///<para>When the item is serialized out as xml, its value is "threeDEmboss".</para>
        ///</summary>
        [EnumString("threeDEmboss")]
        ThreeDEmboss,
        ///<summary>
        ///3D Engraved Line Border.
        ///<para>When the item is serialized out as xml, its value is "threeDEngrave".</para>
        ///</summary>
        [EnumString("threeDEngrave")]
        ThreeDEngrave,
        ///<summary>
        ///Outset Line Border.
        ///<para>When the item is serialized out as xml, its value is "outset".</para>
        ///</summary>
        [EnumString("outset")]
        Outset,
        ///<summary>
        ///Inset Line Border.
        ///<para>When the item is serialized out as xml, its value is "inset".</para>
        ///</summary>
        [EnumString("inset")]
        Inset,
        ///<summary>
        ///Apples Art Border.
        ///<para>When the item is serialized out as xml, its value is "apples".</para>
        ///</summary>
        [EnumString("apples")]
        Apples,
        ///<summary>
        ///Arched Scallops Art Border.
        ///<para>When the item is serialized out as xml, its value is "archedScallops".</para>
        ///</summary>
        [EnumString("archedScallops")]
        ArchedScallops,
        ///<summary>
        ///Baby Pacifier Art Border.
        ///<para>When the item is serialized out as xml, its value is "babyPacifier".</para>
        ///</summary>
        [EnumString("babyPacifier")]
        BabyPacifier,
        ///<summary>
        ///Baby Rattle Art Border.
        ///<para>When the item is serialized out as xml, its value is "babyRattle".</para>
        ///</summary>
        [EnumString("babyRattle")]
        BabyRattle,
        ///<summary>
        ///Three Color Balloons Art Border.
        ///<para>When the item is serialized out as xml, its value is "balloons3Colors".</para>
        ///</summary>
        [EnumString("balloons3Colors")]
        Balloons3Colors,
        ///<summary>
        ///Hot Air Balloons Art Border.
        ///<para>When the item is serialized out as xml, its value is "balloonsHotAir".</para>
        ///</summary>
        [EnumString("balloonsHotAir")]
        BalloonsHotAir,
        ///<summary>
        ///Black Dash Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicBlackDashes".</para>
        ///</summary>
        [EnumString("basicBlackDashes")]
        BasicBlackDashes,
        ///<summary>
        ///Black Dot Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicBlackDots".</para>
        ///</summary>
        [EnumString("basicBlackDots")]
        BasicBlackDots,
        ///<summary>
        ///Black Square Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicBlackSquares".</para>
        ///</summary>
        [EnumString("basicBlackSquares")]
        BasicBlackSquares,
        ///<summary>
        ///Thin Line Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicThinLines".</para>
        ///</summary>
        [EnumString("basicThinLines")]
        BasicThinLines,
        ///<summary>
        ///White Dash Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWhiteDashes".</para>
        ///</summary>
        [EnumString("basicWhiteDashes")]
        BasicWhiteDashes,
        ///<summary>
        ///White Dot Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWhiteDots".</para>
        ///</summary>
        [EnumString("basicWhiteDots")]
        BasicWhiteDots,
        ///<summary>
        ///White Square Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWhiteSquares".</para>
        ///</summary>
        [EnumString("basicWhiteSquares")]
        BasicWhiteSquares,
        ///<summary>
        ///Wide Inline Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWideInline".</para>
        ///</summary>
        [EnumString("basicWideInline")]
        BasicWideInline,
        ///<summary>
        ///Wide Midline Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWideMidline".</para>
        ///</summary>
        [EnumString("basicWideMidline")]
        BasicWideMidline,
        ///<summary>
        ///Wide Outline Art Border.
        ///<para>When the item is serialized out as xml, its value is "basicWideOutline".</para>
        ///</summary>
        [EnumString("basicWideOutline")]
        BasicWideOutline,
        ///<summary>
        ///Bats Art Border.
        ///<para>When the item is serialized out as xml, its value is "bats".</para>
        ///</summary>
        [EnumString("bats")]
        Bats,
        ///<summary>
        ///Birds Art Border.
        ///<para>When the item is serialized out as xml, its value is "birds".</para>
        ///</summary>
        [EnumString("birds")]
        Birds,
        ///<summary>
        ///Birds Flying Art Border.
        ///<para>When the item is serialized out as xml, its value is "birdsFlight".</para>
        ///</summary>
        [EnumString("birdsFlight")]
        BirdsFlight,
        ///<summary>
        ///Cabin Art Border.
        ///<para>When the item is serialized out as xml, its value is "cabins".</para>
        ///</summary>
        [EnumString("cabins")]
        Cabins,
        ///<summary>
        ///Cake Art Border.
        ///<para>When the item is serialized out as xml, its value is "cakeSlice".</para>
        ///</summary>
        [EnumString("cakeSlice")]
        CakeSlice,
        ///<summary>
        ///Candy Corn Art Border.
        ///<para>When the item is serialized out as xml, its value is "candyCorn".</para>
        ///</summary>
        [EnumString("candyCorn")]
        CandyCorn,
        ///<summary>
        ///Knot Work Art Border.
        ///<para>When the item is serialized out as xml, its value is "celticKnotwork".</para>
        ///</summary>
        [EnumString("celticKnotwork")]
        CelticKnotwork,
        ///<summary>
        ///Certificate Banner Art Border.
        ///<para>When the item is serialized out as xml, its value is "certificateBanner".</para>
        ///</summary>
        [EnumString("certificateBanner")]
        CertificateBanner,
        ///<summary>
        ///Chain Link Art Border.
        ///<para>When the item is serialized out as xml, its value is "chainLink".</para>
        ///</summary>
        [EnumString("chainLink")]
        ChainLink,
        ///<summary>
        ///Champagne Bottle Art Border.
        ///<para>When the item is serialized out as xml, its value is "champagneBottle".</para>
        ///</summary>
        [EnumString("champagneBottle")]
        ChampagneBottle,
        ///<summary>
        ///Black and White Bar Art Border.
        ///<para>When the item is serialized out as xml, its value is "checkedBarBlack".</para>
        ///</summary>
        [EnumString("checkedBarBlack")]
        CheckedBarBlack,
        ///<summary>
        ///Color Checked Bar Art Border.
        ///<para>When the item is serialized out as xml, its value is "checkedBarColor".</para>
        ///</summary>
        [EnumString("checkedBarColor")]
        CheckedBarColor,
        ///<summary>
        ///Checkerboard Art Border.
        ///<para>When the item is serialized out as xml, its value is "checkered".</para>
        ///</summary>
        [EnumString("checkered")]
        Checkered,
        ///<summary>
        ///Christmas Tree Art Border.
        ///<para>When the item is serialized out as xml, its value is "christmasTree".</para>
        ///</summary>
        [EnumString("christmasTree")]
        ChristmasTree,
        ///<summary>
        ///Circles And Lines Art Border.
        ///<para>When the item is serialized out as xml, its value is "circlesLines".</para>
        ///</summary>
        [EnumString("circlesLines")]
        CirclesLines,
        ///<summary>
        ///Circles and Rectangles Art Border.
        ///<para>When the item is serialized out as xml, its value is "circlesRectangles".</para>
        ///</summary>
        [EnumString("circlesRectangles")]
        CirclesRectangles,
        ///<summary>
        ///Wave Art Border.
        ///<para>When the item is serialized out as xml, its value is "classicalWave".</para>
        ///</summary>
        [EnumString("classicalWave")]
        ClassicalWave,
        ///<summary>
        ///Clocks Art Border.
        ///<para>When the item is serialized out as xml, its value is "clocks".</para>
        ///</summary>
        [EnumString("clocks")]
        Clocks,
        ///<summary>
        ///Compass Art Border.
        ///<para>When the item is serialized out as xml, its value is "compass".</para>
        ///</summary>
        [EnumString("compass")]
        Compass,
        ///<summary>
        ///Confetti Art Border.
        ///<para>When the item is serialized out as xml, its value is "confetti".</para>
        ///</summary>
        [EnumString("confetti")]
        Confetti,
        ///<summary>
        ///Confetti Art Border.
        ///<para>When the item is serialized out as xml, its value is "confettiGrays".</para>
        ///</summary>
        [EnumString("confettiGrays")]
        ConfettiGrays,
        ///<summary>
        ///Confetti Art Border.
        ///<para>When the item is serialized out as xml, its value is "confettiOutline".</para>
        ///</summary>
        [EnumString("confettiOutline")]
        ConfettiOutline,
        ///<summary>
        ///Confetti Streamers Art Border.
        ///<para>When the item is serialized out as xml, its value is "confettiStreamers".</para>
        ///</summary>
        [EnumString("confettiStreamers")]
        ConfettiStreamers,
        ///<summary>
        ///Confetti Art Border.
        ///<para>When the item is serialized out as xml, its value is "confettiWhite".</para>
        ///</summary>
        [EnumString("confettiWhite")]
        ConfettiWhite,
        ///<summary>
        ///Corner Triangle Art Border.
        ///<para>When the item is serialized out as xml, its value is "cornerTriangles".</para>
        ///</summary>
        [EnumString("cornerTriangles")]
        CornerTriangles,
        ///<summary>
        ///Dashed Line Art Border.
        ///<para>When the item is serialized out as xml, its value is "couponCutoutDashes".</para>
        ///</summary>
        [EnumString("couponCutoutDashes")]
        CouponCutoutDashes,
        ///<summary>
        ///Dotted Line Art Border.
        ///<para>When the item is serialized out as xml, its value is "couponCutoutDots".</para>
        ///</summary>
        [EnumString("couponCutoutDots")]
        CouponCutoutDots,
        ///<summary>
        ///Maze Art Border.
        ///<para>When the item is serialized out as xml, its value is "crazyMaze".</para>
        ///</summary>
        [EnumString("crazyMaze")]
        CrazyMaze,
        ///<summary>
        ///Butterfly Art Border.
        ///<para>When the item is serialized out as xml, its value is "creaturesButterfly".</para>
        ///</summary>
        [EnumString("creaturesButterfly")]
        CreaturesButterfly,
        ///<summary>
        ///Fish Art Border.
        ///<para>When the item is serialized out as xml, its value is "creaturesFish".</para>
        ///</summary>
        [EnumString("creaturesFish")]
        CreaturesFish,
        ///<summary>
        ///Insects Art Border.
        ///<para>When the item is serialized out as xml, its value is "creaturesInsects".</para>
        ///</summary>
        [EnumString("creaturesInsects")]
        CreaturesInsects,
        ///<summary>
        ///Ladybug Art Border.
        ///<para>When the item is serialized out as xml, its value is "creaturesLadyBug".</para>
        ///</summary>
        [EnumString("creaturesLadyBug")]
        CreaturesLadyBug,
        ///<summary>
        ///Cross-stitch Art Border.
        ///<para>When the item is serialized out as xml, its value is "crossStitch".</para>
        ///</summary>
        [EnumString("crossStitch")]
        CrossStitch,
        ///<summary>
        ///Cupid Art Border.
        ///<para>When the item is serialized out as xml, its value is "cup".</para>
        ///</summary>
        [EnumString("cup")]
        Cup,
        ///<summary>
        ///Archway Art Border.
        ///<para>When the item is serialized out as xml, its value is "decoArch".</para>
        ///</summary>
        [EnumString("decoArch")]
        DecoArch,
        ///<summary>
        ///Color Archway Art Border.
        ///<para>When the item is serialized out as xml, its value is "decoArchColor".</para>
        ///</summary>
        [EnumString("decoArchColor")]
        DecoArchColor,
        ///<summary>
        ///Blocks Art Border.
        ///<para>When the item is serialized out as xml, its value is "decoBlocks".</para>
        ///</summary>
        [EnumString("decoBlocks")]
        DecoBlocks,
        ///<summary>
        ///Gray Diamond Art Border.
        ///<para>When the item is serialized out as xml, its value is "diamondsGray".</para>
        ///</summary>
        [EnumString("diamondsGray")]
        DiamondsGray,
        ///<summary>
        ///Double D Art Border.
        ///<para>When the item is serialized out as xml, its value is "doubleD".</para>
        ///</summary>
        [EnumString("doubleD")]
        DoubleD,
        ///<summary>
        ///Diamond Art Border.
        ///<para>When the item is serialized out as xml, its value is "doubleDiamonds".</para>
        ///</summary>
        [EnumString("doubleDiamonds")]
        DoubleDiamonds,
        ///<summary>
        ///Earth Art Border.
        ///<para>When the item is serialized out as xml, its value is "earth1".</para>
        ///</summary>
        [EnumString("earth1")]
        Earth1,
        ///<summary>
        ///Earth Art Border.
        ///<para>When the item is serialized out as xml, its value is "earth2".</para>
        ///</summary>
        [EnumString("earth2")]
        Earth2,
        ///<summary>
        ///Shadowed Square Art Border.
        ///<para>When the item is serialized out as xml, its value is "eclipsingSquares1".</para>
        ///</summary>
        [EnumString("eclipsingSquares1")]
        EclipsingSquares1,
        ///<summary>
        ///Shadowed Square Art Border.
        ///<para>When the item is serialized out as xml, its value is "eclipsingSquares2".</para>
        ///</summary>
        [EnumString("eclipsingSquares2")]
        EclipsingSquares2,
        ///<summary>
        ///Painted Egg Art Border.
        ///<para>When the item is serialized out as xml, its value is "eggsBlack".</para>
        ///</summary>
        [EnumString("eggsBlack")]
        EggsBlack,
        ///<summary>
        ///Fans Art Border.
        ///<para>When the item is serialized out as xml, its value is "fans".</para>
        ///</summary>
        [EnumString("fans")]
        Fans,
        ///<summary>
        ///Film Reel Art Border.
        ///<para>When the item is serialized out as xml, its value is "film".</para>
        ///</summary>
        [EnumString("film")]
        Film,
        ///<summary>
        ///Firecracker Art Border.
        ///<para>When the item is serialized out as xml, its value is "firecrackers".</para>
        ///</summary>
        [EnumString("firecrackers")]
        Firecrackers,
        ///<summary>
        ///Flowers Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersBlockPrint".</para>
        ///</summary>
        [EnumString("flowersBlockPrint")]
        FlowersBlockPrint,
        ///<summary>
        ///Daisy Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersDaisies".</para>
        ///</summary>
        [EnumString("flowersDaisies")]
        FlowersDaisies,
        ///<summary>
        ///Flowers Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersModern1".</para>
        ///</summary>
        [EnumString("flowersModern1")]
        FlowersModern1,
        ///<summary>
        ///Flowers Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersModern2".</para>
        ///</summary>
        [EnumString("flowersModern2")]
        FlowersModern2,
        ///<summary>
        ///Pansy Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersPansy".</para>
        ///</summary>
        [EnumString("flowersPansy")]
        FlowersPansy,
        ///<summary>
        ///Red Rose Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersRedRose".</para>
        ///</summary>
        [EnumString("flowersRedRose")]
        FlowersRedRose,
        ///<summary>
        ///Roses Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersRoses".</para>
        ///</summary>
        [EnumString("flowersRoses")]
        FlowersRoses,
        ///<summary>
        ///Flowers in a Teacup Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersTeacup".</para>
        ///</summary>
        [EnumString("flowersTeacup")]
        FlowersTeacup,
        ///<summary>
        ///Small Flower Art Border.
        ///<para>When the item is serialized out as xml, its value is "flowersTiny".</para>
        ///</summary>
        [EnumString("flowersTiny")]
        FlowersTiny,
        ///<summary>
        ///Gems Art Border.
        ///<para>When the item is serialized out as xml, its value is "gems".</para>
        ///</summary>
        [EnumString("gems")]
        Gems,
        ///<summary>
        ///Gingerbread Man Art Border.
        ///<para>When the item is serialized out as xml, its value is "gingerbreadMan".</para>
        ///</summary>
        [EnumString("gingerbreadMan")]
        GingerbreadMan,
        ///<summary>
        ///Triangle Gradient Art Border.
        ///<para>When the item is serialized out as xml, its value is "gradient".</para>
        ///</summary>
        [EnumString("gradient")]
        Gradient,
        ///<summary>
        ///Handmade Art Border.
        ///<para>When the item is serialized out as xml, its value is "handmade1".</para>
        ///</summary>
        [EnumString("handmade1")]
        Handmade1,
        ///<summary>
        ///Handmade Art Border.
        ///<para>When the item is serialized out as xml, its value is "handmade2".</para>
        ///</summary>
        [EnumString("handmade2")]
        Handmade2,
        ///<summary>
        ///Heart-Shaped Balloon Art Border.
        ///<para>When the item is serialized out as xml, its value is "heartBalloon".</para>
        ///</summary>
        [EnumString("heartBalloon")]
        HeartBalloon,
        ///<summary>
        ///Gray Heart Art Border.
        ///<para>When the item is serialized out as xml, its value is "heartGray".</para>
        ///</summary>
        [EnumString("heartGray")]
        HeartGray,
        ///<summary>
        ///Hearts Art Border.
        ///<para>When the item is serialized out as xml, its value is "hearts".</para>
        ///</summary>
        [EnumString("hearts")]
        Hearts,
        ///<summary>
        ///Pattern Art Border.
        ///<para>When the item is serialized out as xml, its value is "heebieJeebies".</para>
        ///</summary>
        [EnumString("heebieJeebies")]
        HeebieJeebies,
        ///<summary>
        ///Holly Art Border.
        ///<para>When the item is serialized out as xml, its value is "holly".</para>
        ///</summary>
        [EnumString("holly")]
        Holly,
        ///<summary>
        ///House Art Border.
        ///<para>When the item is serialized out as xml, its value is "houseFunky".</para>
        ///</summary>
        [EnumString("houseFunky")]
        HouseFunky,
        ///<summary>
        ///Circular Art Border.
        ///<para>When the item is serialized out as xml, its value is "hypnotic".</para>
        ///</summary>
        [EnumString("hypnotic")]
        Hypnotic,
        ///<summary>
        ///Ice Cream Cone Art Border.
        ///<para>When the item is serialized out as xml, its value is "iceCreamCones".</para>
        ///</summary>
        [EnumString("iceCreamCones")]
        IceCreamCones,
        ///<summary>
        ///Light Bulb Art Border.
        ///<para>When the item is serialized out as xml, its value is "lightBulb".</para>
        ///</summary>
        [EnumString("lightBulb")]
        LightBulb,
        ///<summary>
        ///Lightning Art Border.
        ///<para>When the item is serialized out as xml, its value is "lightning1".</para>
        ///</summary>
        [EnumString("lightning1")]
        Lightning1,
        ///<summary>
        ///Lightning Art Border.
        ///<para>When the item is serialized out as xml, its value is "lightning2".</para>
        ///</summary>
        [EnumString("lightning2")]
        Lightning2,
        ///<summary>
        ///Map Pins Art Border.
        ///<para>When the item is serialized out as xml, its value is "mapPins".</para>
        ///</summary>
        [EnumString("mapPins")]
        MapPins,
        ///<summary>
        ///Maple Leaf Art Border.
        ///<para>When the item is serialized out as xml, its value is "mapleLeaf".</para>
        ///</summary>
        [EnumString("mapleLeaf")]
        MapleLeaf,
        ///<summary>
        ///Muffin Art Border.
        ///<para>When the item is serialized out as xml, its value is "mapleMuffins".</para>
        ///</summary>
        [EnumString("mapleMuffins")]
        MapleMuffins,
        ///<summary>
        ///Marquee Art Border.
        ///<para>When the item is serialized out as xml, its value is "marquee".</para>
        ///</summary>
        [EnumString("marquee")]
        Marquee,
        ///<summary>
        ///Marquee Art Border.
        ///<para>When the item is serialized out as xml, its value is "marqueeToothed".</para>
        ///</summary>
        [EnumString("marqueeToothed")]
        MarqueeToothed,
        ///<summary>
        ///Moon Art Border.
        ///<para>When the item is serialized out as xml, its value is "moons".</para>
        ///</summary>
        [EnumString("moons")]
        Moons,
        ///<summary>
        ///Mosaic Art Border.
        ///<para>When the item is serialized out as xml, its value is "mosaic".</para>
        ///</summary>
        [EnumString("mosaic")]
        Mosaic,
        ///<summary>
        ///Musical Note Art Border.
        ///<para>When the item is serialized out as xml, its value is "musicNotes".</para>
        ///</summary>
        [EnumString("musicNotes")]
        MusicNotes,
        ///<summary>
        ///Patterned Art Border.
        ///<para>When the item is serialized out as xml, its value is "northwest".</para>
        ///</summary>
        [EnumString("northwest")]
        Northwest,
        ///<summary>
        ///Oval Art Border.
        ///<para>When the item is serialized out as xml, its value is "ovals".</para>
        ///</summary>
        [EnumString("ovals")]
        Ovals,
        ///<summary>
        ///Package Art Border.
        ///<para>When the item is serialized out as xml, its value is "packages".</para>
        ///</summary>
        [EnumString("packages")]
        Packages,
        ///<summary>
        ///Black Palm Tree Art Border.
        ///<para>When the item is serialized out as xml, its value is "palmsBlack".</para>
        ///</summary>
        [EnumString("palmsBlack")]
        PalmsBlack,
        ///<summary>
        ///Color Palm Tree Art Border.
        ///<para>When the item is serialized out as xml, its value is "palmsColor".</para>
        ///</summary>
        [EnumString("palmsColor")]
        PalmsColor,
        ///<summary>
        ///Paper Clip Art Border.
        ///<para>When the item is serialized out as xml, its value is "paperClips".</para>
        ///</summary>
        [EnumString("paperClips")]
        PaperClips,
        ///<summary>
        ///Papyrus Art Border.
        ///<para>When the item is serialized out as xml, its value is "papyrus".</para>
        ///</summary>
        [EnumString("papyrus")]
        Papyrus,
        ///<summary>
        ///Party Favor Art Border.
        ///<para>When the item is serialized out as xml, its value is "partyFavor".</para>
        ///</summary>
        [EnumString("partyFavor")]
        PartyFavor,
        ///<summary>
        ///Party Glass Art Border.
        ///<para>When the item is serialized out as xml, its value is "partyGlass".</para>
        ///</summary>
        [EnumString("partyGlass")]
        PartyGlass,
        ///<summary>
        ///Pencils Art Border.
        ///<para>When the item is serialized out as xml, its value is "pencils".</para>
        ///</summary>
        [EnumString("pencils")]
        Pencils,
        ///<summary>
        ///Character Art Border.
        ///<para>When the item is serialized out as xml, its value is "people".</para>
        ///</summary>
        [EnumString("people")]
        People,
        ///<summary>
        ///Waving Character Border.
        ///<para>When the item is serialized out as xml, its value is "peopleWaving".</para>
        ///</summary>
        [EnumString("peopleWaving")]
        PeopleWaving,
        ///<summary>
        ///Character With Hat Art Border.
        ///<para>When the item is serialized out as xml, its value is "peopleHats".</para>
        ///</summary>
        [EnumString("peopleHats")]
        PeopleHats,
        ///<summary>
        ///Poinsettia Art Border.
        ///<para>When the item is serialized out as xml, its value is "poinsettias".</para>
        ///</summary>
        [EnumString("poinsettias")]
        Poinsettias,
        ///<summary>
        ///Postage Stamp Art Border.
        ///<para>When the item is serialized out as xml, its value is "postageStamp".</para>
        ///</summary>
        [EnumString("postageStamp")]
        PostageStamp,
        ///<summary>
        ///Pumpkin Art Border.
        ///<para>When the item is serialized out as xml, its value is "pumpkin1".</para>
        ///</summary>
        [EnumString("pumpkin1")]
        Pumpkin1,
        ///<summary>
        ///Push Pin Art Border.
        ///<para>When the item is serialized out as xml, its value is "pushPinNote2".</para>
        ///</summary>
        [EnumString("pushPinNote2")]
        PushPinNote2,
        ///<summary>
        ///Push Pin Art Border.
        ///<para>When the item is serialized out as xml, its value is "pushPinNote1".</para>
        ///</summary>
        [EnumString("pushPinNote1")]
        PushPinNote1,
        ///<summary>
        ///Pyramid Art Border.
        ///<para>When the item is serialized out as xml, its value is "pyramids".</para>
        ///</summary>
        [EnumString("pyramids")]
        Pyramids,
        ///<summary>
        ///Pyramid Art Border.
        ///<para>When the item is serialized out as xml, its value is "pyramidsAbove".</para>
        ///</summary>
        [EnumString("pyramidsAbove")]
        PyramidsAbove,
        ///<summary>
        ///Quadrants Art Border.
        ///<para>When the item is serialized out as xml, its value is "quadrants".</para>
        ///</summary>
        [EnumString("quadrants")]
        Quadrants,
        ///<summary>
        ///Rings Art Border.
        ///<para>When the item is serialized out as xml, its value is "rings".</para>
        ///</summary>
        [EnumString("rings")]
        Rings,
        ///<summary>
        ///Safari Art Border.
        ///<para>When the item is serialized out as xml, its value is "safari".</para>
        ///</summary>
        [EnumString("safari")]
        Safari,
        ///<summary>
        ///Saw tooth Art Border.
        ///<para>When the item is serialized out as xml, its value is "sawtooth".</para>
        ///</summary>
        [EnumString("sawtooth")]
        Sawtooth,
        ///<summary>
        ///Gray Saw tooth Art Border.
        ///<para>When the item is serialized out as xml, its value is "sawtoothGray".</para>
        ///</summary>
        [EnumString("sawtoothGray")]
        SawtoothGray,
        ///<summary>
        ///Scared Cat Art Border.
        ///<para>When the item is serialized out as xml, its value is "scaredCat".</para>
        ///</summary>
        [EnumString("scaredCat")]
        ScaredCat,
        ///<summary>
        ///Umbrella Art Border.
        ///<para>When the item is serialized out as xml, its value is "seattle".</para>
        ///</summary>
        [EnumString("seattle")]
        Seattle,
        ///<summary>
        ///Shadowed Squares Art Border.
        ///<para>When the item is serialized out as xml, its value is "shadowedSquares".</para>
        ///</summary>
        [EnumString("shadowedSquares")]
        ShadowedSquares,
        ///<summary>
        ///Shark Tooth Art Border.
        ///<para>When the item is serialized out as xml, its value is "sharksTeeth".</para>
        ///</summary>
        [EnumString("sharksTeeth")]
        SharksTeeth,
        ///<summary>
        ///Bird Tracks Art Border.
        ///<para>When the item is serialized out as xml, its value is "shorebirdTracks".</para>
        ///</summary>
        [EnumString("shorebirdTracks")]
        ShorebirdTracks,
        ///<summary>
        ///Rocket Art Border.
        ///<para>When the item is serialized out as xml, its value is "skyrocket".</para>
        ///</summary>
        [EnumString("skyrocket")]
        Skyrocket,
        ///<summary>
        ///Snowflake Art Border.
        ///<para>When the item is serialized out as xml, its value is "snowflakeFancy".</para>
        ///</summary>
        [EnumString("snowflakeFancy")]
        SnowflakeFancy,
        ///<summary>
        ///Snowflake Art Border.
        ///<para>When the item is serialized out as xml, its value is "snowflakes".</para>
        ///</summary>
        [EnumString("snowflakes")]
        Snowflakes,
        ///<summary>
        ///Sombrero Art Border.
        ///<para>When the item is serialized out as xml, its value is "sombrero".</para>
        ///</summary>
        [EnumString("sombrero")]
        Sombrero,
        ///<summary>
        ///Southwest-themed Art Border.
        ///<para>When the item is serialized out as xml, its value is "southwest".</para>
        ///</summary>
        [EnumString("southwest")]
        Southwest,
        ///<summary>
        ///Stars Art Border.
        ///<para>When the item is serialized out as xml, its value is "stars".</para>
        ///</summary>
        [EnumString("stars")]
        Stars,
        ///<summary>
        ///Stars On Top Art Border.
        ///<para>When the item is serialized out as xml, its value is "starsTop".</para>
        ///</summary>
        [EnumString("starsTop")]
        StarsTop,
        ///<summary>
        ///3-D Stars Art Border.
        ///<para>When the item is serialized out as xml, its value is "stars3d".</para>
        ///</summary>
        [EnumString("stars3d")]
        Stars3d,
        ///<summary>
        ///Stars Art Border.
        ///<para>When the item is serialized out as xml, its value is "starsBlack".</para>
        ///</summary>
        [EnumString("starsBlack")]
        StarsBlack,
        ///<summary>
        ///Stars With Shadows Art Border.
        ///<para>When the item is serialized out as xml, its value is "starsShadowed".</para>
        ///</summary>
        [EnumString("starsShadowed")]
        StarsShadowed,
        ///<summary>
        ///Sun Art Border.
        ///<para>When the item is serialized out as xml, its value is "sun".</para>
        ///</summary>
        [EnumString("sun")]
        Sun,
        ///<summary>
        ///Whirligig Art Border.
        ///<para>When the item is serialized out as xml, its value is "swirligig".</para>
        ///</summary>
        [EnumString("swirligig")]
        Swirligig,
        ///<summary>
        ///Torn Paper Art Border.
        ///<para>When the item is serialized out as xml, its value is "tornPaper".</para>
        ///</summary>
        [EnumString("tornPaper")]
        TornPaper,
        ///<summary>
        ///Black Torn Paper Art Border.
        ///<para>When the item is serialized out as xml, its value is "tornPaperBlack".</para>
        ///</summary>
        [EnumString("tornPaperBlack")]
        TornPaperBlack,
        ///<summary>
        ///Tree Art Border.
        ///<para>When the item is serialized out as xml, its value is "trees".</para>
        ///</summary>
        [EnumString("trees")]
        Trees,
        ///<summary>
        ///Triangle Art Border.
        ///<para>When the item is serialized out as xml, its value is "triangleParty".</para>
        ///</summary>
        [EnumString("triangleParty")]
        TriangleParty,
        ///<summary>
        ///Triangles Art Border.
        ///<para>When the item is serialized out as xml, its value is "triangles".</para>
        ///</summary>
        [EnumString("triangles")]
        Triangles,
        ///<summary>
        ///Tribal Art Border One.
        ///<para>When the item is serialized out as xml, its value is "tribal1".</para>
        ///</summary>
        [EnumString("tribal1")]
        Tribal1,
        ///<summary>
        ///Tribal Art Border Two.
        ///<para>When the item is serialized out as xml, its value is "tribal2".</para>
        ///</summary>
        [EnumString("tribal2")]
        Tribal2,
        ///<summary>
        ///Tribal Art Border Three.
        ///<para>When the item is serialized out as xml, its value is "tribal3".</para>
        ///</summary>
        [EnumString("tribal3")]
        Tribal3,
        ///<summary>
        ///Tribal Art Border Four.
        ///<para>When the item is serialized out as xml, its value is "tribal4".</para>
        ///</summary>
        [EnumString("tribal4")]
        Tribal4,
        ///<summary>
        ///Tribal Art Border Five.
        ///<para>When the item is serialized out as xml, its value is "tribal5".</para>
        ///</summary>
        [EnumString("tribal5")]
        Tribal5,
        ///<summary>
        ///Tribal Art Border Six.
        ///<para>When the item is serialized out as xml, its value is "tribal6".</para>
        ///</summary>
        [EnumString("tribal6")]
        Tribal6,
        ///<summary>
        ///triangle1.
        ///<para>When the item is serialized out as xml, its value is "triangle1".</para>
        ///</summary>
        [EnumString("triangle1")]
        Triangle1,
        ///<summary>
        ///triangle2.
        ///<para>When the item is serialized out as xml, its value is "triangle2".</para>
        ///</summary>
        [EnumString("triangle2")]
        Triangle2,
        ///<summary>
        ///triangleCircle1.
        ///<para>When the item is serialized out as xml, its value is "triangleCircle1".</para>
        ///</summary>
        [EnumString("triangleCircle1")]
        TriangleCircle1,
        ///<summary>
        ///triangleCircle2.
        ///<para>When the item is serialized out as xml, its value is "triangleCircle2".</para>
        ///</summary>
        [EnumString("triangleCircle2")]
        TriangleCircle2,
        ///<summary>
        ///shapes1.
        ///<para>When the item is serialized out as xml, its value is "shapes1".</para>
        ///</summary>
        [EnumString("shapes1")]
        Shapes1,
        ///<summary>
        ///shapes2.
        ///<para>When the item is serialized out as xml, its value is "shapes2".</para>
        ///</summary>
        [EnumString("shapes2")]
        Shapes2,
        ///<summary>
        ///Twisted Lines Art Border.
        ///<para>When the item is serialized out as xml, its value is "twistedLines1".</para>
        ///</summary>
        [EnumString("twistedLines1")]
        TwistedLines1,
        ///<summary>
        ///Twisted Lines Art Border.
        ///<para>When the item is serialized out as xml, its value is "twistedLines2".</para>
        ///</summary>
        [EnumString("twistedLines2")]
        TwistedLines2,
        ///<summary>
        ///Vine Art Border.
        ///<para>When the item is serialized out as xml, its value is "vine".</para>
        ///</summary>
        [EnumString("vine")]
        Vine,
        ///<summary>
        ///Wavy Line Art Border.
        ///<para>When the item is serialized out as xml, its value is "waveline".</para>
        ///</summary>
        [EnumString("waveline")]
        Waveline,
        ///<summary>
        ///Weaving Angles Art Border.
        ///<para>When the item is serialized out as xml, its value is "weavingAngles".</para>
        ///</summary>
        [EnumString("weavingAngles")]
        WeavingAngles,
        ///<summary>
        ///Weaving Braid Art Border.
        ///<para>When the item is serialized out as xml, its value is "weavingBraid".</para>
        ///</summary>
        [EnumString("weavingBraid")]
        WeavingBraid,
        ///<summary>
        ///Weaving Ribbon Art Border.
        ///<para>When the item is serialized out as xml, its value is "weavingRibbon".</para>
        ///</summary>
        [EnumString("weavingRibbon")]
        WeavingRibbon,
        ///<summary>
        ///Weaving Strips Art Border.
        ///<para>When the item is serialized out as xml, its value is "weavingStrips".</para>
        ///</summary>
        [EnumString("weavingStrips")]
        WeavingStrips,
        ///<summary>
        ///White Flowers Art Border.
        ///<para>When the item is serialized out as xml, its value is "whiteFlowers".</para>
        ///</summary>
        [EnumString("whiteFlowers")]
        WhiteFlowers,
        ///<summary>
        ///Woodwork Art Border.
        ///<para>When the item is serialized out as xml, its value is "woodwork".</para>
        ///</summary>
        [EnumString("woodwork")]
        Woodwork,
        ///<summary>
        ///Crisscross Art Border.
        ///<para>When the item is serialized out as xml, its value is "xIllusions".</para>
        ///</summary>
        [EnumString("xIllusions")]
        XIllusions,
        ///<summary>
        ///Triangle Art Border.
        ///<para>When the item is serialized out as xml, its value is "zanyTriangles".</para>
        ///</summary>
        [EnumString("zanyTriangles")]
        ZanyTriangles,
        ///<summary>
        ///Zigzag Art Border.
        ///<para>When the item is serialized out as xml, its value is "zigZag".</para>
        ///</summary>
        [EnumString("zigZag")]
        ZigZag,
        ///<summary>
        ///Zigzag stitch.
        ///<para>When the item is serialized out as xml, its value is "zigZagStitch".</para>
        ///</summary>
        [EnumString("zigZagStitch")]
        ZigZagStitch,
    }

    /// <summary>
    /// Defines the DocumentConformance enumeration.
    /// </summary>
    public enum DocumentConformance
    {
        ///<summary>
        ///transitional.
        ///<para>When the item is serialized out as xml, its value is "transitional".</para>
        ///</summary>
        [EnumString("transitional")]
        transitional,
        ///<summary>
        ///strict.
        ///<para>When the item is serialized out as xml, its value is "strict".</para>
        ///</summary>
        [EnumString("strict")]
        strict,
    }

    /// <summary>
    /// Defines the StrictCharacterSet enumeration.
    /// </summary>
    public enum StrictCharacterSet
    {
        ///<summary>
        ///iso-8859-1.
        ///<para>When the item is serialized out as xml, its value is "iso-8859-1".</para>
        ///</summary>
        [EnumString("iso-8859-1")]
        chsAnsi,
        ///<summary>
        ///macintosh.
        ///<para>When the item is serialized out as xml, its value is "macintosh".</para>
        ///</summary>
        [EnumString("macintosh")]
        chsMacFfn,
        ///<summary>
        ///shift_jis.
        ///<para>When the item is serialized out as xml, its value is "shift_jis".</para>
        ///</summary>
        [EnumString("shift_jis")]
        chsShiftJIS,
        ///<summary>
        ///ks_c-5601-1987.
        ///<para>When the item is serialized out as xml, its value is "ks_c-5601-1987".</para>
        ///</summary>
        [EnumString("ks_c-5601-1987")]
        chsHangeul,
        ///<summary>
        ///KS_C-5601-1992.
        ///<para>When the item is serialized out as xml, its value is "KS_C-5601-1992".</para>
        ///</summary>
        [EnumString("KS_C-5601-1992")]
        chsJohab,
        ///<summary>
        ///GBK.
        ///<para>When the item is serialized out as xml, its value is "GBK".</para>
        ///</summary>
        [EnumString("GBK")]
        chsGB2312,
        ///<summary>
        ///Big5.
        ///<para>When the item is serialized out as xml, its value is "Big5".</para>
        ///</summary>
        [EnumString("Big5")]
        chsChinese5,
        ///<summary>
        ///windows-1253.
        ///<para>When the item is serialized out as xml, its value is "windows-1253".</para>
        ///</summary>
        [EnumString("windows-1253")]
        chsGreek,
        ///<summary>
        ///iso-8859-9.
        ///<para>When the item is serialized out as xml, its value is "iso-8859-9".</para>
        ///</summary>
        [EnumString("iso-8859-9")]
        chsTurkish,
        ///<summary>
        ///windows-1258.
        ///<para>When the item is serialized out as xml, its value is "windows-1258".</para>
        ///</summary>
        [EnumString("windows-1258")]
        chsVietnamese,
        ///<summary>
        ///windows-1255.
        ///<para>When the item is serialized out as xml, its value is "windows-1255".</para>
        ///</summary>
        [EnumString("windows-1255")]
        chsHebrew,
        ///<summary>
        ///windows-1256.
        ///<para>When the item is serialized out as xml, its value is "windows-1256".</para>
        ///</summary>
        [EnumString("windows-1256")]
        chsArabic,
        ///<summary>
        ///windows-1257.
        ///<para>When the item is serialized out as xml, its value is "windows-1257".</para>
        ///</summary>
        [EnumString("windows-1257")]
        chsBaltic,
        ///<summary>
        ///windows-1251.
        ///<para>When the item is serialized out as xml, its value is "windows-1251".</para>
        ///</summary>
        [EnumString("windows-1251")]
        chsRussian,
        ///<summary>
        ///windows-874.
        ///<para>When the item is serialized out as xml, its value is "windows-874".</para>
        ///</summary>
        [EnumString("windows-874")]
        chsThai,
        ///<summary>
        ///windows-1250.
        ///<para>When the item is serialized out as xml, its value is "windows-1250".</para>
        ///</summary>
        [EnumString("windows-1250")]
        chsEastEurope,
    }

    /// <summary>
    /// Defines the ObjectDrawAspect enumeration.
    /// </summary>
    public enum ObjectDrawAspect
    {
        ///<summary>
        ///content.
        ///<para>When the item is serialized out as xml, its value is "content".</para>
        ///</summary>
        [EnumString("content")]
        content,
        ///<summary>
        ///icon.
        ///<para>When the item is serialized out as xml, its value is "icon".</para>
        ///</summary>
        [EnumString("icon")]
        icon,
    }

    /// <summary>
    /// Linked Object Update Modes
    /// </summary>
    public enum ObjectUpdateMode
    {
        ///<summary>
        ///always.
        ///<para>When the item is serialized out as xml, its value is "always".</para>
        ///</summary>
        [EnumString("always")]
        always,
        ///<summary>
        ///onCall.
        ///<para>When the item is serialized out as xml, its value is "onCall".</para>
        ///</summary>
        [EnumString("onCall")]
        onCall,
    }

    /// <summary>
    /// Defines the CompatSettingNameValues enumeration.
    /// </summary>
    public enum CompatSettingNameValues
    {
        ///<summary>
        ///compatibilityMode.
        ///<para>When the item is serialized out as xml, its value is "compatibilityMode".</para>
        ///</summary>
        [EnumString("compatibilityMode")]
        CompatibilityMode,
        ///<summary>
        ///overrideTableStyleFontSizeAndJustification.
        ///<para>When the item is serialized out as xml, its value is "overrideTableStyleFontSizeAndJustification".</para>
        ///</summary>
        [EnumString("overrideTableStyleFontSizeAndJustification")]
        OverrideTableStyleFontSizeAndJustification,
        ///<summary>
        ///enableOpenTypeFeatures.
        ///<para>When the item is serialized out as xml, its value is "enableOpenTypeFeatures".</para>
        ///</summary>
        [EnumString("enableOpenTypeFeatures")]
        EnableOpenTypeFeatures,
        ///<summary>
        ///doNotFlipMirrorIndents.
        ///<para>When the item is serialized out as xml, its value is "doNotFlipMirrorIndents".</para>
        ///</summary>
        [EnumString("doNotFlipMirrorIndents")]
        DoNotFlipMirrorIndents,
        ///<summary>
        ///differentiateMultirowTableHeaders.
        ///<para>When the item is serialized out as xml, its value is "differentiateMultirowTableHeaders".</para>
        ///</summary>
        [EnumString("differentiateMultirowTableHeaders")]
        DifferentiateMultirowTableHeaders,
    }
}
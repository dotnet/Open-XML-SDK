// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
using System;
using System.Collections.Generic;
using System.IO.Packaging;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Office2013.ExcelAc;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using DocumentFormat.OpenXml.Office2013.Excel;
using DocumentFormat.OpenXml.Office2010.Excel;
using DocumentFormat.OpenXml.Drawing.Spreadsheet;

namespace DocumentFormat.OpenXml.Spreadsheet
{
/// <summary>
/// <para>Extension.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
/// </list>
/// </remarks>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class Extension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11092;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the Extension class.
    /// </summary>
    public Extension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Extension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Extension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Extension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Extension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Extension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Extension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extension>(deep);

}
/// <summary>
/// <para>Calculation Chain Info. The root element of CalculationChainPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calcChain.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculationCell &lt;x:c></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(CalculationCell))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "calcChain")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class CalculationChain : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11093;
    /// <inheritdoc/>
    public override string LocalName => "calcChain";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal CalculationChain(CalculationChainPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the CalculationChainPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(CalculationChainPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the CalculationChainPart associated with this element.
    /// </summary>
    public CalculationChainPart CalculationChainPart
    {
		get => OpenXmlPart as CalculationChainPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the CalculationChain class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculationChain(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculationChain class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculationChain(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculationChain class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculationChain(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the CalculationChain class.
    /// </summary>
    public CalculationChain():base(){}
    
    /// <summary>
    /// Saves the DOM into the CalculationChainPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(CalculationChainPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculationChain>(deep);

}
/// <summary>
/// <para>Comments. The root element of WorksheetCommentsPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:comments.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Authors &lt;x:authors></description></item>
///<item><description>CommentList &lt;x:commentList></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Authors))]
    [ChildElementInfo(typeof(CommentList))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "comments")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Comments : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11094;
    /// <inheritdoc/>
    public override string LocalName => "comments";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Comments(WorksheetCommentsPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorksheetCommentsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorksheetCommentsPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorksheetCommentsPart associated with this element.
    /// </summary>
    public WorksheetCommentsPart WorksheetCommentsPart
    {
		get => OpenXmlPart as WorksheetCommentsPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Comments class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Comments(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Comments class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Comments(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Comments class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Comments(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Comments class.
    /// </summary>
    public Comments():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorksheetCommentsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorksheetCommentsPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "authors","commentList","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Authors.</para>
    /// <para> Represents the following element tag in the schema: x:authors </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Authors Authors
    {
        get => GetElement<Authors>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> List of Comments.</para>
    /// <para> Represents the following element tag in the schema: x:commentList </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CommentList CommentList
    {
        get => GetElement<CommentList>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comments>(deep);

}
/// <summary>
/// <para>XML Mapping. The root element of CustomXmlMappingsPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:MapInfo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Schema &lt;x:Schema></description></item>
///<item><description>Map &lt;x:Map></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Schema))]
    [ChildElementInfo(typeof(Map))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "MapInfo")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MapInfo : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11095;
    /// <inheritdoc/>
    public override string LocalName => "MapInfo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Prefix Mappings for XPath Expressions.</para>
    /// <para>Represents the following attribute in the schema: SelectionNamespaces </para>
    /// </summary>
    [SchemaAttr(0, "SelectionNamespaces", 0)]
    public StringValue SelectionNamespaces { get; set; }

    
	internal MapInfo(CustomXmlMappingsPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the CustomXmlMappingsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(CustomXmlMappingsPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the CustomXmlMappingsPart associated with this element.
    /// </summary>
    public CustomXmlMappingsPart CustomXmlMappingsPart
    {
		get => OpenXmlPart as CustomXmlMappingsPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the MapInfo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MapInfo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MapInfo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MapInfo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MapInfo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MapInfo(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the MapInfo class.
    /// </summary>
    public MapInfo():base(){}
    
    /// <summary>
    /// Saves the DOM into the CustomXmlMappingsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(CustomXmlMappingsPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MapInfo>(deep);

}
/// <summary>
/// <para>Connections. The root element of ConnectionsPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:connections.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Connection &lt;x:connection></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Connection))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "connections")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Connections : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11096;
    /// <inheritdoc/>
    public override string LocalName => "connections";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Connections(ConnectionsPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the ConnectionsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(ConnectionsPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the ConnectionsPart associated with this element.
    /// </summary>
    public ConnectionsPart ConnectionsPart
    {
		get => OpenXmlPart as ConnectionsPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Connections class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Connections(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Connections class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Connections(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Connections class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Connections(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Connections class.
    /// </summary>
    public Connections():base(){}
    
    /// <summary>
    /// Saves the DOM into the ConnectionsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(ConnectionsPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Connections>(deep);

}
/// <summary>
/// <para>PivotCache Definition. The root element of PivotTableCacheDefinitionPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotCacheDefinition.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheSource &lt;x:cacheSource></description></item>
///<item><description>CacheFields &lt;x:cacheFields></description></item>
///<item><description>CacheHierarchies &lt;x:cacheHierarchies></description></item>
///<item><description>Kpis &lt;x:kpis></description></item>
///<item><description>TupleCache &lt;x:tupleCache></description></item>
///<item><description>CalculatedItems &lt;x:calculatedItems></description></item>
///<item><description>CalculatedMembers &lt;x:calculatedMembers></description></item>
///<item><description>Dimensions &lt;x:dimensions></description></item>
///<item><description>MeasureGroups &lt;x:measureGroups></description></item>
///<item><description>Maps &lt;x:maps></description></item>
///<item><description>PivotCacheDefinitionExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(CacheSource))]
    [ChildElementInfo(typeof(CacheFields))]
    [ChildElementInfo(typeof(CacheHierarchies))]
    [ChildElementInfo(typeof(Kpis))]
    [ChildElementInfo(typeof(TupleCache))]
    [ChildElementInfo(typeof(CalculatedItems))]
    [ChildElementInfo(typeof(CalculatedMembers))]
    [ChildElementInfo(typeof(Dimensions))]
    [ChildElementInfo(typeof(MeasureGroups))]
    [ChildElementInfo(typeof(Maps))]
    [ChildElementInfo(typeof(PivotCacheDefinitionExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "pivotCacheDefinition")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class PivotCacheDefinition : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11097;
    /// <inheritdoc/>
    public override string LocalName => "pivotCacheDefinition";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> invalid.</para>
    /// <para>Represents the following attribute in the schema: invalid </para>
    /// </summary>
    [SchemaAttr(0, "invalid", 1)]
    public BooleanValue Invalid { get; set; }
    /// <summary>
    /// <para> saveData.</para>
    /// <para>Represents the following attribute in the schema: saveData </para>
    /// </summary>
    [SchemaAttr(0, "saveData", 2)]
    public BooleanValue SaveData { get; set; }
    /// <summary>
    /// <para> refreshOnLoad.</para>
    /// <para>Represents the following attribute in the schema: refreshOnLoad </para>
    /// </summary>
    [SchemaAttr(0, "refreshOnLoad", 3)]
    public BooleanValue RefreshOnLoad { get; set; }
    /// <summary>
    /// <para> optimizeMemory.</para>
    /// <para>Represents the following attribute in the schema: optimizeMemory </para>
    /// </summary>
    [SchemaAttr(0, "optimizeMemory", 4)]
    public BooleanValue OptimizeMemory { get; set; }
    /// <summary>
    /// <para> enableRefresh.</para>
    /// <para>Represents the following attribute in the schema: enableRefresh </para>
    /// </summary>
    [SchemaAttr(0, "enableRefresh", 5)]
    public BooleanValue EnableRefresh { get; set; }
    /// <summary>
    /// <para> refreshedBy.</para>
    /// <para>Represents the following attribute in the schema: refreshedBy </para>
    /// </summary>
    [SchemaAttr(0, "refreshedBy", 6)]
    public StringValue RefreshedBy { get; set; }
    /// <summary>
    /// <para> refreshedDateIso.</para>
    /// <para>Represents the following attribute in the schema: refreshedDateIso </para>
    /// </summary>
    [SchemaAttr(0, "refreshedDateIso", 7)]
    public DateTimeValue LastRefreshedDateIso { get; set; }
    /// <summary>
    /// <para> refreshedDate.</para>
    /// <para>Represents the following attribute in the schema: refreshedDate </para>
    /// </summary>
    [SchemaAttr(0, "refreshedDate", 8)]
    public DoubleValue RefreshedDate { get; set; }
    /// <summary>
    /// <para> backgroundQuery.</para>
    /// <para>Represents the following attribute in the schema: backgroundQuery </para>
    /// </summary>
    [SchemaAttr(0, "backgroundQuery", 9)]
    public BooleanValue BackgroundQuery { get; set; }
    /// <summary>
    /// <para> missingItemsLimit.</para>
    /// <para>Represents the following attribute in the schema: missingItemsLimit </para>
    /// </summary>
    [SchemaAttr(0, "missingItemsLimit", 10)]
    public UInt32Value MissingItemsLimit { get; set; }
    /// <summary>
    /// <para> createdVersion.</para>
    /// <para>Represents the following attribute in the schema: createdVersion </para>
    /// </summary>
    [SchemaAttr(0, "createdVersion", 11)]
    public ByteValue CreatedVersion { get; set; }
    /// <summary>
    /// <para> refreshedVersion.</para>
    /// <para>Represents the following attribute in the schema: refreshedVersion </para>
    /// </summary>
    [SchemaAttr(0, "refreshedVersion", 12)]
    public ByteValue RefreshedVersion { get; set; }
    /// <summary>
    /// <para> minRefreshableVersion.</para>
    /// <para>Represents the following attribute in the schema: minRefreshableVersion </para>
    /// </summary>
    [SchemaAttr(0, "minRefreshableVersion", 13)]
    public ByteValue MinRefreshableVersion { get; set; }
    /// <summary>
    /// <para> recordCount.</para>
    /// <para>Represents the following attribute in the schema: recordCount </para>
    /// </summary>
    [SchemaAttr(0, "recordCount", 14)]
    public UInt32Value RecordCount { get; set; }
    /// <summary>
    /// <para> upgradeOnRefresh.</para>
    /// <para>Represents the following attribute in the schema: upgradeOnRefresh </para>
    /// </summary>
    [SchemaAttr(0, "upgradeOnRefresh", 15)]
    public BooleanValue UpgradeOnRefresh { get; set; }
    /// <summary>
    /// <para> tupleCache.</para>
    /// <para>Represents the following attribute in the schema: tupleCache </para>
    /// </summary>
    [SchemaAttr(0, "tupleCache", 16)]
    public BooleanValue IsTupleCache { get; set; }
    /// <summary>
    /// <para> supportSubquery.</para>
    /// <para>Represents the following attribute in the schema: supportSubquery </para>
    /// </summary>
    [SchemaAttr(0, "supportSubquery", 17)]
    public BooleanValue SupportSubquery { get; set; }
    /// <summary>
    /// <para> supportAdvancedDrill.</para>
    /// <para>Represents the following attribute in the schema: supportAdvancedDrill </para>
    /// </summary>
    [SchemaAttr(0, "supportAdvancedDrill", 18)]
    public BooleanValue SupportAdvancedDrill { get; set; }

    
	internal PivotCacheDefinition(PivotTableCacheDefinitionPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the PivotTableCacheDefinitionPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(PivotTableCacheDefinitionPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the PivotTableCacheDefinitionPart associated with this element.
    /// </summary>
    public PivotTableCacheDefinitionPart PivotTableCacheDefinitionPart
    {
		get => OpenXmlPart as PivotTableCacheDefinitionPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the PivotCacheDefinition class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinition(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinition class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinition(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinition class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCacheDefinition(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinition class.
    /// </summary>
    public PivotCacheDefinition():base(){}
    
    /// <summary>
    /// Saves the DOM into the PivotTableCacheDefinitionPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(PivotTableCacheDefinitionPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "cacheSource","cacheFields","cacheHierarchies","kpis","tupleCache","calculatedItems","calculatedMembers","dimensions","measureGroups","maps","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> CacheSource.</para>
    /// <para> Represents the following element tag in the schema: x:cacheSource </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CacheSource CacheSource
    {
        get => GetElement<CacheSource>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> CacheFields.</para>
    /// <para> Represents the following element tag in the schema: x:cacheFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CacheFields CacheFields
    {
        get => GetElement<CacheFields>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> CacheHierarchies.</para>
    /// <para> Represents the following element tag in the schema: x:cacheHierarchies </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CacheHierarchies CacheHierarchies
    {
        get => GetElement<CacheHierarchies>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Kpis.</para>
    /// <para> Represents the following element tag in the schema: x:kpis </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Kpis Kpis
    {
        get => GetElement<Kpis>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> TupleCache.</para>
    /// <para> Represents the following element tag in the schema: x:tupleCache </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TupleCache TupleCache
    {
        get => GetElement<TupleCache>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> CalculatedItems.</para>
    /// <para> Represents the following element tag in the schema: x:calculatedItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CalculatedItems CalculatedItems
    {
        get => GetElement<CalculatedItems>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> CalculatedMembers.</para>
    /// <para> Represents the following element tag in the schema: x:calculatedMembers </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CalculatedMembers CalculatedMembers
    {
        get => GetElement<CalculatedMembers>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Dimensions.</para>
    /// <para> Represents the following element tag in the schema: x:dimensions </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Dimensions Dimensions
    {
        get => GetElement<Dimensions>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> MeasureGroups.</para>
    /// <para> Represents the following element tag in the schema: x:measureGroups </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MeasureGroups MeasureGroups
    {
        get => GetElement<MeasureGroups>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> Maps.</para>
    /// <para> Represents the following element tag in the schema: x:maps </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Maps Maps
    {
        get => GetElement<Maps>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> PivotCacheDefinitionExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotCacheDefinitionExtensionList PivotCacheDefinitionExtensionList
    {
        get => GetElement<PivotCacheDefinitionExtensionList>(10);
        set => SetElement(10, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheDefinition>(deep);

}
/// <summary>
/// <para>PivotCache Records. The root element of PivotTableCacheRecordsPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotCacheRecords.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotCacheRecord &lt;x:r></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(PivotCacheRecord))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "pivotCacheRecords")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class PivotCacheRecords : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11098;
    /// <inheritdoc/>
    public override string LocalName => "pivotCacheRecords";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> PivotCache Records Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    
	internal PivotCacheRecords(PivotTableCacheRecordsPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the PivotTableCacheRecordsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(PivotTableCacheRecordsPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the PivotTableCacheRecordsPart associated with this element.
    /// </summary>
    public PivotTableCacheRecordsPart PivotTableCacheRecordsPart
    {
		get => OpenXmlPart as PivotTableCacheRecordsPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the PivotCacheRecords class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheRecords(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecords class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheRecords(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecords class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCacheRecords(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecords class.
    /// </summary>
    public PivotCacheRecords():base(){}
    
    /// <summary>
    /// Saves the DOM into the PivotTableCacheRecordsPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(PivotTableCacheRecordsPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheRecords>(deep);

}
/// <summary>
/// <para>PivotTable Definition. The root element of PivotTablePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotTableDefinition.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Location &lt;x:location></description></item>
///<item><description>PivotFields &lt;x:pivotFields></description></item>
///<item><description>RowFields &lt;x:rowFields></description></item>
///<item><description>RowItems &lt;x:rowItems></description></item>
///<item><description>ColumnFields &lt;x:colFields></description></item>
///<item><description>ColumnItems &lt;x:colItems></description></item>
///<item><description>PageFields &lt;x:pageFields></description></item>
///<item><description>DataFields &lt;x:dataFields></description></item>
///<item><description>Formats &lt;x:formats></description></item>
///<item><description>ConditionalFormats &lt;x:conditionalFormats></description></item>
///<item><description>ChartFormats &lt;x:chartFormats></description></item>
///<item><description>PivotHierarchies &lt;x:pivotHierarchies></description></item>
///<item><description>PivotTableStyle &lt;x:pivotTableStyleInfo></description></item>
///<item><description>PivotFilters &lt;x:filters></description></item>
///<item><description>RowHierarchiesUsage &lt;x:rowHierarchiesUsage></description></item>
///<item><description>ColumnHierarchiesUsage &lt;x:colHierarchiesUsage></description></item>
///<item><description>PivotTableDefinitionExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Location))]
    [ChildElementInfo(typeof(PivotFields))]
    [ChildElementInfo(typeof(RowFields))]
    [ChildElementInfo(typeof(RowItems))]
    [ChildElementInfo(typeof(ColumnFields))]
    [ChildElementInfo(typeof(ColumnItems))]
    [ChildElementInfo(typeof(PageFields))]
    [ChildElementInfo(typeof(DataFields))]
    [ChildElementInfo(typeof(Formats))]
    [ChildElementInfo(typeof(ConditionalFormats))]
    [ChildElementInfo(typeof(ChartFormats))]
    [ChildElementInfo(typeof(PivotHierarchies))]
    [ChildElementInfo(typeof(PivotTableStyle))]
    [ChildElementInfo(typeof(PivotFilters))]
    [ChildElementInfo(typeof(RowHierarchiesUsage))]
    [ChildElementInfo(typeof(ColumnHierarchiesUsage))]
    [ChildElementInfo(typeof(PivotTableDefinitionExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "pivotTableDefinition")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class PivotTableDefinition : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11099;
    /// <inheritdoc/>
    public override string LocalName => "pivotTableDefinition";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> cacheId.</para>
    /// <para>Represents the following attribute in the schema: cacheId </para>
    /// </summary>
    [SchemaAttr(0, "cacheId", 1)]
    public UInt32Value CacheId { get; set; }
    /// <summary>
    /// <para> dataOnRows.</para>
    /// <para>Represents the following attribute in the schema: dataOnRows </para>
    /// </summary>
    [SchemaAttr(0, "dataOnRows", 2)]
    public BooleanValue DataOnRows { get; set; }
    /// <summary>
    /// <para> dataPosition.</para>
    /// <para>Represents the following attribute in the schema: dataPosition </para>
    /// </summary>
    [SchemaAttr(0, "dataPosition", 3)]
    public UInt32Value DataPosition { get; set; }
    /// <summary>
    /// <para> Auto Format Id.</para>
    /// <para>Represents the following attribute in the schema: autoFormatId </para>
    /// </summary>
    [SchemaAttr(0, "autoFormatId", 4)]
    public UInt32Value AutoFormatId { get; set; }
    /// <summary>
    /// <para> Apply Number Formats.</para>
    /// <para>Represents the following attribute in the schema: applyNumberFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyNumberFormats", 5)]
    public BooleanValue ApplyNumberFormats { get; set; }
    /// <summary>
    /// <para> Apply Border Formats.</para>
    /// <para>Represents the following attribute in the schema: applyBorderFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyBorderFormats", 6)]
    public BooleanValue ApplyBorderFormats { get; set; }
    /// <summary>
    /// <para> Apply Font Formats.</para>
    /// <para>Represents the following attribute in the schema: applyFontFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyFontFormats", 7)]
    public BooleanValue ApplyFontFormats { get; set; }
    /// <summary>
    /// <para> Apply Pattern Formats.</para>
    /// <para>Represents the following attribute in the schema: applyPatternFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyPatternFormats", 8)]
    public BooleanValue ApplyPatternFormats { get; set; }
    /// <summary>
    /// <para> Apply Alignment Formats.</para>
    /// <para>Represents the following attribute in the schema: applyAlignmentFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyAlignmentFormats", 9)]
    public BooleanValue ApplyAlignmentFormats { get; set; }
    /// <summary>
    /// <para> Apply Width / Height Formats.</para>
    /// <para>Represents the following attribute in the schema: applyWidthHeightFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyWidthHeightFormats", 10)]
    public BooleanValue ApplyWidthHeightFormats { get; set; }
    /// <summary>
    /// <para> dataCaption.</para>
    /// <para>Represents the following attribute in the schema: dataCaption </para>
    /// </summary>
    [SchemaAttr(0, "dataCaption", 11)]
    public StringValue DataCaption { get; set; }
    /// <summary>
    /// <para> grandTotalCaption.</para>
    /// <para>Represents the following attribute in the schema: grandTotalCaption </para>
    /// </summary>
    [SchemaAttr(0, "grandTotalCaption", 12)]
    public StringValue GrandTotalCaption { get; set; }
    /// <summary>
    /// <para> errorCaption.</para>
    /// <para>Represents the following attribute in the schema: errorCaption </para>
    /// </summary>
    [SchemaAttr(0, "errorCaption", 13)]
    public StringValue ErrorCaption { get; set; }
    /// <summary>
    /// <para> showError.</para>
    /// <para>Represents the following attribute in the schema: showError </para>
    /// </summary>
    [SchemaAttr(0, "showError", 14)]
    public BooleanValue ShowError { get; set; }
    /// <summary>
    /// <para> missingCaption.</para>
    /// <para>Represents the following attribute in the schema: missingCaption </para>
    /// </summary>
    [SchemaAttr(0, "missingCaption", 15)]
    public StringValue MissingCaption { get; set; }
    /// <summary>
    /// <para> showMissing.</para>
    /// <para>Represents the following attribute in the schema: showMissing </para>
    /// </summary>
    [SchemaAttr(0, "showMissing", 16)]
    public BooleanValue ShowMissing { get; set; }
    /// <summary>
    /// <para> pageStyle.</para>
    /// <para>Represents the following attribute in the schema: pageStyle </para>
    /// </summary>
    [SchemaAttr(0, "pageStyle", 17)]
    public StringValue PageStyle { get; set; }
    /// <summary>
    /// <para> pivotTableStyle.</para>
    /// <para>Represents the following attribute in the schema: pivotTableStyle </para>
    /// </summary>
    [SchemaAttr(0, "pivotTableStyle", 18)]
    public StringValue PivotTableStyleName { get; set; }
    /// <summary>
    /// <para> vacatedStyle.</para>
    /// <para>Represents the following attribute in the schema: vacatedStyle </para>
    /// </summary>
    [SchemaAttr(0, "vacatedStyle", 19)]
    public StringValue VacatedStyle { get; set; }
    /// <summary>
    /// <para> tag.</para>
    /// <para>Represents the following attribute in the schema: tag </para>
    /// </summary>
    [SchemaAttr(0, "tag", 20)]
    public StringValue Tag { get; set; }
    /// <summary>
    /// <para> updatedVersion.</para>
    /// <para>Represents the following attribute in the schema: updatedVersion </para>
    /// </summary>
    [SchemaAttr(0, "updatedVersion", 21)]
    public ByteValue UpdatedVersion { get; set; }
    /// <summary>
    /// <para> minRefreshableVersion.</para>
    /// <para>Represents the following attribute in the schema: minRefreshableVersion </para>
    /// </summary>
    [SchemaAttr(0, "minRefreshableVersion", 22)]
    public ByteValue MinRefreshableVersion { get; set; }
    /// <summary>
    /// <para> asteriskTotals.</para>
    /// <para>Represents the following attribute in the schema: asteriskTotals </para>
    /// </summary>
    [SchemaAttr(0, "asteriskTotals", 23)]
    public BooleanValue AsteriskTotals { get; set; }
    /// <summary>
    /// <para> showItems.</para>
    /// <para>Represents the following attribute in the schema: showItems </para>
    /// </summary>
    [SchemaAttr(0, "showItems", 24)]
    public BooleanValue ShowItems { get; set; }
    /// <summary>
    /// <para> editData.</para>
    /// <para>Represents the following attribute in the schema: editData </para>
    /// </summary>
    [SchemaAttr(0, "editData", 25)]
    public BooleanValue EditData { get; set; }
    /// <summary>
    /// <para> disableFieldList.</para>
    /// <para>Represents the following attribute in the schema: disableFieldList </para>
    /// </summary>
    [SchemaAttr(0, "disableFieldList", 26)]
    public BooleanValue DisableFieldList { get; set; }
    /// <summary>
    /// <para> showCalcMbrs.</para>
    /// <para>Represents the following attribute in the schema: showCalcMbrs </para>
    /// </summary>
    [SchemaAttr(0, "showCalcMbrs", 27)]
    public BooleanValue ShowCalculatedMembers { get; set; }
    /// <summary>
    /// <para> visualTotals.</para>
    /// <para>Represents the following attribute in the schema: visualTotals </para>
    /// </summary>
    [SchemaAttr(0, "visualTotals", 28)]
    public BooleanValue VisualTotals { get; set; }
    /// <summary>
    /// <para> showMultipleLabel.</para>
    /// <para>Represents the following attribute in the schema: showMultipleLabel </para>
    /// </summary>
    [SchemaAttr(0, "showMultipleLabel", 29)]
    public BooleanValue ShowMultipleLabel { get; set; }
    /// <summary>
    /// <para> showDataDropDown.</para>
    /// <para>Represents the following attribute in the schema: showDataDropDown </para>
    /// </summary>
    [SchemaAttr(0, "showDataDropDown", 30)]
    public BooleanValue ShowDataDropDown { get; set; }
    /// <summary>
    /// <para> showDrill.</para>
    /// <para>Represents the following attribute in the schema: showDrill </para>
    /// </summary>
    [SchemaAttr(0, "showDrill", 31)]
    public BooleanValue ShowDrill { get; set; }
    /// <summary>
    /// <para> printDrill.</para>
    /// <para>Represents the following attribute in the schema: printDrill </para>
    /// </summary>
    [SchemaAttr(0, "printDrill", 32)]
    public BooleanValue PrintDrill { get; set; }
    /// <summary>
    /// <para> showMemberPropertyTips.</para>
    /// <para>Represents the following attribute in the schema: showMemberPropertyTips </para>
    /// </summary>
    [SchemaAttr(0, "showMemberPropertyTips", 33)]
    public BooleanValue ShowMemberPropertyTips { get; set; }
    /// <summary>
    /// <para> showDataTips.</para>
    /// <para>Represents the following attribute in the schema: showDataTips </para>
    /// </summary>
    [SchemaAttr(0, "showDataTips", 34)]
    public BooleanValue ShowDataTips { get; set; }
    /// <summary>
    /// <para> enableWizard.</para>
    /// <para>Represents the following attribute in the schema: enableWizard </para>
    /// </summary>
    [SchemaAttr(0, "enableWizard", 35)]
    public BooleanValue EnableWizard { get; set; }
    /// <summary>
    /// <para> enableDrill.</para>
    /// <para>Represents the following attribute in the schema: enableDrill </para>
    /// </summary>
    [SchemaAttr(0, "enableDrill", 36)]
    public BooleanValue EnableDrill { get; set; }
    /// <summary>
    /// <para> enableFieldProperties.</para>
    /// <para>Represents the following attribute in the schema: enableFieldProperties </para>
    /// </summary>
    [SchemaAttr(0, "enableFieldProperties", 37)]
    public BooleanValue EnableFieldProperties { get; set; }
    /// <summary>
    /// <para> preserveFormatting.</para>
    /// <para>Represents the following attribute in the schema: preserveFormatting </para>
    /// </summary>
    [SchemaAttr(0, "preserveFormatting", 38)]
    public BooleanValue PreserveFormatting { get; set; }
    /// <summary>
    /// <para> useAutoFormatting.</para>
    /// <para>Represents the following attribute in the schema: useAutoFormatting </para>
    /// </summary>
    [SchemaAttr(0, "useAutoFormatting", 39)]
    public BooleanValue UseAutoFormatting { get; set; }
    /// <summary>
    /// <para> pageWrap.</para>
    /// <para>Represents the following attribute in the schema: pageWrap </para>
    /// </summary>
    [SchemaAttr(0, "pageWrap", 40)]
    public UInt32Value PageWrap { get; set; }
    /// <summary>
    /// <para> pageOverThenDown.</para>
    /// <para>Represents the following attribute in the schema: pageOverThenDown </para>
    /// </summary>
    [SchemaAttr(0, "pageOverThenDown", 41)]
    public BooleanValue PageOverThenDown { get; set; }
    /// <summary>
    /// <para> subtotalHiddenItems.</para>
    /// <para>Represents the following attribute in the schema: subtotalHiddenItems </para>
    /// </summary>
    [SchemaAttr(0, "subtotalHiddenItems", 42)]
    public BooleanValue SubtotalHiddenItems { get; set; }
    /// <summary>
    /// <para> rowGrandTotals.</para>
    /// <para>Represents the following attribute in the schema: rowGrandTotals </para>
    /// </summary>
    [SchemaAttr(0, "rowGrandTotals", 43)]
    public BooleanValue RowGrandTotals { get; set; }
    /// <summary>
    /// <para> colGrandTotals.</para>
    /// <para>Represents the following attribute in the schema: colGrandTotals </para>
    /// </summary>
    [SchemaAttr(0, "colGrandTotals", 44)]
    public BooleanValue ColumnGrandTotals { get; set; }
    /// <summary>
    /// <para> fieldPrintTitles.</para>
    /// <para>Represents the following attribute in the schema: fieldPrintTitles </para>
    /// </summary>
    [SchemaAttr(0, "fieldPrintTitles", 45)]
    public BooleanValue FieldPrintTitles { get; set; }
    /// <summary>
    /// <para> itemPrintTitles.</para>
    /// <para>Represents the following attribute in the schema: itemPrintTitles </para>
    /// </summary>
    [SchemaAttr(0, "itemPrintTitles", 46)]
    public BooleanValue ItemPrintTitles { get; set; }
    /// <summary>
    /// <para> mergeItem.</para>
    /// <para>Represents the following attribute in the schema: mergeItem </para>
    /// </summary>
    [SchemaAttr(0, "mergeItem", 47)]
    public BooleanValue MergeItem { get; set; }
    /// <summary>
    /// <para> showDropZones.</para>
    /// <para>Represents the following attribute in the schema: showDropZones </para>
    /// </summary>
    [SchemaAttr(0, "showDropZones", 48)]
    public BooleanValue ShowDropZones { get; set; }
    /// <summary>
    /// <para> createdVersion.</para>
    /// <para>Represents the following attribute in the schema: createdVersion </para>
    /// </summary>
    [SchemaAttr(0, "createdVersion", 49)]
    public ByteValue CreatedVersion { get; set; }
    /// <summary>
    /// <para> indent.</para>
    /// <para>Represents the following attribute in the schema: indent </para>
    /// </summary>
    [SchemaAttr(0, "indent", 50)]
    public UInt32Value Indent { get; set; }
    /// <summary>
    /// <para> showEmptyRow.</para>
    /// <para>Represents the following attribute in the schema: showEmptyRow </para>
    /// </summary>
    [SchemaAttr(0, "showEmptyRow", 51)]
    public BooleanValue ShowEmptyRow { get; set; }
    /// <summary>
    /// <para> showEmptyCol.</para>
    /// <para>Represents the following attribute in the schema: showEmptyCol </para>
    /// </summary>
    [SchemaAttr(0, "showEmptyCol", 52)]
    public BooleanValue ShowEmptyColumn { get; set; }
    /// <summary>
    /// <para> showHeaders.</para>
    /// <para>Represents the following attribute in the schema: showHeaders </para>
    /// </summary>
    [SchemaAttr(0, "showHeaders", 53)]
    public BooleanValue ShowHeaders { get; set; }
    /// <summary>
    /// <para> compact.</para>
    /// <para>Represents the following attribute in the schema: compact </para>
    /// </summary>
    [SchemaAttr(0, "compact", 54)]
    public BooleanValue Compact { get; set; }
    /// <summary>
    /// <para> outline.</para>
    /// <para>Represents the following attribute in the schema: outline </para>
    /// </summary>
    [SchemaAttr(0, "outline", 55)]
    public BooleanValue Outline { get; set; }
    /// <summary>
    /// <para> outlineData.</para>
    /// <para>Represents the following attribute in the schema: outlineData </para>
    /// </summary>
    [SchemaAttr(0, "outlineData", 56)]
    public BooleanValue OutlineData { get; set; }
    /// <summary>
    /// <para> compactData.</para>
    /// <para>Represents the following attribute in the schema: compactData </para>
    /// </summary>
    [SchemaAttr(0, "compactData", 57)]
    public BooleanValue CompactData { get; set; }
    /// <summary>
    /// <para> published.</para>
    /// <para>Represents the following attribute in the schema: published </para>
    /// </summary>
    [SchemaAttr(0, "published", 58)]
    public BooleanValue Published { get; set; }
    /// <summary>
    /// <para> gridDropZones.</para>
    /// <para>Represents the following attribute in the schema: gridDropZones </para>
    /// </summary>
    [SchemaAttr(0, "gridDropZones", 59)]
    public BooleanValue GridDropZones { get; set; }
    /// <summary>
    /// <para> immersive.</para>
    /// <para>Represents the following attribute in the schema: immersive </para>
    /// </summary>
    [SchemaAttr(0, "immersive", 60)]
    public BooleanValue StopImmersiveUi { get; set; }
    /// <summary>
    /// <para> multipleFieldFilters.</para>
    /// <para>Represents the following attribute in the schema: multipleFieldFilters </para>
    /// </summary>
    [SchemaAttr(0, "multipleFieldFilters", 61)]
    public BooleanValue MultipleFieldFilters { get; set; }
    /// <summary>
    /// <para> chartFormat.</para>
    /// <para>Represents the following attribute in the schema: chartFormat </para>
    /// </summary>
    [SchemaAttr(0, "chartFormat", 62)]
    public UInt32Value ChartFormat { get; set; }
    /// <summary>
    /// <para> rowHeaderCaption.</para>
    /// <para>Represents the following attribute in the schema: rowHeaderCaption </para>
    /// </summary>
    [SchemaAttr(0, "rowHeaderCaption", 63)]
    public StringValue RowHeaderCaption { get; set; }
    /// <summary>
    /// <para> colHeaderCaption.</para>
    /// <para>Represents the following attribute in the schema: colHeaderCaption </para>
    /// </summary>
    [SchemaAttr(0, "colHeaderCaption", 64)]
    public StringValue ColumnHeaderCaption { get; set; }
    /// <summary>
    /// <para> fieldListSortAscending.</para>
    /// <para>Represents the following attribute in the schema: fieldListSortAscending </para>
    /// </summary>
    [SchemaAttr(0, "fieldListSortAscending", 65)]
    public BooleanValue FieldListSortAscending { get; set; }
    /// <summary>
    /// <para> mdxSubqueries.</para>
    /// <para>Represents the following attribute in the schema: mdxSubqueries </para>
    /// </summary>
    [SchemaAttr(0, "mdxSubqueries", 66)]
    public BooleanValue MdxSubqueries { get; set; }
    /// <summary>
    /// <para> customListSort.</para>
    /// <para>Represents the following attribute in the schema: customListSort </para>
    /// </summary>
    [SchemaAttr(0, "customListSort", 67)]
    public BooleanValue CustomListSort { get; set; }

    
	internal PivotTableDefinition(PivotTablePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the PivotTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(PivotTablePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the PivotTablePart associated with this element.
    /// </summary>
    public PivotTablePart PivotTablePart
    {
		get => OpenXmlPart as PivotTablePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the PivotTableDefinition class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinition(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinition class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinition(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinition class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotTableDefinition(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinition class.
    /// </summary>
    public PivotTableDefinition():base(){}
    
    /// <summary>
    /// Saves the DOM into the PivotTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(PivotTablePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "location","pivotFields","rowFields","rowItems","colFields","colItems","pageFields","dataFields","formats","conditionalFormats","chartFormats","pivotHierarchies","pivotTableStyleInfo","filters","rowHierarchiesUsage","colHierarchiesUsage","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Location.</para>
    /// <para> Represents the following element tag in the schema: x:location </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Location Location
    {
        get => GetElement<Location>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> PivotFields.</para>
    /// <para> Represents the following element tag in the schema: x:pivotFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotFields PivotFields
    {
        get => GetElement<PivotFields>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> RowFields.</para>
    /// <para> Represents the following element tag in the schema: x:rowFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RowFields RowFields
    {
        get => GetElement<RowFields>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> RowItems.</para>
    /// <para> Represents the following element tag in the schema: x:rowItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RowItems RowItems
    {
        get => GetElement<RowItems>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> ColumnFields.</para>
    /// <para> Represents the following element tag in the schema: x:colFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ColumnFields ColumnFields
    {
        get => GetElement<ColumnFields>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> ColumnItems.</para>
    /// <para> Represents the following element tag in the schema: x:colItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ColumnItems ColumnItems
    {
        get => GetElement<ColumnItems>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> PageFields.</para>
    /// <para> Represents the following element tag in the schema: x:pageFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageFields PageFields
    {
        get => GetElement<PageFields>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> DataFields.</para>
    /// <para> Represents the following element tag in the schema: x:dataFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DataFields DataFields
    {
        get => GetElement<DataFields>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> Formats.</para>
    /// <para> Represents the following element tag in the schema: x:formats </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Formats Formats
    {
        get => GetElement<Formats>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> ConditionalFormats.</para>
    /// <para> Represents the following element tag in the schema: x:conditionalFormats </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ConditionalFormats ConditionalFormats
    {
        get => GetElement<ConditionalFormats>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> ChartFormats.</para>
    /// <para> Represents the following element tag in the schema: x:chartFormats </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartFormats ChartFormats
    {
        get => GetElement<ChartFormats>(10);
        set => SetElement(10, value);
    }
    
    /// <summary>
    /// <para> PivotHierarchies.</para>
    /// <para> Represents the following element tag in the schema: x:pivotHierarchies </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotHierarchies PivotHierarchies
    {
        get => GetElement<PivotHierarchies>(11);
        set => SetElement(11, value);
    }
    
    /// <summary>
    /// <para> PivotTableStyle.</para>
    /// <para> Represents the following element tag in the schema: x:pivotTableStyleInfo </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotTableStyle PivotTableStyle
    {
        get => GetElement<PivotTableStyle>(12);
        set => SetElement(12, value);
    }
    
    /// <summary>
    /// <para> PivotFilters.</para>
    /// <para> Represents the following element tag in the schema: x:filters </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotFilters PivotFilters
    {
        get => GetElement<PivotFilters>(13);
        set => SetElement(13, value);
    }
    
    /// <summary>
    /// <para> RowHierarchiesUsage.</para>
    /// <para> Represents the following element tag in the schema: x:rowHierarchiesUsage </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RowHierarchiesUsage RowHierarchiesUsage
    {
        get => GetElement<RowHierarchiesUsage>(14);
        set => SetElement(14, value);
    }
    
    /// <summary>
    /// <para> ColumnHierarchiesUsage.</para>
    /// <para> Represents the following element tag in the schema: x:colHierarchiesUsage </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ColumnHierarchiesUsage ColumnHierarchiesUsage
    {
        get => GetElement<ColumnHierarchiesUsage>(15);
        set => SetElement(15, value);
    }
    
    /// <summary>
    /// <para> PivotTableDefinitionExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotTableDefinitionExtensionList PivotTableDefinitionExtensionList
    {
        get => GetElement<PivotTableDefinitionExtensionList>(16);
        set => SetElement(16, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotTableDefinition>(deep);

}
/// <summary>
/// <para>Query Table. The root element of QueryTablePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryTable.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>QueryTableRefresh &lt;x:queryTableRefresh></description></item>
///<item><description>QueryTableExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(QueryTableRefresh))]
    [ChildElementInfo(typeof(QueryTableExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "queryTable")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class QueryTable : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11100;
    /// <inheritdoc/>
    public override string LocalName => "queryTable";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> headers.</para>
    /// <para>Represents the following attribute in the schema: headers </para>
    /// </summary>
    [SchemaAttr(0, "headers", 1)]
    public BooleanValue Headers { get; set; }
    /// <summary>
    /// <para> rowNumbers.</para>
    /// <para>Represents the following attribute in the schema: rowNumbers </para>
    /// </summary>
    [SchemaAttr(0, "rowNumbers", 2)]
    public BooleanValue RowNumbers { get; set; }
    /// <summary>
    /// <para> disableRefresh.</para>
    /// <para>Represents the following attribute in the schema: disableRefresh </para>
    /// </summary>
    [SchemaAttr(0, "disableRefresh", 3)]
    public BooleanValue DisableRefresh { get; set; }
    /// <summary>
    /// <para> backgroundRefresh.</para>
    /// <para>Represents the following attribute in the schema: backgroundRefresh </para>
    /// </summary>
    [SchemaAttr(0, "backgroundRefresh", 4)]
    public BooleanValue BackgroundRefresh { get; set; }
    /// <summary>
    /// <para> firstBackgroundRefresh.</para>
    /// <para>Represents the following attribute in the schema: firstBackgroundRefresh </para>
    /// </summary>
    [SchemaAttr(0, "firstBackgroundRefresh", 5)]
    public BooleanValue FirstBackgroundRefresh { get; set; }
    /// <summary>
    /// <para> refreshOnLoad.</para>
    /// <para>Represents the following attribute in the schema: refreshOnLoad </para>
    /// </summary>
    [SchemaAttr(0, "refreshOnLoad", 6)]
    public BooleanValue RefreshOnLoad { get; set; }
    /// <summary>
    /// <para> growShrinkType.</para>
    /// <para>Represents the following attribute in the schema: growShrinkType </para>
    /// </summary>
    [SchemaAttr(0, "growShrinkType", 7)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.GrowShrinkValues> GrowShrinkType { get; set; }
    /// <summary>
    /// <para> fillFormulas.</para>
    /// <para>Represents the following attribute in the schema: fillFormulas </para>
    /// </summary>
    [SchemaAttr(0, "fillFormulas", 8)]
    public BooleanValue FillFormulas { get; set; }
    /// <summary>
    /// <para> removeDataOnSave.</para>
    /// <para>Represents the following attribute in the schema: removeDataOnSave </para>
    /// </summary>
    [SchemaAttr(0, "removeDataOnSave", 9)]
    public BooleanValue RemoveDataOnSave { get; set; }
    /// <summary>
    /// <para> disableEdit.</para>
    /// <para>Represents the following attribute in the schema: disableEdit </para>
    /// </summary>
    [SchemaAttr(0, "disableEdit", 10)]
    public BooleanValue DisableEdit { get; set; }
    /// <summary>
    /// <para> preserveFormatting.</para>
    /// <para>Represents the following attribute in the schema: preserveFormatting </para>
    /// </summary>
    [SchemaAttr(0, "preserveFormatting", 11)]
    public BooleanValue PreserveFormatting { get; set; }
    /// <summary>
    /// <para> adjustColumnWidth.</para>
    /// <para>Represents the following attribute in the schema: adjustColumnWidth </para>
    /// </summary>
    [SchemaAttr(0, "adjustColumnWidth", 12)]
    public BooleanValue AdjustColumnWidth { get; set; }
    /// <summary>
    /// <para> intermediate.</para>
    /// <para>Represents the following attribute in the schema: intermediate </para>
    /// </summary>
    [SchemaAttr(0, "intermediate", 13)]
    public BooleanValue Intermediate { get; set; }
    /// <summary>
    /// <para> connectionId.</para>
    /// <para>Represents the following attribute in the schema: connectionId </para>
    /// </summary>
    [SchemaAttr(0, "connectionId", 14)]
    public UInt32Value ConnectionId { get; set; }
    /// <summary>
    /// <para> Auto Format Id.</para>
    /// <para>Represents the following attribute in the schema: autoFormatId </para>
    /// </summary>
    [SchemaAttr(0, "autoFormatId", 15)]
    public UInt32Value AutoFormatId { get; set; }
    /// <summary>
    /// <para> Apply Number Formats.</para>
    /// <para>Represents the following attribute in the schema: applyNumberFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyNumberFormats", 16)]
    public BooleanValue ApplyNumberFormats { get; set; }
    /// <summary>
    /// <para> Apply Border Formats.</para>
    /// <para>Represents the following attribute in the schema: applyBorderFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyBorderFormats", 17)]
    public BooleanValue ApplyBorderFormats { get; set; }
    /// <summary>
    /// <para> Apply Font Formats.</para>
    /// <para>Represents the following attribute in the schema: applyFontFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyFontFormats", 18)]
    public BooleanValue ApplyFontFormats { get; set; }
    /// <summary>
    /// <para> Apply Pattern Formats.</para>
    /// <para>Represents the following attribute in the schema: applyPatternFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyPatternFormats", 19)]
    public BooleanValue ApplyPatternFormats { get; set; }
    /// <summary>
    /// <para> Apply Alignment Formats.</para>
    /// <para>Represents the following attribute in the schema: applyAlignmentFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyAlignmentFormats", 20)]
    public BooleanValue ApplyAlignmentFormats { get; set; }
    /// <summary>
    /// <para> Apply Width / Height Formats.</para>
    /// <para>Represents the following attribute in the schema: applyWidthHeightFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyWidthHeightFormats", 21)]
    public BooleanValue ApplyWidthHeightFormats { get; set; }

    
	internal QueryTable(QueryTablePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the QueryTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(QueryTablePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the QueryTablePart associated with this element.
    /// </summary>
    public QueryTablePart QueryTablePart
    {
		get => OpenXmlPart as QueryTablePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the QueryTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTable(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTable(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTable class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTable(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the QueryTable class.
    /// </summary>
    public QueryTable():base(){}
    
    /// <summary>
    /// Saves the DOM into the QueryTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(QueryTablePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "queryTableRefresh","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> QueryTableRefresh.</para>
    /// <para> Represents the following element tag in the schema: x:queryTableRefresh </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public QueryTableRefresh QueryTableRefresh
    {
        get => GetElement<QueryTableRefresh>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> QueryTableExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public QueryTableExtensionList QueryTableExtensionList
    {
        get => GetElement<QueryTableExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTable>(deep);

}
/// <summary>
/// <para>Shared String Table. The root element of SharedStringTablePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SharedStringItem &lt;x:si></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(SharedStringItem))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "sst")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SharedStringTable : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11101;
    /// <inheritdoc/>
    public override string LocalName => "sst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> String Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Unique String Count.</para>
    /// <para>Represents the following attribute in the schema: uniqueCount </para>
    /// </summary>
    [SchemaAttr(0, "uniqueCount", 1)]
    public UInt32Value UniqueCount { get; set; }

    
	internal SharedStringTable(SharedStringTablePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the SharedStringTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(SharedStringTablePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the SharedStringTablePart associated with this element.
    /// </summary>
    public SharedStringTablePart SharedStringTablePart
    {
		get => OpenXmlPart as SharedStringTablePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the SharedStringTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedStringTable(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedStringTable class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedStringTable(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedStringTable class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SharedStringTable(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the SharedStringTable class.
    /// </summary>
    public SharedStringTable():base(){}
    
    /// <summary>
    /// Saves the DOM into the SharedStringTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(SharedStringTablePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SharedStringTable>(deep);

}
/// <summary>
/// <para>Revision Headers. The root element of WorkbookRevisionHeaderPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:headers.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Header &lt;x:header></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Header))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "headers")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Headers : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11102;
    /// <inheritdoc/>
    public override string LocalName => "headers";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Last Revision GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> Last GUID.</para>
    /// <para>Represents the following attribute in the schema: lastGuid </para>
    /// </summary>
    [SchemaAttr(0, "lastGuid", 1)]
    public StringValue LastGuid { get; set; }
    /// <summary>
    /// <para> Shared Workbook.</para>
    /// <para>Represents the following attribute in the schema: shared </para>
    /// </summary>
    [SchemaAttr(0, "shared", 2)]
    public BooleanValue Shared { get; set; }
    /// <summary>
    /// <para> Disk Revisions.</para>
    /// <para>Represents the following attribute in the schema: diskRevisions </para>
    /// </summary>
    [SchemaAttr(0, "diskRevisions", 3)]
    public BooleanValue DiskRevisions { get; set; }
    /// <summary>
    /// <para> History.</para>
    /// <para>Represents the following attribute in the schema: history </para>
    /// </summary>
    [SchemaAttr(0, "history", 4)]
    public BooleanValue History { get; set; }
    /// <summary>
    /// <para> Track Revisions.</para>
    /// <para>Represents the following attribute in the schema: trackRevisions </para>
    /// </summary>
    [SchemaAttr(0, "trackRevisions", 5)]
    public BooleanValue TrackRevisions { get; set; }
    /// <summary>
    /// <para> Exclusive Mode.</para>
    /// <para>Represents the following attribute in the schema: exclusive </para>
    /// </summary>
    [SchemaAttr(0, "exclusive", 6)]
    public BooleanValue Exclusive { get; set; }
    /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: revisionId </para>
    /// </summary>
    [SchemaAttr(0, "revisionId", 7)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Version.</para>
    /// <para>Represents the following attribute in the schema: version </para>
    /// </summary>
    [SchemaAttr(0, "version", 8)]
    public Int32Value Version { get; set; }
    /// <summary>
    /// <para> Keep Change History.</para>
    /// <para>Represents the following attribute in the schema: keepChangeHistory </para>
    /// </summary>
    [SchemaAttr(0, "keepChangeHistory", 9)]
    public BooleanValue KeepChangeHistory { get; set; }
    /// <summary>
    /// <para> Protected.</para>
    /// <para>Represents the following attribute in the schema: protected </para>
    /// </summary>
    [SchemaAttr(0, "protected", 10)]
    public BooleanValue Protected { get; set; }
    /// <summary>
    /// <para> Preserve History.</para>
    /// <para>Represents the following attribute in the schema: preserveHistory </para>
    /// </summary>
    [SchemaAttr(0, "preserveHistory", 11)]
    public UInt32Value PreserveHistory { get; set; }

    
	internal Headers(WorkbookRevisionHeaderPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorkbookRevisionHeaderPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorkbookRevisionHeaderPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorkbookRevisionHeaderPart associated with this element.
    /// </summary>
    public WorkbookRevisionHeaderPart WorkbookRevisionHeaderPart
    {
		get => OpenXmlPart as WorkbookRevisionHeaderPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Headers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Headers(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Headers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Headers(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Headers class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Headers(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Headers class.
    /// </summary>
    public Headers():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorkbookRevisionHeaderPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorkbookRevisionHeaderPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Headers>(deep);

}
/// <summary>
/// <para>Revisions. The root element of WorkbookRevisionLogPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:revisions.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RevisionRowColumn &lt;x:rrc></description></item>
///<item><description>RevisionMove &lt;x:rm></description></item>
///<item><description>RevisionCustomView &lt;x:rcv></description></item>
///<item><description>RevisionSheetName &lt;x:rsnm></description></item>
///<item><description>RevisionInsertSheet &lt;x:ris></description></item>
///<item><description>RevisionCellChange &lt;x:rcc></description></item>
///<item><description>RevisionFormat &lt;x:rfmt></description></item>
///<item><description>RevisionAutoFormat &lt;x:raf></description></item>
///<item><description>RevisionDefinedName &lt;x:rdn></description></item>
///<item><description>RevisionComment &lt;x:rcmt></description></item>
///<item><description>RevisionQueryTable &lt;x:rqt></description></item>
///<item><description>RevisionConflict &lt;x:rcft></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(RevisionRowColumn))]
    [ChildElementInfo(typeof(RevisionMove))]
    [ChildElementInfo(typeof(RevisionCustomView))]
    [ChildElementInfo(typeof(RevisionSheetName))]
    [ChildElementInfo(typeof(RevisionInsertSheet))]
    [ChildElementInfo(typeof(RevisionCellChange))]
    [ChildElementInfo(typeof(RevisionFormat))]
    [ChildElementInfo(typeof(RevisionAutoFormat))]
    [ChildElementInfo(typeof(RevisionDefinedName))]
    [ChildElementInfo(typeof(RevisionComment))]
    [ChildElementInfo(typeof(RevisionQueryTable))]
    [ChildElementInfo(typeof(RevisionConflict))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "revisions")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Revisions : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11103;
    /// <inheritdoc/>
    public override string LocalName => "revisions";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Revisions(WorkbookRevisionLogPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorkbookRevisionLogPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorkbookRevisionLogPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorkbookRevisionLogPart associated with this element.
    /// </summary>
    public WorkbookRevisionLogPart WorkbookRevisionLogPart
    {
		get => OpenXmlPart as WorkbookRevisionLogPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Revisions class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Revisions(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Revisions class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Revisions(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Revisions class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Revisions(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Revisions class.
    /// </summary>
    public Revisions():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorkbookRevisionLogPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorkbookRevisionLogPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Revisions>(deep);

}
/// <summary>
/// <para>User List. The root element of WorkbookUserDataPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:users.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>UserInfo &lt;x:userInfo></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(UserInfo))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "users")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Users : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11104;
    /// <inheritdoc/>
    public override string LocalName => "users";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Active User Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    
	internal Users(WorkbookUserDataPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorkbookUserDataPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorkbookUserDataPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorkbookUserDataPart associated with this element.
    /// </summary>
    public WorkbookUserDataPart WorkbookUserDataPart
    {
		get => OpenXmlPart as WorkbookUserDataPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Users class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Users(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Users class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Users(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Users class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Users(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Users class.
    /// </summary>
    public Users():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorkbookUserDataPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorkbookUserDataPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Users>(deep);

}
/// <summary>
/// <para>Worksheet. The root element of WorksheetPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:worksheet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetProperties &lt;x:sheetPr></description></item>
///<item><description>SheetDimension &lt;x:dimension></description></item>
///<item><description>SheetViews &lt;x:sheetViews></description></item>
///<item><description>SheetFormatProperties &lt;x:sheetFormatPr></description></item>
///<item><description>Columns &lt;x:cols></description></item>
///<item><description>SheetData &lt;x:sheetData></description></item>
///<item><description>SheetCalculationProperties &lt;x:sheetCalcPr></description></item>
///<item><description>SheetProtection &lt;x:sheetProtection></description></item>
///<item><description>ProtectedRanges &lt;x:protectedRanges></description></item>
///<item><description>Scenarios &lt;x:scenarios></description></item>
///<item><description>AutoFilter &lt;x:autoFilter></description></item>
///<item><description>SortState &lt;x:sortState></description></item>
///<item><description>DataConsolidate &lt;x:dataConsolidate></description></item>
///<item><description>CustomSheetViews &lt;x:customSheetViews></description></item>
///<item><description>MergeCells &lt;x:mergeCells></description></item>
///<item><description>PhoneticProperties &lt;x:phoneticPr></description></item>
///<item><description>ConditionalFormatting &lt;x:conditionalFormatting></description></item>
///<item><description>DataValidations &lt;x:dataValidations></description></item>
///<item><description>Hyperlinks &lt;x:hyperlinks></description></item>
///<item><description>PrintOptions &lt;x:printOptions></description></item>
///<item><description>PageMargins &lt;x:pageMargins></description></item>
///<item><description>PageSetup &lt;x:pageSetup></description></item>
///<item><description>HeaderFooter &lt;x:headerFooter></description></item>
///<item><description>RowBreaks &lt;x:rowBreaks></description></item>
///<item><description>ColumnBreaks &lt;x:colBreaks></description></item>
///<item><description>CustomProperties &lt;x:customProperties></description></item>
///<item><description>CellWatches &lt;x:cellWatches></description></item>
///<item><description>IgnoredErrors &lt;x:ignoredErrors></description></item>
///<item><description>Drawing &lt;x:drawing></description></item>
///<item><description>LegacyDrawing &lt;x:legacyDrawing></description></item>
///<item><description>LegacyDrawingHeaderFooter &lt;x:legacyDrawingHF></description></item>
///<item><description>DrawingHeaderFooter &lt;x:drawingHF></description></item>
///<item><description>Picture &lt;x:picture></description></item>
///<item><description>OleObjects &lt;x:oleObjects></description></item>
///<item><description>Controls &lt;x:controls></description></item>
///<item><description>WebPublishItems &lt;x:webPublishItems></description></item>
///<item><description>TableParts &lt;x:tableParts></description></item>
///<item><description>WorksheetExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(SheetProperties))]
    [ChildElementInfo(typeof(SheetDimension))]
    [ChildElementInfo(typeof(SheetViews))]
    [ChildElementInfo(typeof(SheetFormatProperties))]
    [ChildElementInfo(typeof(Columns))]
    [ChildElementInfo(typeof(SheetData))]
    [ChildElementInfo(typeof(SheetCalculationProperties))]
    [ChildElementInfo(typeof(SheetProtection))]
    [ChildElementInfo(typeof(ProtectedRanges))]
    [ChildElementInfo(typeof(Scenarios))]
    [ChildElementInfo(typeof(AutoFilter))]
    [ChildElementInfo(typeof(SortState))]
    [ChildElementInfo(typeof(DataConsolidate))]
    [ChildElementInfo(typeof(CustomSheetViews))]
    [ChildElementInfo(typeof(MergeCells))]
    [ChildElementInfo(typeof(PhoneticProperties))]
    [ChildElementInfo(typeof(ConditionalFormatting))]
    [ChildElementInfo(typeof(DataValidations))]
    [ChildElementInfo(typeof(Hyperlinks))]
    [ChildElementInfo(typeof(PrintOptions))]
    [ChildElementInfo(typeof(PageMargins))]
    [ChildElementInfo(typeof(PageSetup))]
    [ChildElementInfo(typeof(HeaderFooter))]
    [ChildElementInfo(typeof(RowBreaks))]
    [ChildElementInfo(typeof(ColumnBreaks))]
    [ChildElementInfo(typeof(CustomProperties))]
    [ChildElementInfo(typeof(CellWatches))]
    [ChildElementInfo(typeof(IgnoredErrors))]
    [ChildElementInfo(typeof(Drawing))]
    [ChildElementInfo(typeof(LegacyDrawing))]
    [ChildElementInfo(typeof(LegacyDrawingHeaderFooter))]
    [ChildElementInfo(typeof(DrawingHeaderFooter))]
    [ChildElementInfo(typeof(Picture))]
    [ChildElementInfo(typeof(OleObjects))]
    [ChildElementInfo(typeof(Controls))]
    [ChildElementInfo(typeof(WebPublishItems))]
    [ChildElementInfo(typeof(TableParts))]
    [ChildElementInfo(typeof(WorksheetExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "worksheet")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Worksheet : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11105;
    /// <inheritdoc/>
    public override string LocalName => "worksheet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Worksheet(WorksheetPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorksheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorksheetPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorksheetPart associated with this element.
    /// </summary>
    public WorksheetPart WorksheetPart
    {
		get => OpenXmlPart as WorksheetPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Worksheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Worksheet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Worksheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Worksheet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Worksheet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Worksheet(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Worksheet class.
    /// </summary>
    public Worksheet():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorksheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorksheetPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "sheetPr","dimension","sheetViews","sheetFormatPr","cols","sheetData","sheetCalcPr","sheetProtection","protectedRanges","scenarios","autoFilter","sortState","dataConsolidate","customSheetViews","mergeCells","phoneticPr","conditionalFormatting","dataValidations","hyperlinks","printOptions","pageMargins","pageSetup","headerFooter","rowBreaks","colBreaks","customProperties","cellWatches","ignoredErrors","drawing","legacyDrawing","legacyDrawingHF","drawingHF","picture","oleObjects","controls","webPublishItems","tableParts","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> SheetProperties.</para>
    /// <para> Represents the following element tag in the schema: x:sheetPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetProperties SheetProperties
    {
        get => GetElement<SheetProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> SheetDimension.</para>
    /// <para> Represents the following element tag in the schema: x:dimension </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetDimension SheetDimension
    {
        get => GetElement<SheetDimension>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> SheetViews.</para>
    /// <para> Represents the following element tag in the schema: x:sheetViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetViews SheetViews
    {
        get => GetElement<SheetViews>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> SheetFormatProperties.</para>
    /// <para> Represents the following element tag in the schema: x:sheetFormatPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetFormatProperties SheetFormatProperties
    {
        get => GetElement<SheetFormatProperties>(3);
        set => SetElement(3, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Worksheet>(deep);

}
/// <summary>
/// <para>Chart Sheet. The root element of ChartsheetPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:chartsheet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ChartSheetProperties &lt;x:sheetPr></description></item>
///<item><description>ChartSheetViews &lt;x:sheetViews></description></item>
///<item><description>ChartSheetProtection &lt;x:sheetProtection></description></item>
///<item><description>CustomChartsheetViews &lt;x:customSheetViews></description></item>
///<item><description>PageMargins &lt;x:pageMargins></description></item>
///<item><description>ChartSheetPageSetup &lt;x:pageSetup></description></item>
///<item><description>HeaderFooter &lt;x:headerFooter></description></item>
///<item><description>Drawing &lt;x:drawing></description></item>
///<item><description>LegacyDrawing &lt;x:legacyDrawing></description></item>
///<item><description>LegacyDrawingHeaderFooter &lt;x:legacyDrawingHF></description></item>
///<item><description>DrawingHeaderFooter &lt;x:drawingHF></description></item>
///<item><description>Picture &lt;x:picture></description></item>
///<item><description>WebPublishItems &lt;x:webPublishItems></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(ChartSheetProperties))]
    [ChildElementInfo(typeof(ChartSheetViews))]
    [ChildElementInfo(typeof(ChartSheetProtection))]
    [ChildElementInfo(typeof(CustomChartsheetViews))]
    [ChildElementInfo(typeof(PageMargins))]
    [ChildElementInfo(typeof(ChartSheetPageSetup))]
    [ChildElementInfo(typeof(HeaderFooter))]
    [ChildElementInfo(typeof(Drawing))]
    [ChildElementInfo(typeof(LegacyDrawing))]
    [ChildElementInfo(typeof(LegacyDrawingHeaderFooter))]
    [ChildElementInfo(typeof(DrawingHeaderFooter), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(Picture))]
    [ChildElementInfo(typeof(WebPublishItems))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "chartsheet")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Chartsheet : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11106;
    /// <inheritdoc/>
    public override string LocalName => "chartsheet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Chartsheet(ChartsheetPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the ChartsheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(ChartsheetPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the ChartsheetPart associated with this element.
    /// </summary>
    public ChartsheetPart ChartsheetPart
    {
		get => OpenXmlPart as ChartsheetPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Chartsheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Chartsheet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Chartsheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Chartsheet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Chartsheet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Chartsheet(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Chartsheet class.
    /// </summary>
    public Chartsheet():base(){}
    
    /// <summary>
    /// Saves the DOM into the ChartsheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(ChartsheetPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "sheetPr","sheetViews","sheetProtection","customSheetViews","pageMargins","pageSetup","headerFooter","drawing","legacyDrawing","legacyDrawingHF","drawingHF","picture","webPublishItems","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Chart Sheet Properties.</para>
    /// <para> Represents the following element tag in the schema: x:sheetPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartSheetProperties ChartSheetProperties
    {
        get => GetElement<ChartSheetProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Chart Sheet Views.</para>
    /// <para> Represents the following element tag in the schema: x:sheetViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartSheetViews ChartSheetViews
    {
        get => GetElement<ChartSheetViews>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Chart Sheet Protection.</para>
    /// <para> Represents the following element tag in the schema: x:sheetProtection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartSheetProtection ChartSheetProtection
    {
        get => GetElement<ChartSheetProtection>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Custom Chart Sheet Views.</para>
    /// <para> Represents the following element tag in the schema: x:customSheetViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CustomChartsheetViews CustomChartsheetViews
    {
        get => GetElement<CustomChartsheetViews>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> PageMargins.</para>
    /// <para> Represents the following element tag in the schema: x:pageMargins </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageMargins PageMargins
    {
        get => GetElement<PageMargins>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> ChartSheetPageSetup.</para>
    /// <para> Represents the following element tag in the schema: x:pageSetup </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartSheetPageSetup ChartSheetPageSetup
    {
        get => GetElement<ChartSheetPageSetup>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> HeaderFooter.</para>
    /// <para> Represents the following element tag in the schema: x:headerFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public HeaderFooter HeaderFooter
    {
        get => GetElement<HeaderFooter>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Drawing.</para>
    /// <para> Represents the following element tag in the schema: x:drawing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Drawing Drawing
    {
        get => GetElement<Drawing>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> LegacyDrawing.</para>
    /// <para> Represents the following element tag in the schema: x:legacyDrawing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public LegacyDrawing LegacyDrawing
    {
        get => GetElement<LegacyDrawing>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> Legacy Drawing Reference in  Header Footer.</para>
    /// <para> Represents the following element tag in the schema: x:legacyDrawingHF </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public LegacyDrawingHeaderFooter LegacyDrawingHeaderFooter
    {
        get => GetElement<LegacyDrawingHeaderFooter>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> DrawingHeaderFooter.</para>
    /// <para> Represents the following element tag in the schema: x:drawingHF </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DrawingHeaderFooter DrawingHeaderFooter
    {
        get => GetElement<DrawingHeaderFooter>(10);
        set => SetElement(10, value);
    }
    
    /// <summary>
    /// <para> Picture.</para>
    /// <para> Represents the following element tag in the schema: x:picture </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Picture Picture
    {
        get => GetElement<Picture>(11);
        set => SetElement(11, value);
    }
    
    /// <summary>
    /// <para> WebPublishItems.</para>
    /// <para> Represents the following element tag in the schema: x:webPublishItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WebPublishItems WebPublishItems
    {
        get => GetElement<WebPublishItems>(12);
        set => SetElement(12, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(13);
        set => SetElement(13, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Chartsheet>(deep);

}
/// <summary>
/// <para>Dialog Sheet. The root element of DialogsheetPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dialogsheet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetProperties &lt;x:sheetPr></description></item>
///<item><description>SheetViews &lt;x:sheetViews></description></item>
///<item><description>SheetFormatProperties &lt;x:sheetFormatPr></description></item>
///<item><description>SheetProtection &lt;x:sheetProtection></description></item>
///<item><description>CustomSheetViews &lt;x:customSheetViews></description></item>
///<item><description>PrintOptions &lt;x:printOptions></description></item>
///<item><description>PageMargins &lt;x:pageMargins></description></item>
///<item><description>PageSetup &lt;x:pageSetup></description></item>
///<item><description>HeaderFooter &lt;x:headerFooter></description></item>
///<item><description>Drawing &lt;x:drawing></description></item>
///<item><description>LegacyDrawing &lt;x:legacyDrawing></description></item>
///<item><description>LegacyDrawingHeaderFooter &lt;x:legacyDrawingHF></description></item>
///<item><description>DrawingHeaderFooter &lt;x:drawingHF></description></item>
///<item><description>OleObjects &lt;x:oleObjects></description></item>
///<item><description>Controls &lt;x:controls></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(SheetProperties))]
    [ChildElementInfo(typeof(SheetViews))]
    [ChildElementInfo(typeof(SheetFormatProperties))]
    [ChildElementInfo(typeof(SheetProtection))]
    [ChildElementInfo(typeof(CustomSheetViews))]
    [ChildElementInfo(typeof(PrintOptions))]
    [ChildElementInfo(typeof(PageMargins))]
    [ChildElementInfo(typeof(PageSetup))]
    [ChildElementInfo(typeof(HeaderFooter))]
    [ChildElementInfo(typeof(Drawing))]
    [ChildElementInfo(typeof(LegacyDrawing))]
    [ChildElementInfo(typeof(LegacyDrawingHeaderFooter))]
    [ChildElementInfo(typeof(DrawingHeaderFooter), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(OleObjects))]
    [ChildElementInfo(typeof(Controls), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "dialogsheet")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DialogSheet : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11107;
    /// <inheritdoc/>
    public override string LocalName => "dialogsheet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal DialogSheet(DialogsheetPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the DialogsheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(DialogsheetPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the DialogsheetPart associated with this element.
    /// </summary>
    public DialogsheetPart DialogsheetPart
    {
		get => OpenXmlPart as DialogsheetPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the DialogSheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DialogSheet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DialogSheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DialogSheet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DialogSheet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DialogSheet(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the DialogSheet class.
    /// </summary>
    public DialogSheet():base(){}
    
    /// <summary>
    /// Saves the DOM into the DialogsheetPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(DialogsheetPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "sheetPr","sheetViews","sheetFormatPr","sheetProtection","customSheetViews","printOptions","pageMargins","pageSetup","headerFooter","drawing","legacyDrawing","legacyDrawingHF","drawingHF","oleObjects","controls","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Sheet Properties.</para>
    /// <para> Represents the following element tag in the schema: x:sheetPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetProperties SheetProperties
    {
        get => GetElement<SheetProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Dialog Sheet Views.</para>
    /// <para> Represents the following element tag in the schema: x:sheetViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetViews SheetViews
    {
        get => GetElement<SheetViews>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Dialog Sheet Format Properties.</para>
    /// <para> Represents the following element tag in the schema: x:sheetFormatPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetFormatProperties SheetFormatProperties
    {
        get => GetElement<SheetFormatProperties>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Sheet Protection.</para>
    /// <para> Represents the following element tag in the schema: x:sheetProtection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetProtection SheetProtection
    {
        get => GetElement<SheetProtection>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Custom Sheet Views.</para>
    /// <para> Represents the following element tag in the schema: x:customSheetViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CustomSheetViews CustomSheetViews
    {
        get => GetElement<CustomSheetViews>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Print Options.</para>
    /// <para> Represents the following element tag in the schema: x:printOptions </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PrintOptions PrintOptions
    {
        get => GetElement<PrintOptions>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Page Margins.</para>
    /// <para> Represents the following element tag in the schema: x:pageMargins </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageMargins PageMargins
    {
        get => GetElement<PageMargins>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Page Setup Settings.</para>
    /// <para> Represents the following element tag in the schema: x:pageSetup </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageSetup PageSetup
    {
        get => GetElement<PageSetup>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> Header and Footer Settings.</para>
    /// <para> Represents the following element tag in the schema: x:headerFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public HeaderFooter HeaderFooter
    {
        get => GetElement<HeaderFooter>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> Drawing.</para>
    /// <para> Represents the following element tag in the schema: x:drawing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Drawing Drawing
    {
        get => GetElement<Drawing>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> Legacy Drawing.</para>
    /// <para> Represents the following element tag in the schema: x:legacyDrawing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public LegacyDrawing LegacyDrawing
    {
        get => GetElement<LegacyDrawing>(10);
        set => SetElement(10, value);
    }
    
    /// <summary>
    /// <para> Legacy Drawing Header Footer.</para>
    /// <para> Represents the following element tag in the schema: x:legacyDrawingHF </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public LegacyDrawingHeaderFooter LegacyDrawingHeaderFooter
    {
        get => GetElement<LegacyDrawingHeaderFooter>(11);
        set => SetElement(11, value);
    }
    
    /// <summary>
    /// <para> DrawingHeaderFooter.</para>
    /// <para> Represents the following element tag in the schema: x:drawingHF </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DrawingHeaderFooter DrawingHeaderFooter
    {
        get => GetElement<DrawingHeaderFooter>(12);
        set => SetElement(12, value);
    }
    
    /// <summary>
    /// <para> OleObjects.</para>
    /// <para> Represents the following element tag in the schema: x:oleObjects </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OleObjects OleObjects
    {
        get => GetElement<OleObjects>(13);
        set => SetElement(13, value);
    }
    
    /// <summary>
    /// <para> Controls.</para>
    /// <para> Represents the following element tag in the schema: x:controls </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Controls Controls
    {
        get => GetElement<Controls>(14);
        set => SetElement(14, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(15);
        set => SetElement(15, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DialogSheet>(deep);

}
/// <summary>
/// <para>Metadata. The root element of CellMetadataPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:metadata.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataTypes &lt;x:metadataTypes></description></item>
///<item><description>MetadataStrings &lt;x:metadataStrings></description></item>
///<item><description>MdxMetadata &lt;x:mdxMetadata></description></item>
///<item><description>FutureMetadata &lt;x:futureMetadata></description></item>
///<item><description>CellMetadata &lt;x:cellMetadata></description></item>
///<item><description>ValueMetadata &lt;x:valueMetadata></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(MetadataTypes))]
    [ChildElementInfo(typeof(MetadataStrings))]
    [ChildElementInfo(typeof(MdxMetadata))]
    [ChildElementInfo(typeof(FutureMetadata))]
    [ChildElementInfo(typeof(CellMetadata))]
    [ChildElementInfo(typeof(ValueMetadata))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "metadata")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Metadata : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11108;
    /// <inheritdoc/>
    public override string LocalName => "metadata";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Metadata(CellMetadataPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the CellMetadataPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(CellMetadataPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the CellMetadataPart associated with this element.
    /// </summary>
    public CellMetadataPart CellMetadataPart
    {
		get => OpenXmlPart as CellMetadataPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Metadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Metadata(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Metadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Metadata(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Metadata class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Metadata(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Metadata class.
    /// </summary>
    public Metadata():base(){}
    
    /// <summary>
    /// Saves the DOM into the CellMetadataPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(CellMetadataPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "metadataTypes","metadataStrings","mdxMetadata","futureMetadata","cellMetadata","valueMetadata","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Metadata Types Collection.</para>
    /// <para> Represents the following element tag in the schema: x:metadataTypes </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MetadataTypes MetadataTypes
    {
        get => GetElement<MetadataTypes>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Metadata String Store.</para>
    /// <para> Represents the following element tag in the schema: x:metadataStrings </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MetadataStrings MetadataStrings
    {
        get => GetElement<MetadataStrings>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> MDX Metadata Information.</para>
    /// <para> Represents the following element tag in the schema: x:mdxMetadata </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MdxMetadata MdxMetadata
    {
        get => GetElement<MdxMetadata>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Metadata>(deep);

}
/// <summary>
/// <para>Single Cells. The root element of SingleCellTablePart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:singleXmlCells.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SingleXmlCell &lt;x:singleXmlCell></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(SingleXmlCell))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "singleXmlCells")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SingleXmlCells : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11109;
    /// <inheritdoc/>
    public override string LocalName => "singleXmlCells";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal SingleXmlCells(SingleCellTablePart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the SingleCellTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(SingleCellTablePart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the SingleCellTablePart associated with this element.
    /// </summary>
    public SingleCellTablePart SingleCellTablePart
    {
		get => OpenXmlPart as SingleCellTablePart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the SingleXmlCells class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SingleXmlCells(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SingleXmlCells class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SingleXmlCells(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SingleXmlCells class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SingleXmlCells(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the SingleXmlCells class.
    /// </summary>
    public SingleXmlCells():base(){}
    
    /// <summary>
    /// Saves the DOM into the SingleCellTablePart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(SingleCellTablePart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SingleXmlCells>(deep);

}
/// <summary>
/// <para>Style Sheet. The root element of WorkbookStylesPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:styleSheet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NumberingFormats &lt;x:numFmts></description></item>
///<item><description>Fonts &lt;x:fonts></description></item>
///<item><description>Fills &lt;x:fills></description></item>
///<item><description>Borders &lt;x:borders></description></item>
///<item><description>CellStyleFormats &lt;x:cellStyleXfs></description></item>
///<item><description>CellFormats &lt;x:cellXfs></description></item>
///<item><description>CellStyles &lt;x:cellStyles></description></item>
///<item><description>DifferentialFormats &lt;x:dxfs></description></item>
///<item><description>TableStyles &lt;x:tableStyles></description></item>
///<item><description>Colors &lt;x:colors></description></item>
///<item><description>StylesheetExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(NumberingFormats))]
    [ChildElementInfo(typeof(Fonts))]
    [ChildElementInfo(typeof(Fills))]
    [ChildElementInfo(typeof(Borders))]
    [ChildElementInfo(typeof(CellStyleFormats))]
    [ChildElementInfo(typeof(CellFormats))]
    [ChildElementInfo(typeof(CellStyles))]
    [ChildElementInfo(typeof(DifferentialFormats))]
    [ChildElementInfo(typeof(TableStyles))]
    [ChildElementInfo(typeof(Colors))]
    [ChildElementInfo(typeof(StylesheetExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "styleSheet")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Stylesheet : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11110;
    /// <inheritdoc/>
    public override string LocalName => "styleSheet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal Stylesheet(WorkbookStylesPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorkbookStylesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorkbookStylesPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorkbookStylesPart associated with this element.
    /// </summary>
    public WorkbookStylesPart WorkbookStylesPart
    {
		get => OpenXmlPart as WorkbookStylesPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Stylesheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Stylesheet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Stylesheet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Stylesheet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Stylesheet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Stylesheet(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Stylesheet class.
    /// </summary>
    public Stylesheet():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorkbookStylesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorkbookStylesPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "numFmts","fonts","fills","borders","cellStyleXfs","cellXfs","cellStyles","dxfs","tableStyles","colors","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> NumberingFormats.</para>
    /// <para> Represents the following element tag in the schema: x:numFmts </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public NumberingFormats NumberingFormats
    {
        get => GetElement<NumberingFormats>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Fonts.</para>
    /// <para> Represents the following element tag in the schema: x:fonts </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Fonts Fonts
    {
        get => GetElement<Fonts>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Fills.</para>
    /// <para> Represents the following element tag in the schema: x:fills </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Fills Fills
    {
        get => GetElement<Fills>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Borders.</para>
    /// <para> Represents the following element tag in the schema: x:borders </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Borders Borders
    {
        get => GetElement<Borders>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> CellStyleFormats.</para>
    /// <para> Represents the following element tag in the schema: x:cellStyleXfs </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellStyleFormats CellStyleFormats
    {
        get => GetElement<CellStyleFormats>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> CellFormats.</para>
    /// <para> Represents the following element tag in the schema: x:cellXfs </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellFormats CellFormats
    {
        get => GetElement<CellFormats>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> CellStyles.</para>
    /// <para> Represents the following element tag in the schema: x:cellStyles </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellStyles CellStyles
    {
        get => GetElement<CellStyles>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> DifferentialFormats.</para>
    /// <para> Represents the following element tag in the schema: x:dxfs </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DifferentialFormats DifferentialFormats
    {
        get => GetElement<DifferentialFormats>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> TableStyles.</para>
    /// <para> Represents the following element tag in the schema: x:tableStyles </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TableStyles TableStyles
    {
        get => GetElement<TableStyles>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> Colors.</para>
    /// <para> Represents the following element tag in the schema: x:colors </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Colors Colors
    {
        get => GetElement<Colors>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> StylesheetExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public StylesheetExtensionList StylesheetExtensionList
    {
        get => GetElement<StylesheetExtensionList>(10);
        set => SetElement(10, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Stylesheet>(deep);

}
/// <summary>
/// <para>External Reference. The root element of ExternalWorkbookPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:externalLink.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalBook &lt;x:externalBook></description></item>
///<item><description>DdeLink &lt;x:ddeLink></description></item>
///<item><description>OleLink &lt;x:oleLink></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(ExternalBook))]
    [ChildElementInfo(typeof(DdeLink))]
    [ChildElementInfo(typeof(OleLink))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "externalLink")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ExternalLink : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11111;
    /// <inheritdoc/>
    public override string LocalName => "externalLink";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal ExternalLink(ExternalWorkbookPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the ExternalWorkbookPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(ExternalWorkbookPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the ExternalWorkbookPart associated with this element.
    /// </summary>
    public ExternalWorkbookPart ExternalWorkbookPart
    {
		get => OpenXmlPart as ExternalWorkbookPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the ExternalLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalLink(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalLink(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalLink class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalLink(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the ExternalLink class.
    /// </summary>
    public ExternalLink():base(){}
    
    /// <summary>
    /// Saves the DOM into the ExternalWorkbookPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(ExternalWorkbookPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalLink>(deep);

}
/// <summary>
/// <para>Table. The root element of TableDefinitionPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:table.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AutoFilter &lt;x:autoFilter></description></item>
///<item><description>SortState &lt;x:sortState></description></item>
///<item><description>TableColumns &lt;x:tableColumns></description></item>
///<item><description>TableStyleInfo &lt;x:tableStyleInfo></description></item>
///<item><description>TableExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(AutoFilter))]
    [ChildElementInfo(typeof(SortState))]
    [ChildElementInfo(typeof(TableColumns))]
    [ChildElementInfo(typeof(TableStyleInfo))]
    [ChildElementInfo(typeof(TableExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "table")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Table : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11112;
    /// <inheritdoc/>
    public override string LocalName => "table";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Table Name.</para>
    /// <para>Represents the following attribute in the schema: displayName </para>
    /// </summary>
    [SchemaAttr(0, "displayName", 2)]
    public StringValue DisplayName { get; set; }
    /// <summary>
    /// <para> Table Comment.</para>
    /// <para>Represents the following attribute in the schema: comment </para>
    /// </summary>
    [SchemaAttr(0, "comment", 3)]
    public StringValue Comment { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 4)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Table Type.</para>
    /// <para>Represents the following attribute in the schema: tableType </para>
    /// </summary>
    [SchemaAttr(0, "tableType", 5)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TableValues> TableType { get; set; }
    /// <summary>
    /// <para> Header Row Count.</para>
    /// <para>Represents the following attribute in the schema: headerRowCount </para>
    /// </summary>
    [SchemaAttr(0, "headerRowCount", 6)]
    public UInt32Value HeaderRowCount { get; set; }
    /// <summary>
    /// <para> Insert Row Showing.</para>
    /// <para>Represents the following attribute in the schema: insertRow </para>
    /// </summary>
    [SchemaAttr(0, "insertRow", 7)]
    public BooleanValue InsertRow { get; set; }
    /// <summary>
    /// <para> Insert Row Shift.</para>
    /// <para>Represents the following attribute in the schema: insertRowShift </para>
    /// </summary>
    [SchemaAttr(0, "insertRowShift", 8)]
    public BooleanValue InsertRowShift { get; set; }
    /// <summary>
    /// <para> Totals Row Count.</para>
    /// <para>Represents the following attribute in the schema: totalsRowCount </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowCount", 9)]
    public UInt32Value TotalsRowCount { get; set; }
    /// <summary>
    /// <para> Totals Row Shown.</para>
    /// <para>Represents the following attribute in the schema: totalsRowShown </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowShown", 10)]
    public BooleanValue TotalsRowShown { get; set; }
    /// <summary>
    /// <para> Published.</para>
    /// <para>Represents the following attribute in the schema: published </para>
    /// </summary>
    [SchemaAttr(0, "published", 11)]
    public BooleanValue Published { get; set; }
    /// <summary>
    /// <para> Header Row Format Id.</para>
    /// <para>Represents the following attribute in the schema: headerRowDxfId </para>
    /// </summary>
    [SchemaAttr(0, "headerRowDxfId", 12)]
    public UInt32Value HeaderRowFormatId { get; set; }
    /// <summary>
    /// <para> Data Area Format Id.</para>
    /// <para>Represents the following attribute in the schema: dataDxfId </para>
    /// </summary>
    [SchemaAttr(0, "dataDxfId", 13)]
    public UInt32Value DataFormatId { get; set; }
    /// <summary>
    /// <para> Totals Row Format Id.</para>
    /// <para>Represents the following attribute in the schema: totalsRowDxfId </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowDxfId", 14)]
    public UInt32Value TotalsRowFormatId { get; set; }
    /// <summary>
    /// <para> Header Row Border Format Id.</para>
    /// <para>Represents the following attribute in the schema: headerRowBorderDxfId </para>
    /// </summary>
    [SchemaAttr(0, "headerRowBorderDxfId", 15)]
    public UInt32Value HeaderRowBorderFormatId { get; set; }
    /// <summary>
    /// <para> Table Border Format Id.</para>
    /// <para>Represents the following attribute in the schema: tableBorderDxfId </para>
    /// </summary>
    [SchemaAttr(0, "tableBorderDxfId", 16)]
    public UInt32Value BorderFormatId { get; set; }
    /// <summary>
    /// <para> Totals Row Border Format Id.</para>
    /// <para>Represents the following attribute in the schema: totalsRowBorderDxfId </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowBorderDxfId", 17)]
    public UInt32Value TotalsRowBorderFormatId { get; set; }
    /// <summary>
    /// <para> Header Row Style.</para>
    /// <para>Represents the following attribute in the schema: headerRowCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "headerRowCellStyle", 18)]
    public StringValue HeaderRowCellStyle { get; set; }
    /// <summary>
    /// <para> Data Style Name.</para>
    /// <para>Represents the following attribute in the schema: dataCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "dataCellStyle", 19)]
    public StringValue DataCellStyle { get; set; }
    /// <summary>
    /// <para> Totals Row Style.</para>
    /// <para>Represents the following attribute in the schema: totalsRowCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowCellStyle", 20)]
    public StringValue TotalsRowCellStyle { get; set; }
    /// <summary>
    /// <para> Connection ID.</para>
    /// <para>Represents the following attribute in the schema: connectionId </para>
    /// </summary>
    [SchemaAttr(0, "connectionId", 21)]
    public UInt32Value ConnectionId { get; set; }

    
	internal Table(TableDefinitionPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the TableDefinitionPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(TableDefinitionPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the TableDefinitionPart associated with this element.
    /// </summary>
    public TableDefinitionPart TableDefinitionPart
    {
		get => OpenXmlPart as TableDefinitionPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Table class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Table(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Table class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Table(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Table class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Table(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Table class.
    /// </summary>
    public Table():base(){}
    
    /// <summary>
    /// Saves the DOM into the TableDefinitionPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(TableDefinitionPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "autoFilter","sortState","tableColumns","tableStyleInfo","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Table AutoFilter.</para>
    /// <para> Represents the following element tag in the schema: x:autoFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public AutoFilter AutoFilter
    {
        get => GetElement<AutoFilter>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Sort State.</para>
    /// <para> Represents the following element tag in the schema: x:sortState </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SortState SortState
    {
        get => GetElement<SortState>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Table Columns.</para>
    /// <para> Represents the following element tag in the schema: x:tableColumns </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TableColumns TableColumns
    {
        get => GetElement<TableColumns>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Table Style.</para>
    /// <para> Represents the following element tag in the schema: x:tableStyleInfo </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TableStyleInfo TableStyleInfo
    {
        get => GetElement<TableStyleInfo>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TableExtensionList TableExtensionList
    {
        get => GetElement<TableExtensionList>(4);
        set => SetElement(4, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);

}
/// <summary>
/// <para>Volatile Dependency Types. The root element of VolatileDependenciesPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:volTypes.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>VolatileType &lt;x:volType></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(VolatileType))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "volTypes")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class VolatileTypes : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11113;
    /// <inheritdoc/>
    public override string LocalName => "volTypes";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    
	internal VolatileTypes(VolatileDependenciesPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the VolatileDependenciesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(VolatileDependenciesPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the VolatileDependenciesPart associated with this element.
    /// </summary>
    public VolatileDependenciesPart VolatileDependenciesPart
    {
		get => OpenXmlPart as VolatileDependenciesPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the VolatileTypes class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VolatileTypes(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the VolatileTypes class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VolatileTypes(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the VolatileTypes class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public VolatileTypes(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the VolatileTypes class.
    /// </summary>
    public VolatileTypes():base(){}
    
    /// <summary>
    /// Saves the DOM into the VolatileDependenciesPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(VolatileDependenciesPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VolatileTypes>(deep);

}
/// <summary>
/// <para>Workbook. The root element of WorkbookPart.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:workbook.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FileVersion &lt;x:fileVersion></description></item>
///<item><description>FileSharing &lt;x:fileSharing></description></item>
///<item><description>WorkbookProperties &lt;x:workbookPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.ExcelAc.AbsolutePath &lt;x15ac:absPath></description></item>
///<item><description>WorkbookProtection &lt;x:workbookProtection></description></item>
///<item><description>BookViews &lt;x:bookViews></description></item>
///<item><description>Sheets &lt;x:sheets></description></item>
///<item><description>FunctionGroups &lt;x:functionGroups></description></item>
///<item><description>ExternalReferences &lt;x:externalReferences></description></item>
///<item><description>DefinedNames &lt;x:definedNames></description></item>
///<item><description>CalculationProperties &lt;x:calcPr></description></item>
///<item><description>OleSize &lt;x:oleSize></description></item>
///<item><description>CustomWorkbookViews &lt;x:customWorkbookViews></description></item>
///<item><description>PivotCaches &lt;x:pivotCaches></description></item>
///<item><description>WebPublishing &lt;x:webPublishing></description></item>
///<item><description>FileRecoveryProperties &lt;x:fileRecoveryPr></description></item>
///<item><description>WebPublishObjects &lt;x:webPublishObjects></description></item>
///<item><description>WorkbookExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(FileVersion))]
    [ChildElementInfo(typeof(FileSharing))]
    [ChildElementInfo(typeof(WorkbookProperties))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.ExcelAc.AbsolutePath), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(WorkbookProtection))]
    [ChildElementInfo(typeof(BookViews))]
    [ChildElementInfo(typeof(Sheets))]
    [ChildElementInfo(typeof(FunctionGroups))]
    [ChildElementInfo(typeof(ExternalReferences))]
    [ChildElementInfo(typeof(DefinedNames))]
    [ChildElementInfo(typeof(CalculationProperties))]
    [ChildElementInfo(typeof(OleSize))]
    [ChildElementInfo(typeof(CustomWorkbookViews))]
    [ChildElementInfo(typeof(PivotCaches))]
    [ChildElementInfo(typeof(WebPublishing))]
    [ChildElementInfo(typeof(FileRecoveryProperties))]
    [ChildElementInfo(typeof(WebPublishObjects))]
    [ChildElementInfo(typeof(WorkbookExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "workbook")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Workbook : OpenXmlPartRootElement
{
    internal const int ElementTypeIdConst = 11114;
    /// <inheritdoc/>
    public override string LocalName => "workbook";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> conformance.</para>
    /// <para>Represents the following attribute in the schema: conformance </para>
    /// </summary>
    [SchemaAttr(0, "conformance", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ConformanceClass> Conformance { get; set; }

    
	internal Workbook(WorkbookPart ownerPart) : base (ownerPart){}
    
    /// <summary>
    /// Loads the DOM from the WorkbookPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to be loaded.</param>
    public void Load(WorkbookPart openXmlPart)
    {
        LoadFromPart(openXmlPart);
    }
    /// <summary>
    /// Gets the WorkbookPart associated with this element.
    /// </summary>
    public WorkbookPart WorkbookPart
    {
		get => OpenXmlPart as WorkbookPart;
		internal set => OpenXmlPart = value;
    }
    
        /// <summary>
    ///Initializes a new instance of the Workbook class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Workbook(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Workbook class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Workbook(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Workbook class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Workbook(string outerXml)
        : base(outerXml)
    {
    }
    

    
    
    /// <summary>
    /// Initializes a new instance of the Workbook class.
    /// </summary>
    public Workbook():base(){}
    
    /// <summary>
    /// Saves the DOM into the WorkbookPart.
    /// </summary>
    /// <param name="openXmlPart">Specifies the part to save to.</param>
    public void Save(WorkbookPart openXmlPart)
    {
        base.SaveToPart(openXmlPart);
    }
    
    
        private static readonly string[] eleTagNames = { "fileVersion","fileSharing","workbookPr","absPath","workbookProtection","bookViews","sheets","functionGroups","externalReferences","definedNames","calcPr","oleSize","customWorkbookViews","pivotCaches","webPublishing","fileRecoveryPr","webPublishObjects","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,74,22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> FileVersion.</para>
    /// <para> Represents the following element tag in the schema: x:fileVersion </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FileVersion FileVersion
    {
        get => GetElement<FileVersion>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> FileSharing.</para>
    /// <para> Represents the following element tag in the schema: x:fileSharing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FileSharing FileSharing
    {
        get => GetElement<FileSharing>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> WorkbookProperties.</para>
    /// <para> Represents the following element tag in the schema: x:workbookPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WorkbookProperties WorkbookProperties
    {
        get => GetElement<WorkbookProperties>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> AbsolutePath, this property is only available in Office2013.</para>
    /// <para> Represents the following element tag in the schema: x15ac:absPath </para>
    /// </summary>
    /// <remark>
    /// xmlns:x15ac = http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac
    /// </remark>
[OfficeAvailability(FileFormatVersions.Office2013)]
    public DocumentFormat.OpenXml.Office2013.ExcelAc.AbsolutePath AbsolutePath
    {
        get => GetElement<DocumentFormat.OpenXml.Office2013.ExcelAc.AbsolutePath>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> WorkbookProtection.</para>
    /// <para> Represents the following element tag in the schema: x:workbookProtection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WorkbookProtection WorkbookProtection
    {
        get => GetElement<WorkbookProtection>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> BookViews.</para>
    /// <para> Represents the following element tag in the schema: x:bookViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public BookViews BookViews
    {
        get => GetElement<BookViews>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Sheets.</para>
    /// <para> Represents the following element tag in the schema: x:sheets </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Sheets Sheets
    {
        get => GetElement<Sheets>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> FunctionGroups.</para>
    /// <para> Represents the following element tag in the schema: x:functionGroups </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FunctionGroups FunctionGroups
    {
        get => GetElement<FunctionGroups>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> ExternalReferences.</para>
    /// <para> Represents the following element tag in the schema: x:externalReferences </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExternalReferences ExternalReferences
    {
        get => GetElement<ExternalReferences>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> DefinedNames.</para>
    /// <para> Represents the following element tag in the schema: x:definedNames </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DefinedNames DefinedNames
    {
        get => GetElement<DefinedNames>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> CalculationProperties.</para>
    /// <para> Represents the following element tag in the schema: x:calcPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CalculationProperties CalculationProperties
    {
        get => GetElement<CalculationProperties>(10);
        set => SetElement(10, value);
    }
    
    /// <summary>
    /// <para> OleSize.</para>
    /// <para> Represents the following element tag in the schema: x:oleSize </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OleSize OleSize
    {
        get => GetElement<OleSize>(11);
        set => SetElement(11, value);
    }
    
    /// <summary>
    /// <para> CustomWorkbookViews.</para>
    /// <para> Represents the following element tag in the schema: x:customWorkbookViews </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CustomWorkbookViews CustomWorkbookViews
    {
        get => GetElement<CustomWorkbookViews>(12);
        set => SetElement(12, value);
    }
    
    /// <summary>
    /// <para> PivotCaches.</para>
    /// <para> Represents the following element tag in the schema: x:pivotCaches </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotCaches PivotCaches
    {
        get => GetElement<PivotCaches>(13);
        set => SetElement(13, value);
    }
    
    /// <summary>
    /// <para> WebPublishing.</para>
    /// <para> Represents the following element tag in the schema: x:webPublishing </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WebPublishing WebPublishing
    {
        get => GetElement<WebPublishing>(14);
        set => SetElement(14, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Workbook>(deep);

}
/// <summary>
/// <para>AutoFilter Column.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:filterColumn.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Filters &lt;x:filters></description></item>
///<item><description>Top10 &lt;x:top10></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.CustomFilters &lt;x14:customFilters></description></item>
///<item><description>CustomFilters &lt;x:customFilters></description></item>
///<item><description>DynamicFilter &lt;x:dynamicFilter></description></item>
///<item><description>ColorFilter &lt;x:colorFilter></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.IconFilter &lt;x14:iconFilter></description></item>
///<item><description>IconFilter &lt;x:iconFilter></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Filters))]
    [ChildElementInfo(typeof(Top10))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.CustomFilters), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(CustomFilters))]
    [ChildElementInfo(typeof(DynamicFilter))]
    [ChildElementInfo(typeof(ColorFilter))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.IconFilter), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(IconFilter))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "filterColumn")]
public partial class FilterColumn : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11115;
    /// <inheritdoc/>
    public override string LocalName => "filterColumn";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Filter Column Data.</para>
    /// <para>Represents the following attribute in the schema: colId </para>
    /// </summary>
    [SchemaAttr(0, "colId", 0)]
    public UInt32Value ColumnId { get; set; }
    /// <summary>
    /// <para> Hidden AutoFilter Button.</para>
    /// <para>Represents the following attribute in the schema: hiddenButton </para>
    /// </summary>
    [SchemaAttr(0, "hiddenButton", 1)]
    public BooleanValue HiddenButton { get; set; }
    /// <summary>
    /// <para> Show Filter Button.</para>
    /// <para>Represents the following attribute in the schema: showButton </para>
    /// </summary>
    [SchemaAttr(0, "showButton", 2)]
    public BooleanValue ShowButton { get; set; }

    /// <summary>
    /// Initializes a new instance of the FilterColumn class.
    /// </summary>
    public FilterColumn():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FilterColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FilterColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FilterColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FilterColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FilterColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FilterColumn(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "filters","top10","customFilters","customFilters","dynamicFilter","colorFilter","iconFilter","iconFilter","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,53,22,22,22,53,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Filter Criteria.</para>
    /// <para> Represents the following element tag in the schema: x:filters </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Filters Filters
    {
        get => GetElement<Filters>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Top 10.</para>
    /// <para> Represents the following element tag in the schema: x:top10 </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Top10 Top10
    {
        get => GetElement<Top10>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> CustomFilters14.</para>
    /// <para> Represents the following element tag in the schema: x14:customFilters </para>
    /// </summary>
    /// <remark>
    /// xmlns:x14 = http://schemas.microsoft.com/office/spreadsheetml/2009/9/main
    /// </remark>
    public DocumentFormat.OpenXml.Office2010.Excel.CustomFilters CustomFilters14
    {
        get => GetElement<DocumentFormat.OpenXml.Office2010.Excel.CustomFilters>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Custom Filters.</para>
    /// <para> Represents the following element tag in the schema: x:customFilters </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CustomFilters CustomFilters
    {
        get => GetElement<CustomFilters>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Dynamic Filter.</para>
    /// <para> Represents the following element tag in the schema: x:dynamicFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DynamicFilter DynamicFilter
    {
        get => GetElement<DynamicFilter>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Color Filter Criteria.</para>
    /// <para> Represents the following element tag in the schema: x:colorFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ColorFilter ColorFilter
    {
        get => GetElement<ColorFilter>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> IconFilter14.</para>
    /// <para> Represents the following element tag in the schema: x14:iconFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x14 = http://schemas.microsoft.com/office/spreadsheetml/2009/9/main
    /// </remark>
    public DocumentFormat.OpenXml.Office2010.Excel.IconFilter IconFilter14
    {
        get => GetElement<DocumentFormat.OpenXml.Office2010.Excel.IconFilter>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Icon Filter.</para>
    /// <para> Represents the following element tag in the schema: x:iconFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public IconFilter IconFilter
    {
        get => GetElement<IconFilter>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(8);
        set => SetElement(8, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilterColumn>(deep);

}
/// <summary>
/// <para>Sort State for Auto Filter.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sortState.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SortCondition &lt;x14:sortCondition></description></item>
///<item><description>SortCondition &lt;x:sortCondition></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SortCondition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(SortCondition))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sortState")]
public partial class SortState : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11116;
    /// <inheritdoc/>
    public override string LocalName => "sortState";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sort by Columns.</para>
    /// <para>Represents the following attribute in the schema: columnSort </para>
    /// </summary>
    [SchemaAttr(0, "columnSort", 0)]
    public BooleanValue ColumnSort { get; set; }
    /// <summary>
    /// <para> Case Sensitive.</para>
    /// <para>Represents the following attribute in the schema: caseSensitive </para>
    /// </summary>
    [SchemaAttr(0, "caseSensitive", 1)]
    public BooleanValue CaseSensitive { get; set; }
    /// <summary>
    /// <para> Sort Method.</para>
    /// <para>Represents the following attribute in the schema: sortMethod </para>
    /// </summary>
    [SchemaAttr(0, "sortMethod", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SortMethodValues> SortMethod { get; set; }
    /// <summary>
    /// <para> Sort Range.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 3)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the SortState class.
    /// </summary>
    public SortState():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SortState class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SortState(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SortState class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SortState(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SortState class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SortState(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SortState>(deep);

}
/// <summary>
/// <para>Defines the ExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Extension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Extension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class ExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11117;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class.
    /// </summary>
    public ExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtensionList>(deep);

}
/// <summary>
/// <para>Custom Filter Criteria.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customFilter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customFilter")]
public partial class CustomFilter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11118;
    /// <inheritdoc/>
    public override string LocalName => "customFilter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Filter Comparison Operator.</para>
    /// <para>Represents the following attribute in the schema: operator </para>
    /// </summary>
    [SchemaAttr(0, "operator", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FilterOperatorValues> Operator { get; set; }
    /// <summary>
    /// <para> Top or Bottom Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 1)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomFilter class.
    /// </summary>
    public CustomFilter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomFilter>(deep);

}
/// <summary>
/// <para>Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:c.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "c")]
public partial class CalculationCell : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11119;
    /// <inheritdoc/>
    public override string LocalName => "c";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Cell Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 1)]
    public Int32Value SheetId { get; set; }
    /// <summary>
    /// <para> Child Chain.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 2)]
    public BooleanValue InChildChain { get; set; }
    /// <summary>
    /// <para> New Dependency Level.</para>
    /// <para>Represents the following attribute in the schema: l </para>
    /// </summary>
    [SchemaAttr(0, "l", 3)]
    public BooleanValue NewLevel { get; set; }
    /// <summary>
    /// <para> New Thread.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 4)]
    public BooleanValue NewThread { get; set; }
    /// <summary>
    /// <para> Array.</para>
    /// <para>Represents the following attribute in the schema: a </para>
    /// </summary>
    [SchemaAttr(0, "a", 5)]
    public BooleanValue Array { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculationCell class.
    /// </summary>
    public CalculationCell():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculationCell>(deep);

}
/// <summary>
/// <para>Authors.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:authors.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Author &lt;x:author></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Author))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "authors")]
public partial class Authors : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11120;
    /// <inheritdoc/>
    public override string LocalName => "authors";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Authors class.
    /// </summary>
    public Authors():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Authors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Authors(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Authors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Authors(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Authors class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Authors(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Authors>(deep);

}
/// <summary>
/// <para>List of Comments.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:commentList.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Comment &lt;x:comment></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Comment))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "commentList")]
public partial class CommentList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11121;
    /// <inheritdoc/>
    public override string LocalName => "commentList";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CommentList class.
    /// </summary>
    public CommentList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CommentList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CommentList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentList>(deep);

}
/// <summary>
/// <para>Comment.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:comment.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CommentText &lt;x:text></description></item>
///<item><description>CommentProperties &lt;x:commentPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CommentText))]
    [ChildElementInfo(typeof(CommentProperties), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "comment")]
public partial class Comment : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11122;
    /// <inheritdoc/>
    public override string LocalName => "comment";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Cell Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Author Id.</para>
    /// <para>Represents the following attribute in the schema: authorId </para>
    /// </summary>
    [SchemaAttr(0, "authorId", 1)]
    public UInt32Value AuthorId { get; set; }
    /// <summary>
    /// <para> Unique Identifier for Comment.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 2)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> shapeId.</para>
    /// <para>Represents the following attribute in the schema: shapeId </para>
    /// </summary>
    [SchemaAttr(0, "shapeId", 3)]
    public UInt32Value ShapeId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Comment class.
    /// </summary>
    public Comment():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Comment class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Comment(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Comment class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Comment(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Comment class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Comment(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "text","commentPr" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Comment Text.</para>
    /// <para> Represents the following element tag in the schema: x:text </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CommentText CommentText
    {
        get => GetElement<CommentText>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> CommentProperties.</para>
    /// <para> Represents the following element tag in the schema: x:commentPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CommentProperties CommentProperties
    {
        get => GetElement<CommentProperties>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comment>(deep);

}
/// <summary>
/// <para>Author.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:author.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "author")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Author : XstringType
{
    internal const int ElementTypeIdConst = 11123;
    /// <inheritdoc/>
    public override string LocalName => "author";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Author class.
    /// </summary>
    public Author():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Author class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Author(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Author>(deep);

}
/// <summary>
/// <para>Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:t.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "t")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Text : XstringType
{
    internal const int ElementTypeIdConst = 11213;
    /// <inheritdoc/>
    public override string LocalName => "t";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Text class.
    /// </summary>
    public Text():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Text class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Text(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);

}
/// <summary>
/// <para>Cell Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:v.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "v")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class CellValue : XstringType
{
    internal const int ElementTypeIdConst = 11242;
    /// <inheritdoc/>
    public override string LocalName => "v";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the CellValue class.
    /// </summary>
    public CellValue():base(){}
    
        /// <summary>
    /// Initializes a new instance of the CellValue class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public CellValue(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellValue>(deep);

}
/// <summary>
/// <para>Formula.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:formula.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "formula")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Formula : XstringType
{
    internal const int ElementTypeIdConst = 11244;
    /// <inheritdoc/>
    public override string LocalName => "formula";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Formula class.
    /// </summary>
    public Formula():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Formula class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Formula(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula>(deep);

}
/// <summary>
/// <para>Old Formula.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oldFormula.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "oldFormula")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OldFormula : XstringType
{
    internal const int ElementTypeIdConst = 11245;
    /// <inheritdoc/>
    public override string LocalName => "oldFormula";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the OldFormula class.
    /// </summary>
    public OldFormula():base(){}
    
        /// <summary>
    /// Initializes a new instance of the OldFormula class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public OldFormula(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OldFormula>(deep);

}
/// <summary>
/// <para>Odd Header.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oddHeader.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "oddHeader")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OddHeader : XstringType
{
    internal const int ElementTypeIdConst = 11284;
    /// <inheritdoc/>
    public override string LocalName => "oddHeader";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the OddHeader class.
    /// </summary>
    public OddHeader():base(){}
    
        /// <summary>
    /// Initializes a new instance of the OddHeader class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public OddHeader(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OddHeader>(deep);

}
/// <summary>
/// <para>Odd Page Footer.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oddFooter.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "oddFooter")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OddFooter : XstringType
{
    internal const int ElementTypeIdConst = 11285;
    /// <inheritdoc/>
    public override string LocalName => "oddFooter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the OddFooter class.
    /// </summary>
    public OddFooter():base(){}
    
        /// <summary>
    /// Initializes a new instance of the OddFooter class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public OddFooter(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OddFooter>(deep);

}
/// <summary>
/// <para>Even Page Header.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:evenHeader.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "evenHeader")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EvenHeader : XstringType
{
    internal const int ElementTypeIdConst = 11286;
    /// <inheritdoc/>
    public override string LocalName => "evenHeader";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the EvenHeader class.
    /// </summary>
    public EvenHeader():base(){}
    
        /// <summary>
    /// Initializes a new instance of the EvenHeader class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public EvenHeader(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EvenHeader>(deep);

}
/// <summary>
/// <para>Even Page Footer.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:evenFooter.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "evenFooter")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class EvenFooter : XstringType
{
    internal const int ElementTypeIdConst = 11287;
    /// <inheritdoc/>
    public override string LocalName => "evenFooter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the EvenFooter class.
    /// </summary>
    public EvenFooter():base(){}
    
        /// <summary>
    /// Initializes a new instance of the EvenFooter class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public EvenFooter(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EvenFooter>(deep);

}
/// <summary>
/// <para>First Page Header.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:firstHeader.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "firstHeader")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FirstHeader : XstringType
{
    internal const int ElementTypeIdConst = 11288;
    /// <inheritdoc/>
    public override string LocalName => "firstHeader";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the FirstHeader class.
    /// </summary>
    public FirstHeader():base(){}
    
        /// <summary>
    /// Initializes a new instance of the FirstHeader class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public FirstHeader(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstHeader>(deep);

}
/// <summary>
/// <para>First Page Footer.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:firstFooter.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "firstFooter")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FirstFooter : XstringType
{
    internal const int ElementTypeIdConst = 11289;
    /// <inheritdoc/>
    public override string LocalName => "firstFooter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the FirstFooter class.
    /// </summary>
    public FirstFooter():base(){}
    
        /// <summary>
    /// Initializes a new instance of the FirstFooter class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public FirstFooter(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstFooter>(deep);

}
/// <summary>
/// <para>DDE Link Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:val.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "val")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DdeLinkValue : XstringType
{
    internal const int ElementTypeIdConst = 11347;
    /// <inheritdoc/>
    public override string LocalName => "val";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the DdeLinkValue class.
    /// </summary>
    public DdeLinkValue():base(){}
    
        /// <summary>
    /// Initializes a new instance of the DdeLinkValue class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public DdeLinkValue(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DdeLinkValue>(deep);

}
/// <summary>
/// <para>Strings in Subtopic.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:stp.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "stp")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Subtopic : XstringType
{
    internal const int ElementTypeIdConst = 11355;
    /// <inheritdoc/>
    public override string LocalName => "stp";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Subtopic class.
    /// </summary>
    public Subtopic():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Subtopic class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Subtopic(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Subtopic>(deep);

}
/// <summary>
/// <para>Defines the Formula1 Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:formula1.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "formula1")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Formula1 : XstringType
{
    internal const int ElementTypeIdConst = 11505;
    /// <inheritdoc/>
    public override string LocalName => "formula1";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Formula1 class.
    /// </summary>
    public Formula1():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Formula1 class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Formula1(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula1>(deep);

}
/// <summary>
/// <para>Defines the Formula2 Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:formula2.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "formula2")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Formula2 : XstringType
{
    internal const int ElementTypeIdConst = 11506;
    /// <inheritdoc/>
    public override string LocalName => "formula2";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Formula2 class.
    /// </summary>
    public Formula2():base(){}
    
        /// <summary>
    /// Initializes a new instance of the Formula2 class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Formula2(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula2>(deep);

}
/// <summary>
/// Defines the XstringType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class XstringType : OpenXmlLeafTextElement
{
        
        /// <summary>
    /// <para> Content Contains Significant Whitespace.</para>
    /// <para>Represents the following attribute in the schema: xml:space </para>
    /// </summary>
///<remark> xmlns:xml=http://www.w3.org/XML/1998/namespace
///</remark>
    [SchemaAttr(1, "space", 0)]
    public EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues> Space { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the XstringType class.
    /// </summary>
    protected XstringType(){}
    
    
        /// <summary>
    /// Initializes a new instance of the XstringType class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    protected XstringType(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

}
/// <summary>
/// <para>XML Schema.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:Schema.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
/// </list>
/// </remarks>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "Schema")]
public partial class Schema : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11124;
    /// <inheritdoc/>
    public override string LocalName => "Schema";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Schema ID.</para>
    /// <para>Represents the following attribute in the schema: ID </para>
    /// </summary>
    [SchemaAttr(0, "ID", 0)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> Schema Reference.</para>
    /// <para>Represents the following attribute in the schema: SchemaRef </para>
    /// </summary>
    [SchemaAttr(0, "SchemaRef", 1)]
    public StringValue SchemaReference { get; set; }
    /// <summary>
    /// <para> Schema Root Namespace.</para>
    /// <para>Represents the following attribute in the schema: Namespace </para>
    /// </summary>
    [SchemaAttr(0, "Namespace", 2)]
    public StringValue Namespace { get; set; }

    /// <summary>
    /// Initializes a new instance of the Schema class.
    /// </summary>
    public Schema():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Schema class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Schema(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Schema class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Schema(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Schema class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Schema(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Schema>(deep);

}
/// <summary>
/// <para>XML Mapping Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:Map.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataBinding &lt;x:DataBinding></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataBinding))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "Map")]
public partial class Map : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11125;
    /// <inheritdoc/>
    public override string LocalName => "Map";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> XML Mapping ID.</para>
    /// <para>Represents the following attribute in the schema: ID </para>
    /// </summary>
    [SchemaAttr(0, "ID", 0)]
    public UInt32Value ID { get; set; }
    /// <summary>
    /// <para> XML Mapping Name.</para>
    /// <para>Represents the following attribute in the schema: Name </para>
    /// </summary>
    [SchemaAttr(0, "Name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Root Element Name.</para>
    /// <para>Represents the following attribute in the schema: RootElement </para>
    /// </summary>
    [SchemaAttr(0, "RootElement", 2)]
    public StringValue RootElement { get; set; }
    /// <summary>
    /// <para> Schema Name.</para>
    /// <para>Represents the following attribute in the schema: SchemaID </para>
    /// </summary>
    [SchemaAttr(0, "SchemaID", 3)]
    public StringValue SchemaId { get; set; }
    /// <summary>
    /// <para> Show Validation Errors.</para>
    /// <para>Represents the following attribute in the schema: ShowImportExportValidationErrors </para>
    /// </summary>
    [SchemaAttr(0, "ShowImportExportValidationErrors", 4)]
    public BooleanValue ShowImportExportErrors { get; set; }
    /// <summary>
    /// <para> AutoFit Table on Refresh.</para>
    /// <para>Represents the following attribute in the schema: AutoFit </para>
    /// </summary>
    [SchemaAttr(0, "AutoFit", 5)]
    public BooleanValue AutoFit { get; set; }
    /// <summary>
    /// <para> Append Data to Table.</para>
    /// <para>Represents the following attribute in the schema: Append </para>
    /// </summary>
    [SchemaAttr(0, "Append", 6)]
    public BooleanValue AppendData { get; set; }
    /// <summary>
    /// <para> Preserve AutoFilter State.</para>
    /// <para>Represents the following attribute in the schema: PreserveSortAFLayout </para>
    /// </summary>
    [SchemaAttr(0, "PreserveSortAFLayout", 7)]
    public BooleanValue PreserveAutoFilterState { get; set; }
    /// <summary>
    /// <para> Preserve Cell Formatting.</para>
    /// <para>Represents the following attribute in the schema: PreserveFormat </para>
    /// </summary>
    [SchemaAttr(0, "PreserveFormat", 8)]
    public BooleanValue PreserveFormat { get; set; }

    /// <summary>
    /// Initializes a new instance of the Map class.
    /// </summary>
    public Map():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Map class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Map(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Map class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Map(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Map class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Map(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "DataBinding" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> XML Mapping.</para>
    /// <para> Represents the following element tag in the schema: x:DataBinding </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DataBinding DataBinding
    {
        get => GetElement<DataBinding>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Map>(deep);

}
/// <summary>
/// <para>XML Mapping.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:DataBinding.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
/// </list>
/// </remarks>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "DataBinding")]
public partial class DataBinding : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11126;
    /// <inheritdoc/>
    public override string LocalName => "DataBinding";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> DataBindingName.</para>
    /// <para>Represents the following attribute in the schema: DataBindingName </para>
    /// </summary>
    [SchemaAttr(0, "DataBindingName", 0)]
    public StringValue DataBindingName { get; set; }
    /// <summary>
    /// <para> FileBinding.</para>
    /// <para>Represents the following attribute in the schema: FileBinding </para>
    /// </summary>
    [SchemaAttr(0, "FileBinding", 1)]
    public BooleanValue FileBinding { get; set; }
    /// <summary>
    /// <para> ConnectionID.</para>
    /// <para>Represents the following attribute in the schema: ConnectionID </para>
    /// </summary>
    [SchemaAttr(0, "ConnectionID", 2)]
    public UInt32Value ConnectionId { get; set; }
    /// <summary>
    /// <para> FileBindingName.</para>
    /// <para>Represents the following attribute in the schema: FileBindingName </para>
    /// </summary>
    [SchemaAttr(0, "FileBindingName", 3)]
    public StringValue FileBindingName { get; set; }
    /// <summary>
    /// <para> DataBindingLoadMode.</para>
    /// <para>Represents the following attribute in the schema: DataBindingLoadMode </para>
    /// </summary>
    [SchemaAttr(0, "DataBindingLoadMode", 4)]
    public UInt32Value DataBindingLoadMode { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataBinding class.
    /// </summary>
    public DataBinding():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataBinding class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataBinding(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataBinding class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataBinding(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataBinding class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataBinding(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataBinding>(deep);

}
/// <summary>
/// <para>Connection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:connection.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DatabaseProperties &lt;x:dbPr></description></item>
///<item><description>OlapProperties &lt;x:olapPr></description></item>
///<item><description>WebQueryProperties &lt;x:webPr></description></item>
///<item><description>TextProperties &lt;x:textPr></description></item>
///<item><description>Parameters &lt;x:parameters></description></item>
///<item><description>ConnectionExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DatabaseProperties))]
    [ChildElementInfo(typeof(OlapProperties))]
    [ChildElementInfo(typeof(WebQueryProperties))]
    [ChildElementInfo(typeof(TextProperties))]
    [ChildElementInfo(typeof(Parameters))]
    [ChildElementInfo(typeof(ConnectionExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "connection")]
public partial class Connection : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11127;
    /// <inheritdoc/>
    public override string LocalName => "connection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> sourceFile.</para>
    /// <para>Represents the following attribute in the schema: sourceFile </para>
    /// </summary>
    [SchemaAttr(0, "sourceFile", 1)]
    public StringValue SourceFile { get; set; }
    /// <summary>
    /// <para> odcFile.</para>
    /// <para>Represents the following attribute in the schema: odcFile </para>
    /// </summary>
    [SchemaAttr(0, "odcFile", 2)]
    public StringValue ConnectionFile { get; set; }
    /// <summary>
    /// <para> keepAlive.</para>
    /// <para>Represents the following attribute in the schema: keepAlive </para>
    /// </summary>
    [SchemaAttr(0, "keepAlive", 3)]
    public BooleanValue KeepAlive { get; set; }
    /// <summary>
    /// <para> interval.</para>
    /// <para>Represents the following attribute in the schema: interval </para>
    /// </summary>
    [SchemaAttr(0, "interval", 4)]
    public UInt32Value Interval { get; set; }
    /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 5)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> description.</para>
    /// <para>Represents the following attribute in the schema: description </para>
    /// </summary>
    [SchemaAttr(0, "description", 6)]
    public StringValue Description { get; set; }
    /// <summary>
    /// <para> type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 7)]
    public UInt32Value Type { get; set; }
    /// <summary>
    /// <para> reconnectionMethod.</para>
    /// <para>Represents the following attribute in the schema: reconnectionMethod </para>
    /// </summary>
    [SchemaAttr(0, "reconnectionMethod", 8)]
    public UInt32Value ReconnectionMethod { get; set; }
    /// <summary>
    /// <para> refreshedVersion.</para>
    /// <para>Represents the following attribute in the schema: refreshedVersion </para>
    /// </summary>
    [SchemaAttr(0, "refreshedVersion", 9)]
    public ByteValue RefreshedVersion { get; set; }
    /// <summary>
    /// <para> minRefreshableVersion.</para>
    /// <para>Represents the following attribute in the schema: minRefreshableVersion </para>
    /// </summary>
    [SchemaAttr(0, "minRefreshableVersion", 10)]
    public ByteValue MinRefreshableVersion { get; set; }
    /// <summary>
    /// <para> savePassword.</para>
    /// <para>Represents the following attribute in the schema: savePassword </para>
    /// </summary>
    [SchemaAttr(0, "savePassword", 11)]
    public BooleanValue SavePassword { get; set; }
    /// <summary>
    /// <para> new.</para>
    /// <para>Represents the following attribute in the schema: new </para>
    /// </summary>
    [SchemaAttr(0, "new", 12)]
    public BooleanValue New { get; set; }
    /// <summary>
    /// <para> deleted.</para>
    /// <para>Represents the following attribute in the schema: deleted </para>
    /// </summary>
    [SchemaAttr(0, "deleted", 13)]
    public BooleanValue Deleted { get; set; }
    /// <summary>
    /// <para> onlyUseConnectionFile.</para>
    /// <para>Represents the following attribute in the schema: onlyUseConnectionFile </para>
    /// </summary>
    [SchemaAttr(0, "onlyUseConnectionFile", 14)]
    public BooleanValue OnlyUseConnectionFile { get; set; }
    /// <summary>
    /// <para> background.</para>
    /// <para>Represents the following attribute in the schema: background </para>
    /// </summary>
    [SchemaAttr(0, "background", 15)]
    public BooleanValue Background { get; set; }
    /// <summary>
    /// <para> refreshOnLoad.</para>
    /// <para>Represents the following attribute in the schema: refreshOnLoad </para>
    /// </summary>
    [SchemaAttr(0, "refreshOnLoad", 16)]
    public BooleanValue RefreshOnLoad { get; set; }
    /// <summary>
    /// <para> saveData.</para>
    /// <para>Represents the following attribute in the schema: saveData </para>
    /// </summary>
    [SchemaAttr(0, "saveData", 17)]
    public BooleanValue SaveData { get; set; }
    /// <summary>
    /// <para> credentials.</para>
    /// <para>Represents the following attribute in the schema: credentials </para>
    /// </summary>
    [SchemaAttr(0, "credentials", 18)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CredentialsMethodValues> Credentials { get; set; }
    /// <summary>
    /// <para> singleSignOnId.</para>
    /// <para>Represents the following attribute in the schema: singleSignOnId </para>
    /// </summary>
    [SchemaAttr(0, "singleSignOnId", 19)]
    public StringValue SingleSignOnId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Connection class.
    /// </summary>
    public Connection():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Connection class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Connection(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Connection class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Connection(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Connection class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Connection(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "dbPr","olapPr","webPr","textPr","parameters","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> DatabaseProperties.</para>
    /// <para> Represents the following element tag in the schema: x:dbPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DatabaseProperties DatabaseProperties
    {
        get => GetElement<DatabaseProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> OlapProperties.</para>
    /// <para> Represents the following element tag in the schema: x:olapPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OlapProperties OlapProperties
    {
        get => GetElement<OlapProperties>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> WebQueryProperties.</para>
    /// <para> Represents the following element tag in the schema: x:webPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WebQueryProperties WebQueryProperties
    {
        get => GetElement<WebQueryProperties>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> TextProperties.</para>
    /// <para> Represents the following element tag in the schema: x:textPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TextProperties TextProperties
    {
        get => GetElement<TextProperties>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Parameters.</para>
    /// <para> Represents the following element tag in the schema: x:parameters </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Parameters Parameters
    {
        get => GetElement<Parameters>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> ConnectionExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ConnectionExtensionList ConnectionExtensionList
    {
        get => GetElement<ConnectionExtensionList>(5);
        set => SetElement(5, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Connection>(deep);

}
/// <summary>
/// <para>Tables.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tables.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MissingTable &lt;x:m></description></item>
///<item><description>CharacterValue &lt;x:s></description></item>
///<item><description>FieldItem &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MissingTable))]
    [ChildElementInfo(typeof(CharacterValue))]
    [ChildElementInfo(typeof(FieldItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tables")]
public partial class Tables : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11128;
    /// <inheritdoc/>
    public override string LocalName => "tables";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Count of Tables.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Tables class.
    /// </summary>
    public Tables():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Tables class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Tables(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Tables class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Tables(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Tables class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Tables(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tables>(deep);

}
/// <summary>
/// <para>Parameter Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:parameter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "parameter")]
public partial class Parameter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11129;
    /// <inheritdoc/>
    public override string LocalName => "parameter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Parameter Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> SQL Data Type.</para>
    /// <para>Represents the following attribute in the schema: sqlType </para>
    /// </summary>
    [SchemaAttr(0, "sqlType", 1)]
    public Int32Value SqlType { get; set; }
    /// <summary>
    /// <para> Parameter Type.</para>
    /// <para>Represents the following attribute in the schema: parameterType </para>
    /// </summary>
    [SchemaAttr(0, "parameterType", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ParameterValues> ParameterType { get; set; }
    /// <summary>
    /// <para> Refresh on Change.</para>
    /// <para>Represents the following attribute in the schema: refreshOnChange </para>
    /// </summary>
    [SchemaAttr(0, "refreshOnChange", 3)]
    public BooleanValue RefreshOnChange { get; set; }
    /// <summary>
    /// <para> Parameter Prompt String.</para>
    /// <para>Represents the following attribute in the schema: prompt </para>
    /// </summary>
    [SchemaAttr(0, "prompt", 4)]
    public StringValue Prompt { get; set; }
    /// <summary>
    /// <para> Boolean.</para>
    /// <para>Represents the following attribute in the schema: boolean </para>
    /// </summary>
    [SchemaAttr(0, "boolean", 5)]
    public BooleanValue Boolean { get; set; }
    /// <summary>
    /// <para> Double.</para>
    /// <para>Represents the following attribute in the schema: double </para>
    /// </summary>
    [SchemaAttr(0, "double", 6)]
    public DoubleValue Double { get; set; }
    /// <summary>
    /// <para> Integer.</para>
    /// <para>Represents the following attribute in the schema: integer </para>
    /// </summary>
    [SchemaAttr(0, "integer", 7)]
    public Int32Value Integer { get; set; }
    /// <summary>
    /// <para> String.</para>
    /// <para>Represents the following attribute in the schema: string </para>
    /// </summary>
    [SchemaAttr(0, "string", 8)]
    public StringValue String { get; set; }
    /// <summary>
    /// <para> Cell Reference.</para>
    /// <para>Represents the following attribute in the schema: cell </para>
    /// </summary>
    [SchemaAttr(0, "cell", 9)]
    public StringValue Cell { get; set; }

    /// <summary>
    /// Initializes a new instance of the Parameter class.
    /// </summary>
    public Parameter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Parameter>(deep);

}
/// <summary>
/// <para>No Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:m.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "m")]
public partial class MissingTable : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11130;
    /// <inheritdoc/>
    public override string LocalName => "m";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the MissingTable class.
    /// </summary>
    public MissingTable():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MissingTable>(deep);

}
/// <summary>
/// <para>Character Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:s.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "s")]
public partial class CharacterValue : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11131;
    /// <inheritdoc/>
    public override string LocalName => "s";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the CharacterValue class.
    /// </summary>
    public CharacterValue():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterValue>(deep);

}
/// <summary>
/// <para>Index.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:x.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "x")]
public partial class FieldItem : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11132;
    /// <inheritdoc/>
    public override string LocalName => "x";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Shared Items Index.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public UInt32Value Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FieldItem class.
    /// </summary>
    public FieldItem():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldItem>(deep);

}
/// <summary>
/// <para>Text Import Field Settings.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:textField.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "textField")]
public partial class TextField : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11133;
    /// <inheritdoc/>
    public override string LocalName => "textField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ExternalConnectionValues> Type { get; set; }
    /// <summary>
    /// <para> Position.</para>
    /// <para>Represents the following attribute in the schema: position </para>
    /// </summary>
    [SchemaAttr(0, "position", 1)]
    public UInt32Value Position { get; set; }

    /// <summary>
    /// Initializes a new instance of the TextField class.
    /// </summary>
    public TextField():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextField>(deep);

}
/// <summary>
/// <para>PivotCache Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cacheField.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SharedItems &lt;x:sharedItems></description></item>
///<item><description>FieldGroup &lt;x:fieldGroup></description></item>
///<item><description>MemberPropertiesMap &lt;x:mpMap></description></item>
///<item><description>CacheFieldExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SharedItems))]
    [ChildElementInfo(typeof(FieldGroup))]
    [ChildElementInfo(typeof(MemberPropertiesMap))]
    [ChildElementInfo(typeof(CacheFieldExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cacheField")]
public partial class CacheField : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11134;
    /// <inheritdoc/>
    public override string LocalName => "cacheField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> caption.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 1)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> propertyName.</para>
    /// <para>Represents the following attribute in the schema: propertyName </para>
    /// </summary>
    [SchemaAttr(0, "propertyName", 2)]
    public StringValue PropertyName { get; set; }
    /// <summary>
    /// <para> serverField.</para>
    /// <para>Represents the following attribute in the schema: serverField </para>
    /// </summary>
    [SchemaAttr(0, "serverField", 3)]
    public BooleanValue ServerField { get; set; }
    /// <summary>
    /// <para> uniqueList.</para>
    /// <para>Represents the following attribute in the schema: uniqueList </para>
    /// </summary>
    [SchemaAttr(0, "uniqueList", 4)]
    public BooleanValue UniqueList { get; set; }
    /// <summary>
    /// <para> numFmtId.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 5)]
    public UInt32Value NumberFormatId { get; set; }
    /// <summary>
    /// <para> formula.</para>
    /// <para>Represents the following attribute in the schema: formula </para>
    /// </summary>
    [SchemaAttr(0, "formula", 6)]
    public StringValue Formula { get; set; }
    /// <summary>
    /// <para> sqlType.</para>
    /// <para>Represents the following attribute in the schema: sqlType </para>
    /// </summary>
    [SchemaAttr(0, "sqlType", 7)]
    public Int32Value SqlType { get; set; }
    /// <summary>
    /// <para> hierarchy.</para>
    /// <para>Represents the following attribute in the schema: hierarchy </para>
    /// </summary>
    [SchemaAttr(0, "hierarchy", 8)]
    public Int32Value Hierarchy { get; set; }
    /// <summary>
    /// <para> level.</para>
    /// <para>Represents the following attribute in the schema: level </para>
    /// </summary>
    [SchemaAttr(0, "level", 9)]
    public UInt32Value Level { get; set; }
    /// <summary>
    /// <para> databaseField.</para>
    /// <para>Represents the following attribute in the schema: databaseField </para>
    /// </summary>
    [SchemaAttr(0, "databaseField", 10)]
    public BooleanValue DatabaseField { get; set; }
    /// <summary>
    /// <para> mappingCount.</para>
    /// <para>Represents the following attribute in the schema: mappingCount </para>
    /// </summary>
    [SchemaAttr(0, "mappingCount", 11)]
    public UInt32Value MappingCount { get; set; }
    /// <summary>
    /// <para> memberPropertyField.</para>
    /// <para>Represents the following attribute in the schema: memberPropertyField </para>
    /// </summary>
    [SchemaAttr(0, "memberPropertyField", 12)]
    public BooleanValue MemberPropertyField { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheField class.
    /// </summary>
    public CacheField():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheField(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheField(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheField class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheField(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "sharedItems","fieldGroup","mpMap","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> SharedItems.</para>
    /// <para> Represents the following element tag in the schema: x:sharedItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SharedItems SharedItems
    {
        get => GetElement<SharedItems>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> FieldGroup.</para>
    /// <para> Represents the following element tag in the schema: x:fieldGroup </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FieldGroup FieldGroup
    {
        get => GetElement<FieldGroup>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheField>(deep);

}
/// <summary>
/// <para>Page Item Values.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pages.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Page &lt;x:page></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Page))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pages")]
public partial class Pages : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11135;
    /// <inheritdoc/>
    public override string LocalName => "pages";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Page Item String Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Pages class.
    /// </summary>
    public Pages():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Pages class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Pages(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Pages class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Pages(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Pages class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Pages(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pages>(deep);

}
/// <summary>
/// <para>Range Sets.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rangeSets.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RangeSet &lt;x:rangeSet></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RangeSet))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rangeSets")]
public partial class RangeSets : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11136;
    /// <inheritdoc/>
    public override string LocalName => "rangeSets";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference and Page Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the RangeSets class.
    /// </summary>
    public RangeSets():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RangeSets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RangeSets(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RangeSets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RangeSets(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RangeSets class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RangeSets(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RangeSets>(deep);

}
/// <summary>
/// <para>Page Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:page.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PageItem &lt;x:pageItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PageItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "page")]
public partial class Page : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11137;
    /// <inheritdoc/>
    public override string LocalName => "page";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Page Item String Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Page class.
    /// </summary>
    public Page():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Page class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Page(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Page class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Page(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Page class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Page(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Page>(deep);

}
/// <summary>
/// <para>Page Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageItem.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageItem")]
public partial class PageItem : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11138;
    /// <inheritdoc/>
    public override string LocalName => "pageItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Page Item Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageItem class.
    /// </summary>
    public PageItem():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageItem>(deep);

}
/// <summary>
/// <para>Range Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rangeSet.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rangeSet")]
public partial class RangeSet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11139;
    /// <inheritdoc/>
    public override string LocalName => "rangeSet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Item Index Page 1.</para>
    /// <para>Represents the following attribute in the schema: i1 </para>
    /// </summary>
    [SchemaAttr(0, "i1", 0)]
    public UInt32Value FieldItemIndexPage1 { get; set; }
    /// <summary>
    /// <para> Field Item Index Page 2.</para>
    /// <para>Represents the following attribute in the schema: i2 </para>
    /// </summary>
    [SchemaAttr(0, "i2", 1)]
    public UInt32Value FieldItemIndexPage2 { get; set; }
    /// <summary>
    /// <para> Field Item index Page 3.</para>
    /// <para>Represents the following attribute in the schema: i3 </para>
    /// </summary>
    [SchemaAttr(0, "i3", 2)]
    public UInt32Value FieldItemIndexPage3 { get; set; }
    /// <summary>
    /// <para> Field Item Index Page 4.</para>
    /// <para>Represents the following attribute in the schema: i4 </para>
    /// </summary>
    [SchemaAttr(0, "i4", 3)]
    public UInt32Value FieldItemIndexPage4 { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 4)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Named Range.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 5)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: sheet </para>
    /// </summary>
    [SchemaAttr(0, "sheet", 6)]
    public StringValue Sheet { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 7)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the RangeSet class.
    /// </summary>
    public RangeSet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RangeSet>(deep);

}
/// <summary>
/// <para>No Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:m.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "m")]
public partial class MissingItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11140;
    /// <inheritdoc/>
    public override string LocalName => "m";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 0)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 1)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 2)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 3)]
    public UInt32Value PropertyCount { get; set; }
    /// <summary>
    /// <para> Format Index.</para>
    /// <para>Represents the following attribute in the schema: in </para>
    /// </summary>
    [SchemaAttr(0, "in", 4)]
    public UInt32Value FormatIndex { get; set; }
    /// <summary>
    /// <para> background Color.</para>
    /// <para>Represents the following attribute in the schema: bc </para>
    /// </summary>
    [SchemaAttr(0, "bc", 5)]
    public HexBinaryValue BackgroundColor { get; set; }
    /// <summary>
    /// <para> Foreground Color.</para>
    /// <para>Represents the following attribute in the schema: fc </para>
    /// </summary>
    [SchemaAttr(0, "fc", 6)]
    public HexBinaryValue ForegroundColor { get; set; }
    /// <summary>
    /// <para> Italic.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 7)]
    public BooleanValue Italic { get; set; }
    /// <summary>
    /// <para> Underline.</para>
    /// <para>Represents the following attribute in the schema: un </para>
    /// </summary>
    [SchemaAttr(0, "un", 8)]
    public BooleanValue Underline { get; set; }
    /// <summary>
    /// <para> Strikethrough.</para>
    /// <para>Represents the following attribute in the schema: st </para>
    /// </summary>
    [SchemaAttr(0, "st", 9)]
    public BooleanValue Strikethrough { get; set; }
    /// <summary>
    /// <para> Bold.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b", 10)]
    public BooleanValue Bold { get; set; }

    /// <summary>
    /// Initializes a new instance of the MissingItem class.
    /// </summary>
    public MissingItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MissingItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MissingItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MissingItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MissingItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MissingItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MissingItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MissingItem>(deep);

}
/// <summary>
/// <para>Numeric.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:n.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "n")]
public partial class NumberItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11141;
    /// <inheritdoc/>
    public override string LocalName => "n";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public DoubleValue Val { get; set; }
    /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 1)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 2)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 3)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 4)]
    public UInt32Value PropertyCount { get; set; }
    /// <summary>
    /// <para> Format Index.</para>
    /// <para>Represents the following attribute in the schema: in </para>
    /// </summary>
    [SchemaAttr(0, "in", 5)]
    public UInt32Value FormatIndex { get; set; }
    /// <summary>
    /// <para> Background Color.</para>
    /// <para>Represents the following attribute in the schema: bc </para>
    /// </summary>
    [SchemaAttr(0, "bc", 6)]
    public HexBinaryValue BackgroundColor { get; set; }
    /// <summary>
    /// <para> Foreground Color.</para>
    /// <para>Represents the following attribute in the schema: fc </para>
    /// </summary>
    [SchemaAttr(0, "fc", 7)]
    public HexBinaryValue ForegroundColor { get; set; }
    /// <summary>
    /// <para> Italic.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 8)]
    public BooleanValue Italic { get; set; }
    /// <summary>
    /// <para> Underline.</para>
    /// <para>Represents the following attribute in the schema: un </para>
    /// </summary>
    [SchemaAttr(0, "un", 9)]
    public BooleanValue Underline { get; set; }
    /// <summary>
    /// <para> Strikethrough.</para>
    /// <para>Represents the following attribute in the schema: st </para>
    /// </summary>
    [SchemaAttr(0, "st", 10)]
    public BooleanValue Strikethrough { get; set; }
    /// <summary>
    /// <para> Bold.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b", 11)]
    public BooleanValue Bold { get; set; }

    /// <summary>
    /// Initializes a new instance of the NumberItem class.
    /// </summary>
    public NumberItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NumberItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NumberItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NumberItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NumberItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NumberItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NumberItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberItem>(deep);

}
/// <summary>
/// <para>Boolean.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:b.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "b")]
public partial class BooleanItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11142;
    /// <inheritdoc/>
    public override string LocalName => "b";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public BooleanValue Val { get; set; }
    /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 1)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 2)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 3)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 4)]
    public UInt32Value PropertyCount { get; set; }

    /// <summary>
    /// Initializes a new instance of the BooleanItem class.
    /// </summary>
    public BooleanItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BooleanItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BooleanItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BooleanItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BooleanItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BooleanItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BooleanItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BooleanItem>(deep);

}
/// <summary>
/// <para>Error Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:e.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "e")]
public partial class ErrorItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11143;
    /// <inheritdoc/>
    public override string LocalName => "e";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public StringValue Val { get; set; }
    /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 1)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 2)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Item Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 3)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 4)]
    public UInt32Value PropertyCount { get; set; }
    /// <summary>
    /// <para> Format Index.</para>
    /// <para>Represents the following attribute in the schema: in </para>
    /// </summary>
    [SchemaAttr(0, "in", 5)]
    public UInt32Value FormatIndex { get; set; }
    /// <summary>
    /// <para> background Color.</para>
    /// <para>Represents the following attribute in the schema: bc </para>
    /// </summary>
    [SchemaAttr(0, "bc", 6)]
    public HexBinaryValue BackgroundColor { get; set; }
    /// <summary>
    /// <para> Foreground Color.</para>
    /// <para>Represents the following attribute in the schema: fc </para>
    /// </summary>
    [SchemaAttr(0, "fc", 7)]
    public HexBinaryValue ForegroundColor { get; set; }
    /// <summary>
    /// <para> Italic.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 8)]
    public BooleanValue Italic { get; set; }
    /// <summary>
    /// <para> Underline.</para>
    /// <para>Represents the following attribute in the schema: un </para>
    /// </summary>
    [SchemaAttr(0, "un", 9)]
    public BooleanValue Underline { get; set; }
    /// <summary>
    /// <para> Strikethrough.</para>
    /// <para>Represents the following attribute in the schema: st </para>
    /// </summary>
    [SchemaAttr(0, "st", 10)]
    public BooleanValue Strikethrough { get; set; }
    /// <summary>
    /// <para> Bold.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b", 11)]
    public BooleanValue Bold { get; set; }

    /// <summary>
    /// Initializes a new instance of the ErrorItem class.
    /// </summary>
    public ErrorItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ErrorItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ErrorItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ErrorItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ErrorItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ErrorItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ErrorItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "tpls","x" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Tuples.</para>
    /// <para> Represents the following element tag in the schema: x:tpls </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Tuples Tuples
    {
        get => GetElement<Tuples>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ErrorItem>(deep);

}
/// <summary>
/// <para>Character Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:s.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "s")]
public partial class StringItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11144;
    /// <inheritdoc/>
    public override string LocalName => "s";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public StringValue Val { get; set; }
    /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 1)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 2)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Item Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 3)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 4)]
    public UInt32Value PropertyCount { get; set; }
    /// <summary>
    /// <para> Format Index.</para>
    /// <para>Represents the following attribute in the schema: in </para>
    /// </summary>
    [SchemaAttr(0, "in", 5)]
    public UInt32Value FormatIndex { get; set; }
    /// <summary>
    /// <para> Background Color.</para>
    /// <para>Represents the following attribute in the schema: bc </para>
    /// </summary>
    [SchemaAttr(0, "bc", 6)]
    public HexBinaryValue BackgroundColor { get; set; }
    /// <summary>
    /// <para> Foreground Color.</para>
    /// <para>Represents the following attribute in the schema: fc </para>
    /// </summary>
    [SchemaAttr(0, "fc", 7)]
    public HexBinaryValue ForegroundColor { get; set; }
    /// <summary>
    /// <para> Italic.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 8)]
    public BooleanValue Italic { get; set; }
    /// <summary>
    /// <para> Underline.</para>
    /// <para>Represents the following attribute in the schema: un </para>
    /// </summary>
    [SchemaAttr(0, "un", 9)]
    public BooleanValue Underline { get; set; }
    /// <summary>
    /// <para> Strikethrough.</para>
    /// <para>Represents the following attribute in the schema: st </para>
    /// </summary>
    [SchemaAttr(0, "st", 10)]
    public BooleanValue Strikethrough { get; set; }
    /// <summary>
    /// <para> Bold.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b", 11)]
    public BooleanValue Bold { get; set; }

    /// <summary>
    /// Initializes a new instance of the StringItem class.
    /// </summary>
    public StringItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the StringItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StringItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the StringItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StringItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the StringItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public StringItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StringItem>(deep);

}
/// <summary>
/// <para>Date Time.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:d.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "d")]
public partial class DateTimeItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11145;
    /// <inheritdoc/>
    public override string LocalName => "d";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public DateTimeValue Val { get; set; }
    /// <summary>
    /// <para> Unused Item.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 1)]
    public BooleanValue Unused { get; set; }
    /// <summary>
    /// <para> Calculated Item Value.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 2)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Caption.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 3)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Member Property Count.</para>
    /// <para>Represents the following attribute in the schema: cp </para>
    /// </summary>
    [SchemaAttr(0, "cp", 4)]
    public UInt32Value PropertyCount { get; set; }

    /// <summary>
    /// Initializes a new instance of the DateTimeItem class.
    /// </summary>
    public DateTimeItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DateTimeItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DateTimeItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DateTimeItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DateTimeItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DateTimeItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DateTimeItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DateTimeItem>(deep);

}
/// <summary>
/// <para>Tuples.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tpls.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuple &lt;x:tpl></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "tpls")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Tuples : TuplesType
{
    internal const int ElementTypeIdConst = 11146;
    /// <inheritdoc/>
    public override string LocalName => "tpls";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Tuples class.
    /// </summary>
    public Tuples():base(){}
        /// <summary>
    ///Initializes a new instance of the Tuples class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Tuples(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Tuples class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Tuples(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Tuples class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Tuples(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tuples>(deep);

}
/// <summary>
/// <para>Sort By Tuple.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sortByTuple.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuple &lt;x:tpl></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "sortByTuple")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SortByTuple : TuplesType
{
    internal const int ElementTypeIdConst = 11163;
    /// <inheritdoc/>
    public override string LocalName => "sortByTuple";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the SortByTuple class.
    /// </summary>
    public SortByTuple():base(){}
        /// <summary>
    ///Initializes a new instance of the SortByTuple class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SortByTuple(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SortByTuple class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SortByTuple(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SortByTuple class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SortByTuple(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SortByTuple>(deep);

}
/// <summary>
/// Defines the TuplesType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuple &lt;x:tpl></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Tuple))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class TuplesType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Member Name Count.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 0)]
    public UInt32Value MemberNameCount { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the TuplesType class.
    /// </summary>
    protected TuplesType(){}
    
        /// <summary>
    ///Initializes a new instance of the TuplesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TuplesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TuplesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected TuplesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TuplesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected TuplesType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Member Property Indexes.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:x.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "x")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MemberPropertyIndex : XType
{
    internal const int ElementTypeIdConst = 11147;
    /// <inheritdoc/>
    public override string LocalName => "x";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the MemberPropertyIndex class.
    /// </summary>
    public MemberPropertyIndex():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MemberPropertyIndex>(deep);

}
/// <summary>
/// <para>Defines the MemberPropertiesMap Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mpMap.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "mpMap")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class MemberPropertiesMap : XType
{
    internal const int ElementTypeIdConst = 11462;
    /// <inheritdoc/>
    public override string LocalName => "mpMap";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the MemberPropertiesMap class.
    /// </summary>
    public MemberPropertiesMap():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MemberPropertiesMap>(deep);

}
/// <summary>
/// Defines the XType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class XType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Shared Items Index.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 0)]
    public Int32Value Val { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the XType class.
    /// </summary>
    protected XType(){}
    
    
    
}
/// <summary>
/// <para>PivotCache Record.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:r.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MissingItem &lt;x:m></description></item>
///<item><description>NumberItem &lt;x:n></description></item>
///<item><description>BooleanItem &lt;x:b></description></item>
///<item><description>ErrorItem &lt;x:e></description></item>
///<item><description>StringItem &lt;x:s></description></item>
///<item><description>DateTimeItem &lt;x:d></description></item>
///<item><description>FieldItem &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MissingItem))]
    [ChildElementInfo(typeof(NumberItem))]
    [ChildElementInfo(typeof(BooleanItem))]
    [ChildElementInfo(typeof(ErrorItem))]
    [ChildElementInfo(typeof(StringItem))]
    [ChildElementInfo(typeof(DateTimeItem))]
    [ChildElementInfo(typeof(FieldItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "r")]
public partial class PivotCacheRecord : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11148;
    /// <inheritdoc/>
    public override string LocalName => "r";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecord class.
    /// </summary>
    public PivotCacheRecord():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotCacheRecord class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheRecord(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecord class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheRecord(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheRecord class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCacheRecord(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheRecord>(deep);

}
/// <summary>
/// <para>OLAP KPI.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:kpi.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "kpi")]
public partial class Kpi : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11149;
    /// <inheritdoc/>
    public override string LocalName => "kpi";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> KPI Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 0)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> KPI Display Name.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 1)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> KPI Display Folder.</para>
    /// <para>Represents the following attribute in the schema: displayFolder </para>
    /// </summary>
    [SchemaAttr(0, "displayFolder", 2)]
    public StringValue DisplayFolder { get; set; }
    /// <summary>
    /// <para> KPI Measure Group Name.</para>
    /// <para>Represents the following attribute in the schema: measureGroup </para>
    /// </summary>
    [SchemaAttr(0, "measureGroup", 3)]
    public StringValue MeasureGroup { get; set; }
    /// <summary>
    /// <para> Parent KPI.</para>
    /// <para>Represents the following attribute in the schema: parent </para>
    /// </summary>
    [SchemaAttr(0, "parent", 4)]
    public StringValue ParentKpi { get; set; }
    /// <summary>
    /// <para> KPI Value Unique Name.</para>
    /// <para>Represents the following attribute in the schema: value </para>
    /// </summary>
    [SchemaAttr(0, "value", 5)]
    public StringValue Value { get; set; }
    /// <summary>
    /// <para> KPI Goal Unique Name.</para>
    /// <para>Represents the following attribute in the schema: goal </para>
    /// </summary>
    [SchemaAttr(0, "goal", 6)]
    public StringValue Goal { get; set; }
    /// <summary>
    /// <para> KPI Status Unique Name.</para>
    /// <para>Represents the following attribute in the schema: status </para>
    /// </summary>
    [SchemaAttr(0, "status", 7)]
    public StringValue Status { get; set; }
    /// <summary>
    /// <para> KPI Trend Unique Name.</para>
    /// <para>Represents the following attribute in the schema: trend </para>
    /// </summary>
    [SchemaAttr(0, "trend", 8)]
    public StringValue Trend { get; set; }
    /// <summary>
    /// <para> KPI Weight Unique Name.</para>
    /// <para>Represents the following attribute in the schema: weight </para>
    /// </summary>
    [SchemaAttr(0, "weight", 9)]
    public StringValue Weight { get; set; }

    /// <summary>
    /// Initializes a new instance of the Kpi class.
    /// </summary>
    public Kpi():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kpi>(deep);

}
/// <summary>
/// <para>PivotCache Field Id.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fieldUsage.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fieldUsage")]
public partial class FieldUsage : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11150;
    /// <inheritdoc/>
    public override string LocalName => "fieldUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x", 0)]
    public Int32Value Index { get; set; }

    /// <summary>
    /// Initializes a new instance of the FieldUsage class.
    /// </summary>
    public FieldUsage():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldUsage>(deep);

}
/// <summary>
/// <para>OLAP Grouping Levels.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groupLevel.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Groups &lt;x:groups></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Groups))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groupLevel")]
public partial class GroupLevel : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11151;
    /// <inheritdoc/>
    public override string LocalName => "groupLevel";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 0)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> Grouping Level Display Name.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 1)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> User-Defined Group Level.</para>
    /// <para>Represents the following attribute in the schema: user </para>
    /// </summary>
    [SchemaAttr(0, "user", 2)]
    public BooleanValue User { get; set; }
    /// <summary>
    /// <para> Custom Roll Up.</para>
    /// <para>Represents the following attribute in the schema: customRollUp </para>
    /// </summary>
    [SchemaAttr(0, "customRollUp", 3)]
    public BooleanValue CustomRollUp { get; set; }

    /// <summary>
    /// Initializes a new instance of the GroupLevel class.
    /// </summary>
    public GroupLevel():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupLevel class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupLevel(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupLevel class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupLevel(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupLevel class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupLevel(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "groups","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> OLAP Level Groups.</para>
    /// <para> Represents the following element tag in the schema: x:groups </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Groups Groups
    {
        get => GetElement<Groups>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupLevel>(deep);

}
/// <summary>
/// <para>OLAP Level Groups.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groups.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Group &lt;x:group></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Group))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groups")]
public partial class Groups : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11152;
    /// <inheritdoc/>
    public override string LocalName => "groups";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Level Group Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Groups class.
    /// </summary>
    public Groups():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Groups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Groups(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Groups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Groups(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Groups class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Groups(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Groups>(deep);

}
/// <summary>
/// <para>OLAP Group.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:group.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GroupMembers &lt;x:groupMembers></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GroupMembers))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "group")]
public partial class Group : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11153;
    /// <inheritdoc/>
    public override string LocalName => "group";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Group Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Unique Group Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 1)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> Group Caption.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 2)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> Parent Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueParent </para>
    /// </summary>
    [SchemaAttr(0, "uniqueParent", 3)]
    public StringValue UniqueParent { get; set; }
    /// <summary>
    /// <para> Group Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 4)]
    public Int32Value Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the Group class.
    /// </summary>
    public Group():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Group class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Group(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Group class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Group(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Group class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Group(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "groupMembers" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> OLAP Group Members.</para>
    /// <para> Represents the following element tag in the schema: x:groupMembers </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public GroupMembers GroupMembers
    {
        get => GetElement<GroupMembers>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Group>(deep);

}
/// <summary>
/// <para>OLAP Group Members.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groupMembers.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GroupMember &lt;x:groupMember></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GroupMember))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groupMembers")]
public partial class GroupMembers : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11154;
    /// <inheritdoc/>
    public override string LocalName => "groupMembers";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Group Member Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the GroupMembers class.
    /// </summary>
    public GroupMembers():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupMembers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupMembers(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupMembers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupMembers(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupMembers class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupMembers(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupMembers>(deep);

}
/// <summary>
/// <para>OLAP Group Member.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groupMember.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groupMember")]
public partial class GroupMember : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11155;
    /// <inheritdoc/>
    public override string LocalName => "groupMember";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Group Member Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 0)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> Group.</para>
    /// <para>Represents the following attribute in the schema: group </para>
    /// </summary>
    [SchemaAttr(0, "group", 1)]
    public BooleanValue Group { get; set; }

    /// <summary>
    /// Initializes a new instance of the GroupMember class.
    /// </summary>
    public GroupMember():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupMember>(deep);

}
/// <summary>
/// <para>Entries.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:entries.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MissingItem &lt;x:m></description></item>
///<item><description>NumberItem &lt;x:n></description></item>
///<item><description>ErrorItem &lt;x:e></description></item>
///<item><description>StringItem &lt;x:s></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MissingItem))]
    [ChildElementInfo(typeof(NumberItem))]
    [ChildElementInfo(typeof(ErrorItem))]
    [ChildElementInfo(typeof(StringItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "entries")]
public partial class Entries : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11156;
    /// <inheritdoc/>
    public override string LocalName => "entries";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Tuple Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Entries class.
    /// </summary>
    public Entries():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Entries class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Entries(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Entries class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Entries(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Entries class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Entries(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Entries>(deep);

}
/// <summary>
/// <para>Sets.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sets.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TupleSet &lt;x:set></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TupleSet))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sets")]
public partial class Sets : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11157;
    /// <inheritdoc/>
    public override string LocalName => "sets";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Tuple Set Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Sets class.
    /// </summary>
    public Sets():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Sets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Sets(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Sets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Sets(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Sets class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Sets(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Sets>(deep);

}
/// <summary>
/// <para>OLAP Query Cache.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryCache.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Query &lt;x:query></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Query))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "queryCache")]
public partial class QueryCache : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11158;
    /// <inheritdoc/>
    public override string LocalName => "queryCache";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Cached Query Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryCache class.
    /// </summary>
    public QueryCache():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryCache class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryCache(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryCache class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryCache(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryCache class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryCache(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryCache>(deep);

}
/// <summary>
/// <para>Server Formats.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:serverFormats.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ServerFormat &lt;x:serverFormat></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ServerFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "serverFormats")]
public partial class ServerFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11159;
    /// <inheritdoc/>
    public override string LocalName => "serverFormats";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ServerFormats class.
    /// </summary>
    public ServerFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ServerFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ServerFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ServerFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ServerFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ServerFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ServerFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ServerFormats>(deep);

}
/// <summary>
/// <para>Server Format.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:serverFormat.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "serverFormat")]
public partial class ServerFormat : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11160;
    /// <inheritdoc/>
    public override string LocalName => "serverFormat";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Culture.</para>
    /// <para>Represents the following attribute in the schema: culture </para>
    /// </summary>
    [SchemaAttr(0, "culture", 0)]
    public StringValue Culture { get; set; }
    /// <summary>
    /// <para> Format.</para>
    /// <para>Represents the following attribute in the schema: format </para>
    /// </summary>
    [SchemaAttr(0, "format", 1)]
    public StringValue Format { get; set; }

    /// <summary>
    /// Initializes a new instance of the ServerFormat class.
    /// </summary>
    public ServerFormat():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ServerFormat>(deep);

}
/// <summary>
/// <para>Tuple.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tpl.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tpl")]
public partial class Tuple : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11161;
    /// <inheritdoc/>
    public override string LocalName => "tpl";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: fld </para>
    /// </summary>
    [SchemaAttr(0, "fld", 0)]
    public UInt32Value Field { get; set; }
    /// <summary>
    /// <para> Hierarchy Index.</para>
    /// <para>Represents the following attribute in the schema: hier </para>
    /// </summary>
    [SchemaAttr(0, "hier", 1)]
    public UInt32Value Hierarchy { get; set; }
    /// <summary>
    /// <para> Item Index.</para>
    /// <para>Represents the following attribute in the schema: item </para>
    /// </summary>
    [SchemaAttr(0, "item", 2)]
    public UInt32Value Item { get; set; }

    /// <summary>
    /// Initializes a new instance of the Tuple class.
    /// </summary>
    public Tuple():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tuple>(deep);

}
/// <summary>
/// <para>OLAP Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:set.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
///<item><description>SortByTuple &lt;x:sortByTuple></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
    [ChildElementInfo(typeof(SortByTuple))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "set")]
public partial class TupleSet : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11162;
    /// <inheritdoc/>
    public override string LocalName => "set";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Number of Tuples.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Maximum Rank Requested.</para>
    /// <para>Represents the following attribute in the schema: maxRank </para>
    /// </summary>
    [SchemaAttr(0, "maxRank", 1)]
    public Int32Value MaxRank { get; set; }
    /// <summary>
    /// <para> MDX Set Definition.</para>
    /// <para>Represents the following attribute in the schema: setDefinition </para>
    /// </summary>
    [SchemaAttr(0, "setDefinition", 2)]
    public StringValue SetDefinition { get; set; }
    /// <summary>
    /// <para> Set Sort Order.</para>
    /// <para>Represents the following attribute in the schema: sortType </para>
    /// </summary>
    [SchemaAttr(0, "sortType", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SortValues> SortType { get; set; }
    /// <summary>
    /// <para> Query Failed.</para>
    /// <para>Represents the following attribute in the schema: queryFailed </para>
    /// </summary>
    [SchemaAttr(0, "queryFailed", 4)]
    public BooleanValue QueryFailed { get; set; }

    /// <summary>
    /// Initializes a new instance of the TupleSet class.
    /// </summary>
    public TupleSet():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TupleSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TupleSet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TupleSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TupleSet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TupleSet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TupleSet(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TupleSet>(deep);

}
/// <summary>
/// <para>Query.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:query.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tuples &lt;x:tpls></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tuples))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "query")]
public partial class Query : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11164;
    /// <inheritdoc/>
    public override string LocalName => "query";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> MDX Query String.</para>
    /// <para>Represents the following attribute in the schema: mdx </para>
    /// </summary>
    [SchemaAttr(0, "mdx", 0)]
    public StringValue Mdx { get; set; }

    /// <summary>
    /// Initializes a new instance of the Query class.
    /// </summary>
    public Query():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Query class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Query(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Query class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Query(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Query class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Query(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "tpls" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Tuples.</para>
    /// <para> Represents the following element tag in the schema: x:tpls </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Tuples Tuples
    {
        get => GetElement<Tuples>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Query>(deep);

}
/// <summary>
/// <para>Calculated Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calculatedItem.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "calculatedItem")]
public partial class CalculatedItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11165;
    /// <inheritdoc/>
    public override string LocalName => "calculatedItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: field </para>
    /// </summary>
    [SchemaAttr(0, "field", 0)]
    public UInt32Value Field { get; set; }
    /// <summary>
    /// <para> Calculated Item Formula.</para>
    /// <para>Represents the following attribute in the schema: formula </para>
    /// </summary>
    [SchemaAttr(0, "formula", 1)]
    public StringValue Formula { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculatedItem class.
    /// </summary>
    public CalculatedItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotArea","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Calculated Item Location.</para>
    /// <para> Represents the following element tag in the schema: x:pivotArea </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotArea PivotArea
    {
        get => GetElement<PivotArea>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedItem>(deep);

}
/// <summary>
/// <para>Calculated Item Location.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotArea.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotAreaReferences &lt;x:references></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotAreaReferences))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotArea")]
public partial class PivotArea : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11166;
    /// <inheritdoc/>
    public override string LocalName => "pivotArea";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: field </para>
    /// </summary>
    [SchemaAttr(0, "field", 0)]
    public Int32Value Field { get; set; }
    /// <summary>
    /// <para> Rule Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PivotAreaValues> Type { get; set; }
    /// <summary>
    /// <para> Data Only.</para>
    /// <para>Represents the following attribute in the schema: dataOnly </para>
    /// </summary>
    [SchemaAttr(0, "dataOnly", 2)]
    public BooleanValue DataOnly { get; set; }
    /// <summary>
    /// <para> Labels Only.</para>
    /// <para>Represents the following attribute in the schema: labelOnly </para>
    /// </summary>
    [SchemaAttr(0, "labelOnly", 3)]
    public BooleanValue LabelOnly { get; set; }
    /// <summary>
    /// <para> Include Row Grand Total.</para>
    /// <para>Represents the following attribute in the schema: grandRow </para>
    /// </summary>
    [SchemaAttr(0, "grandRow", 4)]
    public BooleanValue GrandRow { get; set; }
    /// <summary>
    /// <para> Include Column Grand Total.</para>
    /// <para>Represents the following attribute in the schema: grandCol </para>
    /// </summary>
    [SchemaAttr(0, "grandCol", 5)]
    public BooleanValue GrandColumn { get; set; }
    /// <summary>
    /// <para> Cache Index.</para>
    /// <para>Represents the following attribute in the schema: cacheIndex </para>
    /// </summary>
    [SchemaAttr(0, "cacheIndex", 6)]
    public BooleanValue CacheIndex { get; set; }
    /// <summary>
    /// <para> Outline.</para>
    /// <para>Represents the following attribute in the schema: outline </para>
    /// </summary>
    [SchemaAttr(0, "outline", 7)]
    public BooleanValue Outline { get; set; }
    /// <summary>
    /// <para> Offset Reference.</para>
    /// <para>Represents the following attribute in the schema: offset </para>
    /// </summary>
    [SchemaAttr(0, "offset", 8)]
    public StringValue Offset { get; set; }
    /// <summary>
    /// <para> Collapsed Levels Are Subtotals.</para>
    /// <para>Represents the following attribute in the schema: collapsedLevelsAreSubtotals </para>
    /// </summary>
    [SchemaAttr(0, "collapsedLevelsAreSubtotals", 9)]
    public BooleanValue CollapsedLevelsAreSubtotals { get; set; }
    /// <summary>
    /// <para> Axis.</para>
    /// <para>Represents the following attribute in the schema: axis </para>
    /// </summary>
    [SchemaAttr(0, "axis", 10)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PivotTableAxisValues> Axis { get; set; }
    /// <summary>
    /// <para> Field Position.</para>
    /// <para>Represents the following attribute in the schema: fieldPosition </para>
    /// </summary>
    [SchemaAttr(0, "fieldPosition", 11)]
    public UInt32Value FieldPosition { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotArea class.
    /// </summary>
    public PivotArea():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotArea class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotArea(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotArea class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotArea(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotArea class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotArea(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "references","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> References.</para>
    /// <para> Represents the following element tag in the schema: x:references </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotAreaReferences PivotAreaReferences
    {
        get => GetElement<PivotAreaReferences>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotArea>(deep);

}
/// <summary>
/// <para>Calculated Member.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calculatedMember.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculatedMemberExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CalculatedMemberExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "calculatedMember")]
public partial class CalculatedMember : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11167;
    /// <inheritdoc/>
    public override string LocalName => "calculatedMember";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> mdx.</para>
    /// <para>Represents the following attribute in the schema: mdx </para>
    /// </summary>
    [SchemaAttr(0, "mdx", 1)]
    public StringValue Mdx { get; set; }
    /// <summary>
    /// <para> memberName.</para>
    /// <para>Represents the following attribute in the schema: memberName </para>
    /// </summary>
    [SchemaAttr(0, "memberName", 2)]
    public StringValue MemberName { get; set; }
    /// <summary>
    /// <para> hierarchy.</para>
    /// <para>Represents the following attribute in the schema: hierarchy </para>
    /// </summary>
    [SchemaAttr(0, "hierarchy", 3)]
    public StringValue Hierarchy { get; set; }
    /// <summary>
    /// <para> parent.</para>
    /// <para>Represents the following attribute in the schema: parent </para>
    /// </summary>
    [SchemaAttr(0, "parent", 4)]
    public StringValue ParentName { get; set; }
    /// <summary>
    /// <para> solveOrder.</para>
    /// <para>Represents the following attribute in the schema: solveOrder </para>
    /// </summary>
    [SchemaAttr(0, "solveOrder", 5)]
    public Int32Value SolveOrder { get; set; }
    /// <summary>
    /// <para> set.</para>
    /// <para>Represents the following attribute in the schema: set </para>
    /// </summary>
    [SchemaAttr(0, "set", 6)]
    public BooleanValue Set { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculatedMember class.
    /// </summary>
    public CalculatedMember():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedMember class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMember(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMember class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMember(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMember class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedMember(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> CalculatedMemberExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CalculatedMemberExtensionList CalculatedMemberExtensionList
    {
        get => GetElement<CalculatedMemberExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedMember>(deep);

}
/// <summary>
/// <para>PivotTable Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotField.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Items &lt;x:items></description></item>
///<item><description>AutoSortScope &lt;x:autoSortScope></description></item>
///<item><description>PivotFieldExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Items))]
    [ChildElementInfo(typeof(AutoSortScope))]
    [ChildElementInfo(typeof(PivotFieldExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotField")]
public partial class PivotField : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11168;
    /// <inheritdoc/>
    public override string LocalName => "pivotField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Axis.</para>
    /// <para>Represents the following attribute in the schema: axis </para>
    /// </summary>
    [SchemaAttr(0, "axis", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PivotTableAxisValues> Axis { get; set; }
    /// <summary>
    /// <para> Data Field.</para>
    /// <para>Represents the following attribute in the schema: dataField </para>
    /// </summary>
    [SchemaAttr(0, "dataField", 2)]
    public BooleanValue DataField { get; set; }
    /// <summary>
    /// <para> Custom Subtotal Caption.</para>
    /// <para>Represents the following attribute in the schema: subtotalCaption </para>
    /// </summary>
    [SchemaAttr(0, "subtotalCaption", 3)]
    public StringValue SubtotalCaption { get; set; }
    /// <summary>
    /// <para> Show PivotField Header Drop Downs.</para>
    /// <para>Represents the following attribute in the schema: showDropDowns </para>
    /// </summary>
    [SchemaAttr(0, "showDropDowns", 4)]
    public BooleanValue ShowDropDowns { get; set; }
    /// <summary>
    /// <para> Hidden Level.</para>
    /// <para>Represents the following attribute in the schema: hiddenLevel </para>
    /// </summary>
    [SchemaAttr(0, "hiddenLevel", 5)]
    public BooleanValue HiddenLevel { get; set; }
    /// <summary>
    /// <para> Unique Member Property.</para>
    /// <para>Represents the following attribute in the schema: uniqueMemberProperty </para>
    /// </summary>
    [SchemaAttr(0, "uniqueMemberProperty", 6)]
    public StringValue UniqueMemberProperty { get; set; }
    /// <summary>
    /// <para> Compact.</para>
    /// <para>Represents the following attribute in the schema: compact </para>
    /// </summary>
    [SchemaAttr(0, "compact", 7)]
    public BooleanValue Compact { get; set; }
    /// <summary>
    /// <para> All Items Expanded.</para>
    /// <para>Represents the following attribute in the schema: allDrilled </para>
    /// </summary>
    [SchemaAttr(0, "allDrilled", 8)]
    public BooleanValue AllDrilled { get; set; }
    /// <summary>
    /// <para> Number Format Id.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 9)]
    public UInt32Value NumberFormatId { get; set; }
    /// <summary>
    /// <para> Outline Items.</para>
    /// <para>Represents the following attribute in the schema: outline </para>
    /// </summary>
    [SchemaAttr(0, "outline", 10)]
    public BooleanValue Outline { get; set; }
    /// <summary>
    /// <para> Subtotals At Top.</para>
    /// <para>Represents the following attribute in the schema: subtotalTop </para>
    /// </summary>
    [SchemaAttr(0, "subtotalTop", 11)]
    public BooleanValue SubtotalTop { get; set; }
    /// <summary>
    /// <para> Drag To Row.</para>
    /// <para>Represents the following attribute in the schema: dragToRow </para>
    /// </summary>
    [SchemaAttr(0, "dragToRow", 12)]
    public BooleanValue DragToRow { get; set; }
    /// <summary>
    /// <para> Drag To Column.</para>
    /// <para>Represents the following attribute in the schema: dragToCol </para>
    /// </summary>
    [SchemaAttr(0, "dragToCol", 13)]
    public BooleanValue DragToColumn { get; set; }
    /// <summary>
    /// <para> Multiple Field Filters.</para>
    /// <para>Represents the following attribute in the schema: multipleItemSelectionAllowed </para>
    /// </summary>
    [SchemaAttr(0, "multipleItemSelectionAllowed", 14)]
    public BooleanValue MultipleItemSelectionAllowed { get; set; }
    /// <summary>
    /// <para> Drag Field to Page.</para>
    /// <para>Represents the following attribute in the schema: dragToPage </para>
    /// </summary>
    [SchemaAttr(0, "dragToPage", 15)]
    public BooleanValue DragToPage { get; set; }
    /// <summary>
    /// <para> Field Can Drag to Data.</para>
    /// <para>Represents the following attribute in the schema: dragToData </para>
    /// </summary>
    [SchemaAttr(0, "dragToData", 16)]
    public BooleanValue DragToData { get; set; }
    /// <summary>
    /// <para> Drag Off.</para>
    /// <para>Represents the following attribute in the schema: dragOff </para>
    /// </summary>
    [SchemaAttr(0, "dragOff", 17)]
    public BooleanValue DragOff { get; set; }
    /// <summary>
    /// <para> Show All Items.</para>
    /// <para>Represents the following attribute in the schema: showAll </para>
    /// </summary>
    [SchemaAttr(0, "showAll", 18)]
    public BooleanValue ShowAll { get; set; }
    /// <summary>
    /// <para> Insert Blank Row.</para>
    /// <para>Represents the following attribute in the schema: insertBlankRow </para>
    /// </summary>
    [SchemaAttr(0, "insertBlankRow", 19)]
    public BooleanValue InsertBlankRow { get; set; }
    /// <summary>
    /// <para> Server-based Page Field.</para>
    /// <para>Represents the following attribute in the schema: serverField </para>
    /// </summary>
    [SchemaAttr(0, "serverField", 20)]
    public BooleanValue ServerField { get; set; }
    /// <summary>
    /// <para> Insert Item Page Break.</para>
    /// <para>Represents the following attribute in the schema: insertPageBreak </para>
    /// </summary>
    [SchemaAttr(0, "insertPageBreak", 21)]
    public BooleanValue InsertPageBreak { get; set; }
    /// <summary>
    /// <para> Auto Show.</para>
    /// <para>Represents the following attribute in the schema: autoShow </para>
    /// </summary>
    [SchemaAttr(0, "autoShow", 22)]
    public BooleanValue AutoShow { get; set; }
    /// <summary>
    /// <para> Top Auto Show.</para>
    /// <para>Represents the following attribute in the schema: topAutoShow </para>
    /// </summary>
    [SchemaAttr(0, "topAutoShow", 23)]
    public BooleanValue TopAutoShow { get; set; }
    /// <summary>
    /// <para> Hide New Items.</para>
    /// <para>Represents the following attribute in the schema: hideNewItems </para>
    /// </summary>
    [SchemaAttr(0, "hideNewItems", 24)]
    public BooleanValue HideNewItems { get; set; }
    /// <summary>
    /// <para> Measure Filter.</para>
    /// <para>Represents the following attribute in the schema: measureFilter </para>
    /// </summary>
    [SchemaAttr(0, "measureFilter", 25)]
    public BooleanValue MeasureFilter { get; set; }
    /// <summary>
    /// <para> Inclusive Manual Filter.</para>
    /// <para>Represents the following attribute in the schema: includeNewItemsInFilter </para>
    /// </summary>
    [SchemaAttr(0, "includeNewItemsInFilter", 26)]
    public BooleanValue IncludeNewItemsInFilter { get; set; }
    /// <summary>
    /// <para> Items Per Page Count.</para>
    /// <para>Represents the following attribute in the schema: itemPageCount </para>
    /// </summary>
    [SchemaAttr(0, "itemPageCount", 27)]
    public UInt32Value ItemPageCount { get; set; }
    /// <summary>
    /// <para> Auto Sort Type.</para>
    /// <para>Represents the following attribute in the schema: sortType </para>
    /// </summary>
    [SchemaAttr(0, "sortType", 28)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FieldSortValues> SortType { get; set; }
    /// <summary>
    /// <para> Data Source Sort.</para>
    /// <para>Represents the following attribute in the schema: dataSourceSort </para>
    /// </summary>
    [SchemaAttr(0, "dataSourceSort", 29)]
    public BooleanValue DataSourceSort { get; set; }
    /// <summary>
    /// <para> Auto Sort.</para>
    /// <para>Represents the following attribute in the schema: nonAutoSortDefault </para>
    /// </summary>
    [SchemaAttr(0, "nonAutoSortDefault", 30)]
    public BooleanValue NonAutoSortDefault { get; set; }
    /// <summary>
    /// <para> Auto Show Rank By.</para>
    /// <para>Represents the following attribute in the schema: rankBy </para>
    /// </summary>
    [SchemaAttr(0, "rankBy", 31)]
    public UInt32Value RankBy { get; set; }
    /// <summary>
    /// <para> Show Default Subtotal.</para>
    /// <para>Represents the following attribute in the schema: defaultSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "defaultSubtotal", 32)]
    public BooleanValue DefaultSubtotal { get; set; }
    /// <summary>
    /// <para> Sum Subtotal.</para>
    /// <para>Represents the following attribute in the schema: sumSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "sumSubtotal", 33)]
    public BooleanValue SumSubtotal { get; set; }
    /// <summary>
    /// <para> CountA.</para>
    /// <para>Represents the following attribute in the schema: countASubtotal </para>
    /// </summary>
    [SchemaAttr(0, "countASubtotal", 34)]
    public BooleanValue CountASubtotal { get; set; }
    /// <summary>
    /// <para> Average.</para>
    /// <para>Represents the following attribute in the schema: avgSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "avgSubtotal", 35)]
    public BooleanValue AverageSubTotal { get; set; }
    /// <summary>
    /// <para> Max Subtotal.</para>
    /// <para>Represents the following attribute in the schema: maxSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "maxSubtotal", 36)]
    public BooleanValue MaxSubtotal { get; set; }
    /// <summary>
    /// <para> Min Subtotal.</para>
    /// <para>Represents the following attribute in the schema: minSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "minSubtotal", 37)]
    public BooleanValue MinSubtotal { get; set; }
    /// <summary>
    /// <para> Product Subtotal.</para>
    /// <para>Represents the following attribute in the schema: productSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "productSubtotal", 38)]
    public BooleanValue ApplyProductInSubtotal { get; set; }
    /// <summary>
    /// <para> Count.</para>
    /// <para>Represents the following attribute in the schema: countSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "countSubtotal", 39)]
    public BooleanValue CountSubtotal { get; set; }
    /// <summary>
    /// <para> StdDev Subtotal.</para>
    /// <para>Represents the following attribute in the schema: stdDevSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "stdDevSubtotal", 40)]
    public BooleanValue ApplyStandardDeviationInSubtotal { get; set; }
    /// <summary>
    /// <para> StdDevP Subtotal.</para>
    /// <para>Represents the following attribute in the schema: stdDevPSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "stdDevPSubtotal", 41)]
    public BooleanValue ApplyStandardDeviationPInSubtotal { get; set; }
    /// <summary>
    /// <para> Variance Subtotal.</para>
    /// <para>Represents the following attribute in the schema: varSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "varSubtotal", 42)]
    public BooleanValue ApplyVarianceInSubtotal { get; set; }
    /// <summary>
    /// <para> VarP Subtotal.</para>
    /// <para>Represents the following attribute in the schema: varPSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "varPSubtotal", 43)]
    public BooleanValue ApplyVariancePInSubtotal { get; set; }
    /// <summary>
    /// <para> Show Member Property in Cell.</para>
    /// <para>Represents the following attribute in the schema: showPropCell </para>
    /// </summary>
    [SchemaAttr(0, "showPropCell", 44)]
    public BooleanValue ShowPropCell { get; set; }
    /// <summary>
    /// <para> Show Member Property ToolTip.</para>
    /// <para>Represents the following attribute in the schema: showPropTip </para>
    /// </summary>
    [SchemaAttr(0, "showPropTip", 45)]
    public BooleanValue ShowPropertyTooltip { get; set; }
    /// <summary>
    /// <para> Show As Caption.</para>
    /// <para>Represents the following attribute in the schema: showPropAsCaption </para>
    /// </summary>
    [SchemaAttr(0, "showPropAsCaption", 46)]
    public BooleanValue ShowPropAsCaption { get; set; }
    /// <summary>
    /// <para> Drill State.</para>
    /// <para>Represents the following attribute in the schema: defaultAttributeDrillState </para>
    /// </summary>
    [SchemaAttr(0, "defaultAttributeDrillState", 47)]
    public BooleanValue DefaultAttributeDrillState { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotField class.
    /// </summary>
    public PivotField():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotField(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotField(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotField class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotField(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "items","autoSortScope","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Field Items.</para>
    /// <para> Represents the following element tag in the schema: x:items </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Items Items
    {
        get => GetElement<Items>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> AutoSort Scope.</para>
    /// <para> Represents the following element tag in the schema: x:autoSortScope </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public AutoSortScope AutoSortScope
    {
        get => GetElement<AutoSortScope>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotFieldExtensionList PivotFieldExtensionList
    {
        get => GetElement<PivotFieldExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotField>(deep);

}
/// <summary>
/// <para>PivotTable Field Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:item.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "item")]
public partial class Item : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11169;
    /// <inheritdoc/>
    public override string LocalName => "item";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Item User Caption.</para>
    /// <para>Represents the following attribute in the schema: n </para>
    /// </summary>
    [SchemaAttr(0, "n", 0)]
    public StringValue ItemName { get; set; }
    /// <summary>
    /// <para> Item Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ItemValues> ItemType { get; set; }
    /// <summary>
    /// <para> Hidden.</para>
    /// <para>Represents the following attribute in the schema: h </para>
    /// </summary>
    [SchemaAttr(0, "h", 2)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Character.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 3)]
    public BooleanValue HasStringVlue { get; set; }
    /// <summary>
    /// <para> Hide Details.</para>
    /// <para>Represents the following attribute in the schema: sd </para>
    /// </summary>
    [SchemaAttr(0, "sd", 4)]
    public BooleanValue HideDetails { get; set; }
    /// <summary>
    /// <para> Calculated Member.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 5)]
    public BooleanValue Calculated { get; set; }
    /// <summary>
    /// <para> Missing.</para>
    /// <para>Represents the following attribute in the schema: m </para>
    /// </summary>
    [SchemaAttr(0, "m", 6)]
    public BooleanValue Missing { get; set; }
    /// <summary>
    /// <para> Child Items.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 7)]
    public BooleanValue ChildItems { get; set; }
    /// <summary>
    /// <para> Item Index.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x", 8)]
    public UInt32Value Index { get; set; }
    /// <summary>
    /// <para> Expanded.</para>
    /// <para>Represents the following attribute in the schema: d </para>
    /// </summary>
    [SchemaAttr(0, "d", 9)]
    public BooleanValue Expanded { get; set; }
    /// <summary>
    /// <para> Drill Across Attributes.</para>
    /// <para>Represents the following attribute in the schema: e </para>
    /// </summary>
    [SchemaAttr(0, "e", 10)]
    public BooleanValue DrillAcrossAttributes { get; set; }

    /// <summary>
    /// Initializes a new instance of the Item class.
    /// </summary>
    public Item():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Item>(deep);

}
/// <summary>
/// <para>Data Field Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataField.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataFieldExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataFieldExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataField")]
public partial class DataField : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11170;
    /// <inheritdoc/>
    public override string LocalName => "dataField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> fld.</para>
    /// <para>Represents the following attribute in the schema: fld </para>
    /// </summary>
    [SchemaAttr(0, "fld", 1)]
    public UInt32Value Field { get; set; }
    /// <summary>
    /// <para> subtotal.</para>
    /// <para>Represents the following attribute in the schema: subtotal </para>
    /// </summary>
    [SchemaAttr(0, "subtotal", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataConsolidateFunctionValues> Subtotal { get; set; }
    /// <summary>
    /// <para> showDataAs.</para>
    /// <para>Represents the following attribute in the schema: showDataAs </para>
    /// </summary>
    [SchemaAttr(0, "showDataAs", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ShowDataAsValues> ShowDataAs { get; set; }
    /// <summary>
    /// <para> baseField.</para>
    /// <para>Represents the following attribute in the schema: baseField </para>
    /// </summary>
    [SchemaAttr(0, "baseField", 4)]
    public Int32Value BaseField { get; set; }
    /// <summary>
    /// <para> baseItem.</para>
    /// <para>Represents the following attribute in the schema: baseItem </para>
    /// </summary>
    [SchemaAttr(0, "baseItem", 5)]
    public UInt32Value BaseItem { get; set; }
    /// <summary>
    /// <para> numFmtId.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 6)]
    public UInt32Value NumberFormatId { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataField class.
    /// </summary>
    public DataField():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataField(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataField(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataField class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataField(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> DataFieldExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DataFieldExtensionList DataFieldExtensionList
    {
        get => GetElement<DataFieldExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataField>(deep);

}
/// <summary>
/// <para>Row Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:i.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MemberPropertyIndex &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MemberPropertyIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "i")]
public partial class RowItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11171;
    /// <inheritdoc/>
    public override string LocalName => "i";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Item Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ItemValues> ItemType { get; set; }
    /// <summary>
    /// <para> Repeated Items Count.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 1)]
    public UInt32Value RepeatedItemCount { get; set; }
    /// <summary>
    /// <para> Data Field Index.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 2)]
    public UInt32Value Index { get; set; }

    /// <summary>
    /// Initializes a new instance of the RowItem class.
    /// </summary>
    public RowItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RowItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RowItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RowItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RowItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowItem>(deep);

}
/// <summary>
/// <para>Row Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:field.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "field")]
public partial class Field : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11172;
    /// <inheritdoc/>
    public override string LocalName => "field";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x", 0)]
    public Int32Value Index { get; set; }

    /// <summary>
    /// Initializes a new instance of the Field class.
    /// </summary>
    public Field():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Field>(deep);

}
/// <summary>
/// <para>PivotTable Format.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:format.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "format")]
public partial class Format : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11173;
    /// <inheritdoc/>
    public override string LocalName => "format";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Format Action.</para>
    /// <para>Represents the following attribute in the schema: action </para>
    /// </summary>
    [SchemaAttr(0, "action", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FormatActionValues> Action { get; set; }
    /// <summary>
    /// <para> Format Id.</para>
    /// <para>Represents the following attribute in the schema: dxfId </para>
    /// </summary>
    [SchemaAttr(0, "dxfId", 1)]
    public UInt32Value FormatId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Format class.
    /// </summary>
    public Format():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Format class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Format(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Format class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Format(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Format class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Format(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotArea","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Pivot Table Location.</para>
    /// <para> Represents the following element tag in the schema: x:pivotArea </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotArea PivotArea
    {
        get => GetElement<PivotArea>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Format>(deep);

}
/// <summary>
/// <para>Conditional Formatting.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:conditionalFormat.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotAreas &lt;x:pivotAreas></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotAreas))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "conditionalFormat")]
public partial class ConditionalFormat : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11174;
    /// <inheritdoc/>
    public override string LocalName => "conditionalFormat";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Conditional Formatting Scope.</para>
    /// <para>Represents the following attribute in the schema: scope </para>
    /// </summary>
    [SchemaAttr(0, "scope", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ScopeValues> Scope { get; set; }
    /// <summary>
    /// <para> Conditional Formatting Rule Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.RuleValues> Type { get; set; }
    /// <summary>
    /// <para> Priority.</para>
    /// <para>Represents the following attribute in the schema: priority </para>
    /// </summary>
    [SchemaAttr(0, "priority", 2)]
    public UInt32Value Priority { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormat class.
    /// </summary>
    public ConditionalFormat():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormat(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotAreas","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Pivot Areas.</para>
    /// <para> Represents the following element tag in the schema: x:pivotAreas </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotAreas PivotAreas
    {
        get => GetElement<PivotAreas>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormat>(deep);

}
/// <summary>
/// <para>Pivot Areas.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotAreas.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotAreas")]
public partial class PivotAreas : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11175;
    /// <inheritdoc/>
    public override string LocalName => "pivotAreas";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pivot Area Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotAreas class.
    /// </summary>
    public PivotAreas():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotAreas class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreas(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreas class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreas(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreas class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotAreas(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotAreas>(deep);

}
/// <summary>
/// <para>PivotChart Format.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:chartFormat.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "chartFormat")]
public partial class ChartFormat : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11176;
    /// <inheritdoc/>
    public override string LocalName => "chartFormat";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Chart Index.</para>
    /// <para>Represents the following attribute in the schema: chart </para>
    /// </summary>
    [SchemaAttr(0, "chart", 0)]
    public UInt32Value Chart { get; set; }
    /// <summary>
    /// <para> Pivot Format Id.</para>
    /// <para>Represents the following attribute in the schema: format </para>
    /// </summary>
    [SchemaAttr(0, "format", 1)]
    public UInt32Value Format { get; set; }
    /// <summary>
    /// <para> Series Format.</para>
    /// <para>Represents the following attribute in the schema: series </para>
    /// </summary>
    [SchemaAttr(0, "series", 2)]
    public BooleanValue Series { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartFormat class.
    /// </summary>
    public ChartFormat():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ChartFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ChartFormat(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotArea" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Pivot Table Location Rule.</para>
    /// <para> Represents the following element tag in the schema: x:pivotArea </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotArea PivotArea
    {
        get => GetElement<PivotArea>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartFormat>(deep);

}
/// <summary>
/// <para>OLAP Hierarchy.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotHierarchy.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MemberProperties &lt;x:mps></description></item>
///<item><description>Members &lt;x:members></description></item>
///<item><description>PivotHierarchyExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MemberProperties))]
    [ChildElementInfo(typeof(Members))]
    [ChildElementInfo(typeof(PivotHierarchyExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotHierarchy")]
public partial class PivotHierarchy : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11177;
    /// <inheritdoc/>
    public override string LocalName => "pivotHierarchy";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Outline New Levels.</para>
    /// <para>Represents the following attribute in the schema: outline </para>
    /// </summary>
    [SchemaAttr(0, "outline", 0)]
    public BooleanValue Outline { get; set; }
    /// <summary>
    /// <para> Multiple Field Filters.</para>
    /// <para>Represents the following attribute in the schema: multipleItemSelectionAllowed </para>
    /// </summary>
    [SchemaAttr(0, "multipleItemSelectionAllowed", 1)]
    public BooleanValue MultipleItemSelectionAllowed { get; set; }
    /// <summary>
    /// <para> New Levels Subtotals At Top.</para>
    /// <para>Represents the following attribute in the schema: subtotalTop </para>
    /// </summary>
    [SchemaAttr(0, "subtotalTop", 2)]
    public BooleanValue SubtotalTop { get; set; }
    /// <summary>
    /// <para> Show In Field List.</para>
    /// <para>Represents the following attribute in the schema: showInFieldList </para>
    /// </summary>
    [SchemaAttr(0, "showInFieldList", 3)]
    public BooleanValue ShowInFieldList { get; set; }
    /// <summary>
    /// <para> Drag To Row.</para>
    /// <para>Represents the following attribute in the schema: dragToRow </para>
    /// </summary>
    [SchemaAttr(0, "dragToRow", 4)]
    public BooleanValue DragToRow { get; set; }
    /// <summary>
    /// <para> Drag To Column.</para>
    /// <para>Represents the following attribute in the schema: dragToCol </para>
    /// </summary>
    [SchemaAttr(0, "dragToCol", 5)]
    public BooleanValue DragToColumn { get; set; }
    /// <summary>
    /// <para> Drag to Page.</para>
    /// <para>Represents the following attribute in the schema: dragToPage </para>
    /// </summary>
    [SchemaAttr(0, "dragToPage", 6)]
    public BooleanValue DragToPage { get; set; }
    /// <summary>
    /// <para> Drag To Data.</para>
    /// <para>Represents the following attribute in the schema: dragToData </para>
    /// </summary>
    [SchemaAttr(0, "dragToData", 7)]
    public BooleanValue DragToData { get; set; }
    /// <summary>
    /// <para> Drag Off.</para>
    /// <para>Represents the following attribute in the schema: dragOff </para>
    /// </summary>
    [SchemaAttr(0, "dragOff", 8)]
    public BooleanValue DragOff { get; set; }
    /// <summary>
    /// <para> Inclusive Manual Filter.</para>
    /// <para>Represents the following attribute in the schema: includeNewItemsInFilter </para>
    /// </summary>
    [SchemaAttr(0, "includeNewItemsInFilter", 9)]
    public BooleanValue IncludeNewItemsInFilter { get; set; }
    /// <summary>
    /// <para> Hierarchy Caption.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 10)]
    public StringValue Caption { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotHierarchy class.
    /// </summary>
    public PivotHierarchy():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotHierarchy class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchy(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchy class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchy(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchy class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotHierarchy(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "mps","members","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> OLAP Member Properties.</para>
    /// <para> Represents the following element tag in the schema: x:mps </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MemberProperties MemberProperties
    {
        get => GetElement<MemberProperties>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotHierarchy>(deep);

}
/// <summary>
/// <para>Row OLAP Hierarchies.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rowHierarchyUsage.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "rowHierarchyUsage")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RowHierarchyUsage : HierarchyUsageType
{
    internal const int ElementTypeIdConst = 11178;
    /// <inheritdoc/>
    public override string LocalName => "rowHierarchyUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the RowHierarchyUsage class.
    /// </summary>
    public RowHierarchyUsage():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowHierarchyUsage>(deep);

}
/// <summary>
/// <para>Column OLAP Hierarchies.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colHierarchyUsage.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "colHierarchyUsage")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ColumnHierarchyUsage : HierarchyUsageType
{
    internal const int ElementTypeIdConst = 11190;
    /// <inheritdoc/>
    public override string LocalName => "colHierarchyUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the ColumnHierarchyUsage class.
    /// </summary>
    public ColumnHierarchyUsage():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnHierarchyUsage>(deep);

}
/// <summary>
/// Defines the HierarchyUsageType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class HierarchyUsageType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Hierarchy Usage.</para>
    /// <para>Represents the following attribute in the schema: hierarchyUsage </para>
    /// </summary>
    [SchemaAttr(0, "hierarchyUsage", 0)]
    public Int32Value Value { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the HierarchyUsageType class.
    /// </summary>
    protected HierarchyUsageType(){}
    
    
    
}
/// <summary>
/// <para>OLAP Member Property.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mp.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mp")]
public partial class MemberProperty : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11179;
    /// <inheritdoc/>
    public override string LocalName => "mp";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLAP Member Property Unique Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Show Cell.</para>
    /// <para>Represents the following attribute in the schema: showCell </para>
    /// </summary>
    [SchemaAttr(0, "showCell", 1)]
    public BooleanValue ShowCell { get; set; }
    /// <summary>
    /// <para> Show Tooltip.</para>
    /// <para>Represents the following attribute in the schema: showTip </para>
    /// </summary>
    [SchemaAttr(0, "showTip", 2)]
    public BooleanValue ShowTip { get; set; }
    /// <summary>
    /// <para> Show As Caption.</para>
    /// <para>Represents the following attribute in the schema: showAsCaption </para>
    /// </summary>
    [SchemaAttr(0, "showAsCaption", 3)]
    public BooleanValue ShowAsCaption { get; set; }
    /// <summary>
    /// <para> Name Length.</para>
    /// <para>Represents the following attribute in the schema: nameLen </para>
    /// </summary>
    [SchemaAttr(0, "nameLen", 4)]
    public UInt32Value NameLength { get; set; }
    /// <summary>
    /// <para> Property Name Character Index.</para>
    /// <para>Represents the following attribute in the schema: pPos </para>
    /// </summary>
    [SchemaAttr(0, "pPos", 5)]
    public UInt32Value PropertyNamePosition { get; set; }
    /// <summary>
    /// <para> Property Name Length.</para>
    /// <para>Represents the following attribute in the schema: pLen </para>
    /// </summary>
    [SchemaAttr(0, "pLen", 6)]
    public UInt32Value PropertyNameLength { get; set; }
    /// <summary>
    /// <para> Level Index.</para>
    /// <para>Represents the following attribute in the schema: level </para>
    /// </summary>
    [SchemaAttr(0, "level", 7)]
    public UInt32Value Level { get; set; }
    /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: field </para>
    /// </summary>
    [SchemaAttr(0, "field", 8)]
    public UInt32Value Field { get; set; }

    /// <summary>
    /// Initializes a new instance of the MemberProperty class.
    /// </summary>
    public MemberProperty():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MemberProperty>(deep);

}
/// <summary>
/// <para>Member.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:member.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "member")]
public partial class Member : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11180;
    /// <inheritdoc/>
    public override string LocalName => "member";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Hidden Item Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the Member class.
    /// </summary>
    public Member():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Member>(deep);

}
/// <summary>
/// <para>OLAP Dimension.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dimension.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dimension")]
public partial class Dimension : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11181;
    /// <inheritdoc/>
    public override string LocalName => "dimension";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Measure.</para>
    /// <para>Represents the following attribute in the schema: measure </para>
    /// </summary>
    [SchemaAttr(0, "measure", 0)]
    public BooleanValue Measure { get; set; }
    /// <summary>
    /// <para> Dimension Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Dimension Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 2)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> Dimension Display Name.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 3)]
    public StringValue Caption { get; set; }

    /// <summary>
    /// Initializes a new instance of the Dimension class.
    /// </summary>
    public Dimension():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dimension>(deep);

}
/// <summary>
/// <para>OLAP Measure Group.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:measureGroup.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "measureGroup")]
public partial class MeasureGroup : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11182;
    /// <inheritdoc/>
    public override string LocalName => "measureGroup";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Measure Group Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Measure Group Display Name.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 1)]
    public StringValue Caption { get; set; }

    /// <summary>
    /// Initializes a new instance of the MeasureGroup class.
    /// </summary>
    public MeasureGroup():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MeasureGroup>(deep);

}
/// <summary>
/// <para>OLAP Measure Group.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:map.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "map")]
public partial class MeasureDimensionMap : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11183;
    /// <inheritdoc/>
    public override string LocalName => "map";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Measure Group Id.</para>
    /// <para>Represents the following attribute in the schema: measureGroup </para>
    /// </summary>
    [SchemaAttr(0, "measureGroup", 0)]
    public UInt32Value MeasureGroup { get; set; }
    /// <summary>
    /// <para> Dimension Id.</para>
    /// <para>Represents the following attribute in the schema: dimension </para>
    /// </summary>
    [SchemaAttr(0, "dimension", 1)]
    public UInt32Value Dimension { get; set; }

    /// <summary>
    /// Initializes a new instance of the MeasureDimensionMap class.
    /// </summary>
    public MeasureDimensionMap():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MeasureDimensionMap>(deep);

}
/// <summary>
/// <para>PivotTable Advanced Filter.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:filter.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>AutoFilter &lt;x:autoFilter></description></item>
///<item><description>PivotFilterExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(AutoFilter))]
    [ChildElementInfo(typeof(PivotFilterExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "filter")]
public partial class PivotFilter : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11184;
    /// <inheritdoc/>
    public override string LocalName => "filter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> fld.</para>
    /// <para>Represents the following attribute in the schema: fld </para>
    /// </summary>
    [SchemaAttr(0, "fld", 0)]
    public UInt32Value Field { get; set; }
    /// <summary>
    /// <para> mpFld.</para>
    /// <para>Represents the following attribute in the schema: mpFld </para>
    /// </summary>
    [SchemaAttr(0, "mpFld", 1)]
    public UInt32Value MemberPropertyFieldId { get; set; }
    /// <summary>
    /// <para> type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PivotFilterValues> Type { get; set; }
    /// <summary>
    /// <para> evalOrder.</para>
    /// <para>Represents the following attribute in the schema: evalOrder </para>
    /// </summary>
    [SchemaAttr(0, "evalOrder", 3)]
    public Int32Value EvaluationOrder { get; set; }
    /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 4)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> iMeasureHier.</para>
    /// <para>Represents the following attribute in the schema: iMeasureHier </para>
    /// </summary>
    [SchemaAttr(0, "iMeasureHier", 5)]
    public UInt32Value MeasureHierarchy { get; set; }
    /// <summary>
    /// <para> iMeasureFld.</para>
    /// <para>Represents the following attribute in the schema: iMeasureFld </para>
    /// </summary>
    [SchemaAttr(0, "iMeasureFld", 6)]
    public UInt32Value MeasureField { get; set; }
    /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 7)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> description.</para>
    /// <para>Represents the following attribute in the schema: description </para>
    /// </summary>
    [SchemaAttr(0, "description", 8)]
    public StringValue Description { get; set; }
    /// <summary>
    /// <para> stringValue1.</para>
    /// <para>Represents the following attribute in the schema: stringValue1 </para>
    /// </summary>
    [SchemaAttr(0, "stringValue1", 9)]
    public StringValue StringValue1 { get; set; }
    /// <summary>
    /// <para> stringValue2.</para>
    /// <para>Represents the following attribute in the schema: stringValue2 </para>
    /// </summary>
    [SchemaAttr(0, "stringValue2", 10)]
    public StringValue StringValue2 { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotFilter class.
    /// </summary>
    public PivotFilter():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFilter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilter(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilter(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilter class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFilter(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "autoFilter","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> AutoFilter.</para>
    /// <para> Represents the following element tag in the schema: x:autoFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public AutoFilter AutoFilter
    {
        get => GetElement<AutoFilter>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> PivotFilterExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotFilterExtensionList PivotFilterExtensionList
    {
        get => GetElement<PivotFilterExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFilter>(deep);

}
/// <summary>
/// <para>PivotCache Hierarchy.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cacheHierarchy.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FieldsUsage &lt;x:fieldsUsage></description></item>
///<item><description>GroupLevels &lt;x:groupLevels></description></item>
///<item><description>CacheHierarchyExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FieldsUsage))]
    [ChildElementInfo(typeof(GroupLevels))]
    [ChildElementInfo(typeof(CacheHierarchyExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cacheHierarchy")]
public partial class CacheHierarchy : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11185;
    /// <inheritdoc/>
    public override string LocalName => "cacheHierarchy";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> uniqueName.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 0)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> caption.</para>
    /// <para>Represents the following attribute in the schema: caption </para>
    /// </summary>
    [SchemaAttr(0, "caption", 1)]
    public StringValue Caption { get; set; }
    /// <summary>
    /// <para> measure.</para>
    /// <para>Represents the following attribute in the schema: measure </para>
    /// </summary>
    [SchemaAttr(0, "measure", 2)]
    public BooleanValue Measure { get; set; }
    /// <summary>
    /// <para> set.</para>
    /// <para>Represents the following attribute in the schema: set </para>
    /// </summary>
    [SchemaAttr(0, "set", 3)]
    public BooleanValue Set { get; set; }
    /// <summary>
    /// <para> parentSet.</para>
    /// <para>Represents the following attribute in the schema: parentSet </para>
    /// </summary>
    [SchemaAttr(0, "parentSet", 4)]
    public UInt32Value ParentSet { get; set; }
    /// <summary>
    /// <para> iconSet.</para>
    /// <para>Represents the following attribute in the schema: iconSet </para>
    /// </summary>
    [SchemaAttr(0, "iconSet", 5)]
    public Int32Value IconSet { get; set; }
    /// <summary>
    /// <para> attribute.</para>
    /// <para>Represents the following attribute in the schema: attribute </para>
    /// </summary>
    [SchemaAttr(0, "attribute", 6)]
    public BooleanValue Attribute { get; set; }
    /// <summary>
    /// <para> time.</para>
    /// <para>Represents the following attribute in the schema: time </para>
    /// </summary>
    [SchemaAttr(0, "time", 7)]
    public BooleanValue Time { get; set; }
    /// <summary>
    /// <para> keyAttribute.</para>
    /// <para>Represents the following attribute in the schema: keyAttribute </para>
    /// </summary>
    [SchemaAttr(0, "keyAttribute", 8)]
    public BooleanValue KeyAttribute { get; set; }
    /// <summary>
    /// <para> defaultMemberUniqueName.</para>
    /// <para>Represents the following attribute in the schema: defaultMemberUniqueName </para>
    /// </summary>
    [SchemaAttr(0, "defaultMemberUniqueName", 9)]
    public StringValue DefaultMemberUniqueName { get; set; }
    /// <summary>
    /// <para> allUniqueName.</para>
    /// <para>Represents the following attribute in the schema: allUniqueName </para>
    /// </summary>
    [SchemaAttr(0, "allUniqueName", 10)]
    public StringValue AllUniqueName { get; set; }
    /// <summary>
    /// <para> allCaption.</para>
    /// <para>Represents the following attribute in the schema: allCaption </para>
    /// </summary>
    [SchemaAttr(0, "allCaption", 11)]
    public StringValue AllCaption { get; set; }
    /// <summary>
    /// <para> dimensionUniqueName.</para>
    /// <para>Represents the following attribute in the schema: dimensionUniqueName </para>
    /// </summary>
    [SchemaAttr(0, "dimensionUniqueName", 12)]
    public StringValue DimensionUniqueName { get; set; }
    /// <summary>
    /// <para> displayFolder.</para>
    /// <para>Represents the following attribute in the schema: displayFolder </para>
    /// </summary>
    [SchemaAttr(0, "displayFolder", 13)]
    public StringValue DisplayFolder { get; set; }
    /// <summary>
    /// <para> measureGroup.</para>
    /// <para>Represents the following attribute in the schema: measureGroup </para>
    /// </summary>
    [SchemaAttr(0, "measureGroup", 14)]
    public StringValue MeasureGroup { get; set; }
    /// <summary>
    /// <para> measures.</para>
    /// <para>Represents the following attribute in the schema: measures </para>
    /// </summary>
    [SchemaAttr(0, "measures", 15)]
    public BooleanValue Measures { get; set; }
    /// <summary>
    /// <para> count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 16)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> oneField.</para>
    /// <para>Represents the following attribute in the schema: oneField </para>
    /// </summary>
    [SchemaAttr(0, "oneField", 17)]
    public BooleanValue OneField { get; set; }
    /// <summary>
    /// <para> memberValueDatatype.</para>
    /// <para>Represents the following attribute in the schema: memberValueDatatype </para>
    /// </summary>
    [SchemaAttr(0, "memberValueDatatype", 18)]
    public UInt16Value MemberValueDatatype { get; set; }
    /// <summary>
    /// <para> unbalanced.</para>
    /// <para>Represents the following attribute in the schema: unbalanced </para>
    /// </summary>
    [SchemaAttr(0, "unbalanced", 19)]
    public BooleanValue Unbalanced { get; set; }
    /// <summary>
    /// <para> unbalancedGroup.</para>
    /// <para>Represents the following attribute in the schema: unbalancedGroup </para>
    /// </summary>
    [SchemaAttr(0, "unbalancedGroup", 20)]
    public BooleanValue UnbalancedGroup { get; set; }
    /// <summary>
    /// <para> hidden.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 21)]
    public BooleanValue Hidden { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheHierarchy class.
    /// </summary>
    public CacheHierarchy():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheHierarchy class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchy(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchy class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchy(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchy class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheHierarchy(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "fieldsUsage","groupLevels","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> FieldsUsage.</para>
    /// <para> Represents the following element tag in the schema: x:fieldsUsage </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FieldsUsage FieldsUsage
    {
        get => GetElement<FieldsUsage>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> GroupLevels.</para>
    /// <para> Represents the following element tag in the schema: x:groupLevels </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public GroupLevels GroupLevels
    {
        get => GetElement<GroupLevels>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> CacheHierarchyExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CacheHierarchyExtensionList CacheHierarchyExtensionList
    {
        get => GetElement<CacheHierarchyExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheHierarchy>(deep);

}
/// <summary>
/// <para>Range Grouping Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rangePr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rangePr")]
public partial class RangeProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11186;
    /// <inheritdoc/>
    public override string LocalName => "rangePr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Source Data Set Beginning Range.</para>
    /// <para>Represents the following attribute in the schema: autoStart </para>
    /// </summary>
    [SchemaAttr(0, "autoStart", 0)]
    public BooleanValue AutoStart { get; set; }
    /// <summary>
    /// <para> Source Data Ending Range.</para>
    /// <para>Represents the following attribute in the schema: autoEnd </para>
    /// </summary>
    [SchemaAttr(0, "autoEnd", 1)]
    public BooleanValue AutoEnd { get; set; }
    /// <summary>
    /// <para> Group By.</para>
    /// <para>Represents the following attribute in the schema: groupBy </para>
    /// </summary>
    [SchemaAttr(0, "groupBy", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.GroupByValues> GroupBy { get; set; }
    /// <summary>
    /// <para> Numeric Grouping Start Value.</para>
    /// <para>Represents the following attribute in the schema: startNum </para>
    /// </summary>
    [SchemaAttr(0, "startNum", 3)]
    public DoubleValue StartNumber { get; set; }
    /// <summary>
    /// <para> Numeric Grouping End Value.</para>
    /// <para>Represents the following attribute in the schema: endNum </para>
    /// </summary>
    [SchemaAttr(0, "endNum", 4)]
    public DoubleValue EndNum { get; set; }
    /// <summary>
    /// <para> Date Grouping Start Value.</para>
    /// <para>Represents the following attribute in the schema: startDate </para>
    /// </summary>
    [SchemaAttr(0, "startDate", 5)]
    public DateTimeValue StartDate { get; set; }
    /// <summary>
    /// <para> Date Grouping End Value.</para>
    /// <para>Represents the following attribute in the schema: endDate </para>
    /// </summary>
    [SchemaAttr(0, "endDate", 6)]
    public DateTimeValue EndDate { get; set; }
    /// <summary>
    /// <para> Grouping Interval.</para>
    /// <para>Represents the following attribute in the schema: groupInterval </para>
    /// </summary>
    [SchemaAttr(0, "groupInterval", 7)]
    public DoubleValue GroupInterval { get; set; }

    /// <summary>
    /// Initializes a new instance of the RangeProperties class.
    /// </summary>
    public RangeProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RangeProperties>(deep);

}
/// <summary>
/// <para>Discrete Grouping Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:discretePr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FieldItem &lt;x:x></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FieldItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "discretePr")]
public partial class DiscreteProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11187;
    /// <inheritdoc/>
    public override string LocalName => "discretePr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Mapping Index Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the DiscreteProperties class.
    /// </summary>
    public DiscreteProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DiscreteProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DiscreteProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DiscreteProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DiscreteProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DiscreteProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DiscreteProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DiscreteProperties>(deep);

}
/// <summary>
/// <para>OLAP Group Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groupItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MissingItem &lt;x:m></description></item>
///<item><description>NumberItem &lt;x:n></description></item>
///<item><description>BooleanItem &lt;x:b></description></item>
///<item><description>ErrorItem &lt;x:e></description></item>
///<item><description>StringItem &lt;x:s></description></item>
///<item><description>DateTimeItem &lt;x:d></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MissingItem))]
    [ChildElementInfo(typeof(NumberItem))]
    [ChildElementInfo(typeof(BooleanItem))]
    [ChildElementInfo(typeof(ErrorItem))]
    [ChildElementInfo(typeof(StringItem))]
    [ChildElementInfo(typeof(DateTimeItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groupItems")]
public partial class GroupItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11188;
    /// <inheritdoc/>
    public override string LocalName => "groupItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Items Created Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the GroupItems class.
    /// </summary>
    public GroupItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupItems>(deep);

}
/// <summary>
/// <para>Page Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageField.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageField")]
public partial class PageField : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11189;
    /// <inheritdoc/>
    public override string LocalName => "pageField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field.</para>
    /// <para>Represents the following attribute in the schema: fld </para>
    /// </summary>
    [SchemaAttr(0, "fld", 0)]
    public Int32Value Field { get; set; }
    /// <summary>
    /// <para> Item Index.</para>
    /// <para>Represents the following attribute in the schema: item </para>
    /// </summary>
    [SchemaAttr(0, "item", 1)]
    public UInt32Value Item { get; set; }
    /// <summary>
    /// <para> OLAP Hierarchy Index.</para>
    /// <para>Represents the following attribute in the schema: hier </para>
    /// </summary>
    [SchemaAttr(0, "hier", 2)]
    public Int32Value Hierarchy { get; set; }
    /// <summary>
    /// <para> Hierarchy Unique Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 3)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Hierarchy Display Name.</para>
    /// <para>Represents the following attribute in the schema: cap </para>
    /// </summary>
    [SchemaAttr(0, "cap", 4)]
    public StringValue Caption { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageField class.
    /// </summary>
    public PageField():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PageField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PageField(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PageField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PageField(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PageField class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PageField(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageField>(deep);

}
/// <summary>
/// <para>References.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:references.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotAreaReference &lt;x:reference></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotAreaReference))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "references")]
public partial class PivotAreaReferences : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11191;
    /// <inheritdoc/>
    public override string LocalName => "references";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pivot Filter Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotAreaReferences class.
    /// </summary>
    public PivotAreaReferences():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotAreaReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreaReferences(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreaReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreaReferences(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreaReferences class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotAreaReferences(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotAreaReferences>(deep);

}
/// <summary>
/// <para>Reference.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:reference.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FieldItem &lt;x:x></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FieldItem))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "reference")]
public partial class PivotAreaReference : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11192;
    /// <inheritdoc/>
    public override string LocalName => "reference";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Index.</para>
    /// <para>Represents the following attribute in the schema: field </para>
    /// </summary>
    [SchemaAttr(0, "field", 0)]
    public UInt32Value Field { get; set; }
    /// <summary>
    /// <para> Item Index Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 1)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Selected.</para>
    /// <para>Represents the following attribute in the schema: selected </para>
    /// </summary>
    [SchemaAttr(0, "selected", 2)]
    public BooleanValue Selected { get; set; }
    /// <summary>
    /// <para> Positional Reference.</para>
    /// <para>Represents the following attribute in the schema: byPosition </para>
    /// </summary>
    [SchemaAttr(0, "byPosition", 3)]
    public BooleanValue ByPosition { get; set; }
    /// <summary>
    /// <para> Relative Reference.</para>
    /// <para>Represents the following attribute in the schema: relative </para>
    /// </summary>
    [SchemaAttr(0, "relative", 4)]
    public BooleanValue Relative { get; set; }
    /// <summary>
    /// <para> Include Default Filter.</para>
    /// <para>Represents the following attribute in the schema: defaultSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "defaultSubtotal", 5)]
    public BooleanValue DefaultSubtotal { get; set; }
    /// <summary>
    /// <para> Include Sum Filter.</para>
    /// <para>Represents the following attribute in the schema: sumSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "sumSubtotal", 6)]
    public BooleanValue SumSubtotal { get; set; }
    /// <summary>
    /// <para> Include CountA Filter.</para>
    /// <para>Represents the following attribute in the schema: countASubtotal </para>
    /// </summary>
    [SchemaAttr(0, "countASubtotal", 7)]
    public BooleanValue CountASubtotal { get; set; }
    /// <summary>
    /// <para> Include Average Filter.</para>
    /// <para>Represents the following attribute in the schema: avgSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "avgSubtotal", 8)]
    public BooleanValue AverageSubtotal { get; set; }
    /// <summary>
    /// <para> Include Maximum Filter.</para>
    /// <para>Represents the following attribute in the schema: maxSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "maxSubtotal", 9)]
    public BooleanValue MaxSubtotal { get; set; }
    /// <summary>
    /// <para> Include Minimum Filter.</para>
    /// <para>Represents the following attribute in the schema: minSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "minSubtotal", 10)]
    public BooleanValue MinSubtotal { get; set; }
    /// <summary>
    /// <para> Include Product Filter.</para>
    /// <para>Represents the following attribute in the schema: productSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "productSubtotal", 11)]
    public BooleanValue ApplyProductInSubtotal { get; set; }
    /// <summary>
    /// <para> Include Count Subtotal.</para>
    /// <para>Represents the following attribute in the schema: countSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "countSubtotal", 12)]
    public BooleanValue CountSubtotal { get; set; }
    /// <summary>
    /// <para> Include StdDev Filter.</para>
    /// <para>Represents the following attribute in the schema: stdDevSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "stdDevSubtotal", 13)]
    public BooleanValue ApplyStandardDeviationInSubtotal { get; set; }
    /// <summary>
    /// <para> Include StdDevP Filter.</para>
    /// <para>Represents the following attribute in the schema: stdDevPSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "stdDevPSubtotal", 14)]
    public BooleanValue ApplyStandardDeviationPInSubtotal { get; set; }
    /// <summary>
    /// <para> Include Var Filter.</para>
    /// <para>Represents the following attribute in the schema: varSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "varSubtotal", 15)]
    public BooleanValue ApplyVarianceInSubtotal { get; set; }
    /// <summary>
    /// <para> Include VarP Filter.</para>
    /// <para>Represents the following attribute in the schema: varPSubtotal </para>
    /// </summary>
    [SchemaAttr(0, "varPSubtotal", 16)]
    public BooleanValue ApplyVariancePInSubtotal { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotAreaReference class.
    /// </summary>
    public PivotAreaReference():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotAreaReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreaReference(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreaReference class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotAreaReference(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotAreaReference class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotAreaReference(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotAreaReference>(deep);

}
/// <summary>
/// <para>Query table fields.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryTableFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>QueryTableField &lt;x:queryTableField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(QueryTableField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "queryTableFields")]
public partial class QueryTableFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11193;
    /// <inheritdoc/>
    public override string LocalName => "queryTableFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Column Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryTableFields class.
    /// </summary>
    public QueryTableFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableFields>(deep);

}
/// <summary>
/// <para>Deleted Fields.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryTableDeletedFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DeletedField &lt;x:deletedField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DeletedField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "queryTableDeletedFields")]
public partial class QueryTableDeletedFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11194;
    /// <inheritdoc/>
    public override string LocalName => "queryTableDeletedFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Deleted Fields Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryTableDeletedFields class.
    /// </summary>
    public QueryTableDeletedFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableDeletedFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableDeletedFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableDeletedFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableDeletedFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableDeletedFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableDeletedFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableDeletedFields>(deep);

}
/// <summary>
/// <para>Deleted Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:deletedField.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "deletedField")]
public partial class DeletedField : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11195;
    /// <inheritdoc/>
    public override string LocalName => "deletedField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Deleted Fields Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the DeletedField class.
    /// </summary>
    public DeletedField():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedField>(deep);

}
/// <summary>
/// <para>QueryTable Field.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryTableField.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "queryTableField")]
public partial class QueryTableField : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11196;
    /// <inheritdoc/>
    public override string LocalName => "queryTableField";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Data Bound Column.</para>
    /// <para>Represents the following attribute in the schema: dataBound </para>
    /// </summary>
    [SchemaAttr(0, "dataBound", 2)]
    public BooleanValue DataBound { get; set; }
    /// <summary>
    /// <para> Row Numbers.</para>
    /// <para>Represents the following attribute in the schema: rowNumbers </para>
    /// </summary>
    [SchemaAttr(0, "rowNumbers", 3)]
    public BooleanValue RowNumbers { get; set; }
    /// <summary>
    /// <para> Fill This Formula On Refresh.</para>
    /// <para>Represents the following attribute in the schema: fillFormulas </para>
    /// </summary>
    [SchemaAttr(0, "fillFormulas", 4)]
    public BooleanValue FillFormulas { get; set; }
    /// <summary>
    /// <para> Clipped Column.</para>
    /// <para>Represents the following attribute in the schema: clipped </para>
    /// </summary>
    [SchemaAttr(0, "clipped", 5)]
    public BooleanValue Clipped { get; set; }
    /// <summary>
    /// <para> Table Column Id.</para>
    /// <para>Represents the following attribute in the schema: tableColumnId </para>
    /// </summary>
    [SchemaAttr(0, "tableColumnId", 6)]
    public UInt32Value TableColumnId { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryTableField class.
    /// </summary>
    public QueryTableField():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableField(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableField class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableField(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableField class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableField(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableField>(deep);

}
/// <summary>
/// <para>String Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:si.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Text &lt;x:t></description></item>
///<item><description>Run &lt;x:r></description></item>
///<item><description>PhoneticRun &lt;x:rPh></description></item>
///<item><description>PhoneticProperties &lt;x:phoneticPr></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "si")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class SharedStringItem : RstType
{
    internal const int ElementTypeIdConst = 11197;
    /// <inheritdoc/>
    public override string LocalName => "si";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the SharedStringItem class.
    /// </summary>
    public SharedStringItem():base(){}
        /// <summary>
    ///Initializes a new instance of the SharedStringItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedStringItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedStringItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedStringItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedStringItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SharedStringItem(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SharedStringItem>(deep);

}
/// <summary>
/// <para>Rich Text Inline.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:is.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Text &lt;x:t></description></item>
///<item><description>Run &lt;x:r></description></item>
///<item><description>PhoneticRun &lt;x:rPh></description></item>
///<item><description>PhoneticProperties &lt;x:phoneticPr></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "is")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class InlineString : RstType
{
    internal const int ElementTypeIdConst = 11243;
    /// <inheritdoc/>
    public override string LocalName => "is";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the InlineString class.
    /// </summary>
    public InlineString():base(){}
        /// <summary>
    ///Initializes a new instance of the InlineString class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InlineString(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the InlineString class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public InlineString(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the InlineString class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public InlineString(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InlineString>(deep);

}
/// <summary>
/// <para>Comment Text.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:text.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Text &lt;x:t></description></item>
///<item><description>Run &lt;x:r></description></item>
///<item><description>PhoneticRun &lt;x:rPh></description></item>
///<item><description>PhoneticProperties &lt;x:phoneticPr></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "text")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class CommentText : RstType
{
    internal const int ElementTypeIdConst = 11426;
    /// <inheritdoc/>
    public override string LocalName => "text";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the CommentText class.
    /// </summary>
    public CommentText():base(){}
        /// <summary>
    ///Initializes a new instance of the CommentText class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentText(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentText class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentText(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentText class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CommentText(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentText>(deep);

}
/// <summary>
/// Defines the RstType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Text &lt;x:t></description></item>
///<item><description>Run &lt;x:r></description></item>
///<item><description>PhoneticRun &lt;x:rPh></description></item>
///<item><description>PhoneticProperties &lt;x:phoneticPr></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Text))]
    [ChildElementInfo(typeof(Run))]
    [ChildElementInfo(typeof(PhoneticRun))]
    [ChildElementInfo(typeof(PhoneticProperties))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class RstType : OpenXmlCompositeElement
{
        
    
    
        private static readonly string[] eleTagNames = { "t","r","rPh","phoneticPr" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text.</para>
    /// <para> Represents the following element tag in the schema: x:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Text Text
    {
        get => GetElement<Text>(0);
        set => SetElement(0, value);
    }
    


    
    /// <summary>
    /// Initializes a new instance of the RstType class.
    /// </summary>
    protected RstType(){}
    
        /// <summary>
    ///Initializes a new instance of the RstType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected RstType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RstType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected RstType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RstType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected RstType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Bold.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:b.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "b")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Bold : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11198;
    /// <inheritdoc/>
    public override string LocalName => "b";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Bold class.
    /// </summary>
    public Bold():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bold>(deep);

}
/// <summary>
/// <para>Italic.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:i.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "i")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Italic : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11199;
    /// <inheritdoc/>
    public override string LocalName => "i";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Italic class.
    /// </summary>
    public Italic():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Italic>(deep);

}
/// <summary>
/// <para>Strike Through.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:strike.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "strike")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Strike : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11200;
    /// <inheritdoc/>
    public override string LocalName => "strike";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Strike class.
    /// </summary>
    public Strike():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Strike>(deep);

}
/// <summary>
/// <para>Condense.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:condense.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "condense")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Condense : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11201;
    /// <inheritdoc/>
    public override string LocalName => "condense";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Condense class.
    /// </summary>
    public Condense():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Condense>(deep);

}
/// <summary>
/// <para>Extend.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extend.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "extend")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Extend : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11202;
    /// <inheritdoc/>
    public override string LocalName => "extend";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Extend class.
    /// </summary>
    public Extend():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extend>(deep);

}
/// <summary>
/// <para>Outline.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:outline.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "outline")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Outline : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11203;
    /// <inheritdoc/>
    public override string LocalName => "outline";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Outline class.
    /// </summary>
    public Outline():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);

}
/// <summary>
/// <para>Shadow.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:shadow.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "shadow")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Shadow : BooleanPropertyType
{
    internal const int ElementTypeIdConst = 11204;
    /// <inheritdoc/>
    public override string LocalName => "shadow";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Shadow class.
    /// </summary>
    public Shadow():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shadow>(deep);

}
/// <summary>
/// Defines the BooleanPropertyType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class BooleanPropertyType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public BooleanValue Val { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the BooleanPropertyType class.
    /// </summary>
    protected BooleanPropertyType(){}
    
    
    
}
/// <summary>
/// <para>Underline.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:u.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "u")]
public partial class Underline : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11205;
    /// <inheritdoc/>
    public override string LocalName => "u";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Underline Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.UnderlineValues> Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the Underline class.
    /// </summary>
    public Underline():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);

}
/// <summary>
/// <para>Vertical Alignment.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:vertAlign.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "vertAlign")]
public partial class VerticalTextAlignment : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11206;
    /// <inheritdoc/>
    public override string LocalName => "vertAlign";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.VerticalAlignmentRunValues> Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the VerticalTextAlignment class.
    /// </summary>
    public VerticalTextAlignment():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalTextAlignment>(deep);

}
/// <summary>
/// <para>Font Size.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sz.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sz")]
public partial class FontSize : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11207;
    /// <inheritdoc/>
    public override string LocalName => "sz";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public DoubleValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FontSize class.
    /// </summary>
    public FontSize():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSize>(deep);

}
/// <summary>
/// <para>Text Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:color.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "color")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Color : ColorType
{
    internal const int ElementTypeIdConst = 11208;
    /// <inheritdoc/>
    public override string LocalName => "color";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Color class.
    /// </summary>
    public Color():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Color>(deep);

}
/// <summary>
/// <para>Sheet Tab Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tabColor.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "tabColor")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TabColor : ColorType
{
    internal const int ElementTypeIdConst = 11249;
    /// <inheritdoc/>
    public override string LocalName => "tabColor";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the TabColor class.
    /// </summary>
    public TabColor():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabColor>(deep);

}
/// <summary>
/// <para>Foreground Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fgColor.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "fgColor")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ForegroundColor : ColorType
{
    internal const int ElementTypeIdConst = 11311;
    /// <inheritdoc/>
    public override string LocalName => "fgColor";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the ForegroundColor class.
    /// </summary>
    public ForegroundColor():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForegroundColor>(deep);

}
/// <summary>
/// <para>Background Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:bgColor.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "bgColor")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BackgroundColor : ColorType
{
    internal const int ElementTypeIdConst = 11312;
    /// <inheritdoc/>
    public override string LocalName => "bgColor";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the BackgroundColor class.
    /// </summary>
    public BackgroundColor():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundColor>(deep);

}
/// <summary>
/// Defines the ColorType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class ColorType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Automatic.</para>
    /// <para>Represents the following attribute in the schema: auto </para>
    /// </summary>
    [SchemaAttr(0, "auto", 0)]
    public BooleanValue Auto { get; set; }
    /// <summary>
    /// <para> Index.</para>
    /// <para>Represents the following attribute in the schema: indexed </para>
    /// </summary>
    [SchemaAttr(0, "indexed", 1)]
    public UInt32Value Indexed { get; set; }
    /// <summary>
    /// <para> Alpha Red Green Blue Color Value.</para>
    /// <para>Represents the following attribute in the schema: rgb </para>
    /// </summary>
    [SchemaAttr(0, "rgb", 2)]
    public HexBinaryValue Rgb { get; set; }
    /// <summary>
    /// <para> Theme Color.</para>
    /// <para>Represents the following attribute in the schema: theme </para>
    /// </summary>
    [SchemaAttr(0, "theme", 3)]
    public UInt32Value Theme { get; set; }
    /// <summary>
    /// <para> Tint.</para>
    /// <para>Represents the following attribute in the schema: tint </para>
    /// </summary>
    [SchemaAttr(0, "tint", 4)]
    public DoubleValue Tint { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the ColorType class.
    /// </summary>
    protected ColorType(){}
    
    
    
}
/// <summary>
/// <para>Font.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rFont.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rFont")]
public partial class RunFont : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11209;
    /// <inheritdoc/>
    public override string LocalName => "rFont";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> String Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the RunFont class.
    /// </summary>
    public RunFont():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunFont>(deep);

}
/// <summary>
/// <para>Font Family.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:family.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "family")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class FontFamily : InternationalPropertyType
{
    internal const int ElementTypeIdConst = 11210;
    /// <inheritdoc/>
    public override string LocalName => "family";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the FontFamily class.
    /// </summary>
    public FontFamily():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontFamily>(deep);

}
/// <summary>
/// <para>Character Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:charset.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "charset")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RunPropertyCharSet : InternationalPropertyType
{
    internal const int ElementTypeIdConst = 11211;
    /// <inheritdoc/>
    public override string LocalName => "charset";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the RunPropertyCharSet class.
    /// </summary>
    public RunPropertyCharSet():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertyCharSet>(deep);

}
/// <summary>
/// Defines the InternationalPropertyType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class InternationalPropertyType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public Int32Value Val { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the InternationalPropertyType class.
    /// </summary>
    protected InternationalPropertyType(){}
    
    
    
}
/// <summary>
/// <para>Font Scheme.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:scheme.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "scheme")]
public partial class FontScheme : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11212;
    /// <inheritdoc/>
    public override string LocalName => "scheme";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Font Scheme.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FontSchemeValues> Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FontScheme class.
    /// </summary>
    public FontScheme():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontScheme>(deep);

}
/// <summary>
/// <para>Run Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Bold &lt;x:b></description></item>
///<item><description>Italic &lt;x:i></description></item>
///<item><description>Strike &lt;x:strike></description></item>
///<item><description>Condense &lt;x:condense></description></item>
///<item><description>Extend &lt;x:extend></description></item>
///<item><description>Outline &lt;x:outline></description></item>
///<item><description>Shadow &lt;x:shadow></description></item>
///<item><description>Underline &lt;x:u></description></item>
///<item><description>VerticalTextAlignment &lt;x:vertAlign></description></item>
///<item><description>FontSize &lt;x:sz></description></item>
///<item><description>Color &lt;x:color></description></item>
///<item><description>RunFont &lt;x:rFont></description></item>
///<item><description>FontFamily &lt;x:family></description></item>
///<item><description>RunPropertyCharSet &lt;x:charset></description></item>
///<item><description>FontScheme &lt;x:scheme></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(Condense))]
    [ChildElementInfo(typeof(Extend))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(RunFont))]
    [ChildElementInfo(typeof(FontFamily))]
    [ChildElementInfo(typeof(RunPropertyCharSet))]
    [ChildElementInfo(typeof(FontScheme))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rPr")]
public partial class RunProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11214;
    /// <inheritdoc/>
    public override string LocalName => "rPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the RunProperties class.
    /// </summary>
    public RunProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RunProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RunProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RunProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RunProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);

}
/// <summary>
/// <para>Rich Text Run.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:r.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RunProperties &lt;x:rPr></description></item>
///<item><description>Text &lt;x:t></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RunProperties))]
    [ChildElementInfo(typeof(Text))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "r")]
public partial class Run : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11215;
    /// <inheritdoc/>
    public override string LocalName => "r";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Run class.
    /// </summary>
    public Run():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Run class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Run(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Run class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Run(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Run class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Run(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "rPr","t" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Run Properties.</para>
    /// <para> Represents the following element tag in the schema: x:rPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RunProperties RunProperties
    {
        get => GetElement<RunProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Text.</para>
    /// <para> Represents the following element tag in the schema: x:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Text Text
    {
        get => GetElement<Text>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);

}
/// <summary>
/// <para>Phonetic Run.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rPh.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Text &lt;x:t></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Text))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rPh")]
public partial class PhoneticRun : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11216;
    /// <inheritdoc/>
    public override string LocalName => "rPh";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Base Text Start Index.</para>
    /// <para>Represents the following attribute in the schema: sb </para>
    /// </summary>
    [SchemaAttr(0, "sb", 0)]
    public UInt32Value BaseTextStartIndex { get; set; }
    /// <summary>
    /// <para> Base Text End Index.</para>
    /// <para>Represents the following attribute in the schema: eb </para>
    /// </summary>
    [SchemaAttr(0, "eb", 1)]
    public UInt32Value EndingBaseIndex { get; set; }

    /// <summary>
    /// Initializes a new instance of the PhoneticRun class.
    /// </summary>
    public PhoneticRun():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PhoneticRun class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PhoneticRun(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PhoneticRun class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PhoneticRun(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PhoneticRun class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PhoneticRun(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "t" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Text.</para>
    /// <para> Represents the following element tag in the schema: x:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Text Text
    {
        get => GetElement<Text>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticRun>(deep);

}
/// <summary>
/// <para>Phonetic Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:phoneticPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "phoneticPr")]
public partial class PhoneticProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11217;
    /// <inheritdoc/>
    public override string LocalName => "phoneticPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Font Id.</para>
    /// <para>Represents the following attribute in the schema: fontId </para>
    /// </summary>
    [SchemaAttr(0, "fontId", 0)]
    public UInt32Value FontId { get; set; }
    /// <summary>
    /// <para> Character Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PhoneticValues> Type { get; set; }
    /// <summary>
    /// <para> Alignment.</para>
    /// <para>Represents the following attribute in the schema: alignment </para>
    /// </summary>
    [SchemaAttr(0, "alignment", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PhoneticAlignmentValues> Alignment { get; set; }

    /// <summary>
    /// Initializes a new instance of the PhoneticProperties class.
    /// </summary>
    public PhoneticProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticProperties>(deep);

}
/// <summary>
/// <para>Header.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:header.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetIdMap &lt;x:sheetIdMap></description></item>
///<item><description>ReviewedList &lt;x:reviewedList></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SheetIdMap))]
    [ChildElementInfo(typeof(ReviewedList))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "header")]
public partial class Header : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11218;
    /// <inheritdoc/>
    public override string LocalName => "header";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> Date Time.</para>
    /// <para>Represents the following attribute in the schema: dateTime </para>
    /// </summary>
    [SchemaAttr(0, "dateTime", 1)]
    public DateTimeValue DateTime { get; set; }
    /// <summary>
    /// <para> Last Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: maxSheetId </para>
    /// </summary>
    [SchemaAttr(0, "maxSheetId", 2)]
    public UInt32Value MaxSheetId { get; set; }
    /// <summary>
    /// <para> User Name.</para>
    /// <para>Represents the following attribute in the schema: userName </para>
    /// </summary>
    [SchemaAttr(0, "userName", 3)]
    public StringValue UserName { get; set; }
    /// <summary>
    /// <para> Relationship ID.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 4)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> Minimum Revision Id.</para>
    /// <para>Represents the following attribute in the schema: minRId </para>
    /// </summary>
    [SchemaAttr(0, "minRId", 5)]
    public UInt32Value MinRevisionId { get; set; }
    /// <summary>
    /// <para> Max Revision Id.</para>
    /// <para>Represents the following attribute in the schema: maxRId </para>
    /// </summary>
    [SchemaAttr(0, "maxRId", 6)]
    public UInt32Value MaxRevisionId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Header class.
    /// </summary>
    public Header():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Header class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Header(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Header class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Header(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Header class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Header(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "sheetIdMap","reviewedList","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Sheet Id Map.</para>
    /// <para> Represents the following element tag in the schema: x:sheetIdMap </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetIdMap SheetIdMap
    {
        get => GetElement<SheetIdMap>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Reviewed List.</para>
    /// <para> Represents the following element tag in the schema: x:reviewedList </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ReviewedList ReviewedList
    {
        get => GetElement<ReviewedList>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Header>(deep);

}
/// <summary>
/// <para>Revision Row Column Insert Delete.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rrc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Undo &lt;x:undo></description></item>
///<item><description>RevisionCellChange &lt;x:rcc></description></item>
///<item><description>RevisionFormat &lt;x:rfmt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Undo))]
    [ChildElementInfo(typeof(RevisionCellChange))]
    [ChildElementInfo(typeof(RevisionFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rrc")]
public partial class RevisionRowColumn : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11219;
    /// <inheritdoc/>
    public override string LocalName => "rrc";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sId </para>
    /// </summary>
    [SchemaAttr(0, "sId", 3)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> End Of List.</para>
    /// <para>Represents the following attribute in the schema: eol </para>
    /// </summary>
    [SchemaAttr(0, "eol", 4)]
    public BooleanValue EndOfList { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 5)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> User Action.</para>
    /// <para>Represents the following attribute in the schema: action </para>
    /// </summary>
    [SchemaAttr(0, "action", 6)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.RowColumnActionValues> Action { get; set; }
    /// <summary>
    /// <para> Edge Deleted.</para>
    /// <para>Represents the following attribute in the schema: edge </para>
    /// </summary>
    [SchemaAttr(0, "edge", 7)]
    public BooleanValue Edge { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionRowColumn class.
    /// </summary>
    public RevisionRowColumn():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionRowColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionRowColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionRowColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionRowColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionRowColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionRowColumn(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionRowColumn>(deep);

}
/// <summary>
/// <para>Revision Cell Move.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rm.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Undo &lt;x:undo></description></item>
///<item><description>RevisionCellChange &lt;x:rcc></description></item>
///<item><description>RevisionFormat &lt;x:rfmt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Undo))]
    [ChildElementInfo(typeof(RevisionCellChange))]
    [ChildElementInfo(typeof(RevisionFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rm")]
public partial class RevisionMove : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11220;
    /// <inheritdoc/>
    public override string LocalName => "rm";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 3)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Source.</para>
    /// <para>Represents the following attribute in the schema: source </para>
    /// </summary>
    [SchemaAttr(0, "source", 4)]
    public StringValue Source { get; set; }
    /// <summary>
    /// <para> Destination.</para>
    /// <para>Represents the following attribute in the schema: destination </para>
    /// </summary>
    [SchemaAttr(0, "destination", 5)]
    public StringValue Destination { get; set; }
    /// <summary>
    /// <para> Source Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sourceSheetId </para>
    /// </summary>
    [SchemaAttr(0, "sourceSheetId", 6)]
    public UInt32Value SourceSheetId { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionMove class.
    /// </summary>
    public RevisionMove():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionMove class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionMove(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionMove class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionMove(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionMove class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionMove(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionMove>(deep);

}
/// <summary>
/// <para>Revision Custom View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rcv.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rcv")]
public partial class RevisionCustomView : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11221;
    /// <inheritdoc/>
    public override string LocalName => "rcv";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> User Action.</para>
    /// <para>Represents the following attribute in the schema: action </para>
    /// </summary>
    [SchemaAttr(0, "action", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.RevisionActionValues> Action { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionCustomView class.
    /// </summary>
    public RevisionCustomView():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionCustomView>(deep);

}
/// <summary>
/// <para>Revision Sheet Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rsnm.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rsnm")]
public partial class RevisionSheetName : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11222;
    /// <inheritdoc/>
    public override string LocalName => "rsnm";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 3)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Old Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: oldName </para>
    /// </summary>
    [SchemaAttr(0, "oldName", 4)]
    public StringValue OldName { get; set; }
    /// <summary>
    /// <para> New Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: newName </para>
    /// </summary>
    [SchemaAttr(0, "newName", 5)]
    public StringValue NewName { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionSheetName class.
    /// </summary>
    public RevisionSheetName():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionSheetName class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionSheetName(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionSheetName class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionSheetName(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionSheetName class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionSheetName(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionSheetName>(deep);

}
/// <summary>
/// <para>Revision Insert Sheet.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ris.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ris")]
public partial class RevisionInsertSheet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11223;
    /// <inheritdoc/>
    public override string LocalName => "ris";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 3)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 4)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Sheet Position.</para>
    /// <para>Represents the following attribute in the schema: sheetPosition </para>
    /// </summary>
    [SchemaAttr(0, "sheetPosition", 5)]
    public UInt32Value SheetPosition { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionInsertSheet class.
    /// </summary>
    public RevisionInsertSheet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionInsertSheet>(deep);

}
/// <summary>
/// <para>Revision Cell Change.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rcc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OldCell &lt;x:oc></description></item>
///<item><description>NewCell &lt;x:nc></description></item>
///<item><description>OldDifferentialFormat &lt;x:odxf></description></item>
///<item><description>NewDifferentialFormat &lt;x:ndxf></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OldCell))]
    [ChildElementInfo(typeof(NewCell))]
    [ChildElementInfo(typeof(OldDifferentialFormat))]
    [ChildElementInfo(typeof(NewDifferentialFormat))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rcc")]
public partial class RevisionCellChange : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11224;
    /// <inheritdoc/>
    public override string LocalName => "rcc";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sId </para>
    /// </summary>
    [SchemaAttr(0, "sId", 3)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Old Formatting.</para>
    /// <para>Represents the following attribute in the schema: odxf </para>
    /// </summary>
    [SchemaAttr(0, "odxf", 4)]
    public BooleanValue OldFormatting { get; set; }
    /// <summary>
    /// <para> Row Column Formatting Change.</para>
    /// <para>Represents the following attribute in the schema: xfDxf </para>
    /// </summary>
    [SchemaAttr(0, "xfDxf", 5)]
    public BooleanValue RowColumnFormattingAffected { get; set; }
    /// <summary>
    /// <para> Style Revision.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 6)]
    public BooleanValue StyleRevision { get; set; }
    /// <summary>
    /// <para> Formatting.</para>
    /// <para>Represents the following attribute in the schema: dxf </para>
    /// </summary>
    [SchemaAttr(0, "dxf", 7)]
    public BooleanValue Format { get; set; }
    /// <summary>
    /// <para> Number Format Id.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 8)]
    public UInt32Value NumberFormatId { get; set; }
    /// <summary>
    /// <para> Quote Prefix.</para>
    /// <para>Represents the following attribute in the schema: quotePrefix </para>
    /// </summary>
    [SchemaAttr(0, "quotePrefix", 9)]
    public BooleanValue QuotePrefix { get; set; }
    /// <summary>
    /// <para> Old Quote Prefix.</para>
    /// <para>Represents the following attribute in the schema: oldQuotePrefix </para>
    /// </summary>
    [SchemaAttr(0, "oldQuotePrefix", 10)]
    public BooleanValue OldQuotePrefix { get; set; }
    /// <summary>
    /// <para> Phonetic Text.</para>
    /// <para>Represents the following attribute in the schema: ph </para>
    /// </summary>
    [SchemaAttr(0, "ph", 11)]
    public BooleanValue HasPhoneticText { get; set; }
    /// <summary>
    /// <para> Old Phonetic Text.</para>
    /// <para>Represents the following attribute in the schema: oldPh </para>
    /// </summary>
    [SchemaAttr(0, "oldPh", 12)]
    public BooleanValue OldPhoneticText { get; set; }
    /// <summary>
    /// <para> End of List  Formula Update.</para>
    /// <para>Represents the following attribute in the schema: endOfListFormulaUpdate </para>
    /// </summary>
    [SchemaAttr(0, "endOfListFormulaUpdate", 13)]
    public BooleanValue EndOfListFormulaUpdate { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionCellChange class.
    /// </summary>
    public RevisionCellChange():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionCellChange class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionCellChange(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionCellChange class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionCellChange(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionCellChange class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionCellChange(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "oc","nc","odxf","ndxf","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Old Cell Data.</para>
    /// <para> Represents the following element tag in the schema: x:oc </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OldCell OldCell
    {
        get => GetElement<OldCell>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> New Cell Data.</para>
    /// <para> Represents the following element tag in the schema: x:nc </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public NewCell NewCell
    {
        get => GetElement<NewCell>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Old Formatting Information.</para>
    /// <para> Represents the following element tag in the schema: x:odxf </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OldDifferentialFormat OldDifferentialFormat
    {
        get => GetElement<OldDifferentialFormat>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> New Formatting Information.</para>
    /// <para> Represents the following element tag in the schema: x:ndxf </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public NewDifferentialFormat NewDifferentialFormat
    {
        get => GetElement<NewDifferentialFormat>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionCellChange>(deep);

}
/// <summary>
/// <para>Revision Format.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rfmt.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DifferentialFormat &lt;x:dxf></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DifferentialFormat))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rfmt")]
public partial class RevisionFormat : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11225;
    /// <inheritdoc/>
    public override string LocalName => "rfmt";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 0)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Row or Column Formatting Change.</para>
    /// <para>Represents the following attribute in the schema: xfDxf </para>
    /// </summary>
    [SchemaAttr(0, "xfDxf", 1)]
    public BooleanValue RowOrColumnAffected { get; set; }
    /// <summary>
    /// <para> Style.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 2)]
    public BooleanValue StyleAffected { get; set; }
    /// <summary>
    /// <para> Sequence Of References.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 3)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }
    /// <summary>
    /// <para> Start index.</para>
    /// <para>Represents the following attribute in the schema: start </para>
    /// </summary>
    [SchemaAttr(0, "start", 4)]
    public UInt32Value Start { get; set; }
    /// <summary>
    /// <para> Length.</para>
    /// <para>Represents the following attribute in the schema: length </para>
    /// </summary>
    [SchemaAttr(0, "length", 5)]
    public UInt32Value Length { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionFormat class.
    /// </summary>
    public RevisionFormat():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionFormat(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "dxf","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Formatting.</para>
    /// <para> Represents the following element tag in the schema: x:dxf </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DifferentialFormat DifferentialFormat
    {
        get => GetElement<DifferentialFormat>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionFormat>(deep);

}
/// <summary>
/// <para>Revision AutoFormat.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:raf.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "raf")]
public partial class RevisionAutoFormat : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11226;
    /// <inheritdoc/>
    public override string LocalName => "raf";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 0)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Auto Format Id.</para>
    /// <para>Represents the following attribute in the schema: autoFormatId </para>
    /// </summary>
    [SchemaAttr(0, "autoFormatId", 1)]
    public UInt32Value AutoFormatId { get; set; }
    /// <summary>
    /// <para> Apply Number Formats.</para>
    /// <para>Represents the following attribute in the schema: applyNumberFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyNumberFormats", 2)]
    public BooleanValue ApplyNumberFormats { get; set; }
    /// <summary>
    /// <para> Apply Border Formats.</para>
    /// <para>Represents the following attribute in the schema: applyBorderFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyBorderFormats", 3)]
    public BooleanValue ApplyBorderFormats { get; set; }
    /// <summary>
    /// <para> Apply Font Formats.</para>
    /// <para>Represents the following attribute in the schema: applyFontFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyFontFormats", 4)]
    public BooleanValue ApplyFontFormats { get; set; }
    /// <summary>
    /// <para> Apply Pattern Formats.</para>
    /// <para>Represents the following attribute in the schema: applyPatternFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyPatternFormats", 5)]
    public BooleanValue ApplyPatternFormats { get; set; }
    /// <summary>
    /// <para> Apply Alignment Formats.</para>
    /// <para>Represents the following attribute in the schema: applyAlignmentFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyAlignmentFormats", 6)]
    public BooleanValue ApplyAlignmentFormats { get; set; }
    /// <summary>
    /// <para> Apply Width / Height Formats.</para>
    /// <para>Represents the following attribute in the schema: applyWidthHeightFormats </para>
    /// </summary>
    [SchemaAttr(0, "applyWidthHeightFormats", 7)]
    public BooleanValue ApplyWidthHeightFormats { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 8)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionAutoFormat class.
    /// </summary>
    public RevisionAutoFormat():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionAutoFormat>(deep);

}
/// <summary>
/// <para>Revision Defined Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rdn.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Formula &lt;x:formula></description></item>
///<item><description>OldFormula &lt;x:oldFormula></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Formula))]
    [ChildElementInfo(typeof(OldFormula))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rdn")]
public partial class RevisionDefinedName : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11227;
    /// <inheritdoc/>
    public override string LocalName => "rdn";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Local Name Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: localSheetId </para>
    /// </summary>
    [SchemaAttr(0, "localSheetId", 3)]
    public UInt32Value LocalSheetId { get; set; }
    /// <summary>
    /// <para> Custom View.</para>
    /// <para>Represents the following attribute in the schema: customView </para>
    /// </summary>
    [SchemaAttr(0, "customView", 4)]
    public BooleanValue CustomView { get; set; }
    /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 5)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Function.</para>
    /// <para>Represents the following attribute in the schema: function </para>
    /// </summary>
    [SchemaAttr(0, "function", 6)]
    public BooleanValue Function { get; set; }
    /// <summary>
    /// <para> Old Function.</para>
    /// <para>Represents the following attribute in the schema: oldFunction </para>
    /// </summary>
    [SchemaAttr(0, "oldFunction", 7)]
    public BooleanValue OldFunction { get; set; }
    /// <summary>
    /// <para> Function Group Id.</para>
    /// <para>Represents the following attribute in the schema: functionGroupId </para>
    /// </summary>
    [SchemaAttr(0, "functionGroupId", 8)]
    public ByteValue FunctionGroupId { get; set; }
    /// <summary>
    /// <para> Old Function Group Id.</para>
    /// <para>Represents the following attribute in the schema: oldFunctionGroupId </para>
    /// </summary>
    [SchemaAttr(0, "oldFunctionGroupId", 9)]
    public ByteValue OldFunctionGroupId { get; set; }
    /// <summary>
    /// <para> Shortcut Key.</para>
    /// <para>Represents the following attribute in the schema: shortcutKey </para>
    /// </summary>
    [SchemaAttr(0, "shortcutKey", 10)]
    public ByteValue ShortcutKey { get; set; }
    /// <summary>
    /// <para> Old Short Cut Key.</para>
    /// <para>Represents the following attribute in the schema: oldShortcutKey </para>
    /// </summary>
    [SchemaAttr(0, "oldShortcutKey", 11)]
    public ByteValue OldShortcutKey { get; set; }
    /// <summary>
    /// <para> Named Range Hidden.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 12)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Old Hidden.</para>
    /// <para>Represents the following attribute in the schema: oldHidden </para>
    /// </summary>
    [SchemaAttr(0, "oldHidden", 13)]
    public BooleanValue OldHidden { get; set; }
    /// <summary>
    /// <para> New Custom Menu.</para>
    /// <para>Represents the following attribute in the schema: customMenu </para>
    /// </summary>
    [SchemaAttr(0, "customMenu", 14)]
    public StringValue CustomMenu { get; set; }
    /// <summary>
    /// <para> Old Custom Menu Text.</para>
    /// <para>Represents the following attribute in the schema: oldCustomMenu </para>
    /// </summary>
    [SchemaAttr(0, "oldCustomMenu", 15)]
    public StringValue OldCustomMenu { get; set; }
    /// <summary>
    /// <para> Description.</para>
    /// <para>Represents the following attribute in the schema: description </para>
    /// </summary>
    [SchemaAttr(0, "description", 16)]
    public StringValue Description { get; set; }
    /// <summary>
    /// <para> Old Description.</para>
    /// <para>Represents the following attribute in the schema: oldDescription </para>
    /// </summary>
    [SchemaAttr(0, "oldDescription", 17)]
    public StringValue OldDescription { get; set; }
    /// <summary>
    /// <para> New Help Topic.</para>
    /// <para>Represents the following attribute in the schema: help </para>
    /// </summary>
    [SchemaAttr(0, "help", 18)]
    public StringValue Help { get; set; }
    /// <summary>
    /// <para> Old Help Topic.</para>
    /// <para>Represents the following attribute in the schema: oldHelp </para>
    /// </summary>
    [SchemaAttr(0, "oldHelp", 19)]
    public StringValue OldHelp { get; set; }
    /// <summary>
    /// <para> Status Bar.</para>
    /// <para>Represents the following attribute in the schema: statusBar </para>
    /// </summary>
    [SchemaAttr(0, "statusBar", 20)]
    public StringValue StatusBar { get; set; }
    /// <summary>
    /// <para> Old Status Bar.</para>
    /// <para>Represents the following attribute in the schema: oldStatusBar </para>
    /// </summary>
    [SchemaAttr(0, "oldStatusBar", 21)]
    public StringValue OldStatusBar { get; set; }
    /// <summary>
    /// <para> Name Comment.</para>
    /// <para>Represents the following attribute in the schema: comment </para>
    /// </summary>
    [SchemaAttr(0, "comment", 22)]
    public StringValue Comment { get; set; }
    /// <summary>
    /// <para> Old Name Comment.</para>
    /// <para>Represents the following attribute in the schema: oldComment </para>
    /// </summary>
    [SchemaAttr(0, "oldComment", 23)]
    public StringValue OldComment { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionDefinedName class.
    /// </summary>
    public RevisionDefinedName():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RevisionDefinedName class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionDefinedName(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionDefinedName class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RevisionDefinedName(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RevisionDefinedName class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RevisionDefinedName(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "formula","oldFormula","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Formula.</para>
    /// <para> Represents the following element tag in the schema: x:formula </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Formula Formula
    {
        get => GetElement<Formula>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Old Formula.</para>
    /// <para> Represents the following element tag in the schema: x:oldFormula </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OldFormula OldFormula
    {
        get => GetElement<OldFormula>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionDefinedName>(deep);

}
/// <summary>
/// <para>Revision Cell Comment.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rcmt.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rcmt")]
public partial class RevisionComment : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11228;
    /// <inheritdoc/>
    public override string LocalName => "rcmt";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 0)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Cell.</para>
    /// <para>Represents the following attribute in the schema: cell </para>
    /// </summary>
    [SchemaAttr(0, "cell", 1)]
    public StringValue Cell { get; set; }
    /// <summary>
    /// <para> GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 2)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> User Action.</para>
    /// <para>Represents the following attribute in the schema: action </para>
    /// </summary>
    [SchemaAttr(0, "action", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.RevisionActionValues> Action { get; set; }
    /// <summary>
    /// <para> Always Show Comment.</para>
    /// <para>Represents the following attribute in the schema: alwaysShow </para>
    /// </summary>
    [SchemaAttr(0, "alwaysShow", 4)]
    public BooleanValue AlwaysShow { get; set; }
    /// <summary>
    /// <para> Old Comment.</para>
    /// <para>Represents the following attribute in the schema: old </para>
    /// </summary>
    [SchemaAttr(0, "old", 5)]
    public BooleanValue Old { get; set; }
    /// <summary>
    /// <para> Comment In Hidden Row.</para>
    /// <para>Represents the following attribute in the schema: hiddenRow </para>
    /// </summary>
    [SchemaAttr(0, "hiddenRow", 6)]
    public BooleanValue HiddenRow { get; set; }
    /// <summary>
    /// <para> Hidden Column.</para>
    /// <para>Represents the following attribute in the schema: hiddenColumn </para>
    /// </summary>
    [SchemaAttr(0, "hiddenColumn", 7)]
    public BooleanValue HiddenColumn { get; set; }
    /// <summary>
    /// <para> Author.</para>
    /// <para>Represents the following attribute in the schema: author </para>
    /// </summary>
    [SchemaAttr(0, "author", 8)]
    public StringValue Author { get; set; }
    /// <summary>
    /// <para> Original Comment Length.</para>
    /// <para>Represents the following attribute in the schema: oldLength </para>
    /// </summary>
    [SchemaAttr(0, "oldLength", 9)]
    public UInt32Value OldLength { get; set; }
    /// <summary>
    /// <para> New Comment Length.</para>
    /// <para>Represents the following attribute in the schema: newLength </para>
    /// </summary>
    [SchemaAttr(0, "newLength", 10)]
    public UInt32Value NewLength { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionComment class.
    /// </summary>
    public RevisionComment():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionComment>(deep);

}
/// <summary>
/// <para>Revision Query Table.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rqt.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rqt")]
public partial class RevisionQueryTable : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11229;
    /// <inheritdoc/>
    public override string LocalName => "rqt";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 0)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> QueryTable Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 1)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Field Id.</para>
    /// <para>Represents the following attribute in the schema: fieldId </para>
    /// </summary>
    [SchemaAttr(0, "fieldId", 2)]
    public UInt32Value FieldId { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionQueryTable class.
    /// </summary>
    public RevisionQueryTable():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionQueryTable>(deep);

}
/// <summary>
/// <para>Revision Merge Conflict.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rcft.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rcft")]
public partial class RevisionConflict : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11230;
    /// <inheritdoc/>
    public override string LocalName => "rcft";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }
    /// <summary>
    /// <para> Revision From Rejection.</para>
    /// <para>Represents the following attribute in the schema: ua </para>
    /// </summary>
    [SchemaAttr(0, "ua", 1)]
    public BooleanValue Ua { get; set; }
    /// <summary>
    /// <para> Revision Undo Rejected.</para>
    /// <para>Represents the following attribute in the schema: ra </para>
    /// </summary>
    [SchemaAttr(0, "ra", 2)]
    public BooleanValue Ra { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 3)]
    public UInt32Value SheetId { get; set; }

    /// <summary>
    /// Initializes a new instance of the RevisionConflict class.
    /// </summary>
    public RevisionConflict():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionConflict>(deep);

}
/// <summary>
/// <para>Sheet Id Map.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetIdMap.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetId &lt;x:sheetId></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SheetId))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetIdMap")]
public partial class SheetIdMap : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11231;
    /// <inheritdoc/>
    public override string LocalName => "sheetIdMap";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetIdMap class.
    /// </summary>
    public SheetIdMap():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetIdMap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetIdMap(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetIdMap class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetIdMap(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetIdMap class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetIdMap(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetIdMap>(deep);

}
/// <summary>
/// <para>Reviewed List.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:reviewedList.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Reviewed &lt;x:reviewed></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Reviewed))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "reviewedList")]
public partial class ReviewedList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11232;
    /// <inheritdoc/>
    public override string LocalName => "reviewedList";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reviewed Revisions Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ReviewedList class.
    /// </summary>
    public ReviewedList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ReviewedList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ReviewedList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ReviewedList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ReviewedList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ReviewedList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ReviewedList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReviewedList>(deep);

}
/// <summary>
/// <para>Reviewed.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:reviewed.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "reviewed")]
public partial class Reviewed : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11233;
    /// <inheritdoc/>
    public override string LocalName => "reviewed";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> revision Id.</para>
    /// <para>Represents the following attribute in the schema: rId </para>
    /// </summary>
    [SchemaAttr(0, "rId", 0)]
    public UInt32Value RevisionId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Reviewed class.
    /// </summary>
    public Reviewed():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reviewed>(deep);

}
/// <summary>
/// <para>Undo.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:undo.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "undo")]
public partial class Undo : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11234;
    /// <inheritdoc/>
    public override string LocalName => "undo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Index.</para>
    /// <para>Represents the following attribute in the schema: index </para>
    /// </summary>
    [SchemaAttr(0, "index", 0)]
    public UInt32Value Index { get; set; }
    /// <summary>
    /// <para> Expression.</para>
    /// <para>Represents the following attribute in the schema: exp </para>
    /// </summary>
    [SchemaAttr(0, "exp", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FormulaExpressionValues> Expression { get; set; }
    /// <summary>
    /// <para> Reference 3D.</para>
    /// <para>Represents the following attribute in the schema: ref3D </para>
    /// </summary>
    [SchemaAttr(0, "ref3D", 2)]
    public BooleanValue Reference3D { get; set; }
    /// <summary>
    /// <para> Array Entered.</para>
    /// <para>Represents the following attribute in the schema: array </para>
    /// </summary>
    [SchemaAttr(0, "array", 3)]
    public BooleanValue Array { get; set; }
    /// <summary>
    /// <para> Value Needed.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 4)]
    public BooleanValue Val { get; set; }
    /// <summary>
    /// <para> Defined Name Formula.</para>
    /// <para>Represents the following attribute in the schema: nf </para>
    /// </summary>
    [SchemaAttr(0, "nf", 5)]
    public BooleanValue DefinedNameFormula { get; set; }
    /// <summary>
    /// <para> Cross Sheet Move.</para>
    /// <para>Represents the following attribute in the schema: cs </para>
    /// </summary>
    [SchemaAttr(0, "cs", 6)]
    public BooleanValue CrossSheetMove { get; set; }
    /// <summary>
    /// <para> Range.</para>
    /// <para>Represents the following attribute in the schema: dr </para>
    /// </summary>
    [SchemaAttr(0, "dr", 7)]
    public StringValue DeletedRange { get; set; }
    /// <summary>
    /// <para> Defined Name.</para>
    /// <para>Represents the following attribute in the schema: dn </para>
    /// </summary>
    [SchemaAttr(0, "dn", 8)]
    public StringValue DefinedName { get; set; }
    /// <summary>
    /// <para> Cell Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 9)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sId </para>
    /// </summary>
    [SchemaAttr(0, "sId", 10)]
    public UInt32Value SheetId { get; set; }

    /// <summary>
    /// Initializes a new instance of the Undo class.
    /// </summary>
    public Undo():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Undo>(deep);

}
/// <summary>
/// <para>Old Cell Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormula &lt;x:f></description></item>
///<item><description>CellValue &lt;x:v></description></item>
///<item><description>InlineString &lt;x:is></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "oc")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OldCell : CellType
{
    internal const int ElementTypeIdConst = 11235;
    /// <inheritdoc/>
    public override string LocalName => "oc";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the OldCell class.
    /// </summary>
    public OldCell():base(){}
        /// <summary>
    ///Initializes a new instance of the OldCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OldCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OldCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OldCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OldCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OldCell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OldCell>(deep);

}
/// <summary>
/// <para>Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:c.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormula &lt;x:f></description></item>
///<item><description>CellValue &lt;x:v></description></item>
///<item><description>InlineString &lt;x:is></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "c")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class Cell : CellType
{
    internal const int ElementTypeIdConst = 11403;
    /// <inheritdoc/>
    public override string LocalName => "c";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the Cell class.
    /// </summary>
    public Cell():base(){}
        /// <summary>
    ///Initializes a new instance of the Cell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Cell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Cell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Cell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Cell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Cell(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Cell>(deep);

}
/// <summary>
/// Defines the CellType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormula &lt;x:f></description></item>
///<item><description>CellValue &lt;x:v></description></item>
///<item><description>InlineString &lt;x:is></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(CellFormula))]
    [ChildElementInfo(typeof(CellValue))]
    [ChildElementInfo(typeof(InlineString))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class CellType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Style Index.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 1)]
    public UInt32Value StyleIndex { get; set; }
    /// <summary>
    /// <para> Cell Data Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CellValues> DataType { get; set; }
    /// <summary>
    /// <para> Cell Metadata Index.</para>
    /// <para>Represents the following attribute in the schema: cm </para>
    /// </summary>
    [SchemaAttr(0, "cm", 3)]
    public UInt32Value CellMetaIndex { get; set; }
    /// <summary>
    /// <para> Value Metadata Index.</para>
    /// <para>Represents the following attribute in the schema: vm </para>
    /// </summary>
    [SchemaAttr(0, "vm", 4)]
    public UInt32Value ValueMetaIndex { get; set; }
    /// <summary>
    /// <para> Show Phonetic.</para>
    /// <para>Represents the following attribute in the schema: ph </para>
    /// </summary>
    [SchemaAttr(0, "ph", 5)]
    public BooleanValue ShowPhonetic { get; set; }

    
        private static readonly string[] eleTagNames = { "f","v","is","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Formula.</para>
    /// <para> Represents the following element tag in the schema: x:f </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellFormula CellFormula
    {
        get => GetElement<CellFormula>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Cell Value.</para>
    /// <para> Represents the following element tag in the schema: x:v </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellValue CellValue
    {
        get => GetElement<CellValue>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Rich Text Inline.</para>
    /// <para> Represents the following element tag in the schema: x:is </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public InlineString InlineString
    {
        get => GetElement<InlineString>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
    }
    


    
    /// <summary>
    /// Initializes a new instance of the CellType class.
    /// </summary>
    protected CellType(){}
    
        /// <summary>
    ///Initializes a new instance of the CellType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected CellType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected CellType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected CellType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>New Cell Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:nc.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormula &lt;x:f></description></item>
///<item><description>CellValue &lt;x:v></description></item>
///<item><description>InlineString &lt;x:is></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CellFormula))]
    [ChildElementInfo(typeof(CellValue))]
    [ChildElementInfo(typeof(InlineString))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "nc")]
public partial class NewCell : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11236;
    /// <inheritdoc/>
    public override string LocalName => "nc";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Style Index.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 1)]
    public UInt32Value StyleIndex { get; set; }
    /// <summary>
    /// <para> Cell Data Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CellValues> DataType { get; set; }
    /// <summary>
    /// <para> Cell Metadata Index.</para>
    /// <para>Represents the following attribute in the schema: cm </para>
    /// </summary>
    [SchemaAttr(0, "cm", 3)]
    public UInt32Value CellMetaIndex { get; set; }
    /// <summary>
    /// <para> Value Metadata Index.</para>
    /// <para>Represents the following attribute in the schema: vm </para>
    /// </summary>
    [SchemaAttr(0, "vm", 4)]
    public UInt32Value ValueMetaIndex { get; set; }
    /// <summary>
    /// <para> Show Phonetic.</para>
    /// <para>Represents the following attribute in the schema: ph </para>
    /// </summary>
    [SchemaAttr(0, "ph", 5)]
    public BooleanValue ShowPhonetic { get; set; }

    /// <summary>
    /// Initializes a new instance of the NewCell class.
    /// </summary>
    public NewCell():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NewCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NewCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NewCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NewCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NewCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NewCell(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "f","v","is","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Formula.</para>
    /// <para> Represents the following element tag in the schema: x:f </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellFormula CellFormula
    {
        get => GetElement<CellFormula>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Cell Value.</para>
    /// <para> Represents the following element tag in the schema: x:v </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CellValue CellValue
    {
        get => GetElement<CellValue>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Rich Text Inline.</para>
    /// <para> Represents the following element tag in the schema: x:is </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public InlineString InlineString
    {
        get => GetElement<InlineString>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NewCell>(deep);

}
/// <summary>
/// <para>Old Formatting Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:odxf.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Font &lt;x:font></description></item>
///<item><description>NumberingFormat &lt;x:numFmt></description></item>
///<item><description>Fill &lt;x:fill></description></item>
///<item><description>Alignment &lt;x:alignment></description></item>
///<item><description>Border &lt;x:border></description></item>
///<item><description>Protection &lt;x:protection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "odxf")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class OldDifferentialFormat : DifferentialFormatType
{
    internal const int ElementTypeIdConst = 11237;
    /// <inheritdoc/>
    public override string LocalName => "odxf";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the OldDifferentialFormat class.
    /// </summary>
    public OldDifferentialFormat():base(){}
        /// <summary>
    ///Initializes a new instance of the OldDifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OldDifferentialFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OldDifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OldDifferentialFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OldDifferentialFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OldDifferentialFormat(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OldDifferentialFormat>(deep);

}
/// <summary>
/// <para>New Formatting Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ndxf.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Font &lt;x:font></description></item>
///<item><description>NumberingFormat &lt;x:numFmt></description></item>
///<item><description>Fill &lt;x:fill></description></item>
///<item><description>Alignment &lt;x:alignment></description></item>
///<item><description>Border &lt;x:border></description></item>
///<item><description>Protection &lt;x:protection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "ndxf")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class NewDifferentialFormat : DifferentialFormatType
{
    internal const int ElementTypeIdConst = 11238;
    /// <inheritdoc/>
    public override string LocalName => "ndxf";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the NewDifferentialFormat class.
    /// </summary>
    public NewDifferentialFormat():base(){}
        /// <summary>
    ///Initializes a new instance of the NewDifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NewDifferentialFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NewDifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NewDifferentialFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NewDifferentialFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NewDifferentialFormat(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NewDifferentialFormat>(deep);

}
/// <summary>
/// <para>Formatting.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dxf.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Font &lt;x:font></description></item>
///<item><description>NumberingFormat &lt;x:numFmt></description></item>
///<item><description>Fill &lt;x:fill></description></item>
///<item><description>Alignment &lt;x:alignment></description></item>
///<item><description>Border &lt;x:border></description></item>
///<item><description>Protection &lt;x:protection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "dxf")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DifferentialFormat : DifferentialFormatType
{
    internal const int ElementTypeIdConst = 11239;
    /// <inheritdoc/>
    public override string LocalName => "dxf";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the DifferentialFormat class.
    /// </summary>
    public DifferentialFormat():base(){}
        /// <summary>
    ///Initializes a new instance of the DifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DifferentialFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DifferentialFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DifferentialFormat(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DifferentialFormat>(deep);

}
/// <summary>
/// Defines the DifferentialFormatType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Font &lt;x:font></description></item>
///<item><description>NumberingFormat &lt;x:numFmt></description></item>
///<item><description>Fill &lt;x:fill></description></item>
///<item><description>Alignment &lt;x:alignment></description></item>
///<item><description>Border &lt;x:border></description></item>
///<item><description>Protection &lt;x:protection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Font))]
    [ChildElementInfo(typeof(NumberingFormat))]
    [ChildElementInfo(typeof(Fill))]
    [ChildElementInfo(typeof(Alignment))]
    [ChildElementInfo(typeof(Border))]
    [ChildElementInfo(typeof(Protection))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class DifferentialFormatType : OpenXmlCompositeElement
{
        
    
    
        private static readonly string[] eleTagNames = { "font","numFmt","fill","alignment","border","protection","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Font Properties.</para>
    /// <para> Represents the following element tag in the schema: x:font </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Font Font
    {
        get => GetElement<Font>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Number Format.</para>
    /// <para> Represents the following element tag in the schema: x:numFmt </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public NumberingFormat NumberingFormat
    {
        get => GetElement<NumberingFormat>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Fill.</para>
    /// <para> Represents the following element tag in the schema: x:fill </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Fill Fill
    {
        get => GetElement<Fill>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Alignment.</para>
    /// <para> Represents the following element tag in the schema: x:alignment </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Alignment Alignment
    {
        get => GetElement<Alignment>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Border Properties.</para>
    /// <para> Represents the following element tag in the schema: x:border </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Border Border
    {
        get => GetElement<Border>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Protection Properties.</para>
    /// <para> Represents the following element tag in the schema: x:protection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Protection Protection
    {
        get => GetElement<Protection>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(6);
        set => SetElement(6, value);
    }
    


    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormatType class.
    /// </summary>
    protected DifferentialFormatType(){}
    
        /// <summary>
    ///Initializes a new instance of the DifferentialFormatType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected DifferentialFormatType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormatType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected DifferentialFormatType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormatType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected DifferentialFormatType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Sheet Id.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetId.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetId")]
public partial class SheetId : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11240;
    /// <inheritdoc/>
    public override string LocalName => "sheetId";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public UInt32Value Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetId class.
    /// </summary>
    public SheetId():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetId>(deep);

}
/// <summary>
/// <para>Formula.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:f.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "f")]
public partial class CellFormula : OpenXmlLeafTextElement
{
    internal const int ElementTypeIdConst = 11241;
    /// <inheritdoc/>
    public override string LocalName => "f";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Formula Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CellFormulaValues> FormulaType { get; set; }
    /// <summary>
    /// <para> Always Calculate Array.</para>
    /// <para>Represents the following attribute in the schema: aca </para>
    /// </summary>
    [SchemaAttr(0, "aca", 1)]
    public BooleanValue AlwaysCalculateArray { get; set; }
    /// <summary>
    /// <para> Range of Cells.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 2)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Data Table 2-D.</para>
    /// <para>Represents the following attribute in the schema: dt2D </para>
    /// </summary>
    [SchemaAttr(0, "dt2D", 3)]
    public BooleanValue DataTable2D { get; set; }
    /// <summary>
    /// <para> Data Table Row.</para>
    /// <para>Represents the following attribute in the schema: dtr </para>
    /// </summary>
    [SchemaAttr(0, "dtr", 4)]
    public BooleanValue DataTableRow { get; set; }
    /// <summary>
    /// <para> Input 1 Deleted.</para>
    /// <para>Represents the following attribute in the schema: del1 </para>
    /// </summary>
    [SchemaAttr(0, "del1", 5)]
    public BooleanValue Input1Deleted { get; set; }
    /// <summary>
    /// <para> Input 2 Deleted.</para>
    /// <para>Represents the following attribute in the schema: del2 </para>
    /// </summary>
    [SchemaAttr(0, "del2", 6)]
    public BooleanValue Input2Deleted { get; set; }
    /// <summary>
    /// <para> Data Table Cell 1.</para>
    /// <para>Represents the following attribute in the schema: r1 </para>
    /// </summary>
    [SchemaAttr(0, "r1", 7)]
    public StringValue R1 { get; set; }
    /// <summary>
    /// <para> Input Cell 2.</para>
    /// <para>Represents the following attribute in the schema: r2 </para>
    /// </summary>
    [SchemaAttr(0, "r2", 8)]
    public StringValue R2 { get; set; }
    /// <summary>
    /// <para> Calculate Cell.</para>
    /// <para>Represents the following attribute in the schema: ca </para>
    /// </summary>
    [SchemaAttr(0, "ca", 9)]
    public BooleanValue CalculateCell { get; set; }
    /// <summary>
    /// <para> Shared Group Index.</para>
    /// <para>Represents the following attribute in the schema: si </para>
    /// </summary>
    [SchemaAttr(0, "si", 10)]
    public UInt32Value SharedIndex { get; set; }
    /// <summary>
    /// <para> Assigns Value to Name.</para>
    /// <para>Represents the following attribute in the schema: bx </para>
    /// </summary>
    [SchemaAttr(0, "bx", 11)]
    public BooleanValue Bx { get; set; }
    /// <summary>
    /// <para> Content Contains Significant Whitespace.</para>
    /// <para>Represents the following attribute in the schema: xml:space </para>
    /// </summary>
///<remark> xmlns:xml=http://www.w3.org/XML/1998/namespace
///</remark>
    [SchemaAttr(1, "space", 12)]
    public EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues> Space { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellFormula class.
    /// </summary>
    public CellFormula():base(){}
    
      
        /// <summary>
    /// Initializes a new instance of the CellFormula class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public CellFormula(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    
 
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellFormula>(deep);

}
/// <summary>
/// <para>User Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:userInfo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "userInfo")]
public partial class UserInfo : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11246;
    /// <inheritdoc/>
    public override string LocalName => "userInfo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> User Revisions GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> User Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> User Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 2)]
    public Int32Value Id { get; set; }
    /// <summary>
    /// <para> Date Time.</para>
    /// <para>Represents the following attribute in the schema: dateTime </para>
    /// </summary>
    [SchemaAttr(0, "dateTime", 3)]
    public DateTimeValue DateTime { get; set; }

    /// <summary>
    /// Initializes a new instance of the UserInfo class.
    /// </summary>
    public UserInfo():base(){}
    
        /// <summary>
    ///Initializes a new instance of the UserInfo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public UserInfo(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the UserInfo class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public UserInfo(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the UserInfo class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public UserInfo(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<UserInfo>(deep);

}
/// <summary>
/// <para>Row.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:row.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Cell &lt;x:c></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Cell))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "row")]
public partial class Row : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11247;
    /// <inheritdoc/>
    public override string LocalName => "row";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Row Index.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public UInt32Value RowIndex { get; set; }
    /// <summary>
    /// <para> Spans.</para>
    /// <para>Represents the following attribute in the schema: spans </para>
    /// </summary>
    [SchemaAttr(0, "spans", 1)]
    public ListValue<StringValue> Spans { get; set; }
    /// <summary>
    /// <para> Style Index.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 2)]
    public UInt32Value StyleIndex { get; set; }
    /// <summary>
    /// <para> Custom Format.</para>
    /// <para>Represents the following attribute in the schema: customFormat </para>
    /// </summary>
    [SchemaAttr(0, "customFormat", 3)]
    public BooleanValue CustomFormat { get; set; }
    /// <summary>
    /// <para> Row Height.</para>
    /// <para>Represents the following attribute in the schema: ht </para>
    /// </summary>
    [SchemaAttr(0, "ht", 4)]
    public DoubleValue Height { get; set; }
    /// <summary>
    /// <para> Hidden.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 5)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Custom Height.</para>
    /// <para>Represents the following attribute in the schema: customHeight </para>
    /// </summary>
    [SchemaAttr(0, "customHeight", 6)]
    public BooleanValue CustomHeight { get; set; }
    /// <summary>
    /// <para> Outline Level.</para>
    /// <para>Represents the following attribute in the schema: outlineLevel </para>
    /// </summary>
    [SchemaAttr(0, "outlineLevel", 7)]
    public ByteValue OutlineLevel { get; set; }
    /// <summary>
    /// <para> Collapsed.</para>
    /// <para>Represents the following attribute in the schema: collapsed </para>
    /// </summary>
    [SchemaAttr(0, "collapsed", 8)]
    public BooleanValue Collapsed { get; set; }
    /// <summary>
    /// <para> Thick Top Border.</para>
    /// <para>Represents the following attribute in the schema: thickTop </para>
    /// </summary>
    [SchemaAttr(0, "thickTop", 9)]
    public BooleanValue ThickTop { get; set; }
    /// <summary>
    /// <para> Thick Bottom.</para>
    /// <para>Represents the following attribute in the schema: thickBot </para>
    /// </summary>
    [SchemaAttr(0, "thickBot", 10)]
    public BooleanValue ThickBot { get; set; }
    /// <summary>
    /// <para> Show Phonetic.</para>
    /// <para>Represents the following attribute in the schema: ph </para>
    /// </summary>
    [SchemaAttr(0, "ph", 11)]
    public BooleanValue ShowPhonetic { get; set; }
    /// <summary>
    /// <para> dyDescent.</para>
    /// <para>Represents the following attribute in the schema: x14ac:dyDescent </para>
    /// </summary>
///<remark> xmlns:x14ac=http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac
///</remark>
    [SchemaAttr(55, "dyDescent", 12)]
    public DoubleValue DyDescent { get; set; }

    /// <summary>
    /// Initializes a new instance of the Row class.
    /// </summary>
    public Row():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Row class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Row(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Row class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Row(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Row class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Row(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Row>(deep);

}
/// <summary>
/// <para>Column Width and Formatting.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:col.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "col")]
public partial class Column : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11248;
    /// <inheritdoc/>
    public override string LocalName => "col";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Minimum Column.</para>
    /// <para>Represents the following attribute in the schema: min </para>
    /// </summary>
    [SchemaAttr(0, "min", 0)]
    public UInt32Value Min { get; set; }
    /// <summary>
    /// <para> Maximum Column.</para>
    /// <para>Represents the following attribute in the schema: max </para>
    /// </summary>
    [SchemaAttr(0, "max", 1)]
    public UInt32Value Max { get; set; }
    /// <summary>
    /// <para> Column Width.</para>
    /// <para>Represents the following attribute in the schema: width </para>
    /// </summary>
    [SchemaAttr(0, "width", 2)]
    public DoubleValue Width { get; set; }
    /// <summary>
    /// <para> Style.</para>
    /// <para>Represents the following attribute in the schema: style </para>
    /// </summary>
    [SchemaAttr(0, "style", 3)]
    public UInt32Value Style { get; set; }
    /// <summary>
    /// <para> Hidden Columns.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 4)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Best Fit Column Width.</para>
    /// <para>Represents the following attribute in the schema: bestFit </para>
    /// </summary>
    [SchemaAttr(0, "bestFit", 5)]
    public BooleanValue BestFit { get; set; }
    /// <summary>
    /// <para> Custom Width.</para>
    /// <para>Represents the following attribute in the schema: customWidth </para>
    /// </summary>
    [SchemaAttr(0, "customWidth", 6)]
    public BooleanValue CustomWidth { get; set; }
    /// <summary>
    /// <para> Show Phonetic Information.</para>
    /// <para>Represents the following attribute in the schema: phonetic </para>
    /// </summary>
    [SchemaAttr(0, "phonetic", 7)]
    public BooleanValue Phonetic { get; set; }
    /// <summary>
    /// <para> Outline Level.</para>
    /// <para>Represents the following attribute in the schema: outlineLevel </para>
    /// </summary>
    [SchemaAttr(0, "outlineLevel", 8)]
    public ByteValue OutlineLevel { get; set; }
    /// <summary>
    /// <para> Collapsed.</para>
    /// <para>Represents the following attribute in the schema: collapsed </para>
    /// </summary>
    [SchemaAttr(0, "collapsed", 9)]
    public BooleanValue Collapsed { get; set; }

    /// <summary>
    /// Initializes a new instance of the Column class.
    /// </summary>
    public Column():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Column>(deep);

}
/// <summary>
/// <para>Outline Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:outlinePr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "outlinePr")]
public partial class OutlineProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11250;
    /// <inheritdoc/>
    public override string LocalName => "outlinePr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Apply Styles in Outline.</para>
    /// <para>Represents the following attribute in the schema: applyStyles </para>
    /// </summary>
    [SchemaAttr(0, "applyStyles", 0)]
    public BooleanValue ApplyStyles { get; set; }
    /// <summary>
    /// <para> Summary Below.</para>
    /// <para>Represents the following attribute in the schema: summaryBelow </para>
    /// </summary>
    [SchemaAttr(0, "summaryBelow", 1)]
    public BooleanValue SummaryBelow { get; set; }
    /// <summary>
    /// <para> Summary Right.</para>
    /// <para>Represents the following attribute in the schema: summaryRight </para>
    /// </summary>
    [SchemaAttr(0, "summaryRight", 2)]
    public BooleanValue SummaryRight { get; set; }
    /// <summary>
    /// <para> Show Outline Symbols.</para>
    /// <para>Represents the following attribute in the schema: showOutlineSymbols </para>
    /// </summary>
    [SchemaAttr(0, "showOutlineSymbols", 3)]
    public BooleanValue ShowOutlineSymbols { get; set; }

    /// <summary>
    /// Initializes a new instance of the OutlineProperties class.
    /// </summary>
    public OutlineProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OutlineProperties>(deep);

}
/// <summary>
/// <para>Page Setup Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageSetUpPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageSetUpPr")]
public partial class PageSetupProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11251;
    /// <inheritdoc/>
    public override string LocalName => "pageSetUpPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Show Auto Page Breaks.</para>
    /// <para>Represents the following attribute in the schema: autoPageBreaks </para>
    /// </summary>
    [SchemaAttr(0, "autoPageBreaks", 0)]
    public BooleanValue AutoPageBreaks { get; set; }
    /// <summary>
    /// <para> Fit To Page.</para>
    /// <para>Represents the following attribute in the schema: fitToPage </para>
    /// </summary>
    [SchemaAttr(0, "fitToPage", 1)]
    public BooleanValue FitToPage { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageSetupProperties class.
    /// </summary>
    public PageSetupProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageSetupProperties>(deep);

}
/// <summary>
/// <para>View Pane.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pane.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pane")]
public partial class Pane : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11252;
    /// <inheritdoc/>
    public override string LocalName => "pane";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Horizontal Split Position.</para>
    /// <para>Represents the following attribute in the schema: xSplit </para>
    /// </summary>
    [SchemaAttr(0, "xSplit", 0)]
    public DoubleValue HorizontalSplit { get; set; }
    /// <summary>
    /// <para> Vertical Split Position.</para>
    /// <para>Represents the following attribute in the schema: ySplit </para>
    /// </summary>
    [SchemaAttr(0, "ySplit", 1)]
    public DoubleValue VerticalSplit { get; set; }
    /// <summary>
    /// <para> Top Left Visible Cell.</para>
    /// <para>Represents the following attribute in the schema: topLeftCell </para>
    /// </summary>
    [SchemaAttr(0, "topLeftCell", 2)]
    public StringValue TopLeftCell { get; set; }
    /// <summary>
    /// <para> Active Pane.</para>
    /// <para>Represents the following attribute in the schema: activePane </para>
    /// </summary>
    [SchemaAttr(0, "activePane", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PaneValues> ActivePane { get; set; }
    /// <summary>
    /// <para> Split State.</para>
    /// <para>Represents the following attribute in the schema: state </para>
    /// </summary>
    [SchemaAttr(0, "state", 4)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PaneStateValues> State { get; set; }

    /// <summary>
    /// Initializes a new instance of the Pane class.
    /// </summary>
    public Pane():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pane>(deep);

}
/// <summary>
/// <para>Selection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:selection.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "selection")]
public partial class Selection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11253;
    /// <inheritdoc/>
    public override string LocalName => "selection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pane.</para>
    /// <para>Represents the following attribute in the schema: pane </para>
    /// </summary>
    [SchemaAttr(0, "pane", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PaneValues> Pane { get; set; }
    /// <summary>
    /// <para> Active Cell Location.</para>
    /// <para>Represents the following attribute in the schema: activeCell </para>
    /// </summary>
    [SchemaAttr(0, "activeCell", 1)]
    public StringValue ActiveCell { get; set; }
    /// <summary>
    /// <para> Active Cell Index.</para>
    /// <para>Represents the following attribute in the schema: activeCellId </para>
    /// </summary>
    [SchemaAttr(0, "activeCellId", 2)]
    public UInt32Value ActiveCellId { get; set; }
    /// <summary>
    /// <para> Sequence of References.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 3)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }

    /// <summary>
    /// Initializes a new instance of the Selection class.
    /// </summary>
    public Selection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Selection>(deep);

}
/// <summary>
/// <para>PivotTable Selection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotSelection.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotSelection")]
public partial class PivotSelection : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11254;
    /// <inheritdoc/>
    public override string LocalName => "pivotSelection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pane.</para>
    /// <para>Represents the following attribute in the schema: pane </para>
    /// </summary>
    [SchemaAttr(0, "pane", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PaneValues> Pane { get; set; }
    /// <summary>
    /// <para> Show Header.</para>
    /// <para>Represents the following attribute in the schema: showHeader </para>
    /// </summary>
    [SchemaAttr(0, "showHeader", 1)]
    public BooleanValue ShowHeader { get; set; }
    /// <summary>
    /// <para> Label.</para>
    /// <para>Represents the following attribute in the schema: label </para>
    /// </summary>
    [SchemaAttr(0, "label", 2)]
    public BooleanValue Label { get; set; }
    /// <summary>
    /// <para> Data Selection.</para>
    /// <para>Represents the following attribute in the schema: data </para>
    /// </summary>
    [SchemaAttr(0, "data", 3)]
    public BooleanValue Data { get; set; }
    /// <summary>
    /// <para> Extendable.</para>
    /// <para>Represents the following attribute in the schema: extendable </para>
    /// </summary>
    [SchemaAttr(0, "extendable", 4)]
    public BooleanValue Extendable { get; set; }
    /// <summary>
    /// <para> Selection Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 5)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Axis.</para>
    /// <para>Represents the following attribute in the schema: axis </para>
    /// </summary>
    [SchemaAttr(0, "axis", 6)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PivotTableAxisValues> Axis { get; set; }
    /// <summary>
    /// <para> Dimension.</para>
    /// <para>Represents the following attribute in the schema: dimension </para>
    /// </summary>
    [SchemaAttr(0, "dimension", 7)]
    public UInt32Value Dimension { get; set; }
    /// <summary>
    /// <para> Start.</para>
    /// <para>Represents the following attribute in the schema: start </para>
    /// </summary>
    [SchemaAttr(0, "start", 8)]
    public UInt32Value Start { get; set; }
    /// <summary>
    /// <para> Minimum.</para>
    /// <para>Represents the following attribute in the schema: min </para>
    /// </summary>
    [SchemaAttr(0, "min", 9)]
    public UInt32Value Min { get; set; }
    /// <summary>
    /// <para> Maximum.</para>
    /// <para>Represents the following attribute in the schema: max </para>
    /// </summary>
    [SchemaAttr(0, "max", 10)]
    public UInt32Value Max { get; set; }
    /// <summary>
    /// <para> Active Row.</para>
    /// <para>Represents the following attribute in the schema: activeRow </para>
    /// </summary>
    [SchemaAttr(0, "activeRow", 11)]
    public UInt32Value ActiveRow { get; set; }
    /// <summary>
    /// <para> Active Column.</para>
    /// <para>Represents the following attribute in the schema: activeCol </para>
    /// </summary>
    [SchemaAttr(0, "activeCol", 12)]
    public UInt32Value ActiveColumn { get; set; }
    /// <summary>
    /// <para> Previous Row.</para>
    /// <para>Represents the following attribute in the schema: previousRow </para>
    /// </summary>
    [SchemaAttr(0, "previousRow", 13)]
    public UInt32Value PreviousRow { get; set; }
    /// <summary>
    /// <para> Previous Column Selection.</para>
    /// <para>Represents the following attribute in the schema: previousCol </para>
    /// </summary>
    [SchemaAttr(0, "previousCol", 14)]
    public UInt32Value PreviousColumn { get; set; }
    /// <summary>
    /// <para> Click Count.</para>
    /// <para>Represents the following attribute in the schema: click </para>
    /// </summary>
    [SchemaAttr(0, "click", 15)]
    public UInt32Value Click { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 16)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotSelection class.
    /// </summary>
    public PivotSelection():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotSelection class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotSelection(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotSelection class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotSelection(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotSelection class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotSelection(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotArea" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Pivot Area.</para>
    /// <para> Represents the following element tag in the schema: x:pivotArea </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotArea PivotArea
    {
        get => GetElement<PivotArea>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotSelection>(deep);

}
/// <summary>
/// <para>Break.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:brk.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "brk")]
public partial class Break : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11255;
    /// <inheritdoc/>
    public override string LocalName => "brk";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Minimum.</para>
    /// <para>Represents the following attribute in the schema: min </para>
    /// </summary>
    [SchemaAttr(0, "min", 1)]
    public UInt32Value Min { get; set; }
    /// <summary>
    /// <para> Maximum.</para>
    /// <para>Represents the following attribute in the schema: max </para>
    /// </summary>
    [SchemaAttr(0, "max", 2)]
    public UInt32Value Max { get; set; }
    /// <summary>
    /// <para> Manual Page Break.</para>
    /// <para>Represents the following attribute in the schema: man </para>
    /// </summary>
    [SchemaAttr(0, "man", 3)]
    public BooleanValue ManualPageBreak { get; set; }
    /// <summary>
    /// <para> Pivot-Created Page Break.</para>
    /// <para>Represents the following attribute in the schema: pt </para>
    /// </summary>
    [SchemaAttr(0, "pt", 4)]
    public BooleanValue PivotTablePageBreak { get; set; }

    /// <summary>
    /// Initializes a new instance of the Break class.
    /// </summary>
    public Break():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);

}
/// <summary>
/// <para>Data Consolidation Reference.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataRef.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataRef")]
public partial class DataReference : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11256;
    /// <inheritdoc/>
    public override string LocalName => "dataRef";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Named Range.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: sheet </para>
    /// </summary>
    [SchemaAttr(0, "sheet", 2)]
    public StringValue Sheet { get; set; }
    /// <summary>
    /// <para> relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 3)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataReference class.
    /// </summary>
    public DataReference():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataReference>(deep);

}
/// <summary>
/// <para>Horizontal Page Breaks.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rowBreaks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Break &lt;x:brk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "rowBreaks")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RowBreaks : PageBreakType
{
    internal const int ElementTypeIdConst = 11257;
    /// <inheritdoc/>
    public override string LocalName => "rowBreaks";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the RowBreaks class.
    /// </summary>
    public RowBreaks():base(){}
        /// <summary>
    ///Initializes a new instance of the RowBreaks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowBreaks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RowBreaks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowBreaks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RowBreaks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RowBreaks(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowBreaks>(deep);

}
/// <summary>
/// <para>Vertical Page Breaks.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colBreaks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Break &lt;x:brk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "colBreaks")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ColumnBreaks : PageBreakType
{
    internal const int ElementTypeIdConst = 11258;
    /// <inheritdoc/>
    public override string LocalName => "colBreaks";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the ColumnBreaks class.
    /// </summary>
    public ColumnBreaks():base(){}
        /// <summary>
    ///Initializes a new instance of the ColumnBreaks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnBreaks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnBreaks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnBreaks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnBreaks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColumnBreaks(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnBreaks>(deep);

}
/// <summary>
/// Defines the PageBreakType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Break &lt;x:brk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Break))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class PageBreakType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Page Break Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Manual Break Count.</para>
    /// <para>Represents the following attribute in the schema: manualBreakCount </para>
    /// </summary>
    [SchemaAttr(0, "manualBreakCount", 1)]
    public UInt32Value ManualBreakCount { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the PageBreakType class.
    /// </summary>
    protected PageBreakType(){}
    
        /// <summary>
    ///Initializes a new instance of the PageBreakType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected PageBreakType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PageBreakType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected PageBreakType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PageBreakType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected PageBreakType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Page Margins.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageMargins.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageMargins")]
public partial class PageMargins : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11259;
    /// <inheritdoc/>
    public override string LocalName => "pageMargins";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Left Page Margin.</para>
    /// <para>Represents the following attribute in the schema: left </para>
    /// </summary>
    [SchemaAttr(0, "left", 0)]
    public DoubleValue Left { get; set; }
    /// <summary>
    /// <para> Right Page Margin.</para>
    /// <para>Represents the following attribute in the schema: right </para>
    /// </summary>
    [SchemaAttr(0, "right", 1)]
    public DoubleValue Right { get; set; }
    /// <summary>
    /// <para> Top Page Margin.</para>
    /// <para>Represents the following attribute in the schema: top </para>
    /// </summary>
    [SchemaAttr(0, "top", 2)]
    public DoubleValue Top { get; set; }
    /// <summary>
    /// <para> Bottom Page Margin.</para>
    /// <para>Represents the following attribute in the schema: bottom </para>
    /// </summary>
    [SchemaAttr(0, "bottom", 3)]
    public DoubleValue Bottom { get; set; }
    /// <summary>
    /// <para> Header Page Margin.</para>
    /// <para>Represents the following attribute in the schema: header </para>
    /// </summary>
    [SchemaAttr(0, "header", 4)]
    public DoubleValue Header { get; set; }
    /// <summary>
    /// <para> Footer Page Margin.</para>
    /// <para>Represents the following attribute in the schema: footer </para>
    /// </summary>
    [SchemaAttr(0, "footer", 5)]
    public DoubleValue Footer { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageMargins class.
    /// </summary>
    public PageMargins():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageMargins>(deep);

}
/// <summary>
/// <para>Print Options.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:printOptions.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "printOptions")]
public partial class PrintOptions : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11260;
    /// <inheritdoc/>
    public override string LocalName => "printOptions";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Horizontal Centered.</para>
    /// <para>Represents the following attribute in the schema: horizontalCentered </para>
    /// </summary>
    [SchemaAttr(0, "horizontalCentered", 0)]
    public BooleanValue HorizontalCentered { get; set; }
    /// <summary>
    /// <para> Vertical Centered.</para>
    /// <para>Represents the following attribute in the schema: verticalCentered </para>
    /// </summary>
    [SchemaAttr(0, "verticalCentered", 1)]
    public BooleanValue VerticalCentered { get; set; }
    /// <summary>
    /// <para> Print Headings.</para>
    /// <para>Represents the following attribute in the schema: headings </para>
    /// </summary>
    [SchemaAttr(0, "headings", 2)]
    public BooleanValue Headings { get; set; }
    /// <summary>
    /// <para> Print Grid Lines.</para>
    /// <para>Represents the following attribute in the schema: gridLines </para>
    /// </summary>
    [SchemaAttr(0, "gridLines", 3)]
    public BooleanValue GridLines { get; set; }
    /// <summary>
    /// <para> Grid Lines Set.</para>
    /// <para>Represents the following attribute in the schema: gridLinesSet </para>
    /// </summary>
    [SchemaAttr(0, "gridLinesSet", 4)]
    public BooleanValue GridLinesSet { get; set; }

    /// <summary>
    /// Initializes a new instance of the PrintOptions class.
    /// </summary>
    public PrintOptions():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintOptions>(deep);

}
/// <summary>
/// <para>Page Setup Settings.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageSetup.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageSetup")]
public partial class PageSetup : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11261;
    /// <inheritdoc/>
    public override string LocalName => "pageSetup";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Paper Size.</para>
    /// <para>Represents the following attribute in the schema: paperSize </para>
    /// </summary>
    [SchemaAttr(0, "paperSize", 0)]
    public UInt32Value PaperSize { get; set; }
    /// <summary>
    /// <para> Print Scale.</para>
    /// <para>Represents the following attribute in the schema: scale </para>
    /// </summary>
    [SchemaAttr(0, "scale", 1)]
    public UInt32Value Scale { get; set; }
    /// <summary>
    /// <para> First Page Number.</para>
    /// <para>Represents the following attribute in the schema: firstPageNumber </para>
    /// </summary>
    [SchemaAttr(0, "firstPageNumber", 2)]
    public UInt32Value FirstPageNumber { get; set; }
    /// <summary>
    /// <para> Fit To Width.</para>
    /// <para>Represents the following attribute in the schema: fitToWidth </para>
    /// </summary>
    [SchemaAttr(0, "fitToWidth", 3)]
    public UInt32Value FitToWidth { get; set; }
    /// <summary>
    /// <para> Fit To Height.</para>
    /// <para>Represents the following attribute in the schema: fitToHeight </para>
    /// </summary>
    [SchemaAttr(0, "fitToHeight", 4)]
    public UInt32Value FitToHeight { get; set; }
    /// <summary>
    /// <para> Page Order.</para>
    /// <para>Represents the following attribute in the schema: pageOrder </para>
    /// </summary>
    [SchemaAttr(0, "pageOrder", 5)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PageOrderValues> PageOrder { get; set; }
    /// <summary>
    /// <para> Orientation.</para>
    /// <para>Represents the following attribute in the schema: orientation </para>
    /// </summary>
    [SchemaAttr(0, "orientation", 6)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.OrientationValues> Orientation { get; set; }
    /// <summary>
    /// <para> Use Printer Defaults.</para>
    /// <para>Represents the following attribute in the schema: usePrinterDefaults </para>
    /// </summary>
    [SchemaAttr(0, "usePrinterDefaults", 7)]
    public BooleanValue UsePrinterDefaults { get; set; }
    /// <summary>
    /// <para> Black And White.</para>
    /// <para>Represents the following attribute in the schema: blackAndWhite </para>
    /// </summary>
    [SchemaAttr(0, "blackAndWhite", 8)]
    public BooleanValue BlackAndWhite { get; set; }
    /// <summary>
    /// <para> Draft.</para>
    /// <para>Represents the following attribute in the schema: draft </para>
    /// </summary>
    [SchemaAttr(0, "draft", 9)]
    public BooleanValue Draft { get; set; }
    /// <summary>
    /// <para> Print Cell Comments.</para>
    /// <para>Represents the following attribute in the schema: cellComments </para>
    /// </summary>
    [SchemaAttr(0, "cellComments", 10)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CellCommentsValues> CellComments { get; set; }
    /// <summary>
    /// <para> Use First Page Number.</para>
    /// <para>Represents the following attribute in the schema: useFirstPageNumber </para>
    /// </summary>
    [SchemaAttr(0, "useFirstPageNumber", 11)]
    public BooleanValue UseFirstPageNumber { get; set; }
    /// <summary>
    /// <para> Print Error Handling.</para>
    /// <para>Represents the following attribute in the schema: errors </para>
    /// </summary>
    [SchemaAttr(0, "errors", 12)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PrintErrorValues> Errors { get; set; }
    /// <summary>
    /// <para> Horizontal DPI.</para>
    /// <para>Represents the following attribute in the schema: horizontalDpi </para>
    /// </summary>
    [SchemaAttr(0, "horizontalDpi", 13)]
    public UInt32Value HorizontalDpi { get; set; }
    /// <summary>
    /// <para> Vertical DPI.</para>
    /// <para>Represents the following attribute in the schema: verticalDpi </para>
    /// </summary>
    [SchemaAttr(0, "verticalDpi", 14)]
    public UInt32Value VerticalDpi { get; set; }
    /// <summary>
    /// <para> Number Of Copies.</para>
    /// <para>Represents the following attribute in the schema: copies </para>
    /// </summary>
    [SchemaAttr(0, "copies", 15)]
    public UInt32Value Copies { get; set; }
    /// <summary>
    /// <para> Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 16)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageSetup class.
    /// </summary>
    public PageSetup():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageSetup>(deep);

}
/// <summary>
/// <para>Header Footer Settings.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:headerFooter.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OddHeader &lt;x:oddHeader></description></item>
///<item><description>OddFooter &lt;x:oddFooter></description></item>
///<item><description>EvenHeader &lt;x:evenHeader></description></item>
///<item><description>EvenFooter &lt;x:evenFooter></description></item>
///<item><description>FirstHeader &lt;x:firstHeader></description></item>
///<item><description>FirstFooter &lt;x:firstFooter></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OddHeader))]
    [ChildElementInfo(typeof(OddFooter))]
    [ChildElementInfo(typeof(EvenHeader))]
    [ChildElementInfo(typeof(EvenFooter))]
    [ChildElementInfo(typeof(FirstHeader))]
    [ChildElementInfo(typeof(FirstFooter))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "headerFooter")]
public partial class HeaderFooter : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11262;
    /// <inheritdoc/>
    public override string LocalName => "headerFooter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Different Odd Even Header Footer.</para>
    /// <para>Represents the following attribute in the schema: differentOddEven </para>
    /// </summary>
    [SchemaAttr(0, "differentOddEven", 0)]
    public BooleanValue DifferentOddEven { get; set; }
    /// <summary>
    /// <para> Different First Page.</para>
    /// <para>Represents the following attribute in the schema: differentFirst </para>
    /// </summary>
    [SchemaAttr(0, "differentFirst", 1)]
    public BooleanValue DifferentFirst { get; set; }
    /// <summary>
    /// <para> Scale Header and Footer With Document.</para>
    /// <para>Represents the following attribute in the schema: scaleWithDoc </para>
    /// </summary>
    [SchemaAttr(0, "scaleWithDoc", 2)]
    public BooleanValue ScaleWithDoc { get; set; }
    /// <summary>
    /// <para> Align Margins.</para>
    /// <para>Represents the following attribute in the schema: alignWithMargins </para>
    /// </summary>
    [SchemaAttr(0, "alignWithMargins", 3)]
    public BooleanValue AlignWithMargins { get; set; }

    /// <summary>
    /// Initializes a new instance of the HeaderFooter class.
    /// </summary>
    public HeaderFooter():base(){}
    
        /// <summary>
    ///Initializes a new instance of the HeaderFooter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HeaderFooter(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HeaderFooter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HeaderFooter(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HeaderFooter class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HeaderFooter(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "oddHeader","oddFooter","evenHeader","evenFooter","firstHeader","firstFooter" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Odd Header.</para>
    /// <para> Represents the following element tag in the schema: x:oddHeader </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OddHeader OddHeader
    {
        get => GetElement<OddHeader>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Odd Page Footer.</para>
    /// <para> Represents the following element tag in the schema: x:oddFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OddFooter OddFooter
    {
        get => GetElement<OddFooter>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Even Page Header.</para>
    /// <para> Represents the following element tag in the schema: x:evenHeader </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public EvenHeader EvenHeader
    {
        get => GetElement<EvenHeader>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Even Page Footer.</para>
    /// <para> Represents the following element tag in the schema: x:evenFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public EvenFooter EvenFooter
    {
        get => GetElement<EvenFooter>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> First Page Header.</para>
    /// <para> Represents the following element tag in the schema: x:firstHeader </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FirstHeader FirstHeader
    {
        get => GetElement<FirstHeader>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> First Page Footer.</para>
    /// <para> Represents the following element tag in the schema: x:firstFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FirstFooter FirstFooter
    {
        get => GetElement<FirstFooter>(5);
        set => SetElement(5, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderFooter>(deep);

}
/// <summary>
/// <para>AutoFilter Settings.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:autoFilter.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FilterColumn &lt;x:filterColumn></description></item>
///<item><description>SortState &lt;x:sortState></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FilterColumn))]
    [ChildElementInfo(typeof(SortState))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "autoFilter")]
public partial class AutoFilter : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11263;
    /// <inheritdoc/>
    public override string LocalName => "autoFilter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Cell or Range Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the AutoFilter class.
    /// </summary>
    public AutoFilter():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AutoFilter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AutoFilter(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AutoFilter class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AutoFilter(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AutoFilter class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AutoFilter(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoFilter>(deep);

}
/// <summary>
/// <para>Conditional Formatting Rule.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cfRule.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Formula &lt;x:formula></description></item>
///<item><description>ColorScale &lt;x:colorScale></description></item>
///<item><description>DataBar &lt;x:dataBar></description></item>
///<item><description>IconSet &lt;x:iconSet></description></item>
///<item><description>ConditionalFormattingRuleExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Formula))]
    [ChildElementInfo(typeof(ColorScale))]
    [ChildElementInfo(typeof(DataBar))]
    [ChildElementInfo(typeof(IconSet))]
    [ChildElementInfo(typeof(ConditionalFormattingRuleExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cfRule")]
public partial class ConditionalFormattingRule : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11264;
    /// <inheritdoc/>
    public override string LocalName => "cfRule";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatValues> Type { get; set; }
    /// <summary>
    /// <para> Differential Formatting Id.</para>
    /// <para>Represents the following attribute in the schema: dxfId </para>
    /// </summary>
    [SchemaAttr(0, "dxfId", 1)]
    public UInt32Value FormatId { get; set; }
    /// <summary>
    /// <para> Priority.</para>
    /// <para>Represents the following attribute in the schema: priority </para>
    /// </summary>
    [SchemaAttr(0, "priority", 2)]
    public Int32Value Priority { get; set; }
    /// <summary>
    /// <para> Stop If True.</para>
    /// <para>Represents the following attribute in the schema: stopIfTrue </para>
    /// </summary>
    [SchemaAttr(0, "stopIfTrue", 3)]
    public BooleanValue StopIfTrue { get; set; }
    /// <summary>
    /// <para> Above Or Below Average.</para>
    /// <para>Represents the following attribute in the schema: aboveAverage </para>
    /// </summary>
    [SchemaAttr(0, "aboveAverage", 4)]
    public BooleanValue AboveAverage { get; set; }
    /// <summary>
    /// <para> Top 10 Percent.</para>
    /// <para>Represents the following attribute in the schema: percent </para>
    /// </summary>
    [SchemaAttr(0, "percent", 5)]
    public BooleanValue Percent { get; set; }
    /// <summary>
    /// <para> Bottom N.</para>
    /// <para>Represents the following attribute in the schema: bottom </para>
    /// </summary>
    [SchemaAttr(0, "bottom", 6)]
    public BooleanValue Bottom { get; set; }
    /// <summary>
    /// <para> Operator.</para>
    /// <para>Represents the following attribute in the schema: operator </para>
    /// </summary>
    [SchemaAttr(0, "operator", 7)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ConditionalFormattingOperatorValues> Operator { get; set; }
    /// <summary>
    /// <para> Text.</para>
    /// <para>Represents the following attribute in the schema: text </para>
    /// </summary>
    [SchemaAttr(0, "text", 8)]
    public StringValue Text { get; set; }
    /// <summary>
    /// <para> Time Period.</para>
    /// <para>Represents the following attribute in the schema: timePeriod </para>
    /// </summary>
    [SchemaAttr(0, "timePeriod", 9)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TimePeriodValues> TimePeriod { get; set; }
    /// <summary>
    /// <para> Rank.</para>
    /// <para>Represents the following attribute in the schema: rank </para>
    /// </summary>
    [SchemaAttr(0, "rank", 10)]
    public UInt32Value Rank { get; set; }
    /// <summary>
    /// <para> StdDev.</para>
    /// <para>Represents the following attribute in the schema: stdDev </para>
    /// </summary>
    [SchemaAttr(0, "stdDev", 11)]
    public Int32Value StdDev { get; set; }
    /// <summary>
    /// <para> Equal Average.</para>
    /// <para>Represents the following attribute in the schema: equalAverage </para>
    /// </summary>
    [SchemaAttr(0, "equalAverage", 12)]
    public BooleanValue EqualAverage { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRule class.
    /// </summary>
    public ConditionalFormattingRule():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormattingRule class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRule(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRule class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRule(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRule class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormattingRule(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormattingRule>(deep);

}
/// <summary>
/// <para>Hyperlink.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:hyperlink.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "hyperlink")]
public partial class Hyperlink : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11265;
    /// <inheritdoc/>
    public override string LocalName => "hyperlink";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 1)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> Location.</para>
    /// <para>Represents the following attribute in the schema: location </para>
    /// </summary>
    [SchemaAttr(0, "location", 2)]
    public StringValue Location { get; set; }
    /// <summary>
    /// <para> Tool Tip.</para>
    /// <para>Represents the following attribute in the schema: tooltip </para>
    /// </summary>
    [SchemaAttr(0, "tooltip", 3)]
    public StringValue Tooltip { get; set; }
    /// <summary>
    /// <para> Display String.</para>
    /// <para>Represents the following attribute in the schema: display </para>
    /// </summary>
    [SchemaAttr(0, "display", 4)]
    public StringValue Display { get; set; }

    /// <summary>
    /// Initializes a new instance of the Hyperlink class.
    /// </summary>
    public Hyperlink():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);

}
/// <summary>
/// <para>Conditional Format Value Object.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cfvo.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cfvo")]
public partial class ConditionalFormatValueObject : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11266;
    /// <inheritdoc/>
    public override string LocalName => "cfvo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatValueObjectValues> Type { get; set; }
    /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 1)]
    public StringValue Val { get; set; }
    /// <summary>
    /// <para> Greater Than Or Equal.</para>
    /// <para>Represents the following attribute in the schema: gte </para>
    /// </summary>
    [SchemaAttr(0, "gte", 2)]
    public BooleanValue GreaterThanOrEqual { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormatValueObject class.
    /// </summary>
    public ConditionalFormatValueObject():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormatValueObject class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormatValueObject(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormatValueObject class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormatValueObject(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormatValueObject class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormatValueObject(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormatValueObject>(deep);

}
/// <summary>
/// <para>Scenario.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:scenario.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>InputCells &lt;x:inputCells></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(InputCells))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "scenario")]
public partial class Scenario : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11267;
    /// <inheritdoc/>
    public override string LocalName => "scenario";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Scenario Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Scenario Locked.</para>
    /// <para>Represents the following attribute in the schema: locked </para>
    /// </summary>
    [SchemaAttr(0, "locked", 1)]
    public BooleanValue Locked { get; set; }
    /// <summary>
    /// <para> Hidden Scenario.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 2)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Changing Cell Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 3)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> User Name.</para>
    /// <para>Represents the following attribute in the schema: user </para>
    /// </summary>
    [SchemaAttr(0, "user", 4)]
    public StringValue User { get; set; }
    /// <summary>
    /// <para> Scenario Comment.</para>
    /// <para>Represents the following attribute in the schema: comment </para>
    /// </summary>
    [SchemaAttr(0, "comment", 5)]
    public StringValue Comment { get; set; }

    /// <summary>
    /// Initializes a new instance of the Scenario class.
    /// </summary>
    public Scenario():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Scenario class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scenario(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Scenario class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scenario(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Scenario class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Scenario(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Scenario>(deep);

}
/// <summary>
/// <para>Protected Range.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:protectedRange.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "protectedRange")]
public partial class ProtectedRange : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11268;
    /// <inheritdoc/>
    public override string LocalName => "protectedRange";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> password.</para>
    /// <para>Represents the following attribute in the schema: password </para>
    /// </summary>
    [SchemaAttr(0, "password", 0)]
    public HexBinaryValue Password { get; set; }
    /// <summary>
    /// <para> algorithmName.</para>
    /// <para>Represents the following attribute in the schema: algorithmName </para>
    /// </summary>
    [SchemaAttr(0, "algorithmName", 1)]
    public StringValue AlgorithmName { get; set; }
    /// <summary>
    /// <para> hashValue.</para>
    /// <para>Represents the following attribute in the schema: hashValue </para>
    /// </summary>
    [SchemaAttr(0, "hashValue", 2)]
    public Base64BinaryValue HashValue { get; set; }
    /// <summary>
    /// <para> saltValue.</para>
    /// <para>Represents the following attribute in the schema: saltValue </para>
    /// </summary>
    [SchemaAttr(0, "saltValue", 3)]
    public Base64BinaryValue SaltValue { get; set; }
    /// <summary>
    /// <para> spinCount.</para>
    /// <para>Represents the following attribute in the schema: spinCount </para>
    /// </summary>
    [SchemaAttr(0, "spinCount", 4)]
    public UInt32Value SpinCount { get; set; }
    /// <summary>
    /// <para> sqref.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 5)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }
    /// <summary>
    /// <para> name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 6)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> securityDescriptor.</para>
    /// <para>Represents the following attribute in the schema: securityDescriptor </para>
    /// </summary>
    [SchemaAttr(0, "securityDescriptor", 7)]
    public StringValue SecurityDescriptor { get; set; }

    /// <summary>
    /// Initializes a new instance of the ProtectedRange class.
    /// </summary>
    public ProtectedRange():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProtectedRange>(deep);

}
/// <summary>
/// <para>Cell Watch Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellWatch.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellWatch")]
public partial class CellWatch : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11269;
    /// <inheritdoc/>
    public override string LocalName => "cellWatch";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellWatch class.
    /// </summary>
    public CellWatch():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellWatch>(deep);

}
/// <summary>
/// <para>Chart Sheet Page Setup.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageSetup.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageSetup")]
public partial class ChartSheetPageSetup : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11270;
    /// <inheritdoc/>
    public override string LocalName => "pageSetup";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Paper Size.</para>
    /// <para>Represents the following attribute in the schema: paperSize </para>
    /// </summary>
    [SchemaAttr(0, "paperSize", 0)]
    public UInt32Value PaperSize { get; set; }
    /// <summary>
    /// <para> First Page Number.</para>
    /// <para>Represents the following attribute in the schema: firstPageNumber </para>
    /// </summary>
    [SchemaAttr(0, "firstPageNumber", 1)]
    public UInt32Value FirstPageNumber { get; set; }
    /// <summary>
    /// <para> Orientation.</para>
    /// <para>Represents the following attribute in the schema: orientation </para>
    /// </summary>
    [SchemaAttr(0, "orientation", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.OrientationValues> Orientation { get; set; }
    /// <summary>
    /// <para> Use Printer Defaults.</para>
    /// <para>Represents the following attribute in the schema: usePrinterDefaults </para>
    /// </summary>
    [SchemaAttr(0, "usePrinterDefaults", 3)]
    public BooleanValue UsePrinterDefaults { get; set; }
    /// <summary>
    /// <para> Black And White.</para>
    /// <para>Represents the following attribute in the schema: blackAndWhite </para>
    /// </summary>
    [SchemaAttr(0, "blackAndWhite", 4)]
    public BooleanValue BlackAndWhite { get; set; }
    /// <summary>
    /// <para> Draft.</para>
    /// <para>Represents the following attribute in the schema: draft </para>
    /// </summary>
    [SchemaAttr(0, "draft", 5)]
    public BooleanValue Draft { get; set; }
    /// <summary>
    /// <para> Use First Page Number.</para>
    /// <para>Represents the following attribute in the schema: useFirstPageNumber </para>
    /// </summary>
    [SchemaAttr(0, "useFirstPageNumber", 6)]
    public BooleanValue UseFirstPageNumber { get; set; }
    /// <summary>
    /// <para> Horizontal DPI.</para>
    /// <para>Represents the following attribute in the schema: horizontalDpi </para>
    /// </summary>
    [SchemaAttr(0, "horizontalDpi", 7)]
    public UInt32Value HorizontalDpi { get; set; }
    /// <summary>
    /// <para> Vertical DPI.</para>
    /// <para>Represents the following attribute in the schema: verticalDpi </para>
    /// </summary>
    [SchemaAttr(0, "verticalDpi", 8)]
    public UInt32Value VerticalDpi { get; set; }
    /// <summary>
    /// <para> Number Of Copies.</para>
    /// <para>Represents the following attribute in the schema: copies </para>
    /// </summary>
    [SchemaAttr(0, "copies", 9)]
    public UInt32Value Copies { get; set; }
    /// <summary>
    /// <para> Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 10)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartSheetPageSetup class.
    /// </summary>
    public ChartSheetPageSetup():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartSheetPageSetup>(deep);

}
/// <summary>
/// <para>Custom Property.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customPr")]
public partial class CustomProperty : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11271;
    /// <inheritdoc/>
    public override string LocalName => "customPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Custom Property Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 1)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomProperty class.
    /// </summary>
    public CustomProperty():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomProperty>(deep);

}
/// <summary>
/// <para>Web Publishing Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPublishItem.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPublishItem")]
public partial class WebPublishItem : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11272;
    /// <inheritdoc/>
    public override string LocalName => "webPublishItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Destination Bookmark.</para>
    /// <para>Represents the following attribute in the schema: divId </para>
    /// </summary>
    [SchemaAttr(0, "divId", 1)]
    public StringValue DivId { get; set; }
    /// <summary>
    /// <para> Web Source Type.</para>
    /// <para>Represents the following attribute in the schema: sourceType </para>
    /// </summary>
    [SchemaAttr(0, "sourceType", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.WebSourceValues> SourceType { get; set; }
    /// <summary>
    /// <para> Source Id.</para>
    /// <para>Represents the following attribute in the schema: sourceRef </para>
    /// </summary>
    [SchemaAttr(0, "sourceRef", 3)]
    public StringValue SourceRef { get; set; }
    /// <summary>
    /// <para> Source Object Name.</para>
    /// <para>Represents the following attribute in the schema: sourceObject </para>
    /// </summary>
    [SchemaAttr(0, "sourceObject", 4)]
    public StringValue SourceObject { get; set; }
    /// <summary>
    /// <para> Destination File Name.</para>
    /// <para>Represents the following attribute in the schema: destinationFile </para>
    /// </summary>
    [SchemaAttr(0, "destinationFile", 5)]
    public StringValue DestinationFile { get; set; }
    /// <summary>
    /// <para> Title.</para>
    /// <para>Represents the following attribute in the schema: title </para>
    /// </summary>
    [SchemaAttr(0, "title", 6)]
    public StringValue Title { get; set; }
    /// <summary>
    /// <para> Automatically Publish.</para>
    /// <para>Represents the following attribute in the schema: autoRepublish </para>
    /// </summary>
    [SchemaAttr(0, "autoRepublish", 7)]
    public BooleanValue AutoRepublish { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebPublishItem class.
    /// </summary>
    public WebPublishItem():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPublishItem>(deep);

}
/// <summary>
/// <para>Table Part.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tablePart.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tablePart")]
public partial class TablePart : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11273;
    /// <inheritdoc/>
    public override string LocalName => "tablePart";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the TablePart class.
    /// </summary>
    public TablePart():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePart>(deep);

}
/// <summary>
/// <para>Chart Sheet View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetView")]
public partial class ChartSheetView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11274;
    /// <inheritdoc/>
    public override string LocalName => "sheetView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Tab Selected.</para>
    /// <para>Represents the following attribute in the schema: tabSelected </para>
    /// </summary>
    [SchemaAttr(0, "tabSelected", 0)]
    public BooleanValue TabSelected { get; set; }
    /// <summary>
    /// <para> Window Zoom Scale.</para>
    /// <para>Represents the following attribute in the schema: zoomScale </para>
    /// </summary>
    [SchemaAttr(0, "zoomScale", 1)]
    public UInt32Value ZoomScale { get; set; }
    /// <summary>
    /// <para> Workbook View Id.</para>
    /// <para>Represents the following attribute in the schema: workbookViewId </para>
    /// </summary>
    [SchemaAttr(0, "workbookViewId", 2)]
    public UInt32Value WorkbookViewId { get; set; }
    /// <summary>
    /// <para> Zoom To Fit.</para>
    /// <para>Represents the following attribute in the schema: zoomToFit </para>
    /// </summary>
    [SchemaAttr(0, "zoomToFit", 3)]
    public BooleanValue ZoomToFit { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartSheetView class.
    /// </summary>
    public ChartSheetView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ChartSheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ChartSheetView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartSheetView>(deep);

}
/// <summary>
/// <para>Custom Chart Sheet View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customSheetView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PageMargins &lt;x:pageMargins></description></item>
///<item><description>ChartSheetPageSetup &lt;x:pageSetup></description></item>
///<item><description>HeaderFooter &lt;x:headerFooter></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PageMargins))]
    [ChildElementInfo(typeof(ChartSheetPageSetup))]
    [ChildElementInfo(typeof(HeaderFooter))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customSheetView")]
public partial class CustomChartsheetView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11275;
    /// <inheritdoc/>
    public override string LocalName => "customSheetView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> Print Scale.</para>
    /// <para>Represents the following attribute in the schema: scale </para>
    /// </summary>
    [SchemaAttr(0, "scale", 1)]
    public UInt32Value Scale { get; set; }
    /// <summary>
    /// <para> Visible State.</para>
    /// <para>Represents the following attribute in the schema: state </para>
    /// </summary>
    [SchemaAttr(0, "state", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SheetStateValues> State { get; set; }
    /// <summary>
    /// <para> Zoom To Fit.</para>
    /// <para>Represents the following attribute in the schema: zoomToFit </para>
    /// </summary>
    [SchemaAttr(0, "zoomToFit", 3)]
    public BooleanValue ZoomToFit { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomChartsheetView class.
    /// </summary>
    public CustomChartsheetView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomChartsheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomChartsheetView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomChartsheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomChartsheetView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomChartsheetView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomChartsheetView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pageMargins","pageSetup","headerFooter" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> PageMargins.</para>
    /// <para> Represents the following element tag in the schema: x:pageMargins </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageMargins PageMargins
    {
        get => GetElement<PageMargins>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Chart Sheet Page Setup.</para>
    /// <para> Represents the following element tag in the schema: x:pageSetup </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ChartSheetPageSetup ChartSheetPageSetup
    {
        get => GetElement<ChartSheetPageSetup>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> HeaderFooter.</para>
    /// <para> Represents the following element tag in the schema: x:headerFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public HeaderFooter HeaderFooter
    {
        get => GetElement<HeaderFooter>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomChartsheetView>(deep);

}
/// <summary>
/// <para>Input Cells.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:inputCells.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "inputCells")]
public partial class InputCells : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11276;
    /// <inheritdoc/>
    public override string LocalName => "inputCells";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Deleted.</para>
    /// <para>Represents the following attribute in the schema: deleted </para>
    /// </summary>
    [SchemaAttr(0, "deleted", 1)]
    public BooleanValue Deleted { get; set; }
    /// <summary>
    /// <para> Undone.</para>
    /// <para>Represents the following attribute in the schema: undone </para>
    /// </summary>
    [SchemaAttr(0, "undone", 2)]
    public BooleanValue Undone { get; set; }
    /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 3)]
    public StringValue Val { get; set; }
    /// <summary>
    /// <para> Number Format Id.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 4)]
    public UInt32Value NumberFormatId { get; set; }

    /// <summary>
    /// Initializes a new instance of the InputCells class.
    /// </summary>
    public InputCells():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<InputCells>(deep);

}
/// <summary>
/// <para>Embedded Control.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:control.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ControlProperties &lt;x:controlPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ControlProperties), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "control")]
public partial class Control : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11277;
    /// <inheritdoc/>
    public override string LocalName => "control";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Shape Id.</para>
    /// <para>Represents the following attribute in the schema: shapeId </para>
    /// </summary>
    [SchemaAttr(0, "shapeId", 0)]
    public UInt32Value ShapeId { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 1)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> Control Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 2)]
    public StringValue Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the Control class.
    /// </summary>
    public Control():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Control class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Control(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Control class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Control(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Control class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Control(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "controlPr" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ControlProperties.</para>
    /// <para> Represents the following element tag in the schema: x:controlPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ControlProperties ControlProperties
    {
        get => GetElement<ControlProperties>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Control>(deep);

}
/// <summary>
/// <para>Ignored Error.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ignoredError.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ignoredError")]
public partial class IgnoredError : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11278;
    /// <inheritdoc/>
    public override string LocalName => "ignoredError";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sequence of References.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 0)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }
    /// <summary>
    /// <para> Evaluation Error.</para>
    /// <para>Represents the following attribute in the schema: evalError </para>
    /// </summary>
    [SchemaAttr(0, "evalError", 1)]
    public BooleanValue EvalError { get; set; }
    /// <summary>
    /// <para> Two Digit Text Year.</para>
    /// <para>Represents the following attribute in the schema: twoDigitTextYear </para>
    /// </summary>
    [SchemaAttr(0, "twoDigitTextYear", 2)]
    public BooleanValue TwoDigitTextYear { get; set; }
    /// <summary>
    /// <para> Number Stored As Text.</para>
    /// <para>Represents the following attribute in the schema: numberStoredAsText </para>
    /// </summary>
    [SchemaAttr(0, "numberStoredAsText", 3)]
    public BooleanValue NumberStoredAsText { get; set; }
    /// <summary>
    /// <para> Formula.</para>
    /// <para>Represents the following attribute in the schema: formula </para>
    /// </summary>
    [SchemaAttr(0, "formula", 4)]
    public BooleanValue Formula { get; set; }
    /// <summary>
    /// <para> Formula Range.</para>
    /// <para>Represents the following attribute in the schema: formulaRange </para>
    /// </summary>
    [SchemaAttr(0, "formulaRange", 5)]
    public BooleanValue FormulaRange { get; set; }
    /// <summary>
    /// <para> Unlocked Formula.</para>
    /// <para>Represents the following attribute in the schema: unlockedFormula </para>
    /// </summary>
    [SchemaAttr(0, "unlockedFormula", 6)]
    public BooleanValue UnlockedFormula { get; set; }
    /// <summary>
    /// <para> Empty Cell Reference.</para>
    /// <para>Represents the following attribute in the schema: emptyCellReference </para>
    /// </summary>
    [SchemaAttr(0, "emptyCellReference", 7)]
    public BooleanValue EmptyCellReference { get; set; }
    /// <summary>
    /// <para> List Data Validation.</para>
    /// <para>Represents the following attribute in the schema: listDataValidation </para>
    /// </summary>
    [SchemaAttr(0, "listDataValidation", 8)]
    public BooleanValue ListDataValidation { get; set; }
    /// <summary>
    /// <para> Calculated Column.</para>
    /// <para>Represents the following attribute in the schema: calculatedColumn </para>
    /// </summary>
    [SchemaAttr(0, "calculatedColumn", 9)]
    public BooleanValue CalculatedColumn { get; set; }

    /// <summary>
    /// Initializes a new instance of the IgnoredError class.
    /// </summary>
    public IgnoredError():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<IgnoredError>(deep);

}
/// <summary>
/// <para>Merged Cell.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mergeCell.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mergeCell")]
public partial class MergeCell : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11279;
    /// <inheritdoc/>
    public override string LocalName => "mergeCell";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the MergeCell class.
    /// </summary>
    public MergeCell():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MergeCell>(deep);

}
/// <summary>
/// <para>Data Validation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataValidation.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.ExcelAc.List &lt;x12ac:list></description></item>
///<item><description>Formula1 &lt;x:formula1></description></item>
///<item><description>Formula2 &lt;x:formula2></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.ExcelAc.List), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(Formula1))]
    [ChildElementInfo(typeof(Formula2))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataValidation")]
public partial class DataValidation : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11280;
    /// <inheritdoc/>
    public override string LocalName => "dataValidation";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataValidationValues> Type { get; set; }
    /// <summary>
    /// <para> errorStyle.</para>
    /// <para>Represents the following attribute in the schema: errorStyle </para>
    /// </summary>
    [SchemaAttr(0, "errorStyle", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataValidationErrorStyleValues> ErrorStyle { get; set; }
    /// <summary>
    /// <para> imeMode.</para>
    /// <para>Represents the following attribute in the schema: imeMode </para>
    /// </summary>
    [SchemaAttr(0, "imeMode", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataValidationImeModeValues> ImeMode { get; set; }
    /// <summary>
    /// <para> operator.</para>
    /// <para>Represents the following attribute in the schema: operator </para>
    /// </summary>
    [SchemaAttr(0, "operator", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataValidationOperatorValues> Operator { get; set; }
    /// <summary>
    /// <para> allowBlank.</para>
    /// <para>Represents the following attribute in the schema: allowBlank </para>
    /// </summary>
    [SchemaAttr(0, "allowBlank", 4)]
    public BooleanValue AllowBlank { get; set; }
    /// <summary>
    /// <para> showDropDown.</para>
    /// <para>Represents the following attribute in the schema: showDropDown </para>
    /// </summary>
    [SchemaAttr(0, "showDropDown", 5)]
    public BooleanValue ShowDropDown { get; set; }
    /// <summary>
    /// <para> showInputMessage.</para>
    /// <para>Represents the following attribute in the schema: showInputMessage </para>
    /// </summary>
    [SchemaAttr(0, "showInputMessage", 6)]
    public BooleanValue ShowInputMessage { get; set; }
    /// <summary>
    /// <para> showErrorMessage.</para>
    /// <para>Represents the following attribute in the schema: showErrorMessage </para>
    /// </summary>
    [SchemaAttr(0, "showErrorMessage", 7)]
    public BooleanValue ShowErrorMessage { get; set; }
    /// <summary>
    /// <para> errorTitle.</para>
    /// <para>Represents the following attribute in the schema: errorTitle </para>
    /// </summary>
    [SchemaAttr(0, "errorTitle", 8)]
    public StringValue ErrorTitle { get; set; }
    /// <summary>
    /// <para> error.</para>
    /// <para>Represents the following attribute in the schema: error </para>
    /// </summary>
    [SchemaAttr(0, "error", 9)]
    public StringValue Error { get; set; }
    /// <summary>
    /// <para> promptTitle.</para>
    /// <para>Represents the following attribute in the schema: promptTitle </para>
    /// </summary>
    [SchemaAttr(0, "promptTitle", 10)]
    public StringValue PromptTitle { get; set; }
    /// <summary>
    /// <para> prompt.</para>
    /// <para>Represents the following attribute in the schema: prompt </para>
    /// </summary>
    [SchemaAttr(0, "prompt", 11)]
    public StringValue Prompt { get; set; }
    /// <summary>
    /// <para> sqref.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 12)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataValidation class.
    /// </summary>
    public DataValidation():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataValidation class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataValidation(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataValidation class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataValidation(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataValidation class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataValidation(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "list","formula1","formula2" };
    private static readonly byte[] eleNamespaceIds = { 72,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> List, this property is only available in Office2013.</para>
    /// <para> Represents the following element tag in the schema: x12ac:list </para>
    /// </summary>
    /// <remark>
    /// xmlns:x12ac = http://schemas.microsoft.com/office/spreadsheetml/2011/1/ac
    /// </remark>
[OfficeAvailability(FileFormatVersions.Office2013)]
    public DocumentFormat.OpenXml.Office2010.ExcelAc.List List
    {
        get => GetElement<DocumentFormat.OpenXml.Office2010.ExcelAc.List>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Formula1.</para>
    /// <para> Represents the following element tag in the schema: x:formula1 </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Formula1 Formula1
    {
        get => GetElement<Formula1>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Formula2.</para>
    /// <para> Represents the following element tag in the schema: x:formula2 </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Formula2 Formula2
    {
        get => GetElement<Formula2>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataValidation>(deep);

}
/// <summary>
/// <para>Worksheet View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Pane &lt;x:pane></description></item>
///<item><description>Selection &lt;x:selection></description></item>
///<item><description>PivotSelection &lt;x:pivotSelection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Pane))]
    [ChildElementInfo(typeof(Selection))]
    [ChildElementInfo(typeof(PivotSelection))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetView")]
public partial class SheetView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11281;
    /// <inheritdoc/>
    public override string LocalName => "sheetView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Window Protection.</para>
    /// <para>Represents the following attribute in the schema: windowProtection </para>
    /// </summary>
    [SchemaAttr(0, "windowProtection", 0)]
    public BooleanValue WindowProtection { get; set; }
    /// <summary>
    /// <para> Show Formulas.</para>
    /// <para>Represents the following attribute in the schema: showFormulas </para>
    /// </summary>
    [SchemaAttr(0, "showFormulas", 1)]
    public BooleanValue ShowFormulas { get; set; }
    /// <summary>
    /// <para> Show Grid Lines.</para>
    /// <para>Represents the following attribute in the schema: showGridLines </para>
    /// </summary>
    [SchemaAttr(0, "showGridLines", 2)]
    public BooleanValue ShowGridLines { get; set; }
    /// <summary>
    /// <para> Show Headers.</para>
    /// <para>Represents the following attribute in the schema: showRowColHeaders </para>
    /// </summary>
    [SchemaAttr(0, "showRowColHeaders", 3)]
    public BooleanValue ShowRowColHeaders { get; set; }
    /// <summary>
    /// <para> Show Zero Values.</para>
    /// <para>Represents the following attribute in the schema: showZeros </para>
    /// </summary>
    [SchemaAttr(0, "showZeros", 4)]
    public BooleanValue ShowZeros { get; set; }
    /// <summary>
    /// <para> Right To Left.</para>
    /// <para>Represents the following attribute in the schema: rightToLeft </para>
    /// </summary>
    [SchemaAttr(0, "rightToLeft", 5)]
    public BooleanValue RightToLeft { get; set; }
    /// <summary>
    /// <para> Sheet Tab Selected.</para>
    /// <para>Represents the following attribute in the schema: tabSelected </para>
    /// </summary>
    [SchemaAttr(0, "tabSelected", 6)]
    public BooleanValue TabSelected { get; set; }
    /// <summary>
    /// <para> Show Ruler.</para>
    /// <para>Represents the following attribute in the schema: showRuler </para>
    /// </summary>
    [SchemaAttr(0, "showRuler", 7)]
    public BooleanValue ShowRuler { get; set; }
    /// <summary>
    /// <para> Show Outline Symbols.</para>
    /// <para>Represents the following attribute in the schema: showOutlineSymbols </para>
    /// </summary>
    [SchemaAttr(0, "showOutlineSymbols", 8)]
    public BooleanValue ShowOutlineSymbols { get; set; }
    /// <summary>
    /// <para> Default Grid Color.</para>
    /// <para>Represents the following attribute in the schema: defaultGridColor </para>
    /// </summary>
    [SchemaAttr(0, "defaultGridColor", 9)]
    public BooleanValue DefaultGridColor { get; set; }
    /// <summary>
    /// <para> Show White Space.</para>
    /// <para>Represents the following attribute in the schema: showWhiteSpace </para>
    /// </summary>
    [SchemaAttr(0, "showWhiteSpace", 10)]
    public BooleanValue ShowWhiteSpace { get; set; }
    /// <summary>
    /// <para> View Type.</para>
    /// <para>Represents the following attribute in the schema: view </para>
    /// </summary>
    [SchemaAttr(0, "view", 11)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SheetViewValues> View { get; set; }
    /// <summary>
    /// <para> Top Left Visible Cell.</para>
    /// <para>Represents the following attribute in the schema: topLeftCell </para>
    /// </summary>
    [SchemaAttr(0, "topLeftCell", 12)]
    public StringValue TopLeftCell { get; set; }
    /// <summary>
    /// <para> Color Id.</para>
    /// <para>Represents the following attribute in the schema: colorId </para>
    /// </summary>
    [SchemaAttr(0, "colorId", 13)]
    public UInt32Value ColorId { get; set; }
    /// <summary>
    /// <para> Zoom Scale.</para>
    /// <para>Represents the following attribute in the schema: zoomScale </para>
    /// </summary>
    [SchemaAttr(0, "zoomScale", 14)]
    public UInt32Value ZoomScale { get; set; }
    /// <summary>
    /// <para> Zoom Scale Normal View.</para>
    /// <para>Represents the following attribute in the schema: zoomScaleNormal </para>
    /// </summary>
    [SchemaAttr(0, "zoomScaleNormal", 15)]
    public UInt32Value ZoomScaleNormal { get; set; }
    /// <summary>
    /// <para> Zoom Scale Page Break Preview.</para>
    /// <para>Represents the following attribute in the schema: zoomScaleSheetLayoutView </para>
    /// </summary>
    [SchemaAttr(0, "zoomScaleSheetLayoutView", 16)]
    public UInt32Value ZoomScaleSheetLayoutView { get; set; }
    /// <summary>
    /// <para> Zoom Scale Page Layout View.</para>
    /// <para>Represents the following attribute in the schema: zoomScalePageLayoutView </para>
    /// </summary>
    [SchemaAttr(0, "zoomScalePageLayoutView", 17)]
    public UInt32Value ZoomScalePageLayoutView { get; set; }
    /// <summary>
    /// <para> Workbook View Index.</para>
    /// <para>Represents the following attribute in the schema: workbookViewId </para>
    /// </summary>
    [SchemaAttr(0, "workbookViewId", 18)]
    public UInt32Value WorkbookViewId { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetView class.
    /// </summary>
    public SheetView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pane","selection","pivotSelection","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> View Pane.</para>
    /// <para> Represents the following element tag in the schema: x:pane </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Pane Pane
    {
        get => GetElement<Pane>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetView>(deep);

}
/// <summary>
/// <para>Custom Sheet View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customSheetView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Pane &lt;x:pane></description></item>
///<item><description>Selection &lt;x:selection></description></item>
///<item><description>RowBreaks &lt;x:rowBreaks></description></item>
///<item><description>ColumnBreaks &lt;x:colBreaks></description></item>
///<item><description>PageMargins &lt;x:pageMargins></description></item>
///<item><description>PrintOptions &lt;x:printOptions></description></item>
///<item><description>PageSetup &lt;x:pageSetup></description></item>
///<item><description>HeaderFooter &lt;x:headerFooter></description></item>
///<item><description>AutoFilter &lt;x:autoFilter></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Pane))]
    [ChildElementInfo(typeof(Selection))]
    [ChildElementInfo(typeof(RowBreaks))]
    [ChildElementInfo(typeof(ColumnBreaks))]
    [ChildElementInfo(typeof(PageMargins))]
    [ChildElementInfo(typeof(PrintOptions))]
    [ChildElementInfo(typeof(PageSetup))]
    [ChildElementInfo(typeof(HeaderFooter))]
    [ChildElementInfo(typeof(AutoFilter))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customSheetView")]
public partial class CustomSheetView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11282;
    /// <inheritdoc/>
    public override string LocalName => "customSheetView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 0)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> Print Scale.</para>
    /// <para>Represents the following attribute in the schema: scale </para>
    /// </summary>
    [SchemaAttr(0, "scale", 1)]
    public UInt32Value Scale { get; set; }
    /// <summary>
    /// <para> Color Id.</para>
    /// <para>Represents the following attribute in the schema: colorId </para>
    /// </summary>
    [SchemaAttr(0, "colorId", 2)]
    public UInt32Value ColorId { get; set; }
    /// <summary>
    /// <para> Show Page Breaks.</para>
    /// <para>Represents the following attribute in the schema: showPageBreaks </para>
    /// </summary>
    [SchemaAttr(0, "showPageBreaks", 3)]
    public BooleanValue ShowPageBreaks { get; set; }
    /// <summary>
    /// <para> Show Formulas.</para>
    /// <para>Represents the following attribute in the schema: showFormulas </para>
    /// </summary>
    [SchemaAttr(0, "showFormulas", 4)]
    public BooleanValue ShowFormulas { get; set; }
    /// <summary>
    /// <para> Show Grid Lines.</para>
    /// <para>Represents the following attribute in the schema: showGridLines </para>
    /// </summary>
    [SchemaAttr(0, "showGridLines", 5)]
    public BooleanValue ShowGridLines { get; set; }
    /// <summary>
    /// <para> Show Headers.</para>
    /// <para>Represents the following attribute in the schema: showRowCol </para>
    /// </summary>
    [SchemaAttr(0, "showRowCol", 6)]
    public BooleanValue ShowRowColumn { get; set; }
    /// <summary>
    /// <para> Show Outline Symbols.</para>
    /// <para>Represents the following attribute in the schema: outlineSymbols </para>
    /// </summary>
    [SchemaAttr(0, "outlineSymbols", 7)]
    public BooleanValue OutlineSymbols { get; set; }
    /// <summary>
    /// <para> Show Zero Values.</para>
    /// <para>Represents the following attribute in the schema: zeroValues </para>
    /// </summary>
    [SchemaAttr(0, "zeroValues", 8)]
    public BooleanValue ZeroValues { get; set; }
    /// <summary>
    /// <para> Fit To Page.</para>
    /// <para>Represents the following attribute in the schema: fitToPage </para>
    /// </summary>
    [SchemaAttr(0, "fitToPage", 9)]
    public BooleanValue FitToPage { get; set; }
    /// <summary>
    /// <para> Print Area Defined.</para>
    /// <para>Represents the following attribute in the schema: printArea </para>
    /// </summary>
    [SchemaAttr(0, "printArea", 10)]
    public BooleanValue PrintArea { get; set; }
    /// <summary>
    /// <para> Filtered List.</para>
    /// <para>Represents the following attribute in the schema: filter </para>
    /// </summary>
    [SchemaAttr(0, "filter", 11)]
    public BooleanValue Filter { get; set; }
    /// <summary>
    /// <para> Show AutoFitler Drop Down Controls.</para>
    /// <para>Represents the following attribute in the schema: showAutoFilter </para>
    /// </summary>
    [SchemaAttr(0, "showAutoFilter", 12)]
    public BooleanValue ShowAutoFilter { get; set; }
    /// <summary>
    /// <para> Hidden Rows.</para>
    /// <para>Represents the following attribute in the schema: hiddenRows </para>
    /// </summary>
    [SchemaAttr(0, "hiddenRows", 13)]
    public BooleanValue HiddenRows { get; set; }
    /// <summary>
    /// <para> Hidden Columns.</para>
    /// <para>Represents the following attribute in the schema: hiddenColumns </para>
    /// </summary>
    [SchemaAttr(0, "hiddenColumns", 14)]
    public BooleanValue HiddenColumns { get; set; }
    /// <summary>
    /// <para> Visible State.</para>
    /// <para>Represents the following attribute in the schema: state </para>
    /// </summary>
    [SchemaAttr(0, "state", 15)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SheetStateValues> State { get; set; }
    /// <summary>
    /// <para> Filter.</para>
    /// <para>Represents the following attribute in the schema: filterUnique </para>
    /// </summary>
    [SchemaAttr(0, "filterUnique", 16)]
    public BooleanValue FilterUnique { get; set; }
    /// <summary>
    /// <para> View Type.</para>
    /// <para>Represents the following attribute in the schema: view </para>
    /// </summary>
    [SchemaAttr(0, "view", 17)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SheetViewValues> View { get; set; }
    /// <summary>
    /// <para> Show Ruler.</para>
    /// <para>Represents the following attribute in the schema: showRuler </para>
    /// </summary>
    [SchemaAttr(0, "showRuler", 18)]
    public BooleanValue ShowRuler { get; set; }
    /// <summary>
    /// <para> Top Left Visible Cell.</para>
    /// <para>Represents the following attribute in the schema: topLeftCell </para>
    /// </summary>
    [SchemaAttr(0, "topLeftCell", 19)]
    public StringValue TopLeftCell { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomSheetView class.
    /// </summary>
    public CustomSheetView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomSheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomSheetView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomSheetView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomSheetView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomSheetView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomSheetView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pane","selection","rowBreaks","colBreaks","pageMargins","printOptions","pageSetup","headerFooter","autoFilter","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Pane Split Information.</para>
    /// <para> Represents the following element tag in the schema: x:pane </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Pane Pane
    {
        get => GetElement<Pane>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Selection.</para>
    /// <para> Represents the following element tag in the schema: x:selection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Selection Selection
    {
        get => GetElement<Selection>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Horizontal Page Breaks.</para>
    /// <para> Represents the following element tag in the schema: x:rowBreaks </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RowBreaks RowBreaks
    {
        get => GetElement<RowBreaks>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Vertical Page Breaks.</para>
    /// <para> Represents the following element tag in the schema: x:colBreaks </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ColumnBreaks ColumnBreaks
    {
        get => GetElement<ColumnBreaks>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Page Margins.</para>
    /// <para> Represents the following element tag in the schema: x:pageMargins </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageMargins PageMargins
    {
        get => GetElement<PageMargins>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Print Options.</para>
    /// <para> Represents the following element tag in the schema: x:printOptions </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PrintOptions PrintOptions
    {
        get => GetElement<PrintOptions>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Page Setup Settings.</para>
    /// <para> Represents the following element tag in the schema: x:pageSetup </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageSetup PageSetup
    {
        get => GetElement<PageSetup>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Header Footer Settings.</para>
    /// <para> Represents the following element tag in the schema: x:headerFooter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public HeaderFooter HeaderFooter
    {
        get => GetElement<HeaderFooter>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> AutoFilter Settings.</para>
    /// <para> Represents the following element tag in the schema: x:autoFilter </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public AutoFilter AutoFilter
    {
        get => GetElement<AutoFilter>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(9);
        set => SetElement(9, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomSheetView>(deep);

}
/// <summary>
/// <para>OLE Object.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleObject.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>EmbeddedObjectProperties &lt;x:objectPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(EmbeddedObjectProperties), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleObject")]
public partial class OleObject : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11283;
    /// <inheritdoc/>
    public override string LocalName => "oleObject";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLE ProgId.</para>
    /// <para>Represents the following attribute in the schema: progId </para>
    /// </summary>
    [SchemaAttr(0, "progId", 0)]
    public StringValue ProgId { get; set; }
    /// <summary>
    /// <para> Data or View Aspect.</para>
    /// <para>Represents the following attribute in the schema: dvAspect </para>
    /// </summary>
    [SchemaAttr(0, "dvAspect", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataViewAspectValues> DataOrViewAspect { get; set; }
    /// <summary>
    /// <para> OLE Link Moniker.</para>
    /// <para>Represents the following attribute in the schema: link </para>
    /// </summary>
    [SchemaAttr(0, "link", 2)]
    public StringValue Link { get; set; }
    /// <summary>
    /// <para> OLE Update.</para>
    /// <para>Represents the following attribute in the schema: oleUpdate </para>
    /// </summary>
    [SchemaAttr(0, "oleUpdate", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.OleUpdateValues> OleUpdate { get; set; }
    /// <summary>
    /// <para> Auto Load.</para>
    /// <para>Represents the following attribute in the schema: autoLoad </para>
    /// </summary>
    [SchemaAttr(0, "autoLoad", 4)]
    public BooleanValue AutoLoad { get; set; }
    /// <summary>
    /// <para> Shape Id.</para>
    /// <para>Represents the following attribute in the schema: shapeId </para>
    /// </summary>
    [SchemaAttr(0, "shapeId", 5)]
    public UInt32Value ShapeId { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 6)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the OleObject class.
    /// </summary>
    public OleObject():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OleObject class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleObject(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OleObject class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleObject(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OleObject class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OleObject(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "objectPr" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> EmbeddedObjectProperties.</para>
    /// <para> Represents the following element tag in the schema: x:objectPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public EmbeddedObjectProperties EmbeddedObjectProperties
    {
        get => GetElement<EmbeddedObjectProperties>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleObject>(deep);

}
/// <summary>
/// <para>Metadata Types Collection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:metadataTypes.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataType &lt;x:metadataType></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MetadataType))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "metadataTypes")]
public partial class MetadataTypes : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11290;
    /// <inheritdoc/>
    public override string LocalName => "metadataTypes";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Metadata Type Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MetadataTypes class.
    /// </summary>
    public MetadataTypes():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MetadataTypes class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataTypes(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataTypes class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataTypes(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataTypes class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MetadataTypes(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MetadataTypes>(deep);

}
/// <summary>
/// <para>Metadata String Store.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:metadataStrings.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CharacterValue &lt;x:s></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CharacterValue))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "metadataStrings")]
public partial class MetadataStrings : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11291;
    /// <inheritdoc/>
    public override string LocalName => "metadataStrings";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> MDX Metadata String Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MetadataStrings class.
    /// </summary>
    public MetadataStrings():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MetadataStrings class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataStrings(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataStrings class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataStrings(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataStrings class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MetadataStrings(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MetadataStrings>(deep);

}
/// <summary>
/// <para>MDX Metadata Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mdxMetadata.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Mdx &lt;x:mdx></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Mdx))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mdxMetadata")]
public partial class MdxMetadata : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11292;
    /// <inheritdoc/>
    public override string LocalName => "mdxMetadata";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> MDX Metadata Record Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MdxMetadata class.
    /// </summary>
    public MdxMetadata():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MdxMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxMetadata(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxMetadata(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxMetadata class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MdxMetadata(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MdxMetadata>(deep);

}
/// <summary>
/// <para>Future Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:futureMetadata.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FutureMetadataBlock &lt;x:bk></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FutureMetadataBlock))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "futureMetadata")]
public partial class FutureMetadata : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11293;
    /// <inheritdoc/>
    public override string LocalName => "futureMetadata";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Metadata Type Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Future Metadata Block Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 1)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the FutureMetadata class.
    /// </summary>
    public FutureMetadata():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FutureMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FutureMetadata(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FutureMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FutureMetadata(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FutureMetadata class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FutureMetadata(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FutureMetadata>(deep);

}
/// <summary>
/// <para>Cell Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellMetadata.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataBlock &lt;x:bk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "cellMetadata")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class CellMetadata : MetadataBlocksType
{
    internal const int ElementTypeIdConst = 11294;
    /// <inheritdoc/>
    public override string LocalName => "cellMetadata";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the CellMetadata class.
    /// </summary>
    public CellMetadata():base(){}
        /// <summary>
    ///Initializes a new instance of the CellMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellMetadata(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellMetadata(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellMetadata class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellMetadata(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellMetadata>(deep);

}
/// <summary>
/// <para>Value Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:valueMetadata.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataBlock &lt;x:bk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "valueMetadata")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class ValueMetadata : MetadataBlocksType
{
    internal const int ElementTypeIdConst = 11295;
    /// <inheritdoc/>
    public override string LocalName => "valueMetadata";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the ValueMetadata class.
    /// </summary>
    public ValueMetadata():base(){}
        /// <summary>
    ///Initializes a new instance of the ValueMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ValueMetadata(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ValueMetadata class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ValueMetadata(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ValueMetadata class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ValueMetadata(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ValueMetadata>(deep);

}
/// <summary>
/// Defines the MetadataBlocksType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataBlock &lt;x:bk></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(MetadataBlock))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class MetadataBlocksType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Metadata Block Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlocksType class.
    /// </summary>
    protected MetadataBlocksType(){}
    
        /// <summary>
    ///Initializes a new instance of the MetadataBlocksType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected MetadataBlocksType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlocksType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected MetadataBlocksType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlocksType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected MetadataBlocksType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Metadata Type Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:metadataType.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "metadataType")]
public partial class MetadataType : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11296;
    /// <inheritdoc/>
    public override string LocalName => "metadataType";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Metadata Type Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Minimum Supported Version.</para>
    /// <para>Represents the following attribute in the schema: minSupportedVersion </para>
    /// </summary>
    [SchemaAttr(0, "minSupportedVersion", 1)]
    public UInt32Value MinSupportedVersion { get; set; }
    /// <summary>
    /// <para> Metadata Ghost Row.</para>
    /// <para>Represents the following attribute in the schema: ghostRow </para>
    /// </summary>
    [SchemaAttr(0, "ghostRow", 2)]
    public BooleanValue GhostRow { get; set; }
    /// <summary>
    /// <para> Metadata Ghost Column.</para>
    /// <para>Represents the following attribute in the schema: ghostCol </para>
    /// </summary>
    [SchemaAttr(0, "ghostCol", 3)]
    public BooleanValue GhostColumn { get; set; }
    /// <summary>
    /// <para> Metadata Edit.</para>
    /// <para>Represents the following attribute in the schema: edit </para>
    /// </summary>
    [SchemaAttr(0, "edit", 4)]
    public BooleanValue Edit { get; set; }
    /// <summary>
    /// <para> Metadata Cell Value Delete.</para>
    /// <para>Represents the following attribute in the schema: delete </para>
    /// </summary>
    [SchemaAttr(0, "delete", 5)]
    public BooleanValue Delete { get; set; }
    /// <summary>
    /// <para> Metadata Copy.</para>
    /// <para>Represents the following attribute in the schema: copy </para>
    /// </summary>
    [SchemaAttr(0, "copy", 6)]
    public BooleanValue Copy { get; set; }
    /// <summary>
    /// <para> Metadata Paste All.</para>
    /// <para>Represents the following attribute in the schema: pasteAll </para>
    /// </summary>
    [SchemaAttr(0, "pasteAll", 7)]
    public BooleanValue PasteAll { get; set; }
    /// <summary>
    /// <para> Metadata Paste Formulas.</para>
    /// <para>Represents the following attribute in the schema: pasteFormulas </para>
    /// </summary>
    [SchemaAttr(0, "pasteFormulas", 8)]
    public BooleanValue PasteFormulas { get; set; }
    /// <summary>
    /// <para> Metadata Paste Special Values.</para>
    /// <para>Represents the following attribute in the schema: pasteValues </para>
    /// </summary>
    [SchemaAttr(0, "pasteValues", 9)]
    public BooleanValue PasteValues { get; set; }
    /// <summary>
    /// <para> Metadata Paste Formats.</para>
    /// <para>Represents the following attribute in the schema: pasteFormats </para>
    /// </summary>
    [SchemaAttr(0, "pasteFormats", 10)]
    public BooleanValue PasteFormats { get; set; }
    /// <summary>
    /// <para> Metadata Paste Comments.</para>
    /// <para>Represents the following attribute in the schema: pasteComments </para>
    /// </summary>
    [SchemaAttr(0, "pasteComments", 11)]
    public BooleanValue PasteComments { get; set; }
    /// <summary>
    /// <para> Metadata Paste Data Validation.</para>
    /// <para>Represents the following attribute in the schema: pasteDataValidation </para>
    /// </summary>
    [SchemaAttr(0, "pasteDataValidation", 12)]
    public BooleanValue PasteDataValidation { get; set; }
    /// <summary>
    /// <para> Metadata Paste Borders.</para>
    /// <para>Represents the following attribute in the schema: pasteBorders </para>
    /// </summary>
    [SchemaAttr(0, "pasteBorders", 13)]
    public BooleanValue PasteBorders { get; set; }
    /// <summary>
    /// <para> Metadata Paste Column Widths.</para>
    /// <para>Represents the following attribute in the schema: pasteColWidths </para>
    /// </summary>
    [SchemaAttr(0, "pasteColWidths", 14)]
    public BooleanValue PasteColWidths { get; set; }
    /// <summary>
    /// <para> Metadata Paste Number Formats.</para>
    /// <para>Represents the following attribute in the schema: pasteNumberFormats </para>
    /// </summary>
    [SchemaAttr(0, "pasteNumberFormats", 15)]
    public BooleanValue PasteNumberFormats { get; set; }
    /// <summary>
    /// <para> Metadata Merge.</para>
    /// <para>Represents the following attribute in the schema: merge </para>
    /// </summary>
    [SchemaAttr(0, "merge", 16)]
    public BooleanValue Merge { get; set; }
    /// <summary>
    /// <para> Meatadata Split First.</para>
    /// <para>Represents the following attribute in the schema: splitFirst </para>
    /// </summary>
    [SchemaAttr(0, "splitFirst", 17)]
    public BooleanValue SplitFirst { get; set; }
    /// <summary>
    /// <para> Metadata Split All.</para>
    /// <para>Represents the following attribute in the schema: splitAll </para>
    /// </summary>
    [SchemaAttr(0, "splitAll", 18)]
    public BooleanValue SplitAll { get; set; }
    /// <summary>
    /// <para> Metadata Insert Delete.</para>
    /// <para>Represents the following attribute in the schema: rowColShift </para>
    /// </summary>
    [SchemaAttr(0, "rowColShift", 19)]
    public BooleanValue RowColumnShift { get; set; }
    /// <summary>
    /// <para> Metadata Clear All.</para>
    /// <para>Represents the following attribute in the schema: clearAll </para>
    /// </summary>
    [SchemaAttr(0, "clearAll", 20)]
    public BooleanValue ClearAll { get; set; }
    /// <summary>
    /// <para> Metadata Clear Formats.</para>
    /// <para>Represents the following attribute in the schema: clearFormats </para>
    /// </summary>
    [SchemaAttr(0, "clearFormats", 21)]
    public BooleanValue ClearFormats { get; set; }
    /// <summary>
    /// <para> Metadata Clear Contents.</para>
    /// <para>Represents the following attribute in the schema: clearContents </para>
    /// </summary>
    [SchemaAttr(0, "clearContents", 22)]
    public BooleanValue ClearContents { get; set; }
    /// <summary>
    /// <para> Metadata Clear Comments.</para>
    /// <para>Represents the following attribute in the schema: clearComments </para>
    /// </summary>
    [SchemaAttr(0, "clearComments", 23)]
    public BooleanValue ClearComments { get; set; }
    /// <summary>
    /// <para> Metadata Formula Assignment.</para>
    /// <para>Represents the following attribute in the schema: assign </para>
    /// </summary>
    [SchemaAttr(0, "assign", 24)]
    public BooleanValue Assign { get; set; }
    /// <summary>
    /// <para> Metadata Coercion.</para>
    /// <para>Represents the following attribute in the schema: coerce </para>
    /// </summary>
    [SchemaAttr(0, "coerce", 25)]
    public BooleanValue Coerce { get; set; }
    /// <summary>
    /// <para> Adjust Metadata.</para>
    /// <para>Represents the following attribute in the schema: adjust </para>
    /// </summary>
    [SchemaAttr(0, "adjust", 26)]
    public BooleanValue Adjust { get; set; }
    /// <summary>
    /// <para> Cell Metadata.</para>
    /// <para>Represents the following attribute in the schema: cellMeta </para>
    /// </summary>
    [SchemaAttr(0, "cellMeta", 27)]
    public BooleanValue CellMeta { get; set; }

    /// <summary>
    /// Initializes a new instance of the MetadataType class.
    /// </summary>
    public MetadataType():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MetadataType>(deep);

}
/// <summary>
/// <para>Metadata Block.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:bk.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MetadataRecord &lt;x:rc></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MetadataRecord))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "bk")]
public partial class MetadataBlock : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11297;
    /// <inheritdoc/>
    public override string LocalName => "bk";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlock class.
    /// </summary>
    public MetadataBlock():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MetadataBlock class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataBlock(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlock class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MetadataBlock(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MetadataBlock class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MetadataBlock(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MetadataBlock>(deep);

}
/// <summary>
/// <para>Metadata Record.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rc.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rc")]
public partial class MetadataRecord : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11298;
    /// <inheritdoc/>
    public override string LocalName => "rc";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Metadata Record Type Index.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 0)]
    public UInt32Value TypeIndex { get; set; }
    /// <summary>
    /// <para> Metadata Record Value Index.</para>
    /// <para>Represents the following attribute in the schema: v </para>
    /// </summary>
    [SchemaAttr(0, "v", 1)]
    public UInt32Value Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the MetadataRecord class.
    /// </summary>
    public MetadataRecord():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MetadataRecord>(deep);

}
/// <summary>
/// <para>Future Metadata Block.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:bk.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "bk")]
public partial class FutureMetadataBlock : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11299;
    /// <inheritdoc/>
    public override string LocalName => "bk";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the FutureMetadataBlock class.
    /// </summary>
    public FutureMetadataBlock():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FutureMetadataBlock class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FutureMetadataBlock(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FutureMetadataBlock class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FutureMetadataBlock(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FutureMetadataBlock class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FutureMetadataBlock(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FutureMetadataBlock>(deep);

}
/// <summary>
/// <para>MDX Metadata Record.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mdx.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MdxTuple &lt;x:t></description></item>
///<item><description>MdxSet &lt;x:ms></description></item>
///<item><description>MdxMemberProp &lt;x:p></description></item>
///<item><description>MdxKpi &lt;x:k></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MdxTuple))]
    [ChildElementInfo(typeof(MdxSet))]
    [ChildElementInfo(typeof(MdxMemberProp))]
    [ChildElementInfo(typeof(MdxKpi))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mdx")]
public partial class Mdx : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11300;
    /// <inheritdoc/>
    public override string LocalName => "mdx";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Connection Name Index.</para>
    /// <para>Represents the following attribute in the schema: n </para>
    /// </summary>
    [SchemaAttr(0, "n", 0)]
    public UInt32Value NameIndex { get; set; }
    /// <summary>
    /// <para> Cube Function Tag.</para>
    /// <para>Represents the following attribute in the schema: f </para>
    /// </summary>
    [SchemaAttr(0, "f", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.MdxFunctionValues> CubeFunction { get; set; }

    /// <summary>
    /// Initializes a new instance of the Mdx class.
    /// </summary>
    public Mdx():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Mdx class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Mdx(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Mdx class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Mdx(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Mdx class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Mdx(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "t","ms","p","k" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Tuple MDX Metadata.</para>
    /// <para> Represents the following element tag in the schema: x:t </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MdxTuple MdxTuple
    {
        get => GetElement<MdxTuple>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Set MDX Metadata.</para>
    /// <para> Represents the following element tag in the schema: x:ms </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MdxSet MdxSet
    {
        get => GetElement<MdxSet>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Member Property MDX Metadata.</para>
    /// <para> Represents the following element tag in the schema: x:p </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MdxMemberProp MdxMemberProp
    {
        get => GetElement<MdxMemberProp>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> KPI MDX Metadata.</para>
    /// <para> Represents the following element tag in the schema: x:k </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MdxKpi MdxKpi
    {
        get => GetElement<MdxKpi>(3);
        set => SetElement(3, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Mdx>(deep);

}
/// <summary>
/// <para>Tuple MDX Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:t.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NameIndex &lt;x:n></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NameIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "t")]
public partial class MdxTuple : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11301;
    /// <inheritdoc/>
    public override string LocalName => "t";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Member Index Count.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 0)]
    public UInt32Value MemberIndexCount { get; set; }
    /// <summary>
    /// <para> Server Formatting Culture Currency.</para>
    /// <para>Represents the following attribute in the schema: ct </para>
    /// </summary>
    [SchemaAttr(0, "ct", 1)]
    public StringValue CultureCurrency { get; set; }
    /// <summary>
    /// <para> Server Formatting String Index.</para>
    /// <para>Represents the following attribute in the schema: si </para>
    /// </summary>
    [SchemaAttr(0, "si", 2)]
    public UInt32Value FormattingStringIndex { get; set; }
    /// <summary>
    /// <para> Server Formatting Built-In Number Format Index.</para>
    /// <para>Represents the following attribute in the schema: fi </para>
    /// </summary>
    [SchemaAttr(0, "fi", 3)]
    public UInt32Value FormatIndex { get; set; }
    /// <summary>
    /// <para> Server Formatting Background Color.</para>
    /// <para>Represents the following attribute in the schema: bc </para>
    /// </summary>
    [SchemaAttr(0, "bc", 4)]
    public HexBinaryValue BackgroundColor { get; set; }
    /// <summary>
    /// <para> Server Formatting Foreground Color.</para>
    /// <para>Represents the following attribute in the schema: fc </para>
    /// </summary>
    [SchemaAttr(0, "fc", 5)]
    public HexBinaryValue ForegroundColor { get; set; }
    /// <summary>
    /// <para> Server Formatting Italic Font.</para>
    /// <para>Represents the following attribute in the schema: i </para>
    /// </summary>
    [SchemaAttr(0, "i", 6)]
    public BooleanValue Italic { get; set; }
    /// <summary>
    /// <para> Server Formatting Underline Font.</para>
    /// <para>Represents the following attribute in the schema: u </para>
    /// </summary>
    [SchemaAttr(0, "u", 7)]
    public BooleanValue Underline { get; set; }
    /// <summary>
    /// <para> Server Formatting Strikethrough Font.</para>
    /// <para>Represents the following attribute in the schema: st </para>
    /// </summary>
    [SchemaAttr(0, "st", 8)]
    public BooleanValue Strikethrough { get; set; }
    /// <summary>
    /// <para> Server Formatting Bold Font.</para>
    /// <para>Represents the following attribute in the schema: b </para>
    /// </summary>
    [SchemaAttr(0, "b", 9)]
    public BooleanValue Bold { get; set; }

    /// <summary>
    /// Initializes a new instance of the MdxTuple class.
    /// </summary>
    public MdxTuple():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MdxTuple class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxTuple(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxTuple class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxTuple(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxTuple class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MdxTuple(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MdxTuple>(deep);

}
/// <summary>
/// <para>Set MDX Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ms.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NameIndex &lt;x:n></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NameIndex))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ms")]
public partial class MdxSet : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11302;
    /// <inheritdoc/>
    public override string LocalName => "ms";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Set Definition Index.</para>
    /// <para>Represents the following attribute in the schema: ns </para>
    /// </summary>
    [SchemaAttr(0, "ns", 0)]
    public UInt32Value SetDefinitionIndex { get; set; }
    /// <summary>
    /// <para> Sort By Member Index Count.</para>
    /// <para>Represents the following attribute in the schema: c </para>
    /// </summary>
    [SchemaAttr(0, "c", 1)]
    public UInt32Value MemberIndexCount { get; set; }
    /// <summary>
    /// <para> Set Sort Order.</para>
    /// <para>Represents the following attribute in the schema: o </para>
    /// </summary>
    [SchemaAttr(0, "o", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.MdxSetOrderValues> SortingOrder { get; set; }

    /// <summary>
    /// Initializes a new instance of the MdxSet class.
    /// </summary>
    public MdxSet():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MdxSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxSet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MdxSet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MdxSet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MdxSet(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MdxSet>(deep);

}
/// <summary>
/// <para>Member Property MDX Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:p.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "p")]
public partial class MdxMemberProp : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11303;
    /// <inheritdoc/>
    public override string LocalName => "p";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Member Unique Name Index.</para>
    /// <para>Represents the following attribute in the schema: n </para>
    /// </summary>
    [SchemaAttr(0, "n", 0)]
    public UInt32Value NameIndex { get; set; }
    /// <summary>
    /// <para> Property Name Index.</para>
    /// <para>Represents the following attribute in the schema: np </para>
    /// </summary>
    [SchemaAttr(0, "np", 1)]
    public UInt32Value PropertyNameIndex { get; set; }

    /// <summary>
    /// Initializes a new instance of the MdxMemberProp class.
    /// </summary>
    public MdxMemberProp():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MdxMemberProp>(deep);

}
/// <summary>
/// <para>KPI MDX Metadata.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:k.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "k")]
public partial class MdxKpi : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11304;
    /// <inheritdoc/>
    public override string LocalName => "k";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Member Unique Name Index.</para>
    /// <para>Represents the following attribute in the schema: n </para>
    /// </summary>
    [SchemaAttr(0, "n", 0)]
    public UInt32Value NameIndex { get; set; }
    /// <summary>
    /// <para> KPI Index.</para>
    /// <para>Represents the following attribute in the schema: np </para>
    /// </summary>
    [SchemaAttr(0, "np", 1)]
    public UInt32Value KpiIndex { get; set; }
    /// <summary>
    /// <para> KPI Property.</para>
    /// <para>Represents the following attribute in the schema: p </para>
    /// </summary>
    [SchemaAttr(0, "p", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.MdxKPIPropertyValues> KpiProperty { get; set; }

    /// <summary>
    /// Initializes a new instance of the MdxKpi class.
    /// </summary>
    public MdxKpi():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MdxKpi>(deep);

}
/// <summary>
/// <para>Member Unique Name Index.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:n.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "n")]
public partial class NameIndex : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11305;
    /// <inheritdoc/>
    public override string LocalName => "n";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Index Value.</para>
    /// <para>Represents the following attribute in the schema: x </para>
    /// </summary>
    [SchemaAttr(0, "x", 0)]
    public UInt32Value Index { get; set; }
    /// <summary>
    /// <para> String is a Set.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 1)]
    public BooleanValue IsASet { get; set; }

    /// <summary>
    /// Initializes a new instance of the NameIndex class.
    /// </summary>
    public NameIndex():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NameIndex>(deep);

}
/// <summary>
/// <para>Table Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:singleXmlCell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>XmlCellProperties &lt;x:xmlCellPr></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(XmlCellProperties))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "singleXmlCell")]
public partial class SingleXmlCell : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11306;
    /// <inheritdoc/>
    public override string LocalName => "singleXmlCell";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 1)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Connection ID.</para>
    /// <para>Represents the following attribute in the schema: connectionId </para>
    /// </summary>
    [SchemaAttr(0, "connectionId", 2)]
    public UInt32Value ConnectionId { get; set; }

    /// <summary>
    /// Initializes a new instance of the SingleXmlCell class.
    /// </summary>
    public SingleXmlCell():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SingleXmlCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SingleXmlCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SingleXmlCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SingleXmlCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SingleXmlCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SingleXmlCell(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "xmlCellPr","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Cell Properties.</para>
    /// <para> Represents the following element tag in the schema: x:xmlCellPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public XmlCellProperties XmlCellProperties
    {
        get => GetElement<XmlCellProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SingleXmlCell>(deep);

}
/// <summary>
/// <para>Cell Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:xmlCellPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>XmlProperties &lt;x:xmlPr></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(XmlProperties))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "xmlCellPr")]
public partial class XmlCellProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11307;
    /// <inheritdoc/>
    public override string LocalName => "xmlCellPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Field Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Unique Table Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 1)]
    public StringValue UniqueName { get; set; }

    /// <summary>
    /// Initializes a new instance of the XmlCellProperties class.
    /// </summary>
    public XmlCellProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the XmlCellProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlCellProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlCellProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlCellProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlCellProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public XmlCellProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "xmlPr","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Column XML Properties.</para>
    /// <para> Represents the following element tag in the schema: x:xmlPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public XmlProperties XmlProperties
    {
        get => GetElement<XmlProperties>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<XmlCellProperties>(deep);

}
/// <summary>
/// <para>Column XML Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:xmlPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "xmlPr")]
public partial class XmlProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11308;
    /// <inheritdoc/>
    public override string LocalName => "xmlPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> XML Map Id.</para>
    /// <para>Represents the following attribute in the schema: mapId </para>
    /// </summary>
    [SchemaAttr(0, "mapId", 0)]
    public UInt32Value MapId { get; set; }
    /// <summary>
    /// <para> XPath.</para>
    /// <para>Represents the following attribute in the schema: xpath </para>
    /// </summary>
    [SchemaAttr(0, "xpath", 1)]
    public StringValue XPath { get; set; }
    /// <summary>
    /// <para> XML Data Type.</para>
    /// <para>Represents the following attribute in the schema: xmlDataType </para>
    /// </summary>
    [SchemaAttr(0, "xmlDataType", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.XmlDataValues> XmlDataType { get; set; }

    /// <summary>
    /// Initializes a new instance of the XmlProperties class.
    /// </summary>
    public XmlProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the XmlProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public XmlProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<XmlProperties>(deep);

}
/// <summary>
/// <para>Pattern.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:patternFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ForegroundColor &lt;x:fgColor></description></item>
///<item><description>BackgroundColor &lt;x:bgColor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ForegroundColor))]
    [ChildElementInfo(typeof(BackgroundColor))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "patternFill")]
public partial class PatternFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11309;
    /// <inheritdoc/>
    public override string LocalName => "patternFill";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pattern Type.</para>
    /// <para>Represents the following attribute in the schema: patternType </para>
    /// </summary>
    [SchemaAttr(0, "patternType", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.PatternValues> PatternType { get; set; }

    /// <summary>
    /// Initializes a new instance of the PatternFill class.
    /// </summary>
    public PatternFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PatternFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PatternFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PatternFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PatternFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PatternFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PatternFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "fgColor","bgColor" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Foreground Color.</para>
    /// <para> Represents the following element tag in the schema: x:fgColor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ForegroundColor ForegroundColor
    {
        get => GetElement<ForegroundColor>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Background Color.</para>
    /// <para> Represents the following element tag in the schema: x:bgColor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public BackgroundColor BackgroundColor
    {
        get => GetElement<BackgroundColor>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatternFill>(deep);

}
/// <summary>
/// <para>Gradient.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:gradientFill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GradientStop &lt;x:stop></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GradientStop))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "gradientFill")]
public partial class GradientFill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11310;
    /// <inheritdoc/>
    public override string LocalName => "gradientFill";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Gradient Fill Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.GradientValues> Type { get; set; }
    /// <summary>
    /// <para> Linear Gradient Degree.</para>
    /// <para>Represents the following attribute in the schema: degree </para>
    /// </summary>
    [SchemaAttr(0, "degree", 1)]
    public DoubleValue Degree { get; set; }
    /// <summary>
    /// <para> Left Convergence.</para>
    /// <para>Represents the following attribute in the schema: left </para>
    /// </summary>
    [SchemaAttr(0, "left", 2)]
    public DoubleValue Left { get; set; }
    /// <summary>
    /// <para> Right Convergence.</para>
    /// <para>Represents the following attribute in the schema: right </para>
    /// </summary>
    [SchemaAttr(0, "right", 3)]
    public DoubleValue Right { get; set; }
    /// <summary>
    /// <para> Top Gradient Convergence.</para>
    /// <para>Represents the following attribute in the schema: top </para>
    /// </summary>
    [SchemaAttr(0, "top", 4)]
    public DoubleValue Top { get; set; }
    /// <summary>
    /// <para> Bottom Convergence.</para>
    /// <para>Represents the following attribute in the schema: bottom </para>
    /// </summary>
    [SchemaAttr(0, "bottom", 5)]
    public DoubleValue Bottom { get; set; }

    /// <summary>
    /// Initializes a new instance of the GradientFill class.
    /// </summary>
    public GradientFill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientFill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientFill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientFill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientFill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GradientFill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientFill>(deep);

}
/// <summary>
/// <para>Gradient Stop.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:stop.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Color))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "stop")]
public partial class GradientStop : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11313;
    /// <inheritdoc/>
    public override string LocalName => "stop";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Gradient Stop Position.</para>
    /// <para>Represents the following attribute in the schema: position </para>
    /// </summary>
    [SchemaAttr(0, "position", 0)]
    public DoubleValue Position { get; set; }

    /// <summary>
    /// Initializes a new instance of the GradientStop class.
    /// </summary>
    public GradientStop():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GradientStop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStop(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStop class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GradientStop(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GradientStop class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GradientStop(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "color" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Color.</para>
    /// <para> Represents the following element tag in the schema: x:color </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Color Color
    {
        get => GetElement<Color>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStop>(deep);

}
/// <summary>
/// <para>Number Formats.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:numFmt.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "numFmt")]
public partial class NumberingFormat : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11314;
    /// <inheritdoc/>
    public override string LocalName => "numFmt";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Number Format Id.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 0)]
    public UInt32Value NumberFormatId { get; set; }
    /// <summary>
    /// <para> Number Format Code.</para>
    /// <para>Represents the following attribute in the schema: formatCode </para>
    /// </summary>
    [SchemaAttr(0, "formatCode", 1)]
    public StringValue FormatCode { get; set; }

    /// <summary>
    /// Initializes a new instance of the NumberingFormat class.
    /// </summary>
    public NumberingFormat():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingFormat>(deep);

}
/// <summary>
/// <para>Alignment.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:alignment.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "alignment")]
public partial class Alignment : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11315;
    /// <inheritdoc/>
    public override string LocalName => "alignment";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Horizontal Alignment.</para>
    /// <para>Represents the following attribute in the schema: horizontal </para>
    /// </summary>
    [SchemaAttr(0, "horizontal", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.HorizontalAlignmentValues> Horizontal { get; set; }
    /// <summary>
    /// <para> Vertical Alignment.</para>
    /// <para>Represents the following attribute in the schema: vertical </para>
    /// </summary>
    [SchemaAttr(0, "vertical", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.VerticalAlignmentValues> Vertical { get; set; }
    /// <summary>
    /// <para> Text Rotation.</para>
    /// <para>Represents the following attribute in the schema: textRotation </para>
    /// </summary>
    [SchemaAttr(0, "textRotation", 2)]
    public UInt32Value TextRotation { get; set; }
    /// <summary>
    /// <para> Wrap Text.</para>
    /// <para>Represents the following attribute in the schema: wrapText </para>
    /// </summary>
    [SchemaAttr(0, "wrapText", 3)]
    public BooleanValue WrapText { get; set; }
    /// <summary>
    /// <para> Indent.</para>
    /// <para>Represents the following attribute in the schema: indent </para>
    /// </summary>
    [SchemaAttr(0, "indent", 4)]
    public UInt32Value Indent { get; set; }
    /// <summary>
    /// <para> Relative Indent.</para>
    /// <para>Represents the following attribute in the schema: relativeIndent </para>
    /// </summary>
    [SchemaAttr(0, "relativeIndent", 5)]
    public Int32Value RelativeIndent { get; set; }
    /// <summary>
    /// <para> Justify Last Line.</para>
    /// <para>Represents the following attribute in the schema: justifyLastLine </para>
    /// </summary>
    [SchemaAttr(0, "justifyLastLine", 6)]
    public BooleanValue JustifyLastLine { get; set; }
    /// <summary>
    /// <para> Shrink To Fit.</para>
    /// <para>Represents the following attribute in the schema: shrinkToFit </para>
    /// </summary>
    [SchemaAttr(0, "shrinkToFit", 7)]
    public BooleanValue ShrinkToFit { get; set; }
    /// <summary>
    /// <para> Reading Order.</para>
    /// <para>Represents the following attribute in the schema: readingOrder </para>
    /// </summary>
    [SchemaAttr(0, "readingOrder", 8)]
    public UInt32Value ReadingOrder { get; set; }
    /// <summary>
    /// <para> mergeCell.</para>
    /// <para>Represents the following attribute in the schema: mergeCell </para>
    /// </summary>
    [SchemaAttr(0, "mergeCell", 9)]
    public StringValue MergeCell { get; set; }

    /// <summary>
    /// Initializes a new instance of the Alignment class.
    /// </summary>
    public Alignment():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Alignment>(deep);

}
/// <summary>
/// <para>Protection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:protection.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "protection")]
public partial class Protection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11316;
    /// <inheritdoc/>
    public override string LocalName => "protection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Cell Locked.</para>
    /// <para>Represents the following attribute in the schema: locked </para>
    /// </summary>
    [SchemaAttr(0, "locked", 0)]
    public BooleanValue Locked { get; set; }
    /// <summary>
    /// <para> Hidden Cell.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 1)]
    public BooleanValue Hidden { get; set; }

    /// <summary>
    /// Initializes a new instance of the Protection class.
    /// </summary>
    public Protection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Protection>(deep);

}
/// <summary>
/// <para>Font Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:font.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Bold &lt;x:b></description></item>
///<item><description>Italic &lt;x:i></description></item>
///<item><description>Strike &lt;x:strike></description></item>
///<item><description>Condense &lt;x:condense></description></item>
///<item><description>Extend &lt;x:extend></description></item>
///<item><description>Outline &lt;x:outline></description></item>
///<item><description>Shadow &lt;x:shadow></description></item>
///<item><description>Underline &lt;x:u></description></item>
///<item><description>VerticalTextAlignment &lt;x:vertAlign></description></item>
///<item><description>FontSize &lt;x:sz></description></item>
///<item><description>Color &lt;x:color></description></item>
///<item><description>FontName &lt;x:name></description></item>
///<item><description>FontFamilyNumbering &lt;x:family></description></item>
///<item><description>FontCharSet &lt;x:charset></description></item>
///<item><description>FontScheme &lt;x:scheme></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Bold))]
    [ChildElementInfo(typeof(Italic))]
    [ChildElementInfo(typeof(Strike))]
    [ChildElementInfo(typeof(Condense))]
    [ChildElementInfo(typeof(Extend))]
    [ChildElementInfo(typeof(Outline))]
    [ChildElementInfo(typeof(Shadow))]
    [ChildElementInfo(typeof(Underline))]
    [ChildElementInfo(typeof(VerticalTextAlignment))]
    [ChildElementInfo(typeof(FontSize))]
    [ChildElementInfo(typeof(Color))]
    [ChildElementInfo(typeof(FontName))]
    [ChildElementInfo(typeof(FontFamilyNumbering))]
    [ChildElementInfo(typeof(FontCharSet))]
    [ChildElementInfo(typeof(FontScheme))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "font")]
public partial class Font : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11317;
    /// <inheritdoc/>
    public override string LocalName => "font";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Font class.
    /// </summary>
    public Font():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Font class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Font(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Font class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Font(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Font class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Font(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "b","i","strike","condense","extend","outline","shadow","u","vertAlign","sz","color","name","family","charset","scheme" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Bold.</para>
    /// <para> Represents the following element tag in the schema: x:b </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Bold Bold
    {
        get => GetElement<Bold>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Italic.</para>
    /// <para> Represents the following element tag in the schema: x:i </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Italic Italic
    {
        get => GetElement<Italic>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Strike Through.</para>
    /// <para> Represents the following element tag in the schema: x:strike </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Strike Strike
    {
        get => GetElement<Strike>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Condense.</para>
    /// <para> Represents the following element tag in the schema: x:condense </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Condense Condense
    {
        get => GetElement<Condense>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Extend.</para>
    /// <para> Represents the following element tag in the schema: x:extend </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Extend Extend
    {
        get => GetElement<Extend>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Outline.</para>
    /// <para> Represents the following element tag in the schema: x:outline </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Outline Outline
    {
        get => GetElement<Outline>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Shadow.</para>
    /// <para> Represents the following element tag in the schema: x:shadow </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Shadow Shadow
    {
        get => GetElement<Shadow>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Underline.</para>
    /// <para> Represents the following element tag in the schema: x:u </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Underline Underline
    {
        get => GetElement<Underline>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> Text Vertical Alignment.</para>
    /// <para> Represents the following element tag in the schema: x:vertAlign </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public VerticalTextAlignment VerticalTextAlignment
    {
        get => GetElement<VerticalTextAlignment>(8);
        set => SetElement(8, value);
    }
    
    /// <summary>
    /// <para> Font Size.</para>
    /// <para> Represents the following element tag in the schema: x:sz </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FontSize FontSize
    {
        get => GetElement<FontSize>(9);
        set => SetElement(9, value);
    }
    
    /// <summary>
    /// <para> Text Color.</para>
    /// <para> Represents the following element tag in the schema: x:color </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Color Color
    {
        get => GetElement<Color>(10);
        set => SetElement(10, value);
    }
    
    /// <summary>
    /// <para> Font Name.</para>
    /// <para> Represents the following element tag in the schema: x:name </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FontName FontName
    {
        get => GetElement<FontName>(11);
        set => SetElement(11, value);
    }
    
    /// <summary>
    /// <para> Font Family.</para>
    /// <para> Represents the following element tag in the schema: x:family </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FontFamilyNumbering FontFamilyNumbering
    {
        get => GetElement<FontFamilyNumbering>(12);
        set => SetElement(12, value);
    }
    
    /// <summary>
    /// <para> Character Set.</para>
    /// <para> Represents the following element tag in the schema: x:charset </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FontCharSet FontCharSet
    {
        get => GetElement<FontCharSet>(13);
        set => SetElement(13, value);
    }
    
    /// <summary>
    /// <para> Scheme.</para>
    /// <para> Represents the following element tag in the schema: x:scheme </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FontScheme FontScheme
    {
        get => GetElement<FontScheme>(14);
        set => SetElement(14, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Font>(deep);

}
/// <summary>
/// <para>Fill.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fill.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PatternFill &lt;x:patternFill></description></item>
///<item><description>GradientFill &lt;x:gradientFill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PatternFill))]
    [ChildElementInfo(typeof(GradientFill))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fill")]
public partial class Fill : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11318;
    /// <inheritdoc/>
    public override string LocalName => "fill";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Fill class.
    /// </summary>
    public Fill():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Fill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fill(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Fill class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fill(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Fill class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Fill(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "patternFill","gradientFill" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> Pattern.</para>
    /// <para> Represents the following element tag in the schema: x:patternFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PatternFill PatternFill
    {
        get => GetElement<PatternFill>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Gradient.</para>
    /// <para> Represents the following element tag in the schema: x:gradientFill </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public GradientFill GradientFill
    {
        get => GetElement<GradientFill>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fill>(deep);

}
/// <summary>
/// <para>Border Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:border.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>StartBorder &lt;x:start></description></item>
///<item><description>EndBorder &lt;x:end></description></item>
///<item><description>LeftBorder &lt;x:left></description></item>
///<item><description>RightBorder &lt;x:right></description></item>
///<item><description>TopBorder &lt;x:top></description></item>
///<item><description>BottomBorder &lt;x:bottom></description></item>
///<item><description>DiagonalBorder &lt;x:diagonal></description></item>
///<item><description>VerticalBorder &lt;x:vertical></description></item>
///<item><description>HorizontalBorder &lt;x:horizontal></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(StartBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(EndBorder), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(LeftBorder))]
    [ChildElementInfo(typeof(RightBorder))]
    [ChildElementInfo(typeof(TopBorder))]
    [ChildElementInfo(typeof(BottomBorder))]
    [ChildElementInfo(typeof(DiagonalBorder))]
    [ChildElementInfo(typeof(VerticalBorder))]
    [ChildElementInfo(typeof(HorizontalBorder))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "border")]
public partial class Border : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11319;
    /// <inheritdoc/>
    public override string LocalName => "border";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Diagonal Up.</para>
    /// <para>Represents the following attribute in the schema: diagonalUp </para>
    /// </summary>
    [SchemaAttr(0, "diagonalUp", 0)]
    public BooleanValue DiagonalUp { get; set; }
    /// <summary>
    /// <para> Diagonal Down.</para>
    /// <para>Represents the following attribute in the schema: diagonalDown </para>
    /// </summary>
    [SchemaAttr(0, "diagonalDown", 1)]
    public BooleanValue DiagonalDown { get; set; }
    /// <summary>
    /// <para> Outline.</para>
    /// <para>Represents the following attribute in the schema: outline </para>
    /// </summary>
    [SchemaAttr(0, "outline", 2)]
    public BooleanValue Outline { get; set; }

    /// <summary>
    /// Initializes a new instance of the Border class.
    /// </summary>
    public Border():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Border class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Border(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Border class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Border(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Border class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Border(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "start","end","left","right","top","bottom","diagonal","vertical","horizontal" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> StartBorder.</para>
    /// <para> Represents the following element tag in the schema: x:start </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public StartBorder StartBorder
    {
        get => GetElement<StartBorder>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> EndBorder.</para>
    /// <para> Represents the following element tag in the schema: x:end </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public EndBorder EndBorder
    {
        get => GetElement<EndBorder>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Left Border.</para>
    /// <para> Represents the following element tag in the schema: x:left </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public LeftBorder LeftBorder
    {
        get => GetElement<LeftBorder>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Right Border.</para>
    /// <para> Represents the following element tag in the schema: x:right </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RightBorder RightBorder
    {
        get => GetElement<RightBorder>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Top Border.</para>
    /// <para> Represents the following element tag in the schema: x:top </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TopBorder TopBorder
    {
        get => GetElement<TopBorder>(4);
        set => SetElement(4, value);
    }
    
    /// <summary>
    /// <para> Bottom Border.</para>
    /// <para> Represents the following element tag in the schema: x:bottom </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public BottomBorder BottomBorder
    {
        get => GetElement<BottomBorder>(5);
        set => SetElement(5, value);
    }
    
    /// <summary>
    /// <para> Diagonal.</para>
    /// <para> Represents the following element tag in the schema: x:diagonal </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DiagonalBorder DiagonalBorder
    {
        get => GetElement<DiagonalBorder>(6);
        set => SetElement(6, value);
    }
    
    /// <summary>
    /// <para> Vertical Inner Border.</para>
    /// <para> Represents the following element tag in the schema: x:vertical </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public VerticalBorder VerticalBorder
    {
        get => GetElement<VerticalBorder>(7);
        set => SetElement(7, value);
    }
    
    /// <summary>
    /// <para> Horizontal Inner Borders.</para>
    /// <para> Represents the following element tag in the schema: x:horizontal </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public HorizontalBorder HorizontalBorder
    {
        get => GetElement<HorizontalBorder>(8);
        set => SetElement(8, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Border>(deep);

}
/// <summary>
/// <para>Color Indexes.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:indexedColors.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RgbColor &lt;x:rgbColor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RgbColor))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "indexedColors")]
public partial class IndexedColors : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11320;
    /// <inheritdoc/>
    public override string LocalName => "indexedColors";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the IndexedColors class.
    /// </summary>
    public IndexedColors():base(){}
    
        /// <summary>
    ///Initializes a new instance of the IndexedColors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IndexedColors(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the IndexedColors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IndexedColors(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the IndexedColors class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public IndexedColors(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<IndexedColors>(deep);

}
/// <summary>
/// <para>MRU Colors.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mruColors.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Color))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mruColors")]
public partial class MruColors : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11321;
    /// <inheritdoc/>
    public override string LocalName => "mruColors";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the MruColors class.
    /// </summary>
    public MruColors():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MruColors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MruColors(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MruColors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MruColors(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MruColors class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MruColors(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MruColors>(deep);

}
/// <summary>
/// <para>Table Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableStyleElement &lt;x:tableStyleElement></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableStyleElement))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableStyle")]
public partial class TableStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11322;
    /// <inheritdoc/>
    public override string LocalName => "tableStyle";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Style Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Pivot Style.</para>
    /// <para>Represents the following attribute in the schema: pivot </para>
    /// </summary>
    [SchemaAttr(0, "pivot", 1)]
    public BooleanValue Pivot { get; set; }
    /// <summary>
    /// <para> Table.</para>
    /// <para>Represents the following attribute in the schema: table </para>
    /// </summary>
    [SchemaAttr(0, "table", 2)]
    public BooleanValue Table { get; set; }
    /// <summary>
    /// <para> Table Style Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 3)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableStyle class.
    /// </summary>
    public TableStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);

}
/// <summary>
/// <para>RGB Color.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rgbColor.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rgbColor")]
public partial class RgbColor : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11323;
    /// <inheritdoc/>
    public override string LocalName => "rgbColor";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Alpha Red Green Blue.</para>
    /// <para>Represents the following attribute in the schema: rgb </para>
    /// </summary>
    [SchemaAttr(0, "rgb", 0)]
    public HexBinaryValue Rgb { get; set; }

    /// <summary>
    /// Initializes a new instance of the RgbColor class.
    /// </summary>
    public RgbColor():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColor>(deep);

}
/// <summary>
/// <para>Cell Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellStyle.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellStyle")]
public partial class CellStyle : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11324;
    /// <inheritdoc/>
    public override string LocalName => "cellStyle";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> User Defined Cell Style.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Format Id.</para>
    /// <para>Represents the following attribute in the schema: xfId </para>
    /// </summary>
    [SchemaAttr(0, "xfId", 1)]
    public UInt32Value FormatId { get; set; }
    /// <summary>
    /// <para> Built-In Style Id.</para>
    /// <para>Represents the following attribute in the schema: builtinId </para>
    /// </summary>
    [SchemaAttr(0, "builtinId", 2)]
    public UInt32Value BuiltinId { get; set; }
    /// <summary>
    /// <para> Outline Style.</para>
    /// <para>Represents the following attribute in the schema: iLevel </para>
    /// </summary>
    [SchemaAttr(0, "iLevel", 3)]
    public UInt32Value OutlineLevel { get; set; }
    /// <summary>
    /// <para> Hidden Style.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 4)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Custom Built In.</para>
    /// <para>Represents the following attribute in the schema: customBuiltin </para>
    /// </summary>
    [SchemaAttr(0, "customBuiltin", 5)]
    public BooleanValue CustomBuiltin { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellStyle class.
    /// </summary>
    public CellStyle():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyle(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyle class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyle(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyle class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellStyle(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellStyle>(deep);

}
/// <summary>
/// <para>Formatting Elements.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:xf.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Alignment &lt;x:alignment></description></item>
///<item><description>Protection &lt;x:protection></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Alignment))]
    [ChildElementInfo(typeof(Protection))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "xf")]
public partial class CellFormat : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11325;
    /// <inheritdoc/>
    public override string LocalName => "xf";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Number Format Id.</para>
    /// <para>Represents the following attribute in the schema: numFmtId </para>
    /// </summary>
    [SchemaAttr(0, "numFmtId", 0)]
    public UInt32Value NumberFormatId { get; set; }
    /// <summary>
    /// <para> Font Id.</para>
    /// <para>Represents the following attribute in the schema: fontId </para>
    /// </summary>
    [SchemaAttr(0, "fontId", 1)]
    public UInt32Value FontId { get; set; }
    /// <summary>
    /// <para> Fill Id.</para>
    /// <para>Represents the following attribute in the schema: fillId </para>
    /// </summary>
    [SchemaAttr(0, "fillId", 2)]
    public UInt32Value FillId { get; set; }
    /// <summary>
    /// <para> Border Id.</para>
    /// <para>Represents the following attribute in the schema: borderId </para>
    /// </summary>
    [SchemaAttr(0, "borderId", 3)]
    public UInt32Value BorderId { get; set; }
    /// <summary>
    /// <para> Format Id.</para>
    /// <para>Represents the following attribute in the schema: xfId </para>
    /// </summary>
    [SchemaAttr(0, "xfId", 4)]
    public UInt32Value FormatId { get; set; }
    /// <summary>
    /// <para> Quote Prefix.</para>
    /// <para>Represents the following attribute in the schema: quotePrefix </para>
    /// </summary>
    [SchemaAttr(0, "quotePrefix", 5)]
    public BooleanValue QuotePrefix { get; set; }
    /// <summary>
    /// <para> Pivot Button.</para>
    /// <para>Represents the following attribute in the schema: pivotButton </para>
    /// </summary>
    [SchemaAttr(0, "pivotButton", 6)]
    public BooleanValue PivotButton { get; set; }
    /// <summary>
    /// <para> Apply Number Format.</para>
    /// <para>Represents the following attribute in the schema: applyNumberFormat </para>
    /// </summary>
    [SchemaAttr(0, "applyNumberFormat", 7)]
    public BooleanValue ApplyNumberFormat { get; set; }
    /// <summary>
    /// <para> Apply Font.</para>
    /// <para>Represents the following attribute in the schema: applyFont </para>
    /// </summary>
    [SchemaAttr(0, "applyFont", 8)]
    public BooleanValue ApplyFont { get; set; }
    /// <summary>
    /// <para> Apply Fill.</para>
    /// <para>Represents the following attribute in the schema: applyFill </para>
    /// </summary>
    [SchemaAttr(0, "applyFill", 9)]
    public BooleanValue ApplyFill { get; set; }
    /// <summary>
    /// <para> Apply Border.</para>
    /// <para>Represents the following attribute in the schema: applyBorder </para>
    /// </summary>
    [SchemaAttr(0, "applyBorder", 10)]
    public BooleanValue ApplyBorder { get; set; }
    /// <summary>
    /// <para> Apply Alignment.</para>
    /// <para>Represents the following attribute in the schema: applyAlignment </para>
    /// </summary>
    [SchemaAttr(0, "applyAlignment", 11)]
    public BooleanValue ApplyAlignment { get; set; }
    /// <summary>
    /// <para> Apply Protection.</para>
    /// <para>Represents the following attribute in the schema: applyProtection </para>
    /// </summary>
    [SchemaAttr(0, "applyProtection", 12)]
    public BooleanValue ApplyProtection { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellFormat class.
    /// </summary>
    public CellFormat():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellFormat(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellFormat class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellFormat(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellFormat class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellFormat(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "alignment","protection","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Alignment.</para>
    /// <para> Represents the following element tag in the schema: x:alignment </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Alignment Alignment
    {
        get => GetElement<Alignment>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Protection.</para>
    /// <para> Represents the following element tag in the schema: x:protection </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Protection Protection
    {
        get => GetElement<Protection>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellFormat>(deep);

}
/// <summary>
/// <para>Font Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:name.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "name")]
public partial class FontName : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11326;
    /// <inheritdoc/>
    public override string LocalName => "name";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> String Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FontName class.
    /// </summary>
    public FontName():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontName>(deep);

}
/// <summary>
/// <para>Font Family.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:family.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "family")]
public partial class FontFamilyNumbering : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11327;
    /// <inheritdoc/>
    public override string LocalName => "family";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public Int32Value Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FontFamilyNumbering class.
    /// </summary>
    public FontFamilyNumbering():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontFamilyNumbering>(deep);

}
/// <summary>
/// <para>Character Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:charset.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "charset")]
public partial class FontCharSet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11328;
    /// <inheritdoc/>
    public override string LocalName => "charset";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public Int32Value Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the FontCharSet class.
    /// </summary>
    public FontCharSet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontCharSet>(deep);

}
/// <summary>
/// <para>Table Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableStyleElement.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableStyleElement")]
public partial class TableStyleElement : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11329;
    /// <inheritdoc/>
    public override string LocalName => "tableStyleElement";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Style Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TableStyleValues> Type { get; set; }
    /// <summary>
    /// <para> Band Size.</para>
    /// <para>Represents the following attribute in the schema: size </para>
    /// </summary>
    [SchemaAttr(0, "size", 1)]
    public UInt32Value Size { get; set; }
    /// <summary>
    /// <para> Formatting Id.</para>
    /// <para>Represents the following attribute in the schema: dxfId </para>
    /// </summary>
    [SchemaAttr(0, "dxfId", 2)]
    public UInt32Value FormatId { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableStyleElement class.
    /// </summary>
    public TableStyleElement():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleElement>(deep);

}
/// <summary>
/// <para>Supporting Workbook Sheet Names.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetNames.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetName &lt;x:sheetName></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SheetName))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetNames")]
public partial class SheetNames : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11330;
    /// <inheritdoc/>
    public override string LocalName => "sheetNames";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the SheetNames class.
    /// </summary>
    public SheetNames():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetNames(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetNames(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetNames class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetNames(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetNames>(deep);

}
/// <summary>
/// <para>Named Links.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:definedNames.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalDefinedName &lt;x:definedName></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExternalDefinedName))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "definedNames")]
public partial class ExternalDefinedNames : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11331;
    /// <inheritdoc/>
    public override string LocalName => "definedNames";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExternalDefinedNames class.
    /// </summary>
    public ExternalDefinedNames():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalDefinedNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalDefinedNames(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalDefinedNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalDefinedNames(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalDefinedNames class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalDefinedNames(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalDefinedNames>(deep);

}
/// <summary>
/// <para>Cached Worksheet Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetDataSet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalSheetData &lt;x:sheetData></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExternalSheetData))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetDataSet")]
public partial class SheetDataSet : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11332;
    /// <inheritdoc/>
    public override string LocalName => "sheetDataSet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the SheetDataSet class.
    /// </summary>
    public SheetDataSet():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetDataSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetDataSet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetDataSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetDataSet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetDataSet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetDataSet(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetDataSet>(deep);

}
/// <summary>
/// <para>Defined Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:definedName.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "definedName")]
public partial class ExternalDefinedName : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11333;
    /// <inheritdoc/>
    public override string LocalName => "definedName";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Defined Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Refers To.</para>
    /// <para>Represents the following attribute in the schema: refersTo </para>
    /// </summary>
    [SchemaAttr(0, "refersTo", 1)]
    public StringValue RefersTo { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 2)]
    public UInt32Value SheetId { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalDefinedName class.
    /// </summary>
    public ExternalDefinedName():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalDefinedName>(deep);

}
/// <summary>
/// <para>External Sheet Data Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetData.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalRow &lt;x:row></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExternalRow))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetData")]
public partial class ExternalSheetData : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11334;
    /// <inheritdoc/>
    public override string LocalName => "sheetData";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 0)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Last Refresh Resulted in Error.</para>
    /// <para>Represents the following attribute in the schema: refreshError </para>
    /// </summary>
    [SchemaAttr(0, "refreshError", 1)]
    public BooleanValue RefreshError { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalSheetData class.
    /// </summary>
    public ExternalSheetData():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalSheetData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalSheetData(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalSheetData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalSheetData(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalSheetData class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalSheetData(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalSheetData>(deep);

}
/// <summary>
/// <para>Row.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:row.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalCell &lt;x:cell></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExternalCell))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "row")]
public partial class ExternalRow : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11335;
    /// <inheritdoc/>
    public override string LocalName => "row";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Row.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public UInt32Value RowIndex { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalRow class.
    /// </summary>
    public ExternalRow():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalRow(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalRow class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalRow(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalRow class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalRow(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalRow>(deep);

}
/// <summary>
/// <para>External Cell Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cell.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Xstring &lt;x:v></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Xstring))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cell")]
public partial class ExternalCell : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11336;
    /// <inheritdoc/>
    public override string LocalName => "cell";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CellValues> DataType { get; set; }
    /// <summary>
    /// <para> Value Metadata.</para>
    /// <para>Represents the following attribute in the schema: vm </para>
    /// </summary>
    [SchemaAttr(0, "vm", 2)]
    public UInt32Value ValueMetaIndex { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalCell class.
    /// </summary>
    public ExternalCell():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalCell(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalCell class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalCell(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalCell class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalCell(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "v" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Value.</para>
    /// <para> Represents the following element tag in the schema: x:v </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Xstring Xstring
    {
        get => GetElement<Xstring>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalCell>(deep);

}
/// <summary>
/// <para>DDE Items Collection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ddeItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DdeItem &lt;x:ddeItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DdeItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ddeItems")]
public partial class DdeItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11337;
    /// <inheritdoc/>
    public override string LocalName => "ddeItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the DdeItems class.
    /// </summary>
    public DdeItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DdeItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DdeItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DdeItems>(deep);

}
/// <summary>
/// <para>DDE Item definition.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ddeItem.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Values &lt;x:values></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Values))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ddeItem")]
public partial class DdeItem : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11338;
    /// <inheritdoc/>
    public override string LocalName => "ddeItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> DDE Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> OLE.</para>
    /// <para>Represents the following attribute in the schema: ole </para>
    /// </summary>
    [SchemaAttr(0, "ole", 1)]
    public BooleanValue UseOle { get; set; }
    /// <summary>
    /// <para> Advise.</para>
    /// <para>Represents the following attribute in the schema: advise </para>
    /// </summary>
    [SchemaAttr(0, "advise", 2)]
    public BooleanValue Advise { get; set; }
    /// <summary>
    /// <para> Data is an Image.</para>
    /// <para>Represents the following attribute in the schema: preferPic </para>
    /// </summary>
    [SchemaAttr(0, "preferPic", 3)]
    public BooleanValue PreferPicture { get; set; }

    /// <summary>
    /// Initializes a new instance of the DdeItem class.
    /// </summary>
    public DdeItem():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DdeItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeItem(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeItem class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeItem(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeItem class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DdeItem(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "values" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> DDE Name Values.</para>
    /// <para> Represents the following element tag in the schema: x:values </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Values Values
    {
        get => GetElement<Values>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DdeItem>(deep);

}
/// <summary>
/// <para>DDE Name Values.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:values.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Value &lt;x:value></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Value))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "values")]
public partial class Values : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11339;
    /// <inheritdoc/>
    public override string LocalName => "values";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Rows.</para>
    /// <para>Represents the following attribute in the schema: rows </para>
    /// </summary>
    [SchemaAttr(0, "rows", 0)]
    public UInt32Value Rows { get; set; }
    /// <summary>
    /// <para> Columns.</para>
    /// <para>Represents the following attribute in the schema: cols </para>
    /// </summary>
    [SchemaAttr(0, "cols", 1)]
    public UInt32Value Columns { get; set; }

    /// <summary>
    /// Initializes a new instance of the Values class.
    /// </summary>
    public Values():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Values class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Values(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Values class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Values(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Values class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Values(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Values>(deep);

}
/// <summary>
/// <para>Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:value.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DdeLinkValue &lt;x:val></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DdeLinkValue))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "value")]
public partial class Value : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11340;
    /// <inheritdoc/>
    public override string LocalName => "value";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> DDE Value Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DdeValues> ValueType { get; set; }

    /// <summary>
    /// Initializes a new instance of the Value class.
    /// </summary>
    public Value():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Value class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Value(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Value class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Value(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Value class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Value(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "val" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> DDE Link Value.</para>
    /// <para> Represents the following element tag in the schema: x:val </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DdeLinkValue DdeLinkValue
    {
        get => GetElement<DdeLinkValue>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Value>(deep);

}
/// <summary>
/// <para>OLE Link Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OleItem &lt;x:oleItem></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.OleItem &lt;x14:oleItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OleItem))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.OleItem), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleItems")]
public partial class OleItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11341;
    /// <inheritdoc/>
    public override string LocalName => "oleItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the OleItems class.
    /// </summary>
    public OleItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OleItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OleItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OleItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OleItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleItems>(deep);

}
/// <summary>
/// <para>External Workbook.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:externalBook.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetNames &lt;x:sheetNames></description></item>
///<item><description>ExternalDefinedNames &lt;x:definedNames></description></item>
///<item><description>SheetDataSet &lt;x:sheetDataSet></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SheetNames))]
    [ChildElementInfo(typeof(ExternalDefinedNames))]
    [ChildElementInfo(typeof(SheetDataSet))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "externalBook")]
public partial class ExternalBook : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11342;
    /// <inheritdoc/>
    public override string LocalName => "externalBook";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Relationship to supporting book file path.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalBook class.
    /// </summary>
    public ExternalBook():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalBook class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalBook(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalBook class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalBook(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalBook class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalBook(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "sheetNames","definedNames","sheetDataSet" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Supporting Workbook Sheet Names.</para>
    /// <para> Represents the following element tag in the schema: x:sheetNames </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetNames SheetNames
    {
        get => GetElement<SheetNames>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Named Links.</para>
    /// <para> Represents the following element tag in the schema: x:definedNames </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExternalDefinedNames ExternalDefinedNames
    {
        get => GetElement<ExternalDefinedNames>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Cached Worksheet Data.</para>
    /// <para> Represents the following element tag in the schema: x:sheetDataSet </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SheetDataSet SheetDataSet
    {
        get => GetElement<SheetDataSet>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalBook>(deep);

}
/// <summary>
/// <para>DDE Connection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ddeLink.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DdeItems &lt;x:ddeItems></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DdeItems))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ddeLink")]
public partial class DdeLink : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11343;
    /// <inheritdoc/>
    public override string LocalName => "ddeLink";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Service name.</para>
    /// <para>Represents the following attribute in the schema: ddeService </para>
    /// </summary>
    [SchemaAttr(0, "ddeService", 0)]
    public StringValue DdeService { get; set; }
    /// <summary>
    /// <para> Topic for DDE server.</para>
    /// <para>Represents the following attribute in the schema: ddeTopic </para>
    /// </summary>
    [SchemaAttr(0, "ddeTopic", 1)]
    public StringValue DdeTopic { get; set; }

    /// <summary>
    /// Initializes a new instance of the DdeLink class.
    /// </summary>
    public DdeLink():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DdeLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeLink(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DdeLink(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DdeLink class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DdeLink(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "ddeItems" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> DDE Items Collection.</para>
    /// <para> Represents the following element tag in the schema: x:ddeItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DdeItems DdeItems
    {
        get => GetElement<DdeItems>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DdeLink>(deep);

}
/// <summary>
/// <para>OLE Link.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleLink.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OleItems &lt;x:oleItems></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OleItems))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleLink")]
public partial class OleLink : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11344;
    /// <inheritdoc/>
    public override string LocalName => "oleLink";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLE Link Relationship.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> OLE Link ProgID.</para>
    /// <para>Represents the following attribute in the schema: progId </para>
    /// </summary>
    [SchemaAttr(0, "progId", 1)]
    public StringValue ProgId { get; set; }

    /// <summary>
    /// Initializes a new instance of the OleLink class.
    /// </summary>
    public OleLink():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OleLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleLink(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OleLink class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleLink(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OleLink class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OleLink(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "oleItems" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> OLE Link Items.</para>
    /// <para> Represents the following element tag in the schema: x:oleItems </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OleItems OleItems
    {
        get => GetElement<OleItems>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleLink>(deep);

}
/// <summary>
/// <para>Sheet Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetName.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetName")]
public partial class SheetName : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11345;
    /// <inheritdoc/>
    public override string LocalName => "sheetName";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Name Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetName class.
    /// </summary>
    public SheetName():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetName>(deep);

}
/// <summary>
/// <para>Value.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:v.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "v")]
public partial class Xstring : OpenXmlLeafTextElement
{
    internal const int ElementTypeIdConst = 11346;
    /// <inheritdoc/>
    public override string LocalName => "v";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Xstring class.
    /// </summary>
    public Xstring():base(){}
    
      
        /// <summary>
    /// Initializes a new instance of the Xstring class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public Xstring(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    
 
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Xstring>(deep);

}
/// <summary>
/// <para>Table Column.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableColumn.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculatedColumnFormula &lt;x:calculatedColumnFormula></description></item>
///<item><description>TotalsRowFormula &lt;x:totalsRowFormula></description></item>
///<item><description>XmlColumnProperties &lt;x:xmlColumnPr></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CalculatedColumnFormula))]
    [ChildElementInfo(typeof(TotalsRowFormula))]
    [ChildElementInfo(typeof(XmlColumnProperties))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableColumn")]
public partial class TableColumn : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11348;
    /// <inheritdoc/>
    public override string LocalName => "tableColumn";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Field Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Unique Name.</para>
    /// <para>Represents the following attribute in the schema: uniqueName </para>
    /// </summary>
    [SchemaAttr(0, "uniqueName", 1)]
    public StringValue UniqueName { get; set; }
    /// <summary>
    /// <para> Column name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 2)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Totals Row Function.</para>
    /// <para>Represents the following attribute in the schema: totalsRowFunction </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowFunction", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TotalsRowFunctionValues> TotalsRowFunction { get; set; }
    /// <summary>
    /// <para> Totals Row Label.</para>
    /// <para>Represents the following attribute in the schema: totalsRowLabel </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowLabel", 4)]
    public StringValue TotalsRowLabel { get; set; }
    /// <summary>
    /// <para> Query Table Field Id.</para>
    /// <para>Represents the following attribute in the schema: queryTableFieldId </para>
    /// </summary>
    [SchemaAttr(0, "queryTableFieldId", 5)]
    public UInt32Value QueryTableFieldId { get; set; }
    /// <summary>
    /// <para> Header Row Cell Format Id.</para>
    /// <para>Represents the following attribute in the schema: headerRowDxfId </para>
    /// </summary>
    [SchemaAttr(0, "headerRowDxfId", 6)]
    public UInt32Value HeaderRowDifferentialFormattingId { get; set; }
    /// <summary>
    /// <para> Data and Insert Row Format Id.</para>
    /// <para>Represents the following attribute in the schema: dataDxfId </para>
    /// </summary>
    [SchemaAttr(0, "dataDxfId", 7)]
    public UInt32Value DataFormatId { get; set; }
    /// <summary>
    /// <para> Totals Row Format Id.</para>
    /// <para>Represents the following attribute in the schema: totalsRowDxfId </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowDxfId", 8)]
    public UInt32Value TotalsRowDifferentialFormattingId { get; set; }
    /// <summary>
    /// <para> Header Row Cell Style.</para>
    /// <para>Represents the following attribute in the schema: headerRowCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "headerRowCellStyle", 9)]
    public StringValue HeaderRowCellStyle { get; set; }
    /// <summary>
    /// <para> Data Area Style Name.</para>
    /// <para>Represents the following attribute in the schema: dataCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "dataCellStyle", 10)]
    public StringValue DataCellStyle { get; set; }
    /// <summary>
    /// <para> Totals Row Style Name.</para>
    /// <para>Represents the following attribute in the schema: totalsRowCellStyle </para>
    /// </summary>
    [SchemaAttr(0, "totalsRowCellStyle", 11)]
    public StringValue TotalsRowCellStyle { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableColumn class.
    /// </summary>
    public TableColumn():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableColumn(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableColumn class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableColumn(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableColumn class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableColumn(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "calculatedColumnFormula","totalsRowFormula","xmlColumnPr","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Calculated Column Formula.</para>
    /// <para> Represents the following element tag in the schema: x:calculatedColumnFormula </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CalculatedColumnFormula CalculatedColumnFormula
    {
        get => GetElement<CalculatedColumnFormula>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Totals Row Formula.</para>
    /// <para> Represents the following element tag in the schema: x:totalsRowFormula </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TotalsRowFormula TotalsRowFormula
    {
        get => GetElement<TotalsRowFormula>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> XML Column Properties.</para>
    /// <para> Represents the following element tag in the schema: x:xmlColumnPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public XmlColumnProperties XmlColumnProperties
    {
        get => GetElement<XmlColumnProperties>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableColumn>(deep);

}
/// <summary>
/// <para>Calculated Column Formula.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calculatedColumnFormula.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "calculatedColumnFormula")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class CalculatedColumnFormula : TableFormulaType
{
    internal const int ElementTypeIdConst = 11349;
    /// <inheritdoc/>
    public override string LocalName => "calculatedColumnFormula";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the CalculatedColumnFormula class.
    /// </summary>
    public CalculatedColumnFormula():base(){}
    
        /// <summary>
    /// Initializes a new instance of the CalculatedColumnFormula class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public CalculatedColumnFormula(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedColumnFormula>(deep);

}
/// <summary>
/// <para>Totals Row Formula.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:totalsRowFormula.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "totalsRowFormula")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TotalsRowFormula : TableFormulaType
{
    internal const int ElementTypeIdConst = 11350;
    /// <inheritdoc/>
    public override string LocalName => "totalsRowFormula";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the TotalsRowFormula class.
    /// </summary>
    public TotalsRowFormula():base(){}
    
        /// <summary>
    /// Initializes a new instance of the TotalsRowFormula class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public TotalsRowFormula(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TotalsRowFormula>(deep);

}
/// <summary>
/// Defines the TableFormulaType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class TableFormulaType : OpenXmlLeafTextElement
{
        
        /// <summary>
    /// <para> Array.</para>
    /// <para>Represents the following attribute in the schema: array </para>
    /// </summary>
    [SchemaAttr(0, "array", 0)]
    public BooleanValue Array { get; set; }
    /// <summary>
    /// <para> space.</para>
    /// <para>Represents the following attribute in the schema: xml:space </para>
    /// </summary>
///<remark> xmlns:xml=http://www.w3.org/XML/1998/namespace
///</remark>
    [SchemaAttr(1, "space", 1)]
    public EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues> Space { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableFormulaType class.
    /// </summary>
    protected TableFormulaType(){}
    
    
        /// <summary>
    /// Initializes a new instance of the TableFormulaType class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    protected TableFormulaType(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    

}
/// <summary>
/// <para>XML Column Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:xmlColumnPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "xmlColumnPr")]
public partial class XmlColumnProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11351;
    /// <inheritdoc/>
    public override string LocalName => "xmlColumnPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> XML Map Id.</para>
    /// <para>Represents the following attribute in the schema: mapId </para>
    /// </summary>
    [SchemaAttr(0, "mapId", 0)]
    public UInt32Value MapId { get; set; }
    /// <summary>
    /// <para> XPath.</para>
    /// <para>Represents the following attribute in the schema: xpath </para>
    /// </summary>
    [SchemaAttr(0, "xpath", 1)]
    public StringValue XPath { get; set; }
    /// <summary>
    /// <para> Denormalized.</para>
    /// <para>Represents the following attribute in the schema: denormalized </para>
    /// </summary>
    [SchemaAttr(0, "denormalized", 2)]
    public BooleanValue Denormalized { get; set; }
    /// <summary>
    /// <para> XML Data Type.</para>
    /// <para>Represents the following attribute in the schema: xmlDataType </para>
    /// </summary>
    [SchemaAttr(0, "xmlDataType", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.XmlDataValues> XmlDataType { get; set; }

    /// <summary>
    /// Initializes a new instance of the XmlColumnProperties class.
    /// </summary>
    public XmlColumnProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the XmlColumnProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlColumnProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlColumnProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public XmlColumnProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the XmlColumnProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public XmlColumnProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<XmlColumnProperties>(deep);

}
/// <summary>
/// <para>Volatile Dependency Type.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:volType.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Main &lt;x:main></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Main))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "volType")]
public partial class VolatileType : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11352;
    /// <inheritdoc/>
    public override string LocalName => "volType";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.VolatileDependencyValues> Type { get; set; }

    /// <summary>
    /// Initializes a new instance of the VolatileType class.
    /// </summary>
    public VolatileType():base(){}
    
        /// <summary>
    ///Initializes a new instance of the VolatileType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VolatileType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the VolatileType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VolatileType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the VolatileType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public VolatileType(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VolatileType>(deep);

}
/// <summary>
/// <para>Main.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:main.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Topic &lt;x:tp></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Topic))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "main")]
public partial class Main : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11353;
    /// <inheritdoc/>
    public override string LocalName => "main";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> First String.</para>
    /// <para>Represents the following attribute in the schema: first </para>
    /// </summary>
    [SchemaAttr(0, "first", 0)]
    public StringValue First { get; set; }

    /// <summary>
    /// Initializes a new instance of the Main class.
    /// </summary>
    public Main():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Main class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Main(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Main class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Main(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Main class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Main(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Main>(deep);

}
/// <summary>
/// <para>Topic.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tp.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Xstring &lt;x:v></description></item>
///<item><description>Subtopic &lt;x:stp></description></item>
///<item><description>TopicReferences &lt;x:tr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Xstring))]
    [ChildElementInfo(typeof(Subtopic))]
    [ChildElementInfo(typeof(TopicReferences))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tp")]
public partial class Topic : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11354;
    /// <inheritdoc/>
    public override string LocalName => "tp";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Type.</para>
    /// <para>Represents the following attribute in the schema: t </para>
    /// </summary>
    [SchemaAttr(0, "t", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.VolatileValues> ValueType { get; set; }

    /// <summary>
    /// Initializes a new instance of the Topic class.
    /// </summary>
    public Topic():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Topic class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Topic(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Topic class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Topic(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Topic class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Topic(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "v","stp","tr" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Topic Value.</para>
    /// <para> Represents the following element tag in the schema: x:v </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Xstring Xstring
    {
        get => GetElement<Xstring>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Topic>(deep);

}
/// <summary>
/// <para>References.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tr")]
public partial class TopicReferences : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11356;
    /// <inheritdoc/>
    public override string LocalName => "tr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: r </para>
    /// </summary>
    [SchemaAttr(0, "r", 0)]
    public StringValue CellReference { get; set; }
    /// <summary>
    /// <para> Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: s </para>
    /// </summary>
    [SchemaAttr(0, "s", 1)]
    public UInt32Value SheetId { get; set; }

    /// <summary>
    /// Initializes a new instance of the TopicReferences class.
    /// </summary>
    public TopicReferences():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopicReferences>(deep);

}
/// <summary>
/// <para>PivotCache.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotCache.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotCache")]
public partial class PivotCache : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11357;
    /// <inheritdoc/>
    public override string LocalName => "pivotCache";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> PivotCache Id.</para>
    /// <para>Represents the following attribute in the schema: cacheId </para>
    /// </summary>
    [SchemaAttr(0, "cacheId", 0)]
    public UInt32Value CacheId { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 1)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotCache class.
    /// </summary>
    public PivotCache():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCache>(deep);

}
/// <summary>
/// <para>Web Publishing Object.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPublishObject.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPublishObject")]
public partial class WebPublishObject : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11358;
    /// <inheritdoc/>
    public override string LocalName => "webPublishObject";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Id.</para>
    /// <para>Represents the following attribute in the schema: id </para>
    /// </summary>
    [SchemaAttr(0, "id", 0)]
    public UInt32Value Id { get; set; }
    /// <summary>
    /// <para> Div Id.</para>
    /// <para>Represents the following attribute in the schema: divId </para>
    /// </summary>
    [SchemaAttr(0, "divId", 1)]
    public StringValue DivId { get; set; }
    /// <summary>
    /// <para> Source Object.</para>
    /// <para>Represents the following attribute in the schema: sourceObject </para>
    /// </summary>
    [SchemaAttr(0, "sourceObject", 2)]
    public StringValue SourceObject { get; set; }
    /// <summary>
    /// <para> Destination File.</para>
    /// <para>Represents the following attribute in the schema: destinationFile </para>
    /// </summary>
    [SchemaAttr(0, "destinationFile", 3)]
    public StringValue DestinationFile { get; set; }
    /// <summary>
    /// <para> Title.</para>
    /// <para>Represents the following attribute in the schema: title </para>
    /// </summary>
    [SchemaAttr(0, "title", 4)]
    public StringValue Title { get; set; }
    /// <summary>
    /// <para> Auto Republish.</para>
    /// <para>Represents the following attribute in the schema: autoRepublish </para>
    /// </summary>
    [SchemaAttr(0, "autoRepublish", 5)]
    public BooleanValue AutoRepublish { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebPublishObject class.
    /// </summary>
    public WebPublishObject():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPublishObject>(deep);

}
/// <summary>
/// <para>External Reference.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:externalReference.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "externalReference")]
public partial class ExternalReference : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11359;
    /// <inheritdoc/>
    public override string LocalName => "externalReference";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the ExternalReference class.
    /// </summary>
    public ExternalReference():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalReference>(deep);

}
/// <summary>
/// <para>Custom Workbook View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customWorkbookView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customWorkbookView")]
public partial class CustomWorkbookView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11360;
    /// <inheritdoc/>
    public override string LocalName => "customWorkbookView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Custom View Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Custom View GUID.</para>
    /// <para>Represents the following attribute in the schema: guid </para>
    /// </summary>
    [SchemaAttr(0, "guid", 1)]
    public StringValue Guid { get; set; }
    /// <summary>
    /// <para> Auto Update.</para>
    /// <para>Represents the following attribute in the schema: autoUpdate </para>
    /// </summary>
    [SchemaAttr(0, "autoUpdate", 2)]
    public BooleanValue AutoUpdate { get; set; }
    /// <summary>
    /// <para> Merge Interval.</para>
    /// <para>Represents the following attribute in the schema: mergeInterval </para>
    /// </summary>
    [SchemaAttr(0, "mergeInterval", 3)]
    public UInt32Value MergeInterval { get; set; }
    /// <summary>
    /// <para> Changes Saved Win.</para>
    /// <para>Represents the following attribute in the schema: changesSavedWin </para>
    /// </summary>
    [SchemaAttr(0, "changesSavedWin", 4)]
    public BooleanValue ChangesSavedWin { get; set; }
    /// <summary>
    /// <para> Only Synch.</para>
    /// <para>Represents the following attribute in the schema: onlySync </para>
    /// </summary>
    [SchemaAttr(0, "onlySync", 5)]
    public BooleanValue OnlySync { get; set; }
    /// <summary>
    /// <para> Personal View.</para>
    /// <para>Represents the following attribute in the schema: personalView </para>
    /// </summary>
    [SchemaAttr(0, "personalView", 6)]
    public BooleanValue PersonalView { get; set; }
    /// <summary>
    /// <para> Include Print Settings.</para>
    /// <para>Represents the following attribute in the schema: includePrintSettings </para>
    /// </summary>
    [SchemaAttr(0, "includePrintSettings", 7)]
    public BooleanValue IncludePrintSettings { get; set; }
    /// <summary>
    /// <para> Include Hidden Rows and Columns.</para>
    /// <para>Represents the following attribute in the schema: includeHiddenRowCol </para>
    /// </summary>
    [SchemaAttr(0, "includeHiddenRowCol", 8)]
    public BooleanValue IncludeHiddenRowColumn { get; set; }
    /// <summary>
    /// <para> Maximized.</para>
    /// <para>Represents the following attribute in the schema: maximized </para>
    /// </summary>
    [SchemaAttr(0, "maximized", 9)]
    public BooleanValue Maximized { get; set; }
    /// <summary>
    /// <para> Minimized.</para>
    /// <para>Represents the following attribute in the schema: minimized </para>
    /// </summary>
    [SchemaAttr(0, "minimized", 10)]
    public BooleanValue Minimized { get; set; }
    /// <summary>
    /// <para> Show Horizontal Scroll.</para>
    /// <para>Represents the following attribute in the schema: showHorizontalScroll </para>
    /// </summary>
    [SchemaAttr(0, "showHorizontalScroll", 11)]
    public BooleanValue ShowHorizontalScroll { get; set; }
    /// <summary>
    /// <para> Show Vertical Scroll.</para>
    /// <para>Represents the following attribute in the schema: showVerticalScroll </para>
    /// </summary>
    [SchemaAttr(0, "showVerticalScroll", 12)]
    public BooleanValue ShowVerticalScroll { get; set; }
    /// <summary>
    /// <para> Show Sheet Tabs.</para>
    /// <para>Represents the following attribute in the schema: showSheetTabs </para>
    /// </summary>
    [SchemaAttr(0, "showSheetTabs", 13)]
    public BooleanValue ShowSheetTabs { get; set; }
    /// <summary>
    /// <para> Top Left Corner (X Coordinate).</para>
    /// <para>Represents the following attribute in the schema: xWindow </para>
    /// </summary>
    [SchemaAttr(0, "xWindow", 14)]
    public Int32Value XWindow { get; set; }
    /// <summary>
    /// <para> Top Left Corner (Y Coordinate).</para>
    /// <para>Represents the following attribute in the schema: yWindow </para>
    /// </summary>
    [SchemaAttr(0, "yWindow", 15)]
    public Int32Value YWindow { get; set; }
    /// <summary>
    /// <para> Window Width.</para>
    /// <para>Represents the following attribute in the schema: windowWidth </para>
    /// </summary>
    [SchemaAttr(0, "windowWidth", 16)]
    public UInt32Value WindowWidth { get; set; }
    /// <summary>
    /// <para> Window Height.</para>
    /// <para>Represents the following attribute in the schema: windowHeight </para>
    /// </summary>
    [SchemaAttr(0, "windowHeight", 17)]
    public UInt32Value WindowHeight { get; set; }
    /// <summary>
    /// <para> Sheet Tab Ratio.</para>
    /// <para>Represents the following attribute in the schema: tabRatio </para>
    /// </summary>
    [SchemaAttr(0, "tabRatio", 18)]
    public UInt32Value TabRatio { get; set; }
    /// <summary>
    /// <para> Active Sheet in Book View.</para>
    /// <para>Represents the following attribute in the schema: activeSheetId </para>
    /// </summary>
    [SchemaAttr(0, "activeSheetId", 19)]
    public UInt32Value ActiveSheetId { get; set; }
    /// <summary>
    /// <para> Show Formula Bar.</para>
    /// <para>Represents the following attribute in the schema: showFormulaBar </para>
    /// </summary>
    [SchemaAttr(0, "showFormulaBar", 20)]
    public BooleanValue ShowFormulaBar { get; set; }
    /// <summary>
    /// <para> Show Status Bar.</para>
    /// <para>Represents the following attribute in the schema: showStatusbar </para>
    /// </summary>
    [SchemaAttr(0, "showStatusbar", 21)]
    public BooleanValue ShowStatusbar { get; set; }
    /// <summary>
    /// <para> Show Comments.</para>
    /// <para>Represents the following attribute in the schema: showComments </para>
    /// </summary>
    [SchemaAttr(0, "showComments", 22)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CommentsValues> ShowComments { get; set; }
    /// <summary>
    /// <para> Show Objects.</para>
    /// <para>Represents the following attribute in the schema: showObjects </para>
    /// </summary>
    [SchemaAttr(0, "showObjects", 23)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ObjectDisplayValues> ShowObjects { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomWorkbookView class.
    /// </summary>
    public CustomWorkbookView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomWorkbookView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomWorkbookView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomWorkbookView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomWorkbookView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomWorkbookView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomWorkbookView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomWorkbookView>(deep);

}
/// <summary>
/// <para>Sheet Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheet.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheet")]
public partial class Sheet : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11361;
    /// <inheritdoc/>
    public override string LocalName => "sheet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Sheet Tab Id.</para>
    /// <para>Represents the following attribute in the schema: sheetId </para>
    /// </summary>
    [SchemaAttr(0, "sheetId", 1)]
    public UInt32Value SheetId { get; set; }
    /// <summary>
    /// <para> Visible State.</para>
    /// <para>Represents the following attribute in the schema: state </para>
    /// </summary>
    [SchemaAttr(0, "state", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SheetStateValues> State { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 3)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the Sheet class.
    /// </summary>
    public Sheet():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Sheet>(deep);

}
/// <summary>
/// <para>Workbook View.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:workbookView.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "workbookView")]
public partial class WorkbookView : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11362;
    /// <inheritdoc/>
    public override string LocalName => "workbookView";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Visibility.</para>
    /// <para>Represents the following attribute in the schema: visibility </para>
    /// </summary>
    [SchemaAttr(0, "visibility", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.VisibilityValues> Visibility { get; set; }
    /// <summary>
    /// <para> Minimized.</para>
    /// <para>Represents the following attribute in the schema: minimized </para>
    /// </summary>
    [SchemaAttr(0, "minimized", 1)]
    public BooleanValue Minimized { get; set; }
    /// <summary>
    /// <para> Show Horizontal Scroll.</para>
    /// <para>Represents the following attribute in the schema: showHorizontalScroll </para>
    /// </summary>
    [SchemaAttr(0, "showHorizontalScroll", 2)]
    public BooleanValue ShowHorizontalScroll { get; set; }
    /// <summary>
    /// <para> Show Vertical Scroll.</para>
    /// <para>Represents the following attribute in the schema: showVerticalScroll </para>
    /// </summary>
    [SchemaAttr(0, "showVerticalScroll", 3)]
    public BooleanValue ShowVerticalScroll { get; set; }
    /// <summary>
    /// <para> Show Sheet Tabs.</para>
    /// <para>Represents the following attribute in the schema: showSheetTabs </para>
    /// </summary>
    [SchemaAttr(0, "showSheetTabs", 4)]
    public BooleanValue ShowSheetTabs { get; set; }
    /// <summary>
    /// <para> Upper Left Corner (X Coordinate).</para>
    /// <para>Represents the following attribute in the schema: xWindow </para>
    /// </summary>
    [SchemaAttr(0, "xWindow", 5)]
    public Int32Value XWindow { get; set; }
    /// <summary>
    /// <para> Upper Left Corner (Y Coordinate).</para>
    /// <para>Represents the following attribute in the schema: yWindow </para>
    /// </summary>
    [SchemaAttr(0, "yWindow", 6)]
    public Int32Value YWindow { get; set; }
    /// <summary>
    /// <para> Window Width.</para>
    /// <para>Represents the following attribute in the schema: windowWidth </para>
    /// </summary>
    [SchemaAttr(0, "windowWidth", 7)]
    public UInt32Value WindowWidth { get; set; }
    /// <summary>
    /// <para> Window Height.</para>
    /// <para>Represents the following attribute in the schema: windowHeight </para>
    /// </summary>
    [SchemaAttr(0, "windowHeight", 8)]
    public UInt32Value WindowHeight { get; set; }
    /// <summary>
    /// <para> Sheet Tab Ratio.</para>
    /// <para>Represents the following attribute in the schema: tabRatio </para>
    /// </summary>
    [SchemaAttr(0, "tabRatio", 9)]
    public UInt32Value TabRatio { get; set; }
    /// <summary>
    /// <para> First Sheet.</para>
    /// <para>Represents the following attribute in the schema: firstSheet </para>
    /// </summary>
    [SchemaAttr(0, "firstSheet", 10)]
    public UInt32Value FirstSheet { get; set; }
    /// <summary>
    /// <para> Active Sheet Index.</para>
    /// <para>Represents the following attribute in the schema: activeTab </para>
    /// </summary>
    [SchemaAttr(0, "activeTab", 11)]
    public UInt32Value ActiveTab { get; set; }
    /// <summary>
    /// <para> AutoFilter Date Grouping.</para>
    /// <para>Represents the following attribute in the schema: autoFilterDateGrouping </para>
    /// </summary>
    [SchemaAttr(0, "autoFilterDateGrouping", 12)]
    public BooleanValue AutoFilterDateGrouping { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorkbookView class.
    /// </summary>
    public WorkbookView():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WorkbookView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookView(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookView class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookView(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookView class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WorkbookView(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "extLst" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorkbookView>(deep);

}
/// <summary>
/// <para>Defined Name.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:definedName.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "definedName")]
public partial class DefinedName : OpenXmlLeafTextElement
{
    internal const int ElementTypeIdConst = 11363;
    /// <inheritdoc/>
    public override string LocalName => "definedName";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Defined Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Comment.</para>
    /// <para>Represents the following attribute in the schema: comment </para>
    /// </summary>
    [SchemaAttr(0, "comment", 1)]
    public StringValue Comment { get; set; }
    /// <summary>
    /// <para> Custom Menu Text.</para>
    /// <para>Represents the following attribute in the schema: customMenu </para>
    /// </summary>
    [SchemaAttr(0, "customMenu", 2)]
    public StringValue CustomMenu { get; set; }
    /// <summary>
    /// <para> Description.</para>
    /// <para>Represents the following attribute in the schema: description </para>
    /// </summary>
    [SchemaAttr(0, "description", 3)]
    public StringValue Description { get; set; }
    /// <summary>
    /// <para> Help.</para>
    /// <para>Represents the following attribute in the schema: help </para>
    /// </summary>
    [SchemaAttr(0, "help", 4)]
    public StringValue Help { get; set; }
    /// <summary>
    /// <para> Status Bar.</para>
    /// <para>Represents the following attribute in the schema: statusBar </para>
    /// </summary>
    [SchemaAttr(0, "statusBar", 5)]
    public StringValue StatusBar { get; set; }
    /// <summary>
    /// <para> Local Name Sheet Id.</para>
    /// <para>Represents the following attribute in the schema: localSheetId </para>
    /// </summary>
    [SchemaAttr(0, "localSheetId", 6)]
    public UInt32Value LocalSheetId { get; set; }
    /// <summary>
    /// <para> Hidden Name.</para>
    /// <para>Represents the following attribute in the schema: hidden </para>
    /// </summary>
    [SchemaAttr(0, "hidden", 7)]
    public BooleanValue Hidden { get; set; }
    /// <summary>
    /// <para> Function.</para>
    /// <para>Represents the following attribute in the schema: function </para>
    /// </summary>
    [SchemaAttr(0, "function", 8)]
    public BooleanValue Function { get; set; }
    /// <summary>
    /// <para> Procedure.</para>
    /// <para>Represents the following attribute in the schema: vbProcedure </para>
    /// </summary>
    [SchemaAttr(0, "vbProcedure", 9)]
    public BooleanValue VbProcedure { get; set; }
    /// <summary>
    /// <para> External Function.</para>
    /// <para>Represents the following attribute in the schema: xlm </para>
    /// </summary>
    [SchemaAttr(0, "xlm", 10)]
    public BooleanValue Xlm { get; set; }
    /// <summary>
    /// <para> Function Group Id.</para>
    /// <para>Represents the following attribute in the schema: functionGroupId </para>
    /// </summary>
    [SchemaAttr(0, "functionGroupId", 11)]
    public UInt32Value FunctionGroupId { get; set; }
    /// <summary>
    /// <para> Shortcut Key.</para>
    /// <para>Represents the following attribute in the schema: shortcutKey </para>
    /// </summary>
    [SchemaAttr(0, "shortcutKey", 12)]
    public StringValue ShortcutKey { get; set; }
    /// <summary>
    /// <para> Publish To Server.</para>
    /// <para>Represents the following attribute in the schema: publishToServer </para>
    /// </summary>
    [SchemaAttr(0, "publishToServer", 13)]
    public BooleanValue PublishToServer { get; set; }
    /// <summary>
    /// <para> Workbook Parameter (Server).</para>
    /// <para>Represents the following attribute in the schema: workbookParameter </para>
    /// </summary>
    [SchemaAttr(0, "workbookParameter", 14)]
    public BooleanValue WorkbookParameter { get; set; }

    /// <summary>
    /// Initializes a new instance of the DefinedName class.
    /// </summary>
    public DefinedName():base(){}
    
      
        /// <summary>
    /// Initializes a new instance of the DefinedName class with the specified text content.
    /// </summary>
    /// <param name="text">Specifies the text content of the element.</param>
    public DefinedName(string text):base(text)
    {
    }
    
    internal override OpenXmlSimpleType InnerTextToValue(string text)
    {
		return new StringValue(){ InnerText = text };
    }
    
 
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefinedName>(deep);

}
/// <summary>
/// <para>Function Group.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:functionGroup.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "functionGroup")]
public partial class FunctionGroup : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11364;
    /// <inheritdoc/>
    public override string LocalName => "functionGroup";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the FunctionGroup class.
    /// </summary>
    public FunctionGroup():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FunctionGroup>(deep);

}
/// <summary>
/// <para>Defines the TableExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.Table &lt;x14:table></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.Table), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class TableExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11365;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableExtension class.
    /// </summary>
    public TableExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableExtension>(deep);

}
/// <summary>
/// <para>Defines the ObjectAnchor Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:anchor.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FromMarker &lt;x:from></description></item>
///<item><description>ToMarker &lt;x:to></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FromMarker), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(ToMarker), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2010)]
[SchemaAttr(22, "anchor")]
public partial class ObjectAnchor : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11366;
    /// <inheritdoc/>
    public override string LocalName => "anchor";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    
    
        /// <summary>
    /// <para> moveWithCells.</para>
    /// <para>Represents the following attribute in the schema: moveWithCells </para>
    /// </summary>
    [SchemaAttr(0, "moveWithCells", 0)]
    public BooleanValue MoveWithCells { get; set; }
    /// <summary>
    /// <para> sizeWithCells.</para>
    /// <para>Represents the following attribute in the schema: sizeWithCells </para>
    /// </summary>
    [SchemaAttr(0, "sizeWithCells", 1)]
    public BooleanValue SizeWithCells { get; set; }
    /// <summary>
    /// <para> z-order.</para>
    /// <para>Represents the following attribute in the schema: z-order </para>
    /// </summary>
    [SchemaAttr(0, "z-order", 2)]
    public UInt32Value ZOrder { get; set; }

    /// <summary>
    /// Initializes a new instance of the ObjectAnchor class.
    /// </summary>
    public ObjectAnchor():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ObjectAnchor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ObjectAnchor(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ObjectAnchor class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ObjectAnchor(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ObjectAnchor class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ObjectAnchor(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "from","to" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> FromMarker.</para>
    /// <para> Represents the following element tag in the schema: x:from </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public FromMarker FromMarker
    {
        get => GetElement<FromMarker>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> ToMarker.</para>
    /// <para> Represents the following element tag in the schema: x:to </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ToMarker ToMarker
    {
        get => GetElement<ToMarker>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectAnchor>(deep);

}
/// <summary>
/// <para>Defines the FromMarker Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:from.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId &lt;xdr:col></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset &lt;xdr:colOff></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId &lt;xdr:row></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset &lt;xdr:rowOff></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "from")]
[OfficeAvailability(FileFormatVersions.Office2010)]
public partial class FromMarker : MarkerType
{
    internal const int ElementTypeIdConst = 11367;
    /// <inheritdoc/>
    public override string LocalName => "from";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    /// <summary>
    /// Initializes a new instance of the FromMarker class.
    /// </summary>
    public FromMarker():base(){}
        /// <summary>
    ///Initializes a new instance of the FromMarker class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FromMarker(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FromMarker class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FromMarker(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FromMarker class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FromMarker(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FromMarker>(deep);

}
/// <summary>
/// <para>Defines the ToMarker Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:to.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId &lt;xdr:col></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset &lt;xdr:colOff></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId &lt;xdr:row></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset &lt;xdr:rowOff></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "to")]
[OfficeAvailability(FileFormatVersions.Office2010)]
public partial class ToMarker : MarkerType
{
    internal const int ElementTypeIdConst = 11368;
    /// <inheritdoc/>
    public override string LocalName => "to";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    /// <summary>
    /// Initializes a new instance of the ToMarker class.
    /// </summary>
    public ToMarker():base(){}
        /// <summary>
    ///Initializes a new instance of the ToMarker class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ToMarker(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ToMarker class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ToMarker(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ToMarker class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ToMarker(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ToMarker>(deep);

}
/// <summary>
/// Defines the MarkerType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId &lt;xdr:col></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset &lt;xdr:colOff></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId &lt;xdr:row></description></item>
///<item><description>DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset &lt;xdr:rowOff></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId))]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class MarkerType : OpenXmlCompositeElement
{
        
    
    
        private static readonly string[] eleTagNames = { "col","colOff","row","rowOff" };
    private static readonly byte[] eleNamespaceIds = { 18,18,18,18 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Column).</para>
    /// <para> Represents the following element tag in the schema: xdr:col </para>
    /// </summary>
    /// <remark>
    /// xmlns:xdr = http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing
    /// </remark>
    public DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId ColumnId
    {
        get => GetElement<DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnId>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Column Offset.</para>
    /// <para> Represents the following element tag in the schema: xdr:colOff </para>
    /// </summary>
    /// <remark>
    /// xmlns:xdr = http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing
    /// </remark>
    public DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset ColumnOffset
    {
        get => GetElement<DocumentFormat.OpenXml.Drawing.Spreadsheet.ColumnOffset>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Row.</para>
    /// <para> Represents the following element tag in the schema: xdr:row </para>
    /// </summary>
    /// <remark>
    /// xmlns:xdr = http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing
    /// </remark>
    public DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId RowId
    {
        get => GetElement<DocumentFormat.OpenXml.Drawing.Spreadsheet.RowId>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Row Offset.</para>
    /// <para> Represents the following element tag in the schema: xdr:rowOff </para>
    /// </summary>
    /// <remark>
    /// xmlns:xdr = http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing
    /// </remark>
    public DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset RowOffset
    {
        get => GetElement<DocumentFormat.OpenXml.Drawing.Spreadsheet.RowOffset>(3);
        set => SetElement(3, value);
    }
    


    
    /// <summary>
    /// Initializes a new instance of the MarkerType class.
    /// </summary>
    protected MarkerType(){}
    
        /// <summary>
    ///Initializes a new instance of the MarkerType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected MarkerType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MarkerType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected MarkerType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MarkerType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected MarkerType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Defines the ConditionalFormattingRuleExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.Id &lt;x14:id></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.Id), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class ConditionalFormattingRuleExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11369;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtension class.
    /// </summary>
    public ConditionalFormattingRuleExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormattingRuleExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRuleExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRuleExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormattingRuleExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormattingRuleExtension>(deep);

}
/// <summary>
/// <para>Defines the PivotHierarchyExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.PivotHierarchy &lt;x14:pivotHierarchy></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.PivotHierarchy), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class PivotHierarchyExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11370;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtension class.
    /// </summary>
    public PivotHierarchyExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotHierarchyExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchyExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchyExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotHierarchyExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotHierarchyExtension>(deep);

}
/// <summary>
/// <para>Defines the PivotFieldExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.PivotField &lt;x14:pivotField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.PivotField), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class PivotFieldExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11371;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotFieldExtension class.
    /// </summary>
    public PivotFieldExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFieldExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFieldExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFieldExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFieldExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFieldExtension>(deep);

}
/// <summary>
/// <para>Defines the CacheSourceExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SourceConnection &lt;x14:sourceConnection></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SourceConnection), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class CacheSourceExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11372;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheSourceExtension class.
    /// </summary>
    public CacheSourceExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheSourceExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSourceExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSourceExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSourceExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSourceExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheSourceExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheSourceExtension>(deep);

}
/// <summary>
/// <para>Table Columns.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableColumns.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableColumn &lt;x:tableColumn></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableColumn))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableColumns")]
public partial class TableColumns : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11373;
    /// <inheritdoc/>
    public override string LocalName => "tableColumns";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Column Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableColumns class.
    /// </summary>
    public TableColumns():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableColumns class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableColumns(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableColumns class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableColumns(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableColumns class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableColumns(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableColumns>(deep);

}
/// <summary>
/// <para>Table Style.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableStyleInfo.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableStyleInfo")]
public partial class TableStyleInfo : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11374;
    /// <inheritdoc/>
    public override string LocalName => "tableStyleInfo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Style Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Show First Column.</para>
    /// <para>Represents the following attribute in the schema: showFirstColumn </para>
    /// </summary>
    [SchemaAttr(0, "showFirstColumn", 1)]
    public BooleanValue ShowFirstColumn { get; set; }
    /// <summary>
    /// <para> Show Last Column.</para>
    /// <para>Represents the following attribute in the schema: showLastColumn </para>
    /// </summary>
    [SchemaAttr(0, "showLastColumn", 2)]
    public BooleanValue ShowLastColumn { get; set; }
    /// <summary>
    /// <para> Show Row Stripes.</para>
    /// <para>Represents the following attribute in the schema: showRowStripes </para>
    /// </summary>
    [SchemaAttr(0, "showRowStripes", 3)]
    public BooleanValue ShowRowStripes { get; set; }
    /// <summary>
    /// <para> Show Column Stripes.</para>
    /// <para>Represents the following attribute in the schema: showColumnStripes </para>
    /// </summary>
    [SchemaAttr(0, "showColumnStripes", 4)]
    public BooleanValue ShowColumnStripes { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableStyleInfo class.
    /// </summary>
    public TableStyleInfo():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleInfo>(deep);

}
/// <summary>
/// <para>Future Feature Data Storage Area.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class TableExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11375;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TableExtensionList class.
    /// </summary>
    public TableExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableExtensionList>(deep);

}
/// <summary>
/// <para>OLE Link Item.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleItem.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleItem")]
public partial class OleItem : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11376;
    /// <inheritdoc/>
    public override string LocalName => "oleItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLE Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Icon.</para>
    /// <para>Represents the following attribute in the schema: icon </para>
    /// </summary>
    [SchemaAttr(0, "icon", 1)]
    public BooleanValue Icon { get; set; }
    /// <summary>
    /// <para> Advise.</para>
    /// <para>Represents the following attribute in the schema: advise </para>
    /// </summary>
    [SchemaAttr(0, "advise", 2)]
    public BooleanValue Advise { get; set; }
    /// <summary>
    /// <para> Object is an Image.</para>
    /// <para>Represents the following attribute in the schema: preferPic </para>
    /// </summary>
    [SchemaAttr(0, "preferPic", 3)]
    public BooleanValue PreferPicture { get; set; }

    /// <summary>
    /// Initializes a new instance of the OleItem class.
    /// </summary>
    public OleItem():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleItem>(deep);

}
/// <summary>
/// <para>Defines the StartBorder Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:start.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "start")]
[OfficeAvailability(FileFormatVersions.Office2010)]
public partial class StartBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11377;
    /// <inheritdoc/>
    public override string LocalName => "start";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    /// <summary>
    /// Initializes a new instance of the StartBorder class.
    /// </summary>
    public StartBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the StartBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StartBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the StartBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StartBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the StartBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public StartBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartBorder>(deep);

}
/// <summary>
/// <para>Defines the EndBorder Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:end.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "end")]
[OfficeAvailability(FileFormatVersions.Office2010)]
public partial class EndBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11378;
    /// <inheritdoc/>
    public override string LocalName => "end";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    /// <summary>
    /// Initializes a new instance of the EndBorder class.
    /// </summary>
    public EndBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the EndBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EndBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EndBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EndBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EndBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EndBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndBorder>(deep);

}
/// <summary>
/// <para>Left Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:left.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "left")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LeftBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11379;
    /// <inheritdoc/>
    public override string LocalName => "left";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the LeftBorder class.
    /// </summary>
    public LeftBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the LeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public LeftBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the LeftBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public LeftBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);

}
/// <summary>
/// <para>Right Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:right.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "right")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class RightBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11380;
    /// <inheritdoc/>
    public override string LocalName => "right";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the RightBorder class.
    /// </summary>
    public RightBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the RightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RightBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RightBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RightBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);

}
/// <summary>
/// <para>Top Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:top.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "top")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class TopBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11381;
    /// <inheritdoc/>
    public override string LocalName => "top";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the TopBorder class.
    /// </summary>
    public TopBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the TopBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TopBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TopBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TopBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);

}
/// <summary>
/// <para>Bottom Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:bottom.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "bottom")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class BottomBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11382;
    /// <inheritdoc/>
    public override string LocalName => "bottom";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the BottomBorder class.
    /// </summary>
    public BottomBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the BottomBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BottomBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BottomBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BottomBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);

}
/// <summary>
/// <para>Diagonal.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:diagonal.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "diagonal")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class DiagonalBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11383;
    /// <inheritdoc/>
    public override string LocalName => "diagonal";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the DiagonalBorder class.
    /// </summary>
    public DiagonalBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the DiagonalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DiagonalBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DiagonalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DiagonalBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DiagonalBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DiagonalBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DiagonalBorder>(deep);

}
/// <summary>
/// <para>Vertical Inner Border.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:vertical.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "vertical")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class VerticalBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11384;
    /// <inheritdoc/>
    public override string LocalName => "vertical";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the VerticalBorder class.
    /// </summary>
    public VerticalBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the VerticalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VerticalBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the VerticalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public VerticalBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the VerticalBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public VerticalBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalBorder>(deep);

}
/// <summary>
/// <para>Horizontal Inner Borders.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:horizontal.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "horizontal")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class HorizontalBorder : BorderPropertiesType
{
    internal const int ElementTypeIdConst = 11385;
    /// <inheritdoc/>
    public override string LocalName => "horizontal";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the HorizontalBorder class.
    /// </summary>
    public HorizontalBorder():base(){}
        /// <summary>
    ///Initializes a new instance of the HorizontalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HorizontalBorder(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the HorizontalBorder class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public HorizontalBorder(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the HorizontalBorder class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public HorizontalBorder(string outerXml)
        : base(outerXml)
    {
    }
    

    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<HorizontalBorder>(deep);

}
/// <summary>
/// Defines the BorderPropertiesType class.
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
    [ChildElementInfo(typeof(Color))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class BorderPropertiesType : OpenXmlCompositeElement
{
        
        /// <summary>
    /// <para> Line Style.</para>
    /// <para>Represents the following attribute in the schema: style </para>
    /// </summary>
    [SchemaAttr(0, "style", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues> Style { get; set; }

    
        private static readonly string[] eleTagNames = { "color" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Color.</para>
    /// <para> Represents the following element tag in the schema: x:color </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Color Color
    {
        get => GetElement<Color>(0);
        set => SetElement(0, value);
    }
    


    
    /// <summary>
    /// Initializes a new instance of the BorderPropertiesType class.
    /// </summary>
    protected BorderPropertiesType(){}
    
        /// <summary>
    ///Initializes a new instance of the BorderPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected BorderPropertiesType(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BorderPropertiesType class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    protected BorderPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BorderPropertiesType class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    protected BorderPropertiesType(string outerXml)
        : base(outerXml)
    {
    }
    

    
}
/// <summary>
/// <para>Defines the ControlProperties Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:controlPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ObjectAnchor &lt;x:anchor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ObjectAnchor), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2010)]
[SchemaAttr(22, "controlPr")]
public partial class ControlProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11386;
    /// <inheritdoc/>
    public override string LocalName => "controlPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    
    
        /// <summary>
    /// <para> locked.</para>
    /// <para>Represents the following attribute in the schema: locked </para>
    /// </summary>
    [SchemaAttr(0, "locked", 0)]
    public BooleanValue Locked { get; set; }
    /// <summary>
    /// <para> defaultSize.</para>
    /// <para>Represents the following attribute in the schema: defaultSize </para>
    /// </summary>
    [SchemaAttr(0, "defaultSize", 1)]
    public BooleanValue DefaultSize { get; set; }
    /// <summary>
    /// <para> print.</para>
    /// <para>Represents the following attribute in the schema: print </para>
    /// </summary>
    [SchemaAttr(0, "print", 2)]
    public BooleanValue Print { get; set; }
    /// <summary>
    /// <para> disabled.</para>
    /// <para>Represents the following attribute in the schema: disabled </para>
    /// </summary>
    [SchemaAttr(0, "disabled", 3)]
    public BooleanValue Disabled { get; set; }
    /// <summary>
    /// <para> recalcAlways.</para>
    /// <para>Represents the following attribute in the schema: recalcAlways </para>
    /// </summary>
    [SchemaAttr(0, "recalcAlways", 4)]
    public BooleanValue RecalcAlways { get; set; }
    /// <summary>
    /// <para> uiObject.</para>
    /// <para>Represents the following attribute in the schema: uiObject </para>
    /// </summary>
    [SchemaAttr(0, "uiObject", 5)]
    public BooleanValue UiObject { get; set; }
    /// <summary>
    /// <para> autoFill.</para>
    /// <para>Represents the following attribute in the schema: autoFill </para>
    /// </summary>
    [SchemaAttr(0, "autoFill", 6)]
    public BooleanValue AutoFill { get; set; }
    /// <summary>
    /// <para> autoLine.</para>
    /// <para>Represents the following attribute in the schema: autoLine </para>
    /// </summary>
    [SchemaAttr(0, "autoLine", 7)]
    public BooleanValue AutoLine { get; set; }
    /// <summary>
    /// <para> autoPict.</para>
    /// <para>Represents the following attribute in the schema: autoPict </para>
    /// </summary>
    [SchemaAttr(0, "autoPict", 8)]
    public BooleanValue AutoPict { get; set; }
    /// <summary>
    /// <para> macro.</para>
    /// <para>Represents the following attribute in the schema: macro </para>
    /// </summary>
    [SchemaAttr(0, "macro", 9)]
    public StringValue Macro { get; set; }
    /// <summary>
    /// <para> altText.</para>
    /// <para>Represents the following attribute in the schema: altText </para>
    /// </summary>
    [SchemaAttr(0, "altText", 10)]
    public StringValue AltText { get; set; }
    /// <summary>
    /// <para> linkedCell.</para>
    /// <para>Represents the following attribute in the schema: linkedCell </para>
    /// </summary>
    [SchemaAttr(0, "linkedCell", 11)]
    public StringValue LinkedCell { get; set; }
    /// <summary>
    /// <para> listFillRange.</para>
    /// <para>Represents the following attribute in the schema: listFillRange </para>
    /// </summary>
    [SchemaAttr(0, "listFillRange", 12)]
    public StringValue ListFillRange { get; set; }
    /// <summary>
    /// <para> cf.</para>
    /// <para>Represents the following attribute in the schema: cf </para>
    /// </summary>
    [SchemaAttr(0, "cf", 13)]
    public StringValue Cf { get; set; }
    /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 14)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the ControlProperties class.
    /// </summary>
    public ControlProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ControlProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ControlProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ControlProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ControlProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ControlProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ControlProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "anchor" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ObjectAnchor.</para>
    /// <para> Represents the following element tag in the schema: x:anchor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ObjectAnchor ObjectAnchor
    {
        get => GetElement<ObjectAnchor>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ControlProperties>(deep);

}
/// <summary>
/// <para>Defines the EmbeddedObjectProperties Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:objectPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ObjectAnchor &lt;x:anchor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ObjectAnchor), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2010)]
[SchemaAttr(22, "objectPr")]
public partial class EmbeddedObjectProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11387;
    /// <inheritdoc/>
    public override string LocalName => "objectPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    
    
        /// <summary>
    /// <para> locked.</para>
    /// <para>Represents the following attribute in the schema: locked </para>
    /// </summary>
    [SchemaAttr(0, "locked", 0)]
    public BooleanValue Locked { get; set; }
    /// <summary>
    /// <para> defaultSize.</para>
    /// <para>Represents the following attribute in the schema: defaultSize </para>
    /// </summary>
    [SchemaAttr(0, "defaultSize", 1)]
    public BooleanValue DefaultSize { get; set; }
    /// <summary>
    /// <para> print.</para>
    /// <para>Represents the following attribute in the schema: print </para>
    /// </summary>
    [SchemaAttr(0, "print", 2)]
    public BooleanValue Print { get; set; }
    /// <summary>
    /// <para> disabled.</para>
    /// <para>Represents the following attribute in the schema: disabled </para>
    /// </summary>
    [SchemaAttr(0, "disabled", 3)]
    public BooleanValue Disabled { get; set; }
    /// <summary>
    /// <para> uiObject.</para>
    /// <para>Represents the following attribute in the schema: uiObject </para>
    /// </summary>
    [SchemaAttr(0, "uiObject", 4)]
    public BooleanValue UiObject { get; set; }
    /// <summary>
    /// <para> autoFill.</para>
    /// <para>Represents the following attribute in the schema: autoFill </para>
    /// </summary>
    [SchemaAttr(0, "autoFill", 5)]
    public BooleanValue AutoFill { get; set; }
    /// <summary>
    /// <para> autoLine.</para>
    /// <para>Represents the following attribute in the schema: autoLine </para>
    /// </summary>
    [SchemaAttr(0, "autoLine", 6)]
    public BooleanValue AutoLine { get; set; }
    /// <summary>
    /// <para> autoPict.</para>
    /// <para>Represents the following attribute in the schema: autoPict </para>
    /// </summary>
    [SchemaAttr(0, "autoPict", 7)]
    public BooleanValue AutoPict { get; set; }
    /// <summary>
    /// <para> macro.</para>
    /// <para>Represents the following attribute in the schema: macro </para>
    /// </summary>
    [SchemaAttr(0, "macro", 8)]
    public StringValue Macro { get; set; }
    /// <summary>
    /// <para> altText.</para>
    /// <para>Represents the following attribute in the schema: altText </para>
    /// </summary>
    [SchemaAttr(0, "altText", 9)]
    public StringValue AltText { get; set; }
    /// <summary>
    /// <para> dde.</para>
    /// <para>Represents the following attribute in the schema: dde </para>
    /// </summary>
    [SchemaAttr(0, "dde", 10)]
    public BooleanValue Dde { get; set; }
    /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 11)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the EmbeddedObjectProperties class.
    /// </summary>
    public EmbeddedObjectProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the EmbeddedObjectProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EmbeddedObjectProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the EmbeddedObjectProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public EmbeddedObjectProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the EmbeddedObjectProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public EmbeddedObjectProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "anchor" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ObjectAnchor.</para>
    /// <para> Represents the following element tag in the schema: x:anchor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ObjectAnchor ObjectAnchor
    {
        get => GetElement<ObjectAnchor>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbeddedObjectProperties>(deep);

}
/// <summary>
/// <para>Chart Sheet Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TabColor &lt;x:tabColor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TabColor))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetPr")]
public partial class ChartSheetProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11388;
    /// <inheritdoc/>
    public override string LocalName => "sheetPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Published.</para>
    /// <para>Represents the following attribute in the schema: published </para>
    /// </summary>
    [SchemaAttr(0, "published", 0)]
    public BooleanValue Published { get; set; }
    /// <summary>
    /// <para> Code Name.</para>
    /// <para>Represents the following attribute in the schema: codeName </para>
    /// </summary>
    [SchemaAttr(0, "codeName", 1)]
    public StringValue CodeName { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartSheetProperties class.
    /// </summary>
    public ChartSheetProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ChartSheetProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ChartSheetProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "tabColor" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> TabColor.</para>
    /// <para> Represents the following element tag in the schema: x:tabColor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TabColor TabColor
    {
        get => GetElement<TabColor>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartSheetProperties>(deep);

}
/// <summary>
/// <para>Chart Sheet Views.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ChartSheetView &lt;x:sheetView></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ChartSheetView))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetViews")]
public partial class ChartSheetViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11389;
    /// <inheritdoc/>
    public override string LocalName => "sheetViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetViews class.
    /// </summary>
    public ChartSheetViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ChartSheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartSheetViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartSheetViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ChartSheetViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartSheetViews>(deep);

}
/// <summary>
/// <para>Chart Sheet Protection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetProtection.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetProtection")]
public partial class ChartSheetProtection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11390;
    /// <inheritdoc/>
    public override string LocalName => "sheetProtection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Password.</para>
    /// <para>Represents the following attribute in the schema: password </para>
    /// </summary>
    [SchemaAttr(0, "password", 0)]
    public HexBinaryValue Password { get; set; }
    /// <summary>
    /// <para> Cryptographic Algorithm Name.</para>
    /// <para>Represents the following attribute in the schema: algorithmName </para>
    /// </summary>
    [SchemaAttr(0, "algorithmName", 1)]
    public StringValue AlgorithmName { get; set; }
    /// <summary>
    /// <para> Password Hash Value.</para>
    /// <para>Represents the following attribute in the schema: hashValue </para>
    /// </summary>
    [SchemaAttr(0, "hashValue", 2)]
    public Base64BinaryValue HashValue { get; set; }
    /// <summary>
    /// <para> Salt Value for Password Verifier.</para>
    /// <para>Represents the following attribute in the schema: saltValue </para>
    /// </summary>
    [SchemaAttr(0, "saltValue", 3)]
    public Base64BinaryValue SaltValue { get; set; }
    /// <summary>
    /// <para> Iterations to Run Hashing Algorithm.</para>
    /// <para>Represents the following attribute in the schema: spinCount </para>
    /// </summary>
    [SchemaAttr(0, "spinCount", 4)]
    public UInt32Value SpinCount { get; set; }
    /// <summary>
    /// <para> Contents.</para>
    /// <para>Represents the following attribute in the schema: content </para>
    /// </summary>
    [SchemaAttr(0, "content", 5)]
    public BooleanValue Content { get; set; }
    /// <summary>
    /// <para> Objects Locked.</para>
    /// <para>Represents the following attribute in the schema: objects </para>
    /// </summary>
    [SchemaAttr(0, "objects", 6)]
    public BooleanValue Objects { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartSheetProtection class.
    /// </summary>
    public ChartSheetProtection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartSheetProtection>(deep);

}
/// <summary>
/// <para>Custom Chart Sheet Views.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customSheetViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomChartsheetView &lt;x:customSheetView></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomChartsheetView))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customSheetViews")]
public partial class CustomChartsheetViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11391;
    /// <inheritdoc/>
    public override string LocalName => "customSheetViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomChartsheetViews class.
    /// </summary>
    public CustomChartsheetViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomChartsheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomChartsheetViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomChartsheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomChartsheetViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomChartsheetViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomChartsheetViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomChartsheetViews>(deep);

}
/// <summary>
/// <para>Drawing.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:drawing.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "drawing")]
public partial class Drawing : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11392;
    /// <inheritdoc/>
    public override string LocalName => "drawing";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Relationship id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the Drawing class.
    /// </summary>
    public Drawing():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Drawing>(deep);

}
/// <summary>
/// <para>Defines the LegacyDrawing Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:legacyDrawing.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "legacyDrawing")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LegacyDrawing : LegacyDrawingType
{
    internal const int ElementTypeIdConst = 11393;
    /// <inheritdoc/>
    public override string LocalName => "legacyDrawing";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the LegacyDrawing class.
    /// </summary>
    public LegacyDrawing():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LegacyDrawing>(deep);

}
/// <summary>
/// <para>Legacy Drawing Reference in  Header Footer.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:legacyDrawingHF.</para>
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
[SchemaAttr(22, "legacyDrawingHF")]
[OfficeAvailability(FileFormatVersions.Office2007)]
public partial class LegacyDrawingHeaderFooter : LegacyDrawingType
{
    internal const int ElementTypeIdConst = 11394;
    /// <inheritdoc/>
    public override string LocalName => "legacyDrawingHF";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    /// <summary>
    /// Initializes a new instance of the LegacyDrawingHeaderFooter class.
    /// </summary>
    public LegacyDrawingHeaderFooter():base(){}
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<LegacyDrawingHeaderFooter>(deep);

}
/// <summary>
/// Defines the LegacyDrawingType class.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public abstract partial class LegacyDrawingType : OpenXmlLeafElement
{
        
        /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    
    
    
    /// <summary>
    /// Initializes a new instance of the LegacyDrawingType class.
    /// </summary>
    protected LegacyDrawingType(){}
    
    
    
}
/// <summary>
/// <para>Defines the DrawingHeaderFooter Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:drawingHF.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "drawingHF")]
public partial class DrawingHeaderFooter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11395;
    /// <inheritdoc/>
    public override string LocalName => "drawingHF";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }
    /// <summary>
    /// <para> lho.</para>
    /// <para>Represents the following attribute in the schema: lho </para>
    /// </summary>
    [SchemaAttr(0, "lho", 1)]
    public UInt32Value Lho { get; set; }
    /// <summary>
    /// <para> lhe.</para>
    /// <para>Represents the following attribute in the schema: lhe </para>
    /// </summary>
    [SchemaAttr(0, "lhe", 2)]
    public UInt32Value Lhe { get; set; }
    /// <summary>
    /// <para> lhf.</para>
    /// <para>Represents the following attribute in the schema: lhf </para>
    /// </summary>
    [SchemaAttr(0, "lhf", 3)]
    public UInt32Value Lhf { get; set; }
    /// <summary>
    /// <para> cho.</para>
    /// <para>Represents the following attribute in the schema: cho </para>
    /// </summary>
    [SchemaAttr(0, "cho", 4)]
    public UInt32Value Cho { get; set; }
    /// <summary>
    /// <para> che.</para>
    /// <para>Represents the following attribute in the schema: che </para>
    /// </summary>
    [SchemaAttr(0, "che", 5)]
    public UInt32Value Che { get; set; }
    /// <summary>
    /// <para> chf.</para>
    /// <para>Represents the following attribute in the schema: chf </para>
    /// </summary>
    [SchemaAttr(0, "chf", 6)]
    public UInt32Value Chf { get; set; }
    /// <summary>
    /// <para> rho.</para>
    /// <para>Represents the following attribute in the schema: rho </para>
    /// </summary>
    [SchemaAttr(0, "rho", 7)]
    public UInt32Value Rho { get; set; }
    /// <summary>
    /// <para> rhe.</para>
    /// <para>Represents the following attribute in the schema: rhe </para>
    /// </summary>
    [SchemaAttr(0, "rhe", 8)]
    public UInt32Value Rhe { get; set; }
    /// <summary>
    /// <para> rhf.</para>
    /// <para>Represents the following attribute in the schema: rhf </para>
    /// </summary>
    [SchemaAttr(0, "rhf", 9)]
    public UInt32Value Rhf { get; set; }
    /// <summary>
    /// <para> lfo.</para>
    /// <para>Represents the following attribute in the schema: lfo </para>
    /// </summary>
    [SchemaAttr(0, "lfo", 10)]
    public UInt32Value Lfo { get; set; }
    /// <summary>
    /// <para> lfe.</para>
    /// <para>Represents the following attribute in the schema: lfe </para>
    /// </summary>
    [SchemaAttr(0, "lfe", 11)]
    public UInt32Value Lfe { get; set; }
    /// <summary>
    /// <para> lff.</para>
    /// <para>Represents the following attribute in the schema: lff </para>
    /// </summary>
    [SchemaAttr(0, "lff", 12)]
    public UInt32Value Lff { get; set; }
    /// <summary>
    /// <para> cfo.</para>
    /// <para>Represents the following attribute in the schema: cfo </para>
    /// </summary>
    [SchemaAttr(0, "cfo", 13)]
    public UInt32Value Cfo { get; set; }
    /// <summary>
    /// <para> cfe.</para>
    /// <para>Represents the following attribute in the schema: cfe </para>
    /// </summary>
    [SchemaAttr(0, "cfe", 14)]
    public UInt32Value Cfe { get; set; }
    /// <summary>
    /// <para> cff.</para>
    /// <para>Represents the following attribute in the schema: cff </para>
    /// </summary>
    [SchemaAttr(0, "cff", 15)]
    public UInt32Value Cff { get; set; }
    /// <summary>
    /// <para> rfo.</para>
    /// <para>Represents the following attribute in the schema: rfo </para>
    /// </summary>
    [SchemaAttr(0, "rfo", 16)]
    public UInt32Value Rfo { get; set; }
    /// <summary>
    /// <para> rfe.</para>
    /// <para>Represents the following attribute in the schema: rfe </para>
    /// </summary>
    [SchemaAttr(0, "rfe", 17)]
    public UInt32Value Rfe { get; set; }
    /// <summary>
    /// <para> rff.</para>
    /// <para>Represents the following attribute in the schema: rff </para>
    /// </summary>
    [SchemaAttr(0, "rff", 18)]
    public UInt32Value Rff { get; set; }

    /// <summary>
    /// Initializes a new instance of the DrawingHeaderFooter class.
    /// </summary>
    public DrawingHeaderFooter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingHeaderFooter>(deep);

}
/// <summary>
/// <para>Defines the Picture Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:picture.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "picture")]
public partial class Picture : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11396;
    /// <inheritdoc/>
    public override string LocalName => "picture";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 0)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the Picture class.
    /// </summary>
    public Picture():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);

}
/// <summary>
/// <para>Defines the WebPublishItems Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPublishItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WebPublishItem &lt;x:webPublishItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WebPublishItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPublishItems")]
public partial class WebPublishItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11397;
    /// <inheritdoc/>
    public override string LocalName => "webPublishItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Web Publishing Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebPublishItems class.
    /// </summary>
    public WebPublishItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WebPublishItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebPublishItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WebPublishItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebPublishItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WebPublishItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WebPublishItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPublishItems>(deep);

}
/// <summary>
/// <para>Color Scale.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colorScale.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormatValueObject &lt;x:cfvo></description></item>
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormatValueObject))]
    [ChildElementInfo(typeof(Color))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colorScale")]
public partial class ColorScale : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11398;
    /// <inheritdoc/>
    public override string LocalName => "colorScale";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ColorScale class.
    /// </summary>
    public ColorScale():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColorScale class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorScale(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorScale class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColorScale(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColorScale class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColorScale(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorScale>(deep);

}
/// <summary>
/// <para>Data Bar.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataBar.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormatValueObject &lt;x:cfvo></description></item>
///<item><description>Color &lt;x:color></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormatValueObject))]
    [ChildElementInfo(typeof(Color))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataBar")]
public partial class DataBar : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11399;
    /// <inheritdoc/>
    public override string LocalName => "dataBar";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Minimum Length.</para>
    /// <para>Represents the following attribute in the schema: minLength </para>
    /// </summary>
    [SchemaAttr(0, "minLength", 0)]
    public UInt32Value MinLength { get; set; }
    /// <summary>
    /// <para> Maximum Length.</para>
    /// <para>Represents the following attribute in the schema: maxLength </para>
    /// </summary>
    [SchemaAttr(0, "maxLength", 1)]
    public UInt32Value MaxLength { get; set; }
    /// <summary>
    /// <para> Show Values.</para>
    /// <para>Represents the following attribute in the schema: showValue </para>
    /// </summary>
    [SchemaAttr(0, "showValue", 2)]
    public BooleanValue ShowValue { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataBar class.
    /// </summary>
    public DataBar():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataBar class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataBar(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataBar class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataBar(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataBar class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataBar(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataBar>(deep);

}
/// <summary>
/// <para>Icon Set.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:iconSet.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormatValueObject &lt;x:cfvo></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormatValueObject))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "iconSet")]
public partial class IconSet : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11400;
    /// <inheritdoc/>
    public override string LocalName => "iconSet";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Icon Set.</para>
    /// <para>Represents the following attribute in the schema: iconSet </para>
    /// </summary>
    [SchemaAttr(0, "iconSet", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.IconSetValues> IconSetValue { get; set; }
    /// <summary>
    /// <para> Show Value.</para>
    /// <para>Represents the following attribute in the schema: showValue </para>
    /// </summary>
    [SchemaAttr(0, "showValue", 1)]
    public BooleanValue ShowValue { get; set; }
    /// <summary>
    /// <para> Percent.</para>
    /// <para>Represents the following attribute in the schema: percent </para>
    /// </summary>
    [SchemaAttr(0, "percent", 2)]
    public BooleanValue Percent { get; set; }
    /// <summary>
    /// <para> Reverse Icons.</para>
    /// <para>Represents the following attribute in the schema: reverse </para>
    /// </summary>
    [SchemaAttr(0, "reverse", 3)]
    public BooleanValue Reverse { get; set; }

    /// <summary>
    /// Initializes a new instance of the IconSet class.
    /// </summary>
    public IconSet():base(){}
    
        /// <summary>
    ///Initializes a new instance of the IconSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IconSet(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the IconSet class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IconSet(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the IconSet class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public IconSet(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<IconSet>(deep);

}
/// <summary>
/// <para>Defines the ConditionalFormattingRuleExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormattingRuleExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormattingRuleExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class ConditionalFormattingRuleExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11401;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtensionList class.
    /// </summary>
    public ConditionalFormattingRuleExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormattingRuleExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRuleExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormattingRuleExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormattingRuleExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormattingRuleExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormattingRuleExtensionList>(deep);

}
/// <summary>
/// <para>Data Consolidation References.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataRefs.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataReference &lt;x:dataRef></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataReference))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataRefs")]
public partial class DataReferences : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11402;
    /// <inheritdoc/>
    public override string LocalName => "dataRefs";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Data Consolidation Reference Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataReferences class.
    /// </summary>
    public DataReferences():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataReferences(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataReferences(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataReferences class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataReferences(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataReferences>(deep);

}
/// <summary>
/// <para>Sheet Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TabColor &lt;x:tabColor></description></item>
///<item><description>OutlineProperties &lt;x:outlinePr></description></item>
///<item><description>PageSetupProperties &lt;x:pageSetUpPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TabColor))]
    [ChildElementInfo(typeof(OutlineProperties))]
    [ChildElementInfo(typeof(PageSetupProperties))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetPr")]
public partial class SheetProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11404;
    /// <inheritdoc/>
    public override string LocalName => "sheetPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Synch Horizontal.</para>
    /// <para>Represents the following attribute in the schema: syncHorizontal </para>
    /// </summary>
    [SchemaAttr(0, "syncHorizontal", 0)]
    public BooleanValue SyncHorizontal { get; set; }
    /// <summary>
    /// <para> Synch Vertical.</para>
    /// <para>Represents the following attribute in the schema: syncVertical </para>
    /// </summary>
    [SchemaAttr(0, "syncVertical", 1)]
    public BooleanValue SyncVertical { get; set; }
    /// <summary>
    /// <para> Synch Reference.</para>
    /// <para>Represents the following attribute in the schema: syncRef </para>
    /// </summary>
    [SchemaAttr(0, "syncRef", 2)]
    public StringValue SyncReference { get; set; }
    /// <summary>
    /// <para> Transition Formula Evaluation.</para>
    /// <para>Represents the following attribute in the schema: transitionEvaluation </para>
    /// </summary>
    [SchemaAttr(0, "transitionEvaluation", 3)]
    public BooleanValue TransitionEvaluation { get; set; }
    /// <summary>
    /// <para> Transition Formula Entry.</para>
    /// <para>Represents the following attribute in the schema: transitionEntry </para>
    /// </summary>
    [SchemaAttr(0, "transitionEntry", 4)]
    public BooleanValue TransitionEntry { get; set; }
    /// <summary>
    /// <para> Published.</para>
    /// <para>Represents the following attribute in the schema: published </para>
    /// </summary>
    [SchemaAttr(0, "published", 5)]
    public BooleanValue Published { get; set; }
    /// <summary>
    /// <para> Code Name.</para>
    /// <para>Represents the following attribute in the schema: codeName </para>
    /// </summary>
    [SchemaAttr(0, "codeName", 6)]
    public StringValue CodeName { get; set; }
    /// <summary>
    /// <para> Filter Mode.</para>
    /// <para>Represents the following attribute in the schema: filterMode </para>
    /// </summary>
    [SchemaAttr(0, "filterMode", 7)]
    public BooleanValue FilterMode { get; set; }
    /// <summary>
    /// <para> Enable Conditional Formatting Calculations.</para>
    /// <para>Represents the following attribute in the schema: enableFormatConditionsCalculation </para>
    /// </summary>
    [SchemaAttr(0, "enableFormatConditionsCalculation", 8)]
    public BooleanValue EnableFormatConditionsCalculation { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetProperties class.
    /// </summary>
    public SheetProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "tabColor","outlinePr","pageSetUpPr" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Sheet Tab Color.</para>
    /// <para> Represents the following element tag in the schema: x:tabColor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TabColor TabColor
    {
        get => GetElement<TabColor>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Outline Properties.</para>
    /// <para> Represents the following element tag in the schema: x:outlinePr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public OutlineProperties OutlineProperties
    {
        get => GetElement<OutlineProperties>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Page Setup Properties.</para>
    /// <para> Represents the following element tag in the schema: x:pageSetUpPr </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PageSetupProperties PageSetupProperties
    {
        get => GetElement<PageSetupProperties>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetProperties>(deep);

}
/// <summary>
/// <para>Dialog Sheet Views.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>SheetView &lt;x:sheetView></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(SheetView))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetViews")]
public partial class SheetViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11405;
    /// <inheritdoc/>
    public override string LocalName => "sheetViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the SheetViews class.
    /// </summary>
    public SheetViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetViews>(deep);

}
/// <summary>
/// <para>Dialog Sheet Format Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetFormatPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetFormatPr")]
public partial class SheetFormatProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11406;
    /// <inheritdoc/>
    public override string LocalName => "sheetFormatPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Base Column Width.</para>
    /// <para>Represents the following attribute in the schema: baseColWidth </para>
    /// </summary>
    [SchemaAttr(0, "baseColWidth", 0)]
    public UInt32Value BaseColumnWidth { get; set; }
    /// <summary>
    /// <para> Default Column Width.</para>
    /// <para>Represents the following attribute in the schema: defaultColWidth </para>
    /// </summary>
    [SchemaAttr(0, "defaultColWidth", 1)]
    public DoubleValue DefaultColumnWidth { get; set; }
    /// <summary>
    /// <para> Default Row Height.</para>
    /// <para>Represents the following attribute in the schema: defaultRowHeight </para>
    /// </summary>
    [SchemaAttr(0, "defaultRowHeight", 2)]
    public DoubleValue DefaultRowHeight { get; set; }
    /// <summary>
    /// <para> Custom Height.</para>
    /// <para>Represents the following attribute in the schema: customHeight </para>
    /// </summary>
    [SchemaAttr(0, "customHeight", 3)]
    public BooleanValue CustomHeight { get; set; }
    /// <summary>
    /// <para> Hidden By Default.</para>
    /// <para>Represents the following attribute in the schema: zeroHeight </para>
    /// </summary>
    [SchemaAttr(0, "zeroHeight", 4)]
    public BooleanValue ZeroHeight { get; set; }
    /// <summary>
    /// <para> Thick Top Border.</para>
    /// <para>Represents the following attribute in the schema: thickTop </para>
    /// </summary>
    [SchemaAttr(0, "thickTop", 5)]
    public BooleanValue ThickTop { get; set; }
    /// <summary>
    /// <para> Thick Bottom Border.</para>
    /// <para>Represents the following attribute in the schema: thickBottom </para>
    /// </summary>
    [SchemaAttr(0, "thickBottom", 6)]
    public BooleanValue ThickBottom { get; set; }
    /// <summary>
    /// <para> Maximum Outline Row.</para>
    /// <para>Represents the following attribute in the schema: outlineLevelRow </para>
    /// </summary>
    [SchemaAttr(0, "outlineLevelRow", 7)]
    public ByteValue OutlineLevelRow { get; set; }
    /// <summary>
    /// <para> Column Outline Level.</para>
    /// <para>Represents the following attribute in the schema: outlineLevelCol </para>
    /// </summary>
    [SchemaAttr(0, "outlineLevelCol", 8)]
    public ByteValue OutlineLevelColumn { get; set; }
    /// <summary>
    /// <para> dyDescent.</para>
    /// <para>Represents the following attribute in the schema: x14ac:dyDescent </para>
    /// </summary>
///<remark> xmlns:x14ac=http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac
///</remark>
    [SchemaAttr(55, "dyDescent", 9)]
    public DoubleValue DyDescent { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetFormatProperties class.
    /// </summary>
    public SheetFormatProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetFormatProperties>(deep);

}
/// <summary>
/// <para>Sheet Protection.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetProtection.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetProtection")]
public partial class SheetProtection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11407;
    /// <inheritdoc/>
    public override string LocalName => "sheetProtection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Password.</para>
    /// <para>Represents the following attribute in the schema: password </para>
    /// </summary>
    [SchemaAttr(0, "password", 0)]
    public HexBinaryValue Password { get; set; }
    /// <summary>
    /// <para> Cryptographic Algorithm Name.</para>
    /// <para>Represents the following attribute in the schema: algorithmName </para>
    /// </summary>
    [SchemaAttr(0, "algorithmName", 1)]
    public StringValue AlgorithmName { get; set; }
    /// <summary>
    /// <para> Password Hash Value.</para>
    /// <para>Represents the following attribute in the schema: hashValue </para>
    /// </summary>
    [SchemaAttr(0, "hashValue", 2)]
    public Base64BinaryValue HashValue { get; set; }
    /// <summary>
    /// <para> Salt Value for Password Verifier.</para>
    /// <para>Represents the following attribute in the schema: saltValue </para>
    /// </summary>
    [SchemaAttr(0, "saltValue", 3)]
    public Base64BinaryValue SaltValue { get; set; }
    /// <summary>
    /// <para> Iterations to Run Hashing Algorithm.</para>
    /// <para>Represents the following attribute in the schema: spinCount </para>
    /// </summary>
    [SchemaAttr(0, "spinCount", 4)]
    public UInt32Value SpinCount { get; set; }
    /// <summary>
    /// <para> Sheet Locked.</para>
    /// <para>Represents the following attribute in the schema: sheet </para>
    /// </summary>
    [SchemaAttr(0, "sheet", 5)]
    public BooleanValue Sheet { get; set; }
    /// <summary>
    /// <para> Objects Locked.</para>
    /// <para>Represents the following attribute in the schema: objects </para>
    /// </summary>
    [SchemaAttr(0, "objects", 6)]
    public BooleanValue Objects { get; set; }
    /// <summary>
    /// <para> Scenarios Locked.</para>
    /// <para>Represents the following attribute in the schema: scenarios </para>
    /// </summary>
    [SchemaAttr(0, "scenarios", 7)]
    public BooleanValue Scenarios { get; set; }
    /// <summary>
    /// <para> Format Cells Locked.</para>
    /// <para>Represents the following attribute in the schema: formatCells </para>
    /// </summary>
    [SchemaAttr(0, "formatCells", 8)]
    public BooleanValue FormatCells { get; set; }
    /// <summary>
    /// <para> Format Columns Locked.</para>
    /// <para>Represents the following attribute in the schema: formatColumns </para>
    /// </summary>
    [SchemaAttr(0, "formatColumns", 9)]
    public BooleanValue FormatColumns { get; set; }
    /// <summary>
    /// <para> Format Rows Locked.</para>
    /// <para>Represents the following attribute in the schema: formatRows </para>
    /// </summary>
    [SchemaAttr(0, "formatRows", 10)]
    public BooleanValue FormatRows { get; set; }
    /// <summary>
    /// <para> Insert Columns Locked.</para>
    /// <para>Represents the following attribute in the schema: insertColumns </para>
    /// </summary>
    [SchemaAttr(0, "insertColumns", 11)]
    public BooleanValue InsertColumns { get; set; }
    /// <summary>
    /// <para> Insert Rows Locked.</para>
    /// <para>Represents the following attribute in the schema: insertRows </para>
    /// </summary>
    [SchemaAttr(0, "insertRows", 12)]
    public BooleanValue InsertRows { get; set; }
    /// <summary>
    /// <para> Insert Hyperlinks Locked.</para>
    /// <para>Represents the following attribute in the schema: insertHyperlinks </para>
    /// </summary>
    [SchemaAttr(0, "insertHyperlinks", 13)]
    public BooleanValue InsertHyperlinks { get; set; }
    /// <summary>
    /// <para> Delete Columns Locked.</para>
    /// <para>Represents the following attribute in the schema: deleteColumns </para>
    /// </summary>
    [SchemaAttr(0, "deleteColumns", 14)]
    public BooleanValue DeleteColumns { get; set; }
    /// <summary>
    /// <para> Delete Rows Locked.</para>
    /// <para>Represents the following attribute in the schema: deleteRows </para>
    /// </summary>
    [SchemaAttr(0, "deleteRows", 15)]
    public BooleanValue DeleteRows { get; set; }
    /// <summary>
    /// <para> Select Locked Cells Locked.</para>
    /// <para>Represents the following attribute in the schema: selectLockedCells </para>
    /// </summary>
    [SchemaAttr(0, "selectLockedCells", 16)]
    public BooleanValue SelectLockedCells { get; set; }
    /// <summary>
    /// <para> Sort Locked.</para>
    /// <para>Represents the following attribute in the schema: sort </para>
    /// </summary>
    [SchemaAttr(0, "sort", 17)]
    public BooleanValue Sort { get; set; }
    /// <summary>
    /// <para> AutoFilter Locked.</para>
    /// <para>Represents the following attribute in the schema: autoFilter </para>
    /// </summary>
    [SchemaAttr(0, "autoFilter", 18)]
    public BooleanValue AutoFilter { get; set; }
    /// <summary>
    /// <para> Pivot Tables Locked.</para>
    /// <para>Represents the following attribute in the schema: pivotTables </para>
    /// </summary>
    [SchemaAttr(0, "pivotTables", 19)]
    public BooleanValue PivotTables { get; set; }
    /// <summary>
    /// <para> Select Unlocked Cells Locked.</para>
    /// <para>Represents the following attribute in the schema: selectUnlockedCells </para>
    /// </summary>
    [SchemaAttr(0, "selectUnlockedCells", 20)]
    public BooleanValue SelectUnlockedCells { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetProtection class.
    /// </summary>
    public SheetProtection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetProtection>(deep);

}
/// <summary>
/// <para>Custom Sheet Views.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customSheetViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomSheetView &lt;x:customSheetView></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomSheetView))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customSheetViews")]
public partial class CustomSheetViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11408;
    /// <inheritdoc/>
    public override string LocalName => "customSheetViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomSheetViews class.
    /// </summary>
    public CustomSheetViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomSheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomSheetViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomSheetViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomSheetViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomSheetViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomSheetViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomSheetViews>(deep);

}
/// <summary>
/// <para>Defines the OleObjects Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleObjects.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>OleObject &lt;x:oleObject></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(OleObject))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleObjects")]
public partial class OleObjects : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11409;
    /// <inheritdoc/>
    public override string LocalName => "oleObjects";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the OleObjects class.
    /// </summary>
    public OleObjects():base(){}
    
        /// <summary>
    ///Initializes a new instance of the OleObjects class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleObjects(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the OleObjects class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public OleObjects(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the OleObjects class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public OleObjects(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleObjects>(deep);

}
/// <summary>
/// <para>Defines the Controls Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:controls.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Control &lt;x:control></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Control))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "controls")]
public partial class Controls : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11410;
    /// <inheritdoc/>
    public override string LocalName => "controls";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Controls class.
    /// </summary>
    public Controls():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Controls class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Controls(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Controls class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Controls(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Controls class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Controls(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Controls>(deep);

}
/// <summary>
/// <para>Macro Sheet Dimensions.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dimension.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dimension")]
public partial class SheetDimension : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11411;
    /// <inheritdoc/>
    public override string LocalName => "dimension";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetDimension class.
    /// </summary>
    public SheetDimension():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetDimension>(deep);

}
/// <summary>
/// <para>Column Information.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cols.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Column &lt;x:col></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Column))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cols")]
public partial class Columns : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11412;
    /// <inheritdoc/>
    public override string LocalName => "cols";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Columns class.
    /// </summary>
    public Columns():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Columns class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Columns(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Columns class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Columns(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Columns class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Columns(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Columns>(deep);

}
/// <summary>
/// <para>Sheet Data.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetData.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Row &lt;x:row></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Row))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetData")]
public partial class SheetData : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11413;
    /// <inheritdoc/>
    public override string LocalName => "sheetData";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the SheetData class.
    /// </summary>
    public SheetData():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SheetData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetData(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetData class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SheetData(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SheetData class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SheetData(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetData>(deep);

}
/// <summary>
/// <para>Data Consolidation.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataConsolidate.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataReferences &lt;x:dataRefs></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataReferences))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataConsolidate")]
public partial class DataConsolidate : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11414;
    /// <inheritdoc/>
    public override string LocalName => "dataConsolidate";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Function Index.</para>
    /// <para>Represents the following attribute in the schema: function </para>
    /// </summary>
    [SchemaAttr(0, "function", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DataConsolidateFunctionValues> Function { get; set; }
    /// <summary>
    /// <para> Use Left Column Labels.</para>
    /// <para>Represents the following attribute in the schema: leftLabels </para>
    /// </summary>
    [SchemaAttr(0, "leftLabels", 1)]
    public BooleanValue LeftLabels { get; set; }
    /// <summary>
    /// <para> startLabels.</para>
    /// <para>Represents the following attribute in the schema: startLabels </para>
    /// </summary>
    [SchemaAttr(0, "startLabels", 2)]
    public BooleanValue StartLabels { get; set; }
    /// <summary>
    /// <para> Labels In Top Row.</para>
    /// <para>Represents the following attribute in the schema: topLabels </para>
    /// </summary>
    [SchemaAttr(0, "topLabels", 3)]
    public BooleanValue TopLabels { get; set; }
    /// <summary>
    /// <para> Link.</para>
    /// <para>Represents the following attribute in the schema: link </para>
    /// </summary>
    [SchemaAttr(0, "link", 4)]
    public BooleanValue Link { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataConsolidate class.
    /// </summary>
    public DataConsolidate():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataConsolidate class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataConsolidate(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataConsolidate class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataConsolidate(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataConsolidate class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataConsolidate(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "dataRefs" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Data Consolidation References.</para>
    /// <para> Represents the following element tag in the schema: x:dataRefs </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public DataReferences DataReferences
    {
        get => GetElement<DataReferences>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataConsolidate>(deep);

}
/// <summary>
/// <para>Conditional Formatting.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:conditionalFormatting.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormattingRule &lt;x:cfRule></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormattingRule))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "conditionalFormatting")]
public partial class ConditionalFormatting : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11415;
    /// <inheritdoc/>
    public override string LocalName => "conditionalFormatting";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> PivotTable Conditional Formatting.</para>
    /// <para>Represents the following attribute in the schema: pivot </para>
    /// </summary>
    [SchemaAttr(0, "pivot", 0)]
    public BooleanValue Pivot { get; set; }
    /// <summary>
    /// <para> Sequence of References.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 1)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormatting class.
    /// </summary>
    public ConditionalFormatting():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormatting class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormatting(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormatting class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormatting(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormatting class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormatting(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormatting>(deep);

}
/// <summary>
/// <para>Custom Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customProperties.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomProperty &lt;x:customPr></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomProperty))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customProperties")]
public partial class CustomProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11416;
    /// <inheritdoc/>
    public override string LocalName => "customProperties";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomProperties class.
    /// </summary>
    public CustomProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomProperties>(deep);

}
/// <summary>
/// <para>OLAP Member Properties.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mps.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MemberProperty &lt;x:mp></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MemberProperty))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mps")]
public partial class MemberProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11417;
    /// <inheritdoc/>
    public override string LocalName => "mps";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLAP Member Properties Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MemberProperties class.
    /// </summary>
    public MemberProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MemberProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MemberProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MemberProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MemberProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MemberProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MemberProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MemberProperties>(deep);

}
/// <summary>
/// <para>Members.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:members.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Member &lt;x:member></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Member))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "members")]
public partial class Members : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11418;
    /// <inheritdoc/>
    public override string LocalName => "members";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Hierarchy Level.</para>
    /// <para>Represents the following attribute in the schema: level </para>
    /// </summary>
    [SchemaAttr(0, "level", 1)]
    public UInt32Value Level { get; set; }

    /// <summary>
    /// Initializes a new instance of the Members class.
    /// </summary>
    public Members():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Members class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Members(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Members class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Members(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Members class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Members(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Members>(deep);

}
/// <summary>
/// <para>Future Feature Data Storage Area.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotHierarchyExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotHierarchyExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class PivotHierarchyExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11419;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtensionList class.
    /// </summary>
    public PivotHierarchyExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotHierarchyExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchyExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchyExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchyExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotHierarchyExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotHierarchyExtensionList>(deep);

}
/// <summary>
/// <para>Field Items.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:items.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Item &lt;x:item></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Item))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "items")]
public partial class Items : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11420;
    /// <inheritdoc/>
    public override string LocalName => "items";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Items class.
    /// </summary>
    public Items():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Items class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Items(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Items class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Items(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Items class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Items(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Items>(deep);

}
/// <summary>
/// <para>AutoSort Scope.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:autoSortScope.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotArea &lt;x:pivotArea></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotArea))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "autoSortScope")]
public partial class AutoSortScope : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11421;
    /// <inheritdoc/>
    public override string LocalName => "autoSortScope";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the AutoSortScope class.
    /// </summary>
    public AutoSortScope():base(){}
    
        /// <summary>
    ///Initializes a new instance of the AutoSortScope class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AutoSortScope(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the AutoSortScope class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public AutoSortScope(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the AutoSortScope class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public AutoSortScope(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pivotArea" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Auto Sort Scope.</para>
    /// <para> Represents the following element tag in the schema: x:pivotArea </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public PivotArea PivotArea
    {
        get => GetElement<PivotArea>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSortScope>(deep);

}
/// <summary>
/// <para>Future Feature Data Storage Area.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotFieldExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotFieldExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class PivotFieldExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11422;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotFieldExtensionList class.
    /// </summary>
    public PivotFieldExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFieldExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFieldExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFieldExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFieldExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFieldExtensionList>(deep);

}
/// <summary>
/// <para>Defines the WorksheetSource Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:worksheetSource.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "worksheetSource")]
public partial class WorksheetSource : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11423;
    /// <inheritdoc/>
    public override string LocalName => "worksheetSource";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Named Range.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 1)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Sheet Name.</para>
    /// <para>Represents the following attribute in the schema: sheet </para>
    /// </summary>
    [SchemaAttr(0, "sheet", 2)]
    public StringValue Sheet { get; set; }
    /// <summary>
    /// <para> Relationship Id.</para>
    /// <para>Represents the following attribute in the schema: r:id </para>
    /// </summary>
///<remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
///</remark>
    [SchemaAttr(19, "id", 3)]
    public StringValue Id { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorksheetSource class.
    /// </summary>
    public WorksheetSource():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorksheetSource>(deep);

}
/// <summary>
/// <para>Defines the Consolidation Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:consolidation.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Pages &lt;x:pages></description></item>
///<item><description>RangeSets &lt;x:rangeSets></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Pages))]
    [ChildElementInfo(typeof(RangeSets))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "consolidation")]
public partial class Consolidation : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11424;
    /// <inheritdoc/>
    public override string LocalName => "consolidation";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Auto Page.</para>
    /// <para>Represents the following attribute in the schema: autoPage </para>
    /// </summary>
    [SchemaAttr(0, "autoPage", 0)]
    public BooleanValue AutoPage { get; set; }

    /// <summary>
    /// Initializes a new instance of the Consolidation class.
    /// </summary>
    public Consolidation():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Consolidation class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Consolidation(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Consolidation class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Consolidation(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Consolidation class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Consolidation(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "pages","rangeSets" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Page Item Values.</para>
    /// <para> Represents the following element tag in the schema: x:pages </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Pages Pages
    {
        get => GetElement<Pages>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Range Sets.</para>
    /// <para> Represents the following element tag in the schema: x:rangeSets </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public RangeSets RangeSets
    {
        get => GetElement<RangeSets>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Consolidation>(deep);

}
/// <summary>
/// <para>Defines the CacheSourceExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheSourceExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CacheSourceExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class CacheSourceExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11425;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CacheSourceExtensionList class.
    /// </summary>
    public CacheSourceExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheSourceExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSourceExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSourceExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSourceExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSourceExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheSourceExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheSourceExtensionList>(deep);

}
/// <summary>
/// <para>Defines the CommentProperties Class.</para>
/// <para>This class is available in Office 2010 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:commentPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ObjectAnchor &lt;x:anchor></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ObjectAnchor), FileFormatVersions.Office2010)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2010)]
[SchemaAttr(22, "commentPr")]
public partial class CommentProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11427;
    /// <inheritdoc/>
    public override string LocalName => "commentPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2010;

    
    
        /// <summary>
    /// <para> locked.</para>
    /// <para>Represents the following attribute in the schema: locked </para>
    /// </summary>
    [SchemaAttr(0, "locked", 0)]
    public BooleanValue Locked { get; set; }
    /// <summary>
    /// <para> defaultSize.</para>
    /// <para>Represents the following attribute in the schema: defaultSize </para>
    /// </summary>
    [SchemaAttr(0, "defaultSize", 1)]
    public BooleanValue DefaultSize { get; set; }
    /// <summary>
    /// <para> print.</para>
    /// <para>Represents the following attribute in the schema: print </para>
    /// </summary>
    [SchemaAttr(0, "print", 2)]
    public BooleanValue Print { get; set; }
    /// <summary>
    /// <para> disabled.</para>
    /// <para>Represents the following attribute in the schema: disabled </para>
    /// </summary>
    [SchemaAttr(0, "disabled", 3)]
    public BooleanValue Disabled { get; set; }
    /// <summary>
    /// <para> uiObject.</para>
    /// <para>Represents the following attribute in the schema: uiObject </para>
    /// </summary>
    [SchemaAttr(0, "uiObject", 4)]
    public BooleanValue UiObject { get; set; }
    /// <summary>
    /// <para> autoFill.</para>
    /// <para>Represents the following attribute in the schema: autoFill </para>
    /// </summary>
    [SchemaAttr(0, "autoFill", 5)]
    public BooleanValue AutoFill { get; set; }
    /// <summary>
    /// <para> autoLine.</para>
    /// <para>Represents the following attribute in the schema: autoLine </para>
    /// </summary>
    [SchemaAttr(0, "autoLine", 6)]
    public BooleanValue AutoLine { get; set; }
    /// <summary>
    /// <para> altText.</para>
    /// <para>Represents the following attribute in the schema: altText </para>
    /// </summary>
    [SchemaAttr(0, "altText", 7)]
    public StringValue AltText { get; set; }
    /// <summary>
    /// <para> textHAlign.</para>
    /// <para>Represents the following attribute in the schema: textHAlign </para>
    /// </summary>
    [SchemaAttr(0, "textHAlign", 8)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TextHorizontalAlignmentValues> TextHAlign { get; set; }
    /// <summary>
    /// <para> textVAlign.</para>
    /// <para>Represents the following attribute in the schema: textVAlign </para>
    /// </summary>
    [SchemaAttr(0, "textVAlign", 9)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TextVerticalAlignmentValues> TextVAlign { get; set; }
    /// <summary>
    /// <para> lockText.</para>
    /// <para>Represents the following attribute in the schema: lockText </para>
    /// </summary>
    [SchemaAttr(0, "lockText", 10)]
    public BooleanValue LockText { get; set; }
    /// <summary>
    /// <para> justLastX.</para>
    /// <para>Represents the following attribute in the schema: justLastX </para>
    /// </summary>
    [SchemaAttr(0, "justLastX", 11)]
    public BooleanValue JustLastX { get; set; }
    /// <summary>
    /// <para> autoScale.</para>
    /// <para>Represents the following attribute in the schema: autoScale </para>
    /// </summary>
    [SchemaAttr(0, "autoScale", 12)]
    public BooleanValue AutoScale { get; set; }
    /// <summary>
    /// <para> rowHidden.</para>
    /// <para>Represents the following attribute in the schema: rowHidden </para>
    /// </summary>
    [SchemaAttr(0, "rowHidden", 13)]
    public BooleanValue RowHidden { get; set; }
    /// <summary>
    /// <para> colHidden.</para>
    /// <para>Represents the following attribute in the schema: colHidden </para>
    /// </summary>
    [SchemaAttr(0, "colHidden", 14)]
    public BooleanValue ColHidden { get; set; }

    /// <summary>
    /// Initializes a new instance of the CommentProperties class.
    /// </summary>
    public CommentProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CommentProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CommentProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CommentProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CommentProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "anchor" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> ObjectAnchor.</para>
    /// <para> Represents the following element tag in the schema: x:anchor </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ObjectAnchor ObjectAnchor
    {
        get => GetElement<ObjectAnchor>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentProperties>(deep);

}
/// <summary>
/// <para>Defines the SortCondition Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sortCondition.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sortCondition")]
public partial class SortCondition : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11428;
    /// <inheritdoc/>
    public override string LocalName => "sortCondition";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Descending.</para>
    /// <para>Represents the following attribute in the schema: descending </para>
    /// </summary>
    [SchemaAttr(0, "descending", 0)]
    public BooleanValue Descending { get; set; }
    /// <summary>
    /// <para> Sort By.</para>
    /// <para>Represents the following attribute in the schema: sortBy </para>
    /// </summary>
    [SchemaAttr(0, "sortBy", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SortByValues> SortBy { get; set; }
    /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 2)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> Custom List.</para>
    /// <para>Represents the following attribute in the schema: customList </para>
    /// </summary>
    [SchemaAttr(0, "customList", 3)]
    public StringValue CustomList { get; set; }
    /// <summary>
    /// <para> Format Id.</para>
    /// <para>Represents the following attribute in the schema: dxfId </para>
    /// </summary>
    [SchemaAttr(0, "dxfId", 4)]
    public UInt32Value FormatId { get; set; }
    /// <summary>
    /// <para> Icon Set.</para>
    /// <para>Represents the following attribute in the schema: iconSet </para>
    /// </summary>
    [SchemaAttr(0, "iconSet", 5)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.IconSetValues> IconSet { get; set; }
    /// <summary>
    /// <para> Icon Id.</para>
    /// <para>Represents the following attribute in the schema: iconId </para>
    /// </summary>
    [SchemaAttr(0, "iconId", 6)]
    public UInt32Value IconId { get; set; }

    /// <summary>
    /// Initializes a new instance of the SortCondition class.
    /// </summary>
    public SortCondition():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SortCondition>(deep);

}
/// <summary>
/// <para>Filter.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:filter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "filter")]
public partial class Filter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11429;
    /// <inheritdoc/>
    public override string LocalName => "filter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Filter Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 0)]
    public StringValue Val { get; set; }

    /// <summary>
    /// Initializes a new instance of the Filter class.
    /// </summary>
    public Filter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Filter>(deep);

}
/// <summary>
/// <para>Date Grouping.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dateGroupItem.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dateGroupItem")]
public partial class DateGroupItem : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11430;
    /// <inheritdoc/>
    public override string LocalName => "dateGroupItem";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Year.</para>
    /// <para>Represents the following attribute in the schema: year </para>
    /// </summary>
    [SchemaAttr(0, "year", 0)]
    public UInt16Value Year { get; set; }
    /// <summary>
    /// <para> Month.</para>
    /// <para>Represents the following attribute in the schema: month </para>
    /// </summary>
    [SchemaAttr(0, "month", 1)]
    public UInt16Value Month { get; set; }
    /// <summary>
    /// <para> Day.</para>
    /// <para>Represents the following attribute in the schema: day </para>
    /// </summary>
    [SchemaAttr(0, "day", 2)]
    public UInt16Value Day { get; set; }
    /// <summary>
    /// <para> Hour.</para>
    /// <para>Represents the following attribute in the schema: hour </para>
    /// </summary>
    [SchemaAttr(0, "hour", 3)]
    public UInt16Value Hour { get; set; }
    /// <summary>
    /// <para> Minute.</para>
    /// <para>Represents the following attribute in the schema: minute </para>
    /// </summary>
    [SchemaAttr(0, "minute", 4)]
    public UInt16Value Minute { get; set; }
    /// <summary>
    /// <para> Second.</para>
    /// <para>Represents the following attribute in the schema: second </para>
    /// </summary>
    [SchemaAttr(0, "second", 5)]
    public UInt16Value Second { get; set; }
    /// <summary>
    /// <para> Date Time Grouping.</para>
    /// <para>Represents the following attribute in the schema: dateTimeGrouping </para>
    /// </summary>
    [SchemaAttr(0, "dateTimeGrouping", 6)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DateTimeGroupingValues> DateTimeGrouping { get; set; }

    /// <summary>
    /// Initializes a new instance of the DateGroupItem class.
    /// </summary>
    public DateGroupItem():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DateGroupItem>(deep);

}
/// <summary>
/// <para>Filter Criteria.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:filters.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.Filter &lt;x14:filter></description></item>
///<item><description>Filter &lt;x:filter></description></item>
///<item><description>DateGroupItem &lt;x:dateGroupItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.Filter), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(Filter))]
    [ChildElementInfo(typeof(DateGroupItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "filters")]
public partial class Filters : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11431;
    /// <inheritdoc/>
    public override string LocalName => "filters";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Filter by Blank.</para>
    /// <para>Represents the following attribute in the schema: blank </para>
    /// </summary>
    [SchemaAttr(0, "blank", 0)]
    public BooleanValue Blank { get; set; }
    /// <summary>
    /// <para> Calendar Type.</para>
    /// <para>Represents the following attribute in the schema: calendarType </para>
    /// </summary>
    [SchemaAttr(0, "calendarType", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CalendarValues> CalendarType { get; set; }

    /// <summary>
    /// Initializes a new instance of the Filters class.
    /// </summary>
    public Filters():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Filters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Filters(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Filters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Filters(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Filters class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Filters(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Filters>(deep);

}
/// <summary>
/// <para>Top 10.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:top10.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "top10")]
public partial class Top10 : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11432;
    /// <inheritdoc/>
    public override string LocalName => "top10";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Top.</para>
    /// <para>Represents the following attribute in the schema: top </para>
    /// </summary>
    [SchemaAttr(0, "top", 0)]
    public BooleanValue Top { get; set; }
    /// <summary>
    /// <para> Filter by Percent.</para>
    /// <para>Represents the following attribute in the schema: percent </para>
    /// </summary>
    [SchemaAttr(0, "percent", 1)]
    public BooleanValue Percent { get; set; }
    /// <summary>
    /// <para> Top or Bottom Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 2)]
    public DoubleValue Val { get; set; }
    /// <summary>
    /// <para> Filter Value.</para>
    /// <para>Represents the following attribute in the schema: filterVal </para>
    /// </summary>
    [SchemaAttr(0, "filterVal", 3)]
    public DoubleValue FilterValue { get; set; }

    /// <summary>
    /// Initializes a new instance of the Top10 class.
    /// </summary>
    public Top10():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Top10>(deep);

}
/// <summary>
/// <para>Custom Filters.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customFilters.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomFilter &lt;x:customFilter></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomFilter))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customFilters")]
public partial class CustomFilters : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11433;
    /// <inheritdoc/>
    public override string LocalName => "customFilters";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> And.</para>
    /// <para>Represents the following attribute in the schema: and </para>
    /// </summary>
    [SchemaAttr(0, "and", 0)]
    public BooleanValue And { get; set; }

    /// <summary>
    /// Initializes a new instance of the CustomFilters class.
    /// </summary>
    public CustomFilters():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomFilters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomFilters(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomFilters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomFilters(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomFilters class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomFilters(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomFilters>(deep);

}
/// <summary>
/// <para>Dynamic Filter.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dynamicFilter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dynamicFilter")]
public partial class DynamicFilter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11434;
    /// <inheritdoc/>
    public override string LocalName => "dynamicFilter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Dynamic filter type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.DynamicFilterValues> Type { get; set; }
    /// <summary>
    /// <para> Value.</para>
    /// <para>Represents the following attribute in the schema: val </para>
    /// </summary>
    [SchemaAttr(0, "val", 1)]
    public DoubleValue Val { get; set; }
    /// <summary>
    /// <para> Max Value.</para>
    /// <para>Represents the following attribute in the schema: maxVal </para>
    /// </summary>
    [SchemaAttr(0, "maxVal", 2)]
    public DoubleValue MaxVal { get; set; }
    /// <summary>
    /// <para> valIso.</para>
    /// <para>Represents the following attribute in the schema: valIso </para>
    /// </summary>
    [SchemaAttr(0, "valIso", 3)]
    public DateTimeValue ValIso { get; set; }
    /// <summary>
    /// <para> maxValIso.</para>
    /// <para>Represents the following attribute in the schema: maxValIso </para>
    /// </summary>
    [SchemaAttr(0, "maxValIso", 4)]
    public DateTimeValue MaxValIso { get; set; }

    /// <summary>
    /// Initializes a new instance of the DynamicFilter class.
    /// </summary>
    public DynamicFilter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DynamicFilter>(deep);

}
/// <summary>
/// <para>Color Filter Criteria.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colorFilter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colorFilter")]
public partial class ColorFilter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11435;
    /// <inheritdoc/>
    public override string LocalName => "colorFilter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Differential Format Record Id.</para>
    /// <para>Represents the following attribute in the schema: dxfId </para>
    /// </summary>
    [SchemaAttr(0, "dxfId", 0)]
    public UInt32Value FormatId { get; set; }
    /// <summary>
    /// <para> Filter By Cell Color.</para>
    /// <para>Represents the following attribute in the schema: cellColor </para>
    /// </summary>
    [SchemaAttr(0, "cellColor", 1)]
    public BooleanValue CellColor { get; set; }

    /// <summary>
    /// Initializes a new instance of the ColorFilter class.
    /// </summary>
    public ColorFilter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorFilter>(deep);

}
/// <summary>
/// <para>Icon Filter.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:iconFilter.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "iconFilter")]
public partial class IconFilter : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11436;
    /// <inheritdoc/>
    public override string LocalName => "iconFilter";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Icon Set.</para>
    /// <para>Represents the following attribute in the schema: iconSet </para>
    /// </summary>
    [SchemaAttr(0, "iconSet", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.IconSetValues> IconSet { get; set; }
    /// <summary>
    /// <para> Icon Id.</para>
    /// <para>Represents the following attribute in the schema: iconId </para>
    /// </summary>
    [SchemaAttr(0, "iconId", 1)]
    public UInt32Value IconId { get; set; }

    /// <summary>
    /// Initializes a new instance of the IconFilter class.
    /// </summary>
    public IconFilter():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<IconFilter>(deep);

}
/// <summary>
/// <para>Defines the SlicerCacheDefinitionExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.SlicerCachePivotTables &lt;x15:slicerCachePivotTables></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TableSlicerCache &lt;x15:tableSlicerCache></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.SlicerCacheHideItemsWithNoData &lt;x15:slicerCacheHideItemsWithNoData></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.SlicerCachePivotTables), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TableSlicerCache), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.SlicerCacheHideItemsWithNoData), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class SlicerCacheDefinitionExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11437;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the SlicerCacheDefinitionExtension class.
    /// </summary>
    public SlicerCacheDefinitionExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SlicerCacheDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SlicerCacheDefinitionExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SlicerCacheDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SlicerCacheDefinitionExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SlicerCacheDefinitionExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SlicerCacheDefinitionExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SlicerCacheDefinitionExtension>(deep);

}
/// <summary>
/// <para>Defines the PivotFilterExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotFilter &lt;x15:pivotFilter></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.MovingPeriodState &lt;x15:movingPeriodState></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotFilter), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.MovingPeriodState), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class PivotFilterExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11438;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotFilterExtension class.
    /// </summary>
    public PivotFilterExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFilterExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilterExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilterExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilterExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilterExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFilterExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFilterExtension>(deep);

}
/// <summary>
/// <para>Defines the QueryTableExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.QueryTable &lt;x15:queryTable></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.QueryTable), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class QueryTableExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11439;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryTableExtension class.
    /// </summary>
    public QueryTableExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableExtension>(deep);

}
/// <summary>
/// <para>Defines the DatabaseProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dbPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dbPr")]
public partial class DatabaseProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11440;
    /// <inheritdoc/>
    public override string LocalName => "dbPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Connection String.</para>
    /// <para>Represents the following attribute in the schema: connection </para>
    /// </summary>
    [SchemaAttr(0, "connection", 0)]
    public StringValue Connection { get; set; }
    /// <summary>
    /// <para> Command Text.</para>
    /// <para>Represents the following attribute in the schema: command </para>
    /// </summary>
    [SchemaAttr(0, "command", 1)]
    public StringValue Command { get; set; }
    /// <summary>
    /// <para> Command Text.</para>
    /// <para>Represents the following attribute in the schema: serverCommand </para>
    /// </summary>
    [SchemaAttr(0, "serverCommand", 2)]
    public StringValue ServerCommand { get; set; }
    /// <summary>
    /// <para> OLE DB Command Type.</para>
    /// <para>Represents the following attribute in the schema: commandType </para>
    /// </summary>
    [SchemaAttr(0, "commandType", 3)]
    public UInt32Value CommandType { get; set; }

    /// <summary>
    /// Initializes a new instance of the DatabaseProperties class.
    /// </summary>
    public DatabaseProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DatabaseProperties>(deep);

}
/// <summary>
/// <para>Defines the OlapProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:olapPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "olapPr")]
public partial class OlapProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11441;
    /// <inheritdoc/>
    public override string LocalName => "olapPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Local Cube.</para>
    /// <para>Represents the following attribute in the schema: local </para>
    /// </summary>
    [SchemaAttr(0, "local", 0)]
    public BooleanValue Local { get; set; }
    /// <summary>
    /// <para> Local Cube Connection.</para>
    /// <para>Represents the following attribute in the schema: localConnection </para>
    /// </summary>
    [SchemaAttr(0, "localConnection", 1)]
    public StringValue LocalConnection { get; set; }
    /// <summary>
    /// <para> Local Refresh.</para>
    /// <para>Represents the following attribute in the schema: localRefresh </para>
    /// </summary>
    [SchemaAttr(0, "localRefresh", 2)]
    public BooleanValue LocalRefresh { get; set; }
    /// <summary>
    /// <para> Send Locale to OLAP.</para>
    /// <para>Represents the following attribute in the schema: sendLocale </para>
    /// </summary>
    [SchemaAttr(0, "sendLocale", 3)]
    public BooleanValue SendLocale { get; set; }
    /// <summary>
    /// <para> Drill Through Count.</para>
    /// <para>Represents the following attribute in the schema: rowDrillCount </para>
    /// </summary>
    [SchemaAttr(0, "rowDrillCount", 4)]
    public UInt32Value RowDrillCount { get; set; }
    /// <summary>
    /// <para> OLAP Fill Formatting.</para>
    /// <para>Represents the following attribute in the schema: serverFill </para>
    /// </summary>
    [SchemaAttr(0, "serverFill", 5)]
    public BooleanValue ServerFill { get; set; }
    /// <summary>
    /// <para> OLAP Number Format.</para>
    /// <para>Represents the following attribute in the schema: serverNumberFormat </para>
    /// </summary>
    [SchemaAttr(0, "serverNumberFormat", 6)]
    public BooleanValue ServerNumberFormat { get; set; }
    /// <summary>
    /// <para> OLAP Server Font.</para>
    /// <para>Represents the following attribute in the schema: serverFont </para>
    /// </summary>
    [SchemaAttr(0, "serverFont", 7)]
    public BooleanValue ServerFont { get; set; }
    /// <summary>
    /// <para> OLAP Font Formatting.</para>
    /// <para>Represents the following attribute in the schema: serverFontColor </para>
    /// </summary>
    [SchemaAttr(0, "serverFontColor", 8)]
    public BooleanValue ServerFontColor { get; set; }

    /// <summary>
    /// Initializes a new instance of the OlapProperties class.
    /// </summary>
    public OlapProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OlapProperties>(deep);

}
/// <summary>
/// <para>Defines the WebQueryProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Tables &lt;x:tables></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Tables))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPr")]
public partial class WebQueryProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11442;
    /// <inheritdoc/>
    public override string LocalName => "webPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> XML Source.</para>
    /// <para>Represents the following attribute in the schema: xml </para>
    /// </summary>
    [SchemaAttr(0, "xml", 0)]
    public BooleanValue XmlSource { get; set; }
    /// <summary>
    /// <para> Import XML Source Data.</para>
    /// <para>Represents the following attribute in the schema: sourceData </para>
    /// </summary>
    [SchemaAttr(0, "sourceData", 1)]
    public BooleanValue SourceData { get; set; }
    /// <summary>
    /// <para> Parse PRE.</para>
    /// <para>Represents the following attribute in the schema: parsePre </para>
    /// </summary>
    [SchemaAttr(0, "parsePre", 2)]
    public BooleanValue ParsePreTag { get; set; }
    /// <summary>
    /// <para> Consecutive Delimiters.</para>
    /// <para>Represents the following attribute in the schema: consecutive </para>
    /// </summary>
    [SchemaAttr(0, "consecutive", 3)]
    public BooleanValue Consecutive { get; set; }
    /// <summary>
    /// <para> Use First Row.</para>
    /// <para>Represents the following attribute in the schema: firstRow </para>
    /// </summary>
    [SchemaAttr(0, "firstRow", 4)]
    public BooleanValue FirstRow { get; set; }
    /// <summary>
    /// <para> Created in Excel 97.</para>
    /// <para>Represents the following attribute in the schema: xl97 </para>
    /// </summary>
    [SchemaAttr(0, "xl97", 5)]
    public BooleanValue CreatedInExcel97 { get; set; }
    /// <summary>
    /// <para> Dates as Text.</para>
    /// <para>Represents the following attribute in the schema: textDates </para>
    /// </summary>
    [SchemaAttr(0, "textDates", 6)]
    public BooleanValue TextDates { get; set; }
    /// <summary>
    /// <para> Refreshed in Excel 2000.</para>
    /// <para>Represents the following attribute in the schema: xl2000 </para>
    /// </summary>
    [SchemaAttr(0, "xl2000", 7)]
    public BooleanValue RefreshedInExcel2000 { get; set; }
    /// <summary>
    /// <para> URL.</para>
    /// <para>Represents the following attribute in the schema: url </para>
    /// </summary>
    [SchemaAttr(0, "url", 8)]
    public StringValue Url { get; set; }
    /// <summary>
    /// <para> Web Post.</para>
    /// <para>Represents the following attribute in the schema: post </para>
    /// </summary>
    [SchemaAttr(0, "post", 9)]
    public StringValue Post { get; set; }
    /// <summary>
    /// <para> HTML Tables Only.</para>
    /// <para>Represents the following attribute in the schema: htmlTables </para>
    /// </summary>
    [SchemaAttr(0, "htmlTables", 10)]
    public BooleanValue HtmlTables { get; set; }
    /// <summary>
    /// <para> HTML Formatting Handling.</para>
    /// <para>Represents the following attribute in the schema: htmlFormat </para>
    /// </summary>
    [SchemaAttr(0, "htmlFormat", 11)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.HtmlFormattingValues> HtmlFormat { get; set; }
    /// <summary>
    /// <para> Edit Query URL.</para>
    /// <para>Represents the following attribute in the schema: editPage </para>
    /// </summary>
    [SchemaAttr(0, "editPage", 12)]
    public StringValue EditPage { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebQueryProperties class.
    /// </summary>
    public WebQueryProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WebQueryProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebQueryProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WebQueryProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebQueryProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WebQueryProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WebQueryProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "tables" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Tables.</para>
    /// <para> Represents the following element tag in the schema: x:tables </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Tables Tables
    {
        get => GetElement<Tables>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebQueryProperties>(deep);

}
/// <summary>
/// <para>Defines the TextProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:textPr.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TextFields &lt;x:textFields></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TextFields))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "textPr")]
public partial class TextProperties : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11443;
    /// <inheritdoc/>
    public override string LocalName => "textPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> prompt.</para>
    /// <para>Represents the following attribute in the schema: prompt </para>
    /// </summary>
    [SchemaAttr(0, "prompt", 0)]
    public BooleanValue Prompt { get; set; }
    /// <summary>
    /// <para> fileType.</para>
    /// <para>Represents the following attribute in the schema: fileType </para>
    /// </summary>
    [SchemaAttr(0, "fileType", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.FileTypeValues> FileType { get; set; }
    /// <summary>
    /// <para> codePage.</para>
    /// <para>Represents the following attribute in the schema: codePage </para>
    /// </summary>
    [SchemaAttr(0, "codePage", 2)]
    public UInt32Value CodePage { get; set; }
    /// <summary>
    /// <para> characterSet.</para>
    /// <para>Represents the following attribute in the schema: characterSet </para>
    /// </summary>
    [SchemaAttr(0, "characterSet", 3)]
    public StringValue TextCharacterSet { get; set; }
    /// <summary>
    /// <para> firstRow.</para>
    /// <para>Represents the following attribute in the schema: firstRow </para>
    /// </summary>
    [SchemaAttr(0, "firstRow", 4)]
    public UInt32Value FirstRow { get; set; }
    /// <summary>
    /// <para> sourceFile.</para>
    /// <para>Represents the following attribute in the schema: sourceFile </para>
    /// </summary>
    [SchemaAttr(0, "sourceFile", 5)]
    public StringValue SourceFile { get; set; }
    /// <summary>
    /// <para> delimited.</para>
    /// <para>Represents the following attribute in the schema: delimited </para>
    /// </summary>
    [SchemaAttr(0, "delimited", 6)]
    public BooleanValue Delimited { get; set; }
    /// <summary>
    /// <para> decimal.</para>
    /// <para>Represents the following attribute in the schema: decimal </para>
    /// </summary>
    [SchemaAttr(0, "decimal", 7)]
    public StringValue Decimal { get; set; }
    /// <summary>
    /// <para> thousands.</para>
    /// <para>Represents the following attribute in the schema: thousands </para>
    /// </summary>
    [SchemaAttr(0, "thousands", 8)]
    public StringValue Thousands { get; set; }
    /// <summary>
    /// <para> tab.</para>
    /// <para>Represents the following attribute in the schema: tab </para>
    /// </summary>
    [SchemaAttr(0, "tab", 9)]
    public BooleanValue TabAsDelimiter { get; set; }
    /// <summary>
    /// <para> space.</para>
    /// <para>Represents the following attribute in the schema: space </para>
    /// </summary>
    [SchemaAttr(0, "space", 10)]
    public BooleanValue Space { get; set; }
    /// <summary>
    /// <para> comma.</para>
    /// <para>Represents the following attribute in the schema: comma </para>
    /// </summary>
    [SchemaAttr(0, "comma", 11)]
    public BooleanValue Comma { get; set; }
    /// <summary>
    /// <para> semicolon.</para>
    /// <para>Represents the following attribute in the schema: semicolon </para>
    /// </summary>
    [SchemaAttr(0, "semicolon", 12)]
    public BooleanValue Semicolon { get; set; }
    /// <summary>
    /// <para> consecutive.</para>
    /// <para>Represents the following attribute in the schema: consecutive </para>
    /// </summary>
    [SchemaAttr(0, "consecutive", 13)]
    public BooleanValue Consecutive { get; set; }
    /// <summary>
    /// <para> qualifier.</para>
    /// <para>Represents the following attribute in the schema: qualifier </para>
    /// </summary>
    [SchemaAttr(0, "qualifier", 14)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.QualifierValues> Qualifier { get; set; }
    /// <summary>
    /// <para> delimiter.</para>
    /// <para>Represents the following attribute in the schema: delimiter </para>
    /// </summary>
    [SchemaAttr(0, "delimiter", 15)]
    public StringValue Delimiter { get; set; }

    /// <summary>
    /// Initializes a new instance of the TextProperties class.
    /// </summary>
    public TextProperties():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TextProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextProperties(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextProperties class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextProperties(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextProperties class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TextProperties(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "textFields" };
    private static readonly byte[] eleNamespaceIds = { 22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> TextFields.</para>
    /// <para> Represents the following element tag in the schema: x:textFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public TextFields TextFields
    {
        get => GetElement<TextFields>(0);
        set => SetElement(0, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextProperties>(deep);

}
/// <summary>
/// <para>Defines the Parameters Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:parameters.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Parameter &lt;x:parameter></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Parameter))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "parameters")]
public partial class Parameters : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11444;
    /// <inheritdoc/>
    public override string LocalName => "parameters";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Parameter Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Parameters class.
    /// </summary>
    public Parameters():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Parameters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Parameters(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Parameters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Parameters(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Parameters class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Parameters(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Parameters>(deep);

}
/// <summary>
/// <para>Defines the ConnectionExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConnectionExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConnectionExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class ConnectionExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11445;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ConnectionExtensionList class.
    /// </summary>
    public ConnectionExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionExtensionList>(deep);

}
/// <summary>
/// <para>Defines the ConnectionExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.Connection &lt;x14:connection></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.Connection &lt;x15:connection></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.Connection), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.Connection), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class ConnectionExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11446;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConnectionExtension class.
    /// </summary>
    public ConnectionExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConnectionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConnectionExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConnectionExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConnectionExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionExtension>(deep);

}
/// <summary>
/// <para>Defines the TextFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:textFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TextField &lt;x:textField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TextField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "textFields")]
public partial class TextFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11447;
    /// <inheritdoc/>
    public override string LocalName => "textFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Count of Fields.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the TextFields class.
    /// </summary>
    public TextFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TextFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TextFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TextFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TextFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TextFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextFields>(deep);

}
/// <summary>
/// <para>Defines the CacheSource Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cacheSource.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WorksheetSource &lt;x:worksheetSource></description></item>
///<item><description>Consolidation &lt;x:consolidation></description></item>
///<item><description>CacheSourceExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WorksheetSource))]
    [ChildElementInfo(typeof(Consolidation))]
    [ChildElementInfo(typeof(CacheSourceExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cacheSource")]
public partial class CacheSource : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11448;
    /// <inheritdoc/>
    public override string LocalName => "cacheSource";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> type.</para>
    /// <para>Represents the following attribute in the schema: type </para>
    /// </summary>
    [SchemaAttr(0, "type", 0)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.SourceValues> Type { get; set; }
    /// <summary>
    /// <para> connectionId.</para>
    /// <para>Represents the following attribute in the schema: connectionId </para>
    /// </summary>
    [SchemaAttr(0, "connectionId", 1)]
    public UInt32Value ConnectionId { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheSource class.
    /// </summary>
    public CacheSource():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheSource class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSource(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSource class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheSource(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheSource class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheSource(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "worksheetSource","consolidation","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneChoice;
    
        /// <summary>
    /// <para> WorksheetSource.</para>
    /// <para> Represents the following element tag in the schema: x:worksheetSource </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public WorksheetSource WorksheetSource
    {
        get => GetElement<WorksheetSource>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Consolidation.</para>
    /// <para> Represents the following element tag in the schema: x:consolidation </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Consolidation Consolidation
    {
        get => GetElement<Consolidation>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> CacheSourceExtensionList.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public CacheSourceExtensionList CacheSourceExtensionList
    {
        get => GetElement<CacheSourceExtensionList>(2);
        set => SetElement(2, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheSource>(deep);

}
/// <summary>
/// <para>Defines the CacheFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cacheFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheField &lt;x:cacheField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CacheField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cacheFields")]
public partial class CacheFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11449;
    /// <inheritdoc/>
    public override string LocalName => "cacheFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheFields class.
    /// </summary>
    public CacheFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheFields>(deep);

}
/// <summary>
/// <para>Defines the CacheHierarchies Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cacheHierarchies.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheHierarchy &lt;x:cacheHierarchy></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CacheHierarchy))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cacheHierarchies")]
public partial class CacheHierarchies : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11450;
    /// <inheritdoc/>
    public override string LocalName => "cacheHierarchies";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Hierarchy Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheHierarchies class.
    /// </summary>
    public CacheHierarchies():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheHierarchies class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchies(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchies class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchies(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchies class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheHierarchies(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheHierarchies>(deep);

}
/// <summary>
/// <para>Defines the Kpis Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:kpis.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Kpi &lt;x:kpi></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Kpi))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "kpis")]
public partial class Kpis : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11451;
    /// <inheritdoc/>
    public override string LocalName => "kpis";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> KPI Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Kpis class.
    /// </summary>
    public Kpis():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Kpis class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Kpis(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Kpis class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Kpis(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Kpis class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Kpis(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kpis>(deep);

}
/// <summary>
/// <para>Defines the TupleCache Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tupleCache.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Entries &lt;x:entries></description></item>
///<item><description>Sets &lt;x:sets></description></item>
///<item><description>QueryCache &lt;x:queryCache></description></item>
///<item><description>ServerFormats &lt;x:serverFormats></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Entries))]
    [ChildElementInfo(typeof(Sets))]
    [ChildElementInfo(typeof(QueryCache))]
    [ChildElementInfo(typeof(ServerFormats))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tupleCache")]
public partial class TupleCache : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11452;
    /// <inheritdoc/>
    public override string LocalName => "tupleCache";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the TupleCache class.
    /// </summary>
    public TupleCache():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TupleCache class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TupleCache(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TupleCache class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TupleCache(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TupleCache class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TupleCache(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "entries","sets","queryCache","serverFormats","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Entries.</para>
    /// <para> Represents the following element tag in the schema: x:entries </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Entries Entries
    {
        get => GetElement<Entries>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Sets.</para>
    /// <para> Represents the following element tag in the schema: x:sets </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public Sets Sets
    {
        get => GetElement<Sets>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> OLAP Query Cache.</para>
    /// <para> Represents the following element tag in the schema: x:queryCache </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public QueryCache QueryCache
    {
        get => GetElement<QueryCache>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Server Formats.</para>
    /// <para> Represents the following element tag in the schema: x:serverFormats </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ServerFormats ServerFormats
    {
        get => GetElement<ServerFormats>(3);
        set => SetElement(3, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(4);
        set => SetElement(4, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TupleCache>(deep);

}
/// <summary>
/// <para>Defines the CalculatedItems Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calculatedItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculatedItem &lt;x:calculatedItem></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CalculatedItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "calculatedItems")]
public partial class CalculatedItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11453;
    /// <inheritdoc/>
    public override string LocalName => "calculatedItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Calculated Item Formula Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculatedItems class.
    /// </summary>
    public CalculatedItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedItems>(deep);

}
/// <summary>
/// <para>Defines the CalculatedMembers Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calculatedMembers.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculatedMember &lt;x:calculatedMember></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CalculatedMember))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "calculatedMembers")]
public partial class CalculatedMembers : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11454;
    /// <inheritdoc/>
    public override string LocalName => "calculatedMembers";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Calculated Members Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculatedMembers class.
    /// </summary>
    public CalculatedMembers():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedMembers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMembers(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMembers class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMembers(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMembers class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedMembers(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedMembers>(deep);

}
/// <summary>
/// <para>Defines the Dimensions Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dimensions.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Dimension &lt;x:dimension></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Dimension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dimensions")]
public partial class Dimensions : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11455;
    /// <inheritdoc/>
    public override string LocalName => "dimensions";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLAP Dimensions Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Dimensions class.
    /// </summary>
    public Dimensions():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Dimensions class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dimensions(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Dimensions class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Dimensions(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Dimensions class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Dimensions(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dimensions>(deep);

}
/// <summary>
/// <para>Defines the MeasureGroups Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:measureGroups.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MeasureGroup &lt;x:measureGroup></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MeasureGroup))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "measureGroups")]
public partial class MeasureGroups : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11456;
    /// <inheritdoc/>
    public override string LocalName => "measureGroups";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Measure Group Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MeasureGroups class.
    /// </summary>
    public MeasureGroups():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MeasureGroups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MeasureGroups(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MeasureGroups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MeasureGroups(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MeasureGroups class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MeasureGroups(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MeasureGroups>(deep);

}
/// <summary>
/// <para>Defines the Maps Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:maps.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MeasureDimensionMap &lt;x:map></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MeasureDimensionMap))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "maps")]
public partial class Maps : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11457;
    /// <inheritdoc/>
    public override string LocalName => "maps";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Measure Group Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Maps class.
    /// </summary>
    public Maps():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Maps class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Maps(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Maps class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Maps(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Maps class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Maps(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Maps>(deep);

}
/// <summary>
/// <para>Defines the PivotCacheDefinitionExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotCacheDefinitionExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotCacheDefinitionExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class PivotCacheDefinitionExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11458;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtensionList class.
    /// </summary>
    public PivotCacheDefinitionExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotCacheDefinitionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinitionExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinitionExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCacheDefinitionExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheDefinitionExtensionList>(deep);

}
/// <summary>
/// <para>Defines the PivotCacheDefinitionExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.PivotCacheDefinition &lt;x14:pivotCacheDefinition></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotCacheDecoupled &lt;x15:pivotCacheDecoupled></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TimelinePivotCacheDefinition &lt;x15:timelinePivotCacheDefinition></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotCacheIdVersion &lt;x15:pivotCacheIdVersion></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.PivotCacheDefinition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotCacheDecoupled), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TimelinePivotCacheDefinition), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotCacheIdVersion), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class PivotCacheDefinitionExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11459;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtension class.
    /// </summary>
    public PivotCacheDefinitionExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotCacheDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinitionExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCacheDefinitionExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCacheDefinitionExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCacheDefinitionExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheDefinitionExtension>(deep);

}
/// <summary>
/// <para>Defines the SharedItems Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sharedItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MissingItem &lt;x:m></description></item>
///<item><description>NumberItem &lt;x:n></description></item>
///<item><description>BooleanItem &lt;x:b></description></item>
///<item><description>ErrorItem &lt;x:e></description></item>
///<item><description>StringItem &lt;x:s></description></item>
///<item><description>DateTimeItem &lt;x:d></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MissingItem))]
    [ChildElementInfo(typeof(NumberItem))]
    [ChildElementInfo(typeof(BooleanItem))]
    [ChildElementInfo(typeof(ErrorItem))]
    [ChildElementInfo(typeof(StringItem))]
    [ChildElementInfo(typeof(DateTimeItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sharedItems")]
public partial class SharedItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11460;
    /// <inheritdoc/>
    public override string LocalName => "sharedItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Contains Semi Mixed Data Types.</para>
    /// <para>Represents the following attribute in the schema: containsSemiMixedTypes </para>
    /// </summary>
    [SchemaAttr(0, "containsSemiMixedTypes", 0)]
    public BooleanValue ContainsSemiMixedTypes { get; set; }
    /// <summary>
    /// <para> Contains Non Date.</para>
    /// <para>Represents the following attribute in the schema: containsNonDate </para>
    /// </summary>
    [SchemaAttr(0, "containsNonDate", 1)]
    public BooleanValue ContainsNonDate { get; set; }
    /// <summary>
    /// <para> Contains Date.</para>
    /// <para>Represents the following attribute in the schema: containsDate </para>
    /// </summary>
    [SchemaAttr(0, "containsDate", 2)]
    public BooleanValue ContainsDate { get; set; }
    /// <summary>
    /// <para> Contains String.</para>
    /// <para>Represents the following attribute in the schema: containsString </para>
    /// </summary>
    [SchemaAttr(0, "containsString", 3)]
    public BooleanValue ContainsString { get; set; }
    /// <summary>
    /// <para> Contains Blank.</para>
    /// <para>Represents the following attribute in the schema: containsBlank </para>
    /// </summary>
    [SchemaAttr(0, "containsBlank", 4)]
    public BooleanValue ContainsBlank { get; set; }
    /// <summary>
    /// <para> Contains Mixed Data Types.</para>
    /// <para>Represents the following attribute in the schema: containsMixedTypes </para>
    /// </summary>
    [SchemaAttr(0, "containsMixedTypes", 5)]
    public BooleanValue ContainsMixedTypes { get; set; }
    /// <summary>
    /// <para> Contains Numbers.</para>
    /// <para>Represents the following attribute in the schema: containsNumber </para>
    /// </summary>
    [SchemaAttr(0, "containsNumber", 6)]
    public BooleanValue ContainsNumber { get; set; }
    /// <summary>
    /// <para> Contains Integer.</para>
    /// <para>Represents the following attribute in the schema: containsInteger </para>
    /// </summary>
    [SchemaAttr(0, "containsInteger", 7)]
    public BooleanValue ContainsInteger { get; set; }
    /// <summary>
    /// <para> Minimum Numeric Value.</para>
    /// <para>Represents the following attribute in the schema: minValue </para>
    /// </summary>
    [SchemaAttr(0, "minValue", 8)]
    public DoubleValue MinValue { get; set; }
    /// <summary>
    /// <para> Maximum Numeric Value.</para>
    /// <para>Represents the following attribute in the schema: maxValue </para>
    /// </summary>
    [SchemaAttr(0, "maxValue", 9)]
    public DoubleValue MaxValue { get; set; }
    /// <summary>
    /// <para> Minimum Date Time.</para>
    /// <para>Represents the following attribute in the schema: minDate </para>
    /// </summary>
    [SchemaAttr(0, "minDate", 10)]
    public DateTimeValue MinDate { get; set; }
    /// <summary>
    /// <para> Maximum Date Time Value.</para>
    /// <para>Represents the following attribute in the schema: maxDate </para>
    /// </summary>
    [SchemaAttr(0, "maxDate", 11)]
    public DateTimeValue MaxDate { get; set; }
    /// <summary>
    /// <para> Shared Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 12)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Long Text.</para>
    /// <para>Represents the following attribute in the schema: longText </para>
    /// </summary>
    [SchemaAttr(0, "longText", 13)]
    public BooleanValue LongText { get; set; }

    /// <summary>
    /// Initializes a new instance of the SharedItems class.
    /// </summary>
    public SharedItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the SharedItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public SharedItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the SharedItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public SharedItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SharedItems>(deep);

}
/// <summary>
/// <para>Defines the FieldGroup Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fieldGroup.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RangeProperties &lt;x:rangePr></description></item>
///<item><description>DiscreteProperties &lt;x:discretePr></description></item>
///<item><description>GroupItems &lt;x:groupItems></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RangeProperties))]
    [ChildElementInfo(typeof(DiscreteProperties))]
    [ChildElementInfo(typeof(GroupItems))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fieldGroup")]
public partial class FieldGroup : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11461;
    /// <inheritdoc/>
    public override string LocalName => "fieldGroup";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Parent.</para>
    /// <para>Represents the following attribute in the schema: par </para>
    /// </summary>
    [SchemaAttr(0, "par", 0)]
    public UInt32Value ParentId { get; set; }
    /// <summary>
    /// <para> Field Base.</para>
    /// <para>Represents the following attribute in the schema: base </para>
    /// </summary>
    [SchemaAttr(0, "base", 1)]
    public UInt32Value Base { get; set; }

    /// <summary>
    /// Initializes a new instance of the FieldGroup class.
    /// </summary>
    public FieldGroup():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FieldGroup class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FieldGroup(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FieldGroup class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FieldGroup(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FieldGroup class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FieldGroup(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldGroup>(deep);

}
/// <summary>
/// <para>Defines the CacheFieldExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheFieldExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CacheFieldExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class CacheFieldExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11463;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CacheFieldExtensionList class.
    /// </summary>
    public CacheFieldExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFieldExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFieldExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFieldExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheFieldExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheFieldExtensionList>(deep);

}
/// <summary>
/// <para>Defines the CacheFieldExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.CacheField &lt;x14:cacheField></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.CachedUniqueNames &lt;x15:cachedUniqueNames></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.CacheField), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.CachedUniqueNames), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class CacheFieldExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11464;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheFieldExtension class.
    /// </summary>
    public CacheFieldExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFieldExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheFieldExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheFieldExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheFieldExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheFieldExtension>(deep);

}
/// <summary>
/// <para>Defines the FieldsUsage Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fieldsUsage.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FieldUsage &lt;x:fieldUsage></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FieldUsage))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fieldsUsage")]
public partial class FieldsUsage : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11465;
    /// <inheritdoc/>
    public override string LocalName => "fieldsUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the FieldsUsage class.
    /// </summary>
    public FieldsUsage():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FieldsUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FieldsUsage(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FieldsUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FieldsUsage(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FieldsUsage class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FieldsUsage(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldsUsage>(deep);

}
/// <summary>
/// <para>Defines the GroupLevels Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:groupLevels.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>GroupLevel &lt;x:groupLevel></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(GroupLevel))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "groupLevels")]
public partial class GroupLevels : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11466;
    /// <inheritdoc/>
    public override string LocalName => "groupLevels";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Grouping Level Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the GroupLevels class.
    /// </summary>
    public GroupLevels():base(){}
    
        /// <summary>
    ///Initializes a new instance of the GroupLevels class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupLevels(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupLevels class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public GroupLevels(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the GroupLevels class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public GroupLevels(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupLevels>(deep);

}
/// <summary>
/// <para>Defines the CacheHierarchyExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CacheHierarchyExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CacheHierarchyExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class CacheHierarchyExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11467;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtensionList class.
    /// </summary>
    public CacheHierarchyExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheHierarchyExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchyExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchyExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheHierarchyExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheHierarchyExtensionList>(deep);

}
/// <summary>
/// <para>Defines the CacheHierarchyExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.CacheHierarchy &lt;x14:cacheHierarchy></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.CacheHierarchy &lt;x15:cacheHierarchy></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.CacheHierarchy), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.CacheHierarchy), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class CacheHierarchyExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11468;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtension class.
    /// </summary>
    public CacheHierarchyExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CacheHierarchyExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchyExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CacheHierarchyExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CacheHierarchyExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CacheHierarchyExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CacheHierarchyExtension>(deep);

}
/// <summary>
/// <para>Defines the CalculatedMemberExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CalculatedMemberExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CalculatedMemberExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class CalculatedMemberExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11469;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtensionList class.
    /// </summary>
    public CalculatedMemberExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedMemberExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMemberExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMemberExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedMemberExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedMemberExtensionList>(deep);

}
/// <summary>
/// <para>Defines the CalculatedMemberExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.CalculatedMember &lt;x14:calculatedMember></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.CalculatedMember &lt;x15:calculatedMember></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.CalculatedMember), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.CalculatedMember), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class CalculatedMemberExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11470;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtension class.
    /// </summary>
    public CalculatedMemberExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CalculatedMemberExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMemberExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CalculatedMemberExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CalculatedMemberExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CalculatedMemberExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculatedMemberExtension>(deep);

}
/// <summary>
/// <para>Defines the Location Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:location.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "location")]
public partial class Location : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11471;
    /// <inheritdoc/>
    public override string LocalName => "location";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }
    /// <summary>
    /// <para> First Header Row.</para>
    /// <para>Represents the following attribute in the schema: firstHeaderRow </para>
    /// </summary>
    [SchemaAttr(0, "firstHeaderRow", 1)]
    public UInt32Value FirstHeaderRow { get; set; }
    /// <summary>
    /// <para> PivotTable Data First Row.</para>
    /// <para>Represents the following attribute in the schema: firstDataRow </para>
    /// </summary>
    [SchemaAttr(0, "firstDataRow", 2)]
    public UInt32Value FirstDataRow { get; set; }
    /// <summary>
    /// <para> First Data Column.</para>
    /// <para>Represents the following attribute in the schema: firstDataCol </para>
    /// </summary>
    [SchemaAttr(0, "firstDataCol", 3)]
    public UInt32Value FirstDataColumn { get; set; }
    /// <summary>
    /// <para> Rows Per Page Count.</para>
    /// <para>Represents the following attribute in the schema: rowPageCount </para>
    /// </summary>
    [SchemaAttr(0, "rowPageCount", 4)]
    public UInt32Value RowPageCount { get; set; }
    /// <summary>
    /// <para> Columns Per Page.</para>
    /// <para>Represents the following attribute in the schema: colPageCount </para>
    /// </summary>
    [SchemaAttr(0, "colPageCount", 5)]
    public UInt32Value ColumnsPerPage { get; set; }

    /// <summary>
    /// Initializes a new instance of the Location class.
    /// </summary>
    public Location():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Location>(deep);

}
/// <summary>
/// <para>Defines the PivotFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotField &lt;x:pivotField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotFields")]
public partial class PivotFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11472;
    /// <inheritdoc/>
    public override string LocalName => "pivotFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Field Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotFields class.
    /// </summary>
    public PivotFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFields>(deep);

}
/// <summary>
/// <para>Defines the RowFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rowFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Field &lt;x:field></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Field))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rowFields")]
public partial class RowFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11473;
    /// <inheritdoc/>
    public override string LocalName => "rowFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Repeated Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the RowFields class.
    /// </summary>
    public RowFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RowFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RowFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RowFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RowFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowFields>(deep);

}
/// <summary>
/// <para>Defines the RowItems Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rowItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RowItem &lt;x:i></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RowItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rowItems")]
public partial class RowItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11474;
    /// <inheritdoc/>
    public override string LocalName => "rowItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Items in a Row Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the RowItems class.
    /// </summary>
    public RowItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RowItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RowItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RowItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RowItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowItems>(deep);

}
/// <summary>
/// <para>Defines the ColumnFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Field &lt;x:field></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Field))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colFields")]
public partial class ColumnFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11475;
    /// <inheritdoc/>
    public override string LocalName => "colFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Repeated Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ColumnFields class.
    /// </summary>
    public ColumnFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColumnFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColumnFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnFields>(deep);

}
/// <summary>
/// <para>Defines the ColumnItems Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colItems.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RowItem &lt;x:i></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RowItem))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colItems")]
public partial class ColumnItems : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11476;
    /// <inheritdoc/>
    public override string LocalName => "colItems";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Column Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ColumnItems class.
    /// </summary>
    public ColumnItems():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColumnItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnItems(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnItems class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnItems(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnItems class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColumnItems(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnItems>(deep);

}
/// <summary>
/// <para>Defines the PageFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pageFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PageField &lt;x:pageField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PageField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pageFields")]
public partial class PageFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11477;
    /// <inheritdoc/>
    public override string LocalName => "pageFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Page Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PageFields class.
    /// </summary>
    public PageFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PageFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PageFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PageFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PageFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PageFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PageFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageFields>(deep);

}
/// <summary>
/// <para>Defines the DataFields Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataFields.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataField &lt;x:dataField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataField))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataFields")]
public partial class DataFields : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11478;
    /// <inheritdoc/>
    public override string LocalName => "dataFields";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Data Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataFields class.
    /// </summary>
    public DataFields():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFields(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFields class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFields(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFields class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataFields(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataFields>(deep);

}
/// <summary>
/// <para>Defines the Formats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:formats.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Format &lt;x:format></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Format))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "formats")]
public partial class Formats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11479;
    /// <inheritdoc/>
    public override string LocalName => "formats";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Formats Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Formats class.
    /// </summary>
    public Formats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Formats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Formats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Formats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Formats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Formats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Formats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formats>(deep);

}
/// <summary>
/// <para>Defines the ConditionalFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:conditionalFormats.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ConditionalFormat &lt;x:conditionalFormat></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ConditionalFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "conditionalFormats")]
public partial class ConditionalFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11480;
    /// <inheritdoc/>
    public override string LocalName => "conditionalFormats";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Conditional Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ConditionalFormats class.
    /// </summary>
    public ConditionalFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ConditionalFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ConditionalFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ConditionalFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ConditionalFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormats>(deep);

}
/// <summary>
/// <para>Defines the ChartFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:chartFormats.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ChartFormat &lt;x:chartFormat></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ChartFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "chartFormats")]
public partial class ChartFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11481;
    /// <inheritdoc/>
    public override string LocalName => "chartFormats";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ChartFormats class.
    /// </summary>
    public ChartFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ChartFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ChartFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ChartFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ChartFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartFormats>(deep);

}
/// <summary>
/// <para>Defines the PivotHierarchies Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotHierarchies.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotHierarchy &lt;x:pivotHierarchy></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotHierarchy))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotHierarchies")]
public partial class PivotHierarchies : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11482;
    /// <inheritdoc/>
    public override string LocalName => "pivotHierarchies";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> OLAP Hierarchy Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotHierarchies class.
    /// </summary>
    public PivotHierarchies():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotHierarchies class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchies(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchies class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotHierarchies(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotHierarchies class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotHierarchies(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotHierarchies>(deep);

}
/// <summary>
/// <para>Defines the PivotTableStyle Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotTableStyleInfo.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotTableStyleInfo")]
public partial class PivotTableStyle : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11483;
    /// <inheritdoc/>
    public override string LocalName => "pivotTableStyleInfo";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Style Name.</para>
    /// <para>Represents the following attribute in the schema: name </para>
    /// </summary>
    [SchemaAttr(0, "name", 0)]
    public StringValue Name { get; set; }
    /// <summary>
    /// <para> Show Row Header Formatting.</para>
    /// <para>Represents the following attribute in the schema: showRowHeaders </para>
    /// </summary>
    [SchemaAttr(0, "showRowHeaders", 1)]
    public BooleanValue ShowRowHeaders { get; set; }
    /// <summary>
    /// <para> Show Table Style Column Header Formatting.</para>
    /// <para>Represents the following attribute in the schema: showColHeaders </para>
    /// </summary>
    [SchemaAttr(0, "showColHeaders", 2)]
    public BooleanValue ShowColumnHeaders { get; set; }
    /// <summary>
    /// <para> Show Row Stripes.</para>
    /// <para>Represents the following attribute in the schema: showRowStripes </para>
    /// </summary>
    [SchemaAttr(0, "showRowStripes", 3)]
    public BooleanValue ShowRowStripes { get; set; }
    /// <summary>
    /// <para> Show Column Stripes.</para>
    /// <para>Represents the following attribute in the schema: showColStripes </para>
    /// </summary>
    [SchemaAttr(0, "showColStripes", 4)]
    public BooleanValue ShowColumnStripes { get; set; }
    /// <summary>
    /// <para> Show Last Column.</para>
    /// <para>Represents the following attribute in the schema: showLastColumn </para>
    /// </summary>
    [SchemaAttr(0, "showLastColumn", 5)]
    public BooleanValue ShowLastColumn { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotTableStyle class.
    /// </summary>
    public PivotTableStyle():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotTableStyle>(deep);

}
/// <summary>
/// <para>Defines the PivotFilters Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:filters.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotFilter &lt;x:filter></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotFilter))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "filters")]
public partial class PivotFilters : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11484;
    /// <inheritdoc/>
    public override string LocalName => "filters";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Pivot Filter Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotFilters class.
    /// </summary>
    public PivotFilters():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFilters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilters(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilters class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilters(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilters class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFilters(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFilters>(deep);

}
/// <summary>
/// <para>Defines the RowHierarchiesUsage Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:rowHierarchiesUsage.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>RowHierarchyUsage &lt;x:rowHierarchyUsage></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(RowHierarchyUsage))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "rowHierarchiesUsage")]
public partial class RowHierarchiesUsage : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11485;
    /// <inheritdoc/>
    public override string LocalName => "rowHierarchiesUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the RowHierarchiesUsage class.
    /// </summary>
    public RowHierarchiesUsage():base(){}
    
        /// <summary>
    ///Initializes a new instance of the RowHierarchiesUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowHierarchiesUsage(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the RowHierarchiesUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public RowHierarchiesUsage(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the RowHierarchiesUsage class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public RowHierarchiesUsage(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowHierarchiesUsage>(deep);

}
/// <summary>
/// <para>Defines the ColumnHierarchiesUsage Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colHierarchiesUsage.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ColumnHierarchyUsage &lt;x:colHierarchyUsage></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ColumnHierarchyUsage))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colHierarchiesUsage")]
public partial class ColumnHierarchiesUsage : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11486;
    /// <inheritdoc/>
    public override string LocalName => "colHierarchiesUsage";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Items Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the ColumnHierarchiesUsage class.
    /// </summary>
    public ColumnHierarchiesUsage():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ColumnHierarchiesUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnHierarchiesUsage(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnHierarchiesUsage class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ColumnHierarchiesUsage(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ColumnHierarchiesUsage class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ColumnHierarchiesUsage(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnHierarchiesUsage>(deep);

}
/// <summary>
/// <para>Defines the PivotTableDefinitionExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotTableDefinitionExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotTableDefinitionExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class PivotTableDefinitionExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11487;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtensionList class.
    /// </summary>
    public PivotTableDefinitionExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotTableDefinitionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinitionExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinitionExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotTableDefinitionExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotTableDefinitionExtensionList>(deep);

}
/// <summary>
/// <para>Defines the PivotTableDefinitionExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.PivotTableDefinition &lt;x14:pivotTableDefinition></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotTableData &lt;x15:pivotTableData></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotTableUISettings &lt;x15:pivotTableUISettings></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.PivotTableDefinition), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotTableData), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotTableUISettings), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class PivotTableDefinitionExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11488;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtension class.
    /// </summary>
    public PivotTableDefinitionExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotTableDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinitionExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotTableDefinitionExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotTableDefinitionExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotTableDefinitionExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotTableDefinitionExtension>(deep);

}
/// <summary>
/// <para>Defines the DataFieldExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataFieldExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataFieldExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class DataFieldExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11489;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the DataFieldExtensionList class.
    /// </summary>
    public DataFieldExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFieldExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFieldExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFieldExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFieldExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataFieldExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataFieldExtensionList>(deep);

}
/// <summary>
/// <para>Defines the DataFieldExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.DataField &lt;x14:dataField></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.DataField &lt;x15:dataField></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.DataField), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.DataField), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class DataFieldExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11490;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataFieldExtension class.
    /// </summary>
    public DataFieldExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFieldExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFieldExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataFieldExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataFieldExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataFieldExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataFieldExtension>(deep);

}
/// <summary>
/// <para>Defines the PivotFilterExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotFilterExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotFilterExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class PivotFilterExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11491;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotFilterExtensionList class.
    /// </summary>
    public PivotFilterExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotFilterExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilterExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilterExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotFilterExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotFilterExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotFilterExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotFilterExtensionList>(deep);

}
/// <summary>
/// <para>Defines the QueryTableRefresh Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:queryTableRefresh.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>QueryTableFields &lt;x:queryTableFields></description></item>
///<item><description>QueryTableDeletedFields &lt;x:queryTableDeletedFields></description></item>
///<item><description>SortState &lt;x:sortState></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(QueryTableFields))]
    [ChildElementInfo(typeof(QueryTableDeletedFields))]
    [ChildElementInfo(typeof(SortState))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "queryTableRefresh")]
public partial class QueryTableRefresh : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11492;
    /// <inheritdoc/>
    public override string LocalName => "queryTableRefresh";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Preserve Sort and Filter Layout.</para>
    /// <para>Represents the following attribute in the schema: preserveSortFilterLayout </para>
    /// </summary>
    [SchemaAttr(0, "preserveSortFilterLayout", 0)]
    public BooleanValue PreserveSortFilterLayout { get; set; }
    /// <summary>
    /// <para> Next Field Id Wrapped.</para>
    /// <para>Represents the following attribute in the schema: fieldIdWrapped </para>
    /// </summary>
    [SchemaAttr(0, "fieldIdWrapped", 1)]
    public BooleanValue FieldIdWrapped { get; set; }
    /// <summary>
    /// <para> Headers In Last Refresh.</para>
    /// <para>Represents the following attribute in the schema: headersInLastRefresh </para>
    /// </summary>
    [SchemaAttr(0, "headersInLastRefresh", 2)]
    public BooleanValue HeadersInLastRefresh { get; set; }
    /// <summary>
    /// <para> Minimum Refresh Version.</para>
    /// <para>Represents the following attribute in the schema: minimumVersion </para>
    /// </summary>
    [SchemaAttr(0, "minimumVersion", 3)]
    public ByteValue MinimumVersion { get; set; }
    /// <summary>
    /// <para> Next field id.</para>
    /// <para>Represents the following attribute in the schema: nextId </para>
    /// </summary>
    [SchemaAttr(0, "nextId", 4)]
    public UInt32Value NextId { get; set; }
    /// <summary>
    /// <para> Columns Left.</para>
    /// <para>Represents the following attribute in the schema: unboundColumnsLeft </para>
    /// </summary>
    [SchemaAttr(0, "unboundColumnsLeft", 5)]
    public UInt32Value UnboundColumnsLeft { get; set; }
    /// <summary>
    /// <para> Columns Right.</para>
    /// <para>Represents the following attribute in the schema: unboundColumnsRight </para>
    /// </summary>
    [SchemaAttr(0, "unboundColumnsRight", 6)]
    public UInt32Value UnboundColumnsRight { get; set; }

    /// <summary>
    /// Initializes a new instance of the QueryTableRefresh class.
    /// </summary>
    public QueryTableRefresh():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableRefresh class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableRefresh(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableRefresh class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableRefresh(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableRefresh class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableRefresh(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "queryTableFields","queryTableDeletedFields","sortState","extLst" };
    private static readonly byte[] eleNamespaceIds = { 22,22,22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Query table fields.</para>
    /// <para> Represents the following element tag in the schema: x:queryTableFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public QueryTableFields QueryTableFields
    {
        get => GetElement<QueryTableFields>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> Deleted Fields.</para>
    /// <para> Represents the following element tag in the schema: x:queryTableDeletedFields </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public QueryTableDeletedFields QueryTableDeletedFields
    {
        get => GetElement<QueryTableDeletedFields>(1);
        set => SetElement(1, value);
    }
    
    /// <summary>
    /// <para> Sort State.</para>
    /// <para> Represents the following element tag in the schema: x:sortState </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public SortState SortState
    {
        get => GetElement<SortState>(2);
        set => SetElement(2, value);
    }
    
    /// <summary>
    /// <para> Future Feature Data Storage Area.</para>
    /// <para> Represents the following element tag in the schema: x:extLst </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public ExtensionList ExtensionList
    {
        get => GetElement<ExtensionList>(3);
        set => SetElement(3, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableRefresh>(deep);

}
/// <summary>
/// <para>Defines the QueryTableExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>QueryTableExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(QueryTableExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class QueryTableExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11493;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the QueryTableExtensionList class.
    /// </summary>
    public QueryTableExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the QueryTableExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public QueryTableExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the QueryTableExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public QueryTableExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<QueryTableExtensionList>(deep);

}
/// <summary>
/// <para>Defines the SheetCalculationProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheetCalcPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheetCalcPr")]
public partial class SheetCalculationProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11494;
    /// <inheritdoc/>
    public override string LocalName => "sheetCalcPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Full Calculation On Load.</para>
    /// <para>Represents the following attribute in the schema: fullCalcOnLoad </para>
    /// </summary>
    [SchemaAttr(0, "fullCalcOnLoad", 0)]
    public BooleanValue FullCalculationOnLoad { get; set; }

    /// <summary>
    /// Initializes a new instance of the SheetCalculationProperties class.
    /// </summary>
    public SheetCalculationProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<SheetCalculationProperties>(deep);

}
/// <summary>
/// <para>Defines the ProtectedRanges Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:protectedRanges.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ProtectedRange &lt;x:protectedRange></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ProtectedRange))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "protectedRanges")]
public partial class ProtectedRanges : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11495;
    /// <inheritdoc/>
    public override string LocalName => "protectedRanges";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ProtectedRanges class.
    /// </summary>
    public ProtectedRanges():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ProtectedRanges class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ProtectedRanges(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ProtectedRanges class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ProtectedRanges(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ProtectedRanges class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ProtectedRanges(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProtectedRanges>(deep);

}
/// <summary>
/// <para>Defines the Scenarios Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:scenarios.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Scenario &lt;x:scenario></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Scenario))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "scenarios")]
public partial class Scenarios : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11496;
    /// <inheritdoc/>
    public override string LocalName => "scenarios";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Current Scenario.</para>
    /// <para>Represents the following attribute in the schema: current </para>
    /// </summary>
    [SchemaAttr(0, "current", 0)]
    public UInt32Value Current { get; set; }
    /// <summary>
    /// <para> Last Shown Scenario.</para>
    /// <para>Represents the following attribute in the schema: show </para>
    /// </summary>
    [SchemaAttr(0, "show", 1)]
    public UInt32Value Show { get; set; }
    /// <summary>
    /// <para> Sequence of References.</para>
    /// <para>Represents the following attribute in the schema: sqref </para>
    /// </summary>
    [SchemaAttr(0, "sqref", 2)]
    public ListValue<StringValue> SequenceOfReferences { get; set; }

    /// <summary>
    /// Initializes a new instance of the Scenarios class.
    /// </summary>
    public Scenarios():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Scenarios class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scenarios(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Scenarios class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Scenarios(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Scenarios class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Scenarios(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Scenarios>(deep);

}
/// <summary>
/// <para>Defines the MergeCells Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:mergeCells.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>MergeCell &lt;x:mergeCell></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(MergeCell))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "mergeCells")]
public partial class MergeCells : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11497;
    /// <inheritdoc/>
    public override string LocalName => "mergeCells";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the MergeCells class.
    /// </summary>
    public MergeCells():base(){}
    
        /// <summary>
    ///Initializes a new instance of the MergeCells class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MergeCells(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the MergeCells class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public MergeCells(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the MergeCells class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public MergeCells(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<MergeCells>(deep);

}
/// <summary>
/// <para>Defines the DataValidations Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dataValidations.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DataValidation &lt;x:dataValidation></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DataValidation))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dataValidations")]
public partial class DataValidations : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11498;
    /// <inheritdoc/>
    public override string LocalName => "dataValidations";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Disable Prompts.</para>
    /// <para>Represents the following attribute in the schema: disablePrompts </para>
    /// </summary>
    [SchemaAttr(0, "disablePrompts", 0)]
    public BooleanValue DisablePrompts { get; set; }
    /// <summary>
    /// <para> Top Left Corner (X Coodrinate).</para>
    /// <para>Represents the following attribute in the schema: xWindow </para>
    /// </summary>
    [SchemaAttr(0, "xWindow", 1)]
    public UInt32Value XWindow { get; set; }
    /// <summary>
    /// <para> Top Left Corner (Y Coordinate).</para>
    /// <para>Represents the following attribute in the schema: yWindow </para>
    /// </summary>
    [SchemaAttr(0, "yWindow", 2)]
    public UInt32Value YWindow { get; set; }
    /// <summary>
    /// <para> Data Validation Item Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 3)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the DataValidations class.
    /// </summary>
    public DataValidations():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DataValidations class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataValidations(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DataValidations class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DataValidations(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DataValidations class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DataValidations(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataValidations>(deep);

}
/// <summary>
/// <para>Defines the Hyperlinks Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:hyperlinks.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Hyperlink &lt;x:hyperlink></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Hyperlink))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "hyperlinks")]
public partial class Hyperlinks : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11499;
    /// <inheritdoc/>
    public override string LocalName => "hyperlinks";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Hyperlinks class.
    /// </summary>
    public Hyperlinks():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Hyperlinks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Hyperlinks(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Hyperlinks class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Hyperlinks(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Hyperlinks class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Hyperlinks(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlinks>(deep);

}
/// <summary>
/// <para>Defines the CellWatches Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellWatches.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellWatch &lt;x:cellWatch></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CellWatch))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellWatches")]
public partial class CellWatches : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11500;
    /// <inheritdoc/>
    public override string LocalName => "cellWatches";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CellWatches class.
    /// </summary>
    public CellWatches():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellWatches class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellWatches(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellWatches class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellWatches(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellWatches class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellWatches(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellWatches>(deep);

}
/// <summary>
/// <para>Defines the IgnoredErrors Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ignoredErrors.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>IgnoredError &lt;x:ignoredError></description></item>
///<item><description>ExtensionList &lt;x:extLst></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(IgnoredError))]
    [ChildElementInfo(typeof(ExtensionList))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ignoredErrors")]
public partial class IgnoredErrors : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11501;
    /// <inheritdoc/>
    public override string LocalName => "ignoredErrors";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the IgnoredErrors class.
    /// </summary>
    public IgnoredErrors():base(){}
    
        /// <summary>
    ///Initializes a new instance of the IgnoredErrors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IgnoredErrors(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the IgnoredErrors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public IgnoredErrors(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the IgnoredErrors class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public IgnoredErrors(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<IgnoredErrors>(deep);

}
/// <summary>
/// <para>Defines the TableParts Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableParts.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TablePart &lt;x:tablePart></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TablePart))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableParts")]
public partial class TableParts : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11502;
    /// <inheritdoc/>
    public override string LocalName => "tableParts";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableParts class.
    /// </summary>
    public TableParts():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableParts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableParts(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableParts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableParts(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableParts class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableParts(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableParts>(deep);

}
/// <summary>
/// <para>Defines the WorksheetExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WorksheetExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WorksheetExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class WorksheetExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11503;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the WorksheetExtensionList class.
    /// </summary>
    public WorksheetExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WorksheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorksheetExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WorksheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorksheetExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WorksheetExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WorksheetExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorksheetExtensionList>(deep);

}
/// <summary>
/// <para>Defines the WorksheetExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormattings &lt;x14:conditionalFormattings></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.DataValidations &lt;x14:dataValidations></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SparklineGroups &lt;x14:sparklineGroups></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SlicerList &lt;x14:slicerList></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.ProtectedRanges &lt;x14:protectedRanges></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.IgnoredErrors &lt;x14:ignoredErrors></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.WebExtensions &lt;x15:webExtensions></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TimelineReferences &lt;x15:timelineRefs></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormattings), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.DataValidations), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SparklineGroups), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SlicerList), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.ProtectedRanges), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.IgnoredErrors), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.WebExtensions), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TimelineReferences), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class WorksheetExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11504;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorksheetExtension class.
    /// </summary>
    public WorksheetExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WorksheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorksheetExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WorksheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorksheetExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WorksheetExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WorksheetExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorksheetExtension>(deep);

}
/// <summary>
/// <para>Defines the NumberingFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:numFmts.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>NumberingFormat &lt;x:numFmt></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(NumberingFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "numFmts")]
public partial class NumberingFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11507;
    /// <inheritdoc/>
    public override string LocalName => "numFmts";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Number Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the NumberingFormats class.
    /// </summary>
    public NumberingFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the NumberingFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NumberingFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the NumberingFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public NumberingFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the NumberingFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public NumberingFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingFormats>(deep);

}
/// <summary>
/// <para>Defines the Fonts Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fonts.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Font &lt;x:font></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Font))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fonts")]
public partial class Fonts : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11508;
    /// <inheritdoc/>
    public override string LocalName => "fonts";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Font Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> knownFonts.</para>
    /// <para>Represents the following attribute in the schema: x14ac:knownFonts </para>
    /// </summary>
///<remark> xmlns:x14ac=http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac
///</remark>
    [SchemaAttr(55, "knownFonts", 1)]
    public BooleanValue KnownFonts { get; set; }

    /// <summary>
    /// Initializes a new instance of the Fonts class.
    /// </summary>
    public Fonts():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Fonts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fonts(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Fonts class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fonts(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Fonts class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Fonts(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);

}
/// <summary>
/// <para>Defines the Fills Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fills.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Fill &lt;x:fill></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Fill))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fills")]
public partial class Fills : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11509;
    /// <inheritdoc/>
    public override string LocalName => "fills";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Fill Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Fills class.
    /// </summary>
    public Fills():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Fills class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fills(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Fills class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Fills(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Fills class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Fills(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fills>(deep);

}
/// <summary>
/// <para>Defines the Borders Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:borders.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Border &lt;x:border></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Border))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "borders")]
public partial class Borders : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11510;
    /// <inheritdoc/>
    public override string LocalName => "borders";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Border Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the Borders class.
    /// </summary>
    public Borders():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Borders class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Borders(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Borders class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Borders(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Borders class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Borders(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Borders>(deep);

}
/// <summary>
/// <para>Defines the CellStyleFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellStyleXfs.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormat &lt;x:xf></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CellFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellStyleXfs")]
public partial class CellStyleFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11511;
    /// <inheritdoc/>
    public override string LocalName => "cellStyleXfs";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Style Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellStyleFormats class.
    /// </summary>
    public CellStyleFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellStyleFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyleFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyleFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyleFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyleFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellStyleFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellStyleFormats>(deep);

}
/// <summary>
/// <para>Defines the CellFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellXfs.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellFormat &lt;x:xf></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CellFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellXfs")]
public partial class CellFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11512;
    /// <inheritdoc/>
    public override string LocalName => "cellXfs";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellFormats class.
    /// </summary>
    public CellFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellFormats>(deep);

}
/// <summary>
/// <para>Defines the CellStyles Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:cellStyles.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CellStyle &lt;x:cellStyle></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CellStyle))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "cellStyles")]
public partial class CellStyles : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11513;
    /// <inheritdoc/>
    public override string LocalName => "cellStyles";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Style Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the CellStyles class.
    /// </summary>
    public CellStyles():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CellStyles class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyles(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyles class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CellStyles(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CellStyles class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CellStyles(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellStyles>(deep);

}
/// <summary>
/// <para>Defines the DifferentialFormats Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:dxfs.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DifferentialFormat &lt;x:dxf></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DifferentialFormat))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "dxfs")]
public partial class DifferentialFormats : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11514;
    /// <inheritdoc/>
    public override string LocalName => "dxfs";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Format Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the DifferentialFormats class.
    /// </summary>
    public DifferentialFormats():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DifferentialFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DifferentialFormats(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormats class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DifferentialFormats(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DifferentialFormats class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DifferentialFormats(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DifferentialFormats>(deep);

}
/// <summary>
/// <para>Defines the TableStyles Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:tableStyles.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>TableStyle &lt;x:tableStyle></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(TableStyle))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "tableStyles")]
public partial class TableStyles : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11515;
    /// <inheritdoc/>
    public override string LocalName => "tableStyles";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Table Style Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }
    /// <summary>
    /// <para> Default Table Style.</para>
    /// <para>Represents the following attribute in the schema: defaultTableStyle </para>
    /// </summary>
    [SchemaAttr(0, "defaultTableStyle", 1)]
    public StringValue DefaultTableStyle { get; set; }
    /// <summary>
    /// <para> Default Pivot Style.</para>
    /// <para>Represents the following attribute in the schema: defaultPivotStyle </para>
    /// </summary>
    [SchemaAttr(0, "defaultPivotStyle", 2)]
    public StringValue DefaultPivotStyle { get; set; }

    /// <summary>
    /// Initializes a new instance of the TableStyles class.
    /// </summary>
    public TableStyles():base(){}
    
        /// <summary>
    ///Initializes a new instance of the TableStyles class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyles(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyles class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public TableStyles(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the TableStyles class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public TableStyles(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyles>(deep);

}
/// <summary>
/// <para>Defines the Colors Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:colors.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>IndexedColors &lt;x:indexedColors></description></item>
///<item><description>MruColors &lt;x:mruColors></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(IndexedColors))]
    [ChildElementInfo(typeof(MruColors))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "colors")]
public partial class Colors : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11516;
    /// <inheritdoc/>
    public override string LocalName => "colors";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Colors class.
    /// </summary>
    public Colors():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Colors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Colors(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Colors class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Colors(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Colors class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Colors(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
        private static readonly string[] eleTagNames = { "indexedColors","mruColors" };
    private static readonly byte[] eleNamespaceIds = { 22,22 };
    
    internal override string[] ElementTagNames => eleTagNames;
    
    internal override byte[] ElementNamespaceIds => eleNamespaceIds;
    internal override OpenXmlCompositeType OpenXmlCompositeType => OpenXmlCompositeType.OneSequence;
    
        /// <summary>
    /// <para> Color Indexes.</para>
    /// <para> Represents the following element tag in the schema: x:indexedColors </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public IndexedColors IndexedColors
    {
        get => GetElement<IndexedColors>(0);
        set => SetElement(0, value);
    }
    
    /// <summary>
    /// <para> MRU Colors.</para>
    /// <para> Represents the following element tag in the schema: x:mruColors </para>
    /// </summary>
    /// <remark>
    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
    /// </remark>
    public MruColors MruColors
    {
        get => GetElement<MruColors>(1);
        set => SetElement(1, value);
    }
    


    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Colors>(deep);

}
/// <summary>
/// <para>Defines the StylesheetExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>StylesheetExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(StylesheetExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class StylesheetExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11517;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the StylesheetExtensionList class.
    /// </summary>
    public StylesheetExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the StylesheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StylesheetExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the StylesheetExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StylesheetExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the StylesheetExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public StylesheetExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylesheetExtensionList>(deep);

}
/// <summary>
/// <para>Defines the StylesheetExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.DifferentialFormats &lt;x14:dxfs></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SlicerStyles &lt;x14:slicerStyles></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.DifferentialFormats &lt;x15:dxfs></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TimelineStyles &lt;x15:timelineStyles></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.DifferentialFormats), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SlicerStyles), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.DifferentialFormats), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TimelineStyles), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class StylesheetExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11518;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the StylesheetExtension class.
    /// </summary>
    public StylesheetExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the StylesheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StylesheetExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the StylesheetExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public StylesheetExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the StylesheetExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public StylesheetExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylesheetExtension>(deep);

}
/// <summary>
/// <para>Defines the FileVersion Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fileVersion.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fileVersion")]
public partial class FileVersion : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11519;
    /// <inheritdoc/>
    public override string LocalName => "fileVersion";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Application Name.</para>
    /// <para>Represents the following attribute in the schema: appName </para>
    /// </summary>
    [SchemaAttr(0, "appName", 0)]
    public StringValue ApplicationName { get; set; }
    /// <summary>
    /// <para> Last Edited Version.</para>
    /// <para>Represents the following attribute in the schema: lastEdited </para>
    /// </summary>
    [SchemaAttr(0, "lastEdited", 1)]
    public StringValue LastEdited { get; set; }
    /// <summary>
    /// <para> Lowest Edited Version.</para>
    /// <para>Represents the following attribute in the schema: lowestEdited </para>
    /// </summary>
    [SchemaAttr(0, "lowestEdited", 2)]
    public StringValue LowestEdited { get; set; }
    /// <summary>
    /// <para> Build Version.</para>
    /// <para>Represents the following attribute in the schema: rupBuild </para>
    /// </summary>
    [SchemaAttr(0, "rupBuild", 3)]
    public StringValue BuildVersion { get; set; }
    /// <summary>
    /// <para> Code Name.</para>
    /// <para>Represents the following attribute in the schema: codeName </para>
    /// </summary>
    [SchemaAttr(0, "codeName", 4)]
    public StringValue CodeName { get; set; }

    /// <summary>
    /// Initializes a new instance of the FileVersion class.
    /// </summary>
    public FileVersion():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FileVersion>(deep);

}
/// <summary>
/// <para>Defines the FileSharing Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fileSharing.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fileSharing")]
public partial class FileSharing : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11520;
    /// <inheritdoc/>
    public override string LocalName => "fileSharing";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Read Only Recommended.</para>
    /// <para>Represents the following attribute in the schema: readOnlyRecommended </para>
    /// </summary>
    [SchemaAttr(0, "readOnlyRecommended", 0)]
    public BooleanValue ReadOnlyRecommended { get; set; }
    /// <summary>
    /// <para> User Name.</para>
    /// <para>Represents the following attribute in the schema: userName </para>
    /// </summary>
    [SchemaAttr(0, "userName", 1)]
    public StringValue UserName { get; set; }
    /// <summary>
    /// <para> Write Reservation Password.</para>
    /// <para>Represents the following attribute in the schema: reservationPassword </para>
    /// </summary>
    [SchemaAttr(0, "reservationPassword", 2)]
    public HexBinaryValue ReservationPassword { get; set; }
    /// <summary>
    /// <para> Password hash algorithm.</para>
    /// <para>Represents the following attribute in the schema: algorithmName </para>
    /// </summary>
    [SchemaAttr(0, "algorithmName", 3)]
    public StringValue AlgorithmName { get; set; }
    /// <summary>
    /// <para> Password hash.</para>
    /// <para>Represents the following attribute in the schema: hashValue </para>
    /// </summary>
    [SchemaAttr(0, "hashValue", 4)]
    public Base64BinaryValue HashValue { get; set; }
    /// <summary>
    /// <para> Salt for password hash.</para>
    /// <para>Represents the following attribute in the schema: saltValue </para>
    /// </summary>
    [SchemaAttr(0, "saltValue", 5)]
    public Base64BinaryValue SaltValue { get; set; }
    /// <summary>
    /// <para> Spin count for password hash.</para>
    /// <para>Represents the following attribute in the schema: spinCount </para>
    /// </summary>
    [SchemaAttr(0, "spinCount", 6)]
    public UInt32Value SpinCount { get; set; }

    /// <summary>
    /// Initializes a new instance of the FileSharing class.
    /// </summary>
    public FileSharing():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FileSharing>(deep);

}
/// <summary>
/// <para>Defines the WorkbookProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:workbookPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "workbookPr")]
public partial class WorkbookProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11521;
    /// <inheritdoc/>
    public override string LocalName => "workbookPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Date 1904.</para>
    /// <para>Represents the following attribute in the schema: date1904 </para>
    /// </summary>
    [SchemaAttr(0, "date1904", 0)]
    public BooleanValue Date1904 { get; set; }
    /// <summary>
    /// <para> dateCompatibility.</para>
    /// <para>Represents the following attribute in the schema: dateCompatibility </para>
    /// </summary>
    [SchemaAttr(0, "dateCompatibility", 1)]
    public BooleanValue DateCompatibility { get; set; }
    /// <summary>
    /// <para> Show Objects.</para>
    /// <para>Represents the following attribute in the schema: showObjects </para>
    /// </summary>
    [SchemaAttr(0, "showObjects", 2)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ObjectDisplayValues> ShowObjects { get; set; }
    /// <summary>
    /// <para> Show Border Unselected Table.</para>
    /// <para>Represents the following attribute in the schema: showBorderUnselectedTables </para>
    /// </summary>
    [SchemaAttr(0, "showBorderUnselectedTables", 3)]
    public BooleanValue ShowBorderUnselectedTables { get; set; }
    /// <summary>
    /// <para> Filter Privacy.</para>
    /// <para>Represents the following attribute in the schema: filterPrivacy </para>
    /// </summary>
    [SchemaAttr(0, "filterPrivacy", 4)]
    public BooleanValue FilterPrivacy { get; set; }
    /// <summary>
    /// <para> Prompted Solutions.</para>
    /// <para>Represents the following attribute in the schema: promptedSolutions </para>
    /// </summary>
    [SchemaAttr(0, "promptedSolutions", 5)]
    public BooleanValue PromptedSolutions { get; set; }
    /// <summary>
    /// <para> Show Ink Annotations.</para>
    /// <para>Represents the following attribute in the schema: showInkAnnotation </para>
    /// </summary>
    [SchemaAttr(0, "showInkAnnotation", 6)]
    public BooleanValue ShowInkAnnotation { get; set; }
    /// <summary>
    /// <para> Create Backup File.</para>
    /// <para>Represents the following attribute in the schema: backupFile </para>
    /// </summary>
    [SchemaAttr(0, "backupFile", 7)]
    public BooleanValue BackupFile { get; set; }
    /// <summary>
    /// <para> Save External Link Values.</para>
    /// <para>Represents the following attribute in the schema: saveExternalLinkValues </para>
    /// </summary>
    [SchemaAttr(0, "saveExternalLinkValues", 8)]
    public BooleanValue SaveExternalLinkValues { get; set; }
    /// <summary>
    /// <para> Update Links Behavior.</para>
    /// <para>Represents the following attribute in the schema: updateLinks </para>
    /// </summary>
    [SchemaAttr(0, "updateLinks", 9)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.UpdateLinksBehaviorValues> UpdateLinks { get; set; }
    /// <summary>
    /// <para> Code Name.</para>
    /// <para>Represents the following attribute in the schema: codeName </para>
    /// </summary>
    [SchemaAttr(0, "codeName", 10)]
    public StringValue CodeName { get; set; }
    /// <summary>
    /// <para> Hide Pivot Field List.</para>
    /// <para>Represents the following attribute in the schema: hidePivotFieldList </para>
    /// </summary>
    [SchemaAttr(0, "hidePivotFieldList", 11)]
    public BooleanValue HidePivotFieldList { get; set; }
    /// <summary>
    /// <para> Show Pivot Chart Filter.</para>
    /// <para>Represents the following attribute in the schema: showPivotChartFilter </para>
    /// </summary>
    [SchemaAttr(0, "showPivotChartFilter", 12)]
    public BooleanValue ShowPivotChartFilter { get; set; }
    /// <summary>
    /// <para> Allow Refresh Query.</para>
    /// <para>Represents the following attribute in the schema: allowRefreshQuery </para>
    /// </summary>
    [SchemaAttr(0, "allowRefreshQuery", 13)]
    public BooleanValue AllowRefreshQuery { get; set; }
    /// <summary>
    /// <para> Publish Items.</para>
    /// <para>Represents the following attribute in the schema: publishItems </para>
    /// </summary>
    [SchemaAttr(0, "publishItems", 14)]
    public BooleanValue PublishItems { get; set; }
    /// <summary>
    /// <para> Check Compatibility On Save.</para>
    /// <para>Represents the following attribute in the schema: checkCompatibility </para>
    /// </summary>
    [SchemaAttr(0, "checkCompatibility", 15)]
    public BooleanValue CheckCompatibility { get; set; }
    /// <summary>
    /// <para> Auto Compress Pictures.</para>
    /// <para>Represents the following attribute in the schema: autoCompressPictures </para>
    /// </summary>
    [SchemaAttr(0, "autoCompressPictures", 16)]
    public BooleanValue AutoCompressPictures { get; set; }
    /// <summary>
    /// <para> Refresh all Connections on Open.</para>
    /// <para>Represents the following attribute in the schema: refreshAllConnections </para>
    /// </summary>
    [SchemaAttr(0, "refreshAllConnections", 17)]
    public BooleanValue RefreshAllConnections { get; set; }
    /// <summary>
    /// <para> Default Theme Version.</para>
    /// <para>Represents the following attribute in the schema: defaultThemeVersion </para>
    /// </summary>
    [SchemaAttr(0, "defaultThemeVersion", 18)]
    public UInt32Value DefaultThemeVersion { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorkbookProperties class.
    /// </summary>
    public WorkbookProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorkbookProperties>(deep);

}
/// <summary>
/// <para>Defines the WorkbookProtection Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:workbookProtection.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "workbookProtection")]
public partial class WorkbookProtection : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11522;
    /// <inheritdoc/>
    public override string LocalName => "workbookProtection";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Workbook Password.</para>
    /// <para>Represents the following attribute in the schema: workbookPassword </para>
    /// </summary>
    [SchemaAttr(0, "workbookPassword", 0)]
    public HexBinaryValue WorkbookPassword { get; set; }
    /// <summary>
    /// <para> Revisions Password.</para>
    /// <para>Represents the following attribute in the schema: revisionsPassword </para>
    /// </summary>
    [SchemaAttr(0, "revisionsPassword", 1)]
    public HexBinaryValue RevisionsPassword { get; set; }
    /// <summary>
    /// <para> Lock Structure.</para>
    /// <para>Represents the following attribute in the schema: lockStructure </para>
    /// </summary>
    [SchemaAttr(0, "lockStructure", 2)]
    public BooleanValue LockStructure { get; set; }
    /// <summary>
    /// <para> Lock Windows.</para>
    /// <para>Represents the following attribute in the schema: lockWindows </para>
    /// </summary>
    [SchemaAttr(0, "lockWindows", 3)]
    public BooleanValue LockWindows { get; set; }
    /// <summary>
    /// <para> Lock Revisions.</para>
    /// <para>Represents the following attribute in the schema: lockRevision </para>
    /// </summary>
    [SchemaAttr(0, "lockRevision", 4)]
    public BooleanValue LockRevision { get; set; }
    /// <summary>
    /// <para> Cryptographic Algorithm Name.</para>
    /// <para>Represents the following attribute in the schema: revisionsAlgorithmName </para>
    /// </summary>
    [SchemaAttr(0, "revisionsAlgorithmName", 5)]
    public StringValue RevisionsAlgorithmName { get; set; }
    /// <summary>
    /// <para> Password Hash Value.</para>
    /// <para>Represents the following attribute in the schema: revisionsHashValue </para>
    /// </summary>
    [SchemaAttr(0, "revisionsHashValue", 6)]
    public Base64BinaryValue RevisionsHashValue { get; set; }
    /// <summary>
    /// <para> Salt Value for Password Verifier.</para>
    /// <para>Represents the following attribute in the schema: revisionsSaltValue </para>
    /// </summary>
    [SchemaAttr(0, "revisionsSaltValue", 7)]
    public Base64BinaryValue RevisionsSaltValue { get; set; }
    /// <summary>
    /// <para> Iterations to Run Hashing Algorithm.</para>
    /// <para>Represents the following attribute in the schema: revisionsSpinCount </para>
    /// </summary>
    [SchemaAttr(0, "revisionsSpinCount", 8)]
    public UInt32Value RevisionsSpinCount { get; set; }
    /// <summary>
    /// <para> Cryptographic Algorithm Name.</para>
    /// <para>Represents the following attribute in the schema: workbookAlgorithmName </para>
    /// </summary>
    [SchemaAttr(0, "workbookAlgorithmName", 9)]
    public StringValue WorkbookAlgorithmName { get; set; }
    /// <summary>
    /// <para> Password Hash Value.</para>
    /// <para>Represents the following attribute in the schema: workbookHashValue </para>
    /// </summary>
    [SchemaAttr(0, "workbookHashValue", 10)]
    public Base64BinaryValue WorkbookHashValue { get; set; }
    /// <summary>
    /// <para> Salt Value for Password Verifier.</para>
    /// <para>Represents the following attribute in the schema: workbookSaltValue </para>
    /// </summary>
    [SchemaAttr(0, "workbookSaltValue", 11)]
    public Base64BinaryValue WorkbookSaltValue { get; set; }
    /// <summary>
    /// <para> Iterations to Run Hashing Algorithm.</para>
    /// <para>Represents the following attribute in the schema: workbookSpinCount </para>
    /// </summary>
    [SchemaAttr(0, "workbookSpinCount", 12)]
    public UInt32Value WorkbookSpinCount { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorkbookProtection class.
    /// </summary>
    public WorkbookProtection():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorkbookProtection>(deep);

}
/// <summary>
/// <para>Defines the BookViews Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:bookViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WorkbookView &lt;x:workbookView></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WorkbookView))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "bookViews")]
public partial class BookViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11523;
    /// <inheritdoc/>
    public override string LocalName => "bookViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the BookViews class.
    /// </summary>
    public BookViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the BookViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BookViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the BookViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public BookViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the BookViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public BookViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookViews>(deep);

}
/// <summary>
/// <para>Defines the Sheets Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:sheets.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>Sheet &lt;x:sheet></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(Sheet))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "sheets")]
public partial class Sheets : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11524;
    /// <inheritdoc/>
    public override string LocalName => "sheets";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the Sheets class.
    /// </summary>
    public Sheets():base(){}
    
        /// <summary>
    ///Initializes a new instance of the Sheets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Sheets(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the Sheets class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public Sheets(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the Sheets class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public Sheets(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<Sheets>(deep);

}
/// <summary>
/// <para>Defines the FunctionGroups Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:functionGroups.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>FunctionGroup &lt;x:functionGroup></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(FunctionGroup))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "functionGroups")]
public partial class FunctionGroups : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11525;
    /// <inheritdoc/>
    public override string LocalName => "functionGroups";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Built-in Function Group Count.</para>
    /// <para>Represents the following attribute in the schema: builtInGroupCount </para>
    /// </summary>
    [SchemaAttr(0, "builtInGroupCount", 0)]
    public UInt32Value BuiltInGroupCount { get; set; }

    /// <summary>
    /// Initializes a new instance of the FunctionGroups class.
    /// </summary>
    public FunctionGroups():base(){}
    
        /// <summary>
    ///Initializes a new instance of the FunctionGroups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FunctionGroups(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the FunctionGroups class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public FunctionGroups(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the FunctionGroups class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public FunctionGroups(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FunctionGroups>(deep);

}
/// <summary>
/// <para>Defines the ExternalReferences Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:externalReferences.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>ExternalReference &lt;x:externalReference></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(ExternalReference))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "externalReferences")]
public partial class ExternalReferences : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11526;
    /// <inheritdoc/>
    public override string LocalName => "externalReferences";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the ExternalReferences class.
    /// </summary>
    public ExternalReferences():base(){}
    
        /// <summary>
    ///Initializes a new instance of the ExternalReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalReferences(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalReferences class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public ExternalReferences(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the ExternalReferences class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public ExternalReferences(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalReferences>(deep);

}
/// <summary>
/// <para>Defines the DefinedNames Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:definedNames.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DefinedName &lt;x:definedName></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DefinedName))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "definedNames")]
public partial class DefinedNames : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11527;
    /// <inheritdoc/>
    public override string LocalName => "definedNames";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the DefinedNames class.
    /// </summary>
    public DefinedNames():base(){}
    
        /// <summary>
    ///Initializes a new instance of the DefinedNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefinedNames(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the DefinedNames class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public DefinedNames(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the DefinedNames class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public DefinedNames(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefinedNames>(deep);

}
/// <summary>
/// <para>Defines the CalculationProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:calcPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "calcPr")]
public partial class CalculationProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11528;
    /// <inheritdoc/>
    public override string LocalName => "calcPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Calculation Id.</para>
    /// <para>Represents the following attribute in the schema: calcId </para>
    /// </summary>
    [SchemaAttr(0, "calcId", 0)]
    public UInt32Value CalculationId { get; set; }
    /// <summary>
    /// <para> Calculation Mode.</para>
    /// <para>Represents the following attribute in the schema: calcMode </para>
    /// </summary>
    [SchemaAttr(0, "calcMode", 1)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.CalculateModeValues> CalculationMode { get; set; }
    /// <summary>
    /// <para> Full Calculation On Load.</para>
    /// <para>Represents the following attribute in the schema: fullCalcOnLoad </para>
    /// </summary>
    [SchemaAttr(0, "fullCalcOnLoad", 2)]
    public BooleanValue FullCalculationOnLoad { get; set; }
    /// <summary>
    /// <para> Reference Mode.</para>
    /// <para>Represents the following attribute in the schema: refMode </para>
    /// </summary>
    [SchemaAttr(0, "refMode", 3)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.ReferenceModeValues> ReferenceMode { get; set; }
    /// <summary>
    /// <para> Calculation Iteration.</para>
    /// <para>Represents the following attribute in the schema: iterate </para>
    /// </summary>
    [SchemaAttr(0, "iterate", 4)]
    public BooleanValue Iterate { get; set; }
    /// <summary>
    /// <para> Iteration Count.</para>
    /// <para>Represents the following attribute in the schema: iterateCount </para>
    /// </summary>
    [SchemaAttr(0, "iterateCount", 5)]
    public UInt32Value IterateCount { get; set; }
    /// <summary>
    /// <para> Iterative Calculation Delta.</para>
    /// <para>Represents the following attribute in the schema: iterateDelta </para>
    /// </summary>
    [SchemaAttr(0, "iterateDelta", 6)]
    public DoubleValue IterateDelta { get; set; }
    /// <summary>
    /// <para> Full Precision Calculation.</para>
    /// <para>Represents the following attribute in the schema: fullPrecision </para>
    /// </summary>
    [SchemaAttr(0, "fullPrecision", 7)]
    public BooleanValue FullPrecision { get; set; }
    /// <summary>
    /// <para> Calc Completed.</para>
    /// <para>Represents the following attribute in the schema: calcCompleted </para>
    /// </summary>
    [SchemaAttr(0, "calcCompleted", 8)]
    public BooleanValue CalculationCompleted { get; set; }
    /// <summary>
    /// <para> Calculate On Save.</para>
    /// <para>Represents the following attribute in the schema: calcOnSave </para>
    /// </summary>
    [SchemaAttr(0, "calcOnSave", 9)]
    public BooleanValue CalculationOnSave { get; set; }
    /// <summary>
    /// <para> Concurrent Calculations.</para>
    /// <para>Represents the following attribute in the schema: concurrentCalc </para>
    /// </summary>
    [SchemaAttr(0, "concurrentCalc", 10)]
    public BooleanValue ConcurrentCalculation { get; set; }
    /// <summary>
    /// <para> Concurrent Thread Manual Count.</para>
    /// <para>Represents the following attribute in the schema: concurrentManualCount </para>
    /// </summary>
    [SchemaAttr(0, "concurrentManualCount", 11)]
    public UInt32Value ConcurrentManualCount { get; set; }
    /// <summary>
    /// <para> Force Full Calculation.</para>
    /// <para>Represents the following attribute in the schema: forceFullCalc </para>
    /// </summary>
    [SchemaAttr(0, "forceFullCalc", 12)]
    public BooleanValue ForceFullCalculation { get; set; }

    /// <summary>
    /// Initializes a new instance of the CalculationProperties class.
    /// </summary>
    public CalculationProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculationProperties>(deep);

}
/// <summary>
/// <para>Defines the OleSize Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:oleSize.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "oleSize")]
public partial class OleSize : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11529;
    /// <inheritdoc/>
    public override string LocalName => "oleSize";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Reference.</para>
    /// <para>Represents the following attribute in the schema: ref </para>
    /// </summary>
    [SchemaAttr(0, "ref", 0)]
    public StringValue Reference { get; set; }

    /// <summary>
    /// Initializes a new instance of the OleSize class.
    /// </summary>
    public OleSize():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<OleSize>(deep);

}
/// <summary>
/// <para>Defines the CustomWorkbookViews Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:customWorkbookViews.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>CustomWorkbookView &lt;x:customWorkbookView></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(CustomWorkbookView))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "customWorkbookViews")]
public partial class CustomWorkbookViews : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11530;
    /// <inheritdoc/>
    public override string LocalName => "customWorkbookViews";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the CustomWorkbookViews class.
    /// </summary>
    public CustomWorkbookViews():base(){}
    
        /// <summary>
    ///Initializes a new instance of the CustomWorkbookViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomWorkbookViews(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomWorkbookViews class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public CustomWorkbookViews(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the CustomWorkbookViews class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public CustomWorkbookViews(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomWorkbookViews>(deep);

}
/// <summary>
/// <para>Defines the PivotCaches Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:pivotCaches.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>PivotCache &lt;x:pivotCache></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(PivotCache))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "pivotCaches")]
public partial class PivotCaches : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11531;
    /// <inheritdoc/>
    public override string LocalName => "pivotCaches";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the PivotCaches class.
    /// </summary>
    public PivotCaches():base(){}
    
        /// <summary>
    ///Initializes a new instance of the PivotCaches class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCaches(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCaches class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public PivotCaches(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the PivotCaches class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public PivotCaches(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCaches>(deep);

}
/// <summary>
/// <para>Defines the WebPublishing Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPublishing.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPublishing")]
public partial class WebPublishing : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11532;
    /// <inheritdoc/>
    public override string LocalName => "webPublishing";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> css.</para>
    /// <para>Represents the following attribute in the schema: css </para>
    /// </summary>
    [SchemaAttr(0, "css", 0)]
    public BooleanValue UseCss { get; set; }
    /// <summary>
    /// <para> thicket.</para>
    /// <para>Represents the following attribute in the schema: thicket </para>
    /// </summary>
    [SchemaAttr(0, "thicket", 1)]
    public BooleanValue Thicket { get; set; }
    /// <summary>
    /// <para> longFileNames.</para>
    /// <para>Represents the following attribute in the schema: longFileNames </para>
    /// </summary>
    [SchemaAttr(0, "longFileNames", 2)]
    public BooleanValue LongFileNames { get; set; }
    /// <summary>
    /// <para> vml.</para>
    /// <para>Represents the following attribute in the schema: vml </para>
    /// </summary>
    [SchemaAttr(0, "vml", 3)]
    public BooleanValue UseVml { get; set; }
    /// <summary>
    /// <para> allowPng.</para>
    /// <para>Represents the following attribute in the schema: allowPng </para>
    /// </summary>
    [SchemaAttr(0, "allowPng", 4)]
    public BooleanValue AllowPng { get; set; }
    /// <summary>
    /// <para> targetScreenSize.</para>
    /// <para>Represents the following attribute in the schema: targetScreenSize </para>
    /// </summary>
    [SchemaAttr(0, "targetScreenSize", 5)]
    public EnumValue<DocumentFormat.OpenXml.Spreadsheet.TargetScreenSizeValues> TargetScreenSize { get; set; }
    /// <summary>
    /// <para> dpi.</para>
    /// <para>Represents the following attribute in the schema: dpi </para>
    /// </summary>
    [SchemaAttr(0, "dpi", 6)]
    public UInt32Value Dpi { get; set; }
    /// <summary>
    /// <para> codePage.</para>
    /// <para>Represents the following attribute in the schema: codePage </para>
    /// </summary>
    [SchemaAttr(0, "codePage", 7)]
    public UInt32Value CodePage { get; set; }
    /// <summary>
    /// <para> characterSet.</para>
    /// <para>Represents the following attribute in the schema: characterSet </para>
    /// </summary>
    [SchemaAttr(0, "characterSet", 8)]
    public StringValue CharacterSet { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebPublishing class.
    /// </summary>
    public WebPublishing():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPublishing>(deep);

}
/// <summary>
/// <para>Defines the FileRecoveryProperties Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:fileRecoveryPr.</para>
/// </summary>

[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "fileRecoveryPr")]
public partial class FileRecoveryProperties : OpenXmlLeafElement
{
    internal const int ElementTypeIdConst = 11533;
    /// <inheritdoc/>
    public override string LocalName => "fileRecoveryPr";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Auto Recover.</para>
    /// <para>Represents the following attribute in the schema: autoRecover </para>
    /// </summary>
    [SchemaAttr(0, "autoRecover", 0)]
    public BooleanValue AutoRecover { get; set; }
    /// <summary>
    /// <para> Crash Save.</para>
    /// <para>Represents the following attribute in the schema: crashSave </para>
    /// </summary>
    [SchemaAttr(0, "crashSave", 1)]
    public BooleanValue CrashSave { get; set; }
    /// <summary>
    /// <para> Data Extract Load.</para>
    /// <para>Represents the following attribute in the schema: dataExtractLoad </para>
    /// </summary>
    [SchemaAttr(0, "dataExtractLoad", 2)]
    public BooleanValue DataExtractLoad { get; set; }
    /// <summary>
    /// <para> Repair Load.</para>
    /// <para>Represents the following attribute in the schema: repairLoad </para>
    /// </summary>
    [SchemaAttr(0, "repairLoad", 3)]
    public BooleanValue RepairLoad { get; set; }

    /// <summary>
    /// Initializes a new instance of the FileRecoveryProperties class.
    /// </summary>
    public FileRecoveryProperties():base(){}
    
      
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<FileRecoveryProperties>(deep);

}
/// <summary>
/// <para>Defines the WebPublishObjects Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:webPublishObjects.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WebPublishObject &lt;x:webPublishObject></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WebPublishObject))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "webPublishObjects")]
public partial class WebPublishObjects : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11534;
    /// <inheritdoc/>
    public override string LocalName => "webPublishObjects";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> Count.</para>
    /// <para>Represents the following attribute in the schema: count </para>
    /// </summary>
    [SchemaAttr(0, "count", 0)]
    public UInt32Value Count { get; set; }

    /// <summary>
    /// Initializes a new instance of the WebPublishObjects class.
    /// </summary>
    public WebPublishObjects():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WebPublishObjects class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebPublishObjects(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WebPublishObjects class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WebPublishObjects(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WebPublishObjects class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WebPublishObjects(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPublishObjects>(deep);

}
/// <summary>
/// <para>Defines the WorkbookExtensionList Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:extLst.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>WorkbookExtension &lt;x:ext></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(WorkbookExtension))]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "extLst")]
public partial class WorkbookExtensionList : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11535;
    /// <inheritdoc/>
    public override string LocalName => "extLst";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
    
    /// <summary>
    /// Initializes a new instance of the WorkbookExtensionList class.
    /// </summary>
    public WorkbookExtensionList():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WorkbookExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookExtensionList(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookExtensionList class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookExtensionList(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookExtensionList class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WorkbookExtensionList(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorkbookExtensionList>(deep);

}
/// <summary>
/// <para>Defines the WorkbookExtension Class.</para>
/// <para>This class is available in Office 2007 or above.</para>
/// <para> When the object is serialized out as xml, its qualified name is x:ext.</para>
/// </summary>
/// <remarks>
/// The following table lists the possible child types:
/// <list type="bullet">
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.DefinedNames &lt;x14:definedNames></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.PivotCaches &lt;x14:pivotCaches></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.SlicerCaches &lt;x14:slicerCaches></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.SlicerCaches &lt;x15:slicerCaches></description></item>
///<item><description>DocumentFormat.OpenXml.Office2010.Excel.WorkbookProperties &lt;x14:workbookPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotCaches &lt;x15:pivotCaches></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.PivotTableReferences &lt;x15:pivotTableReferences></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TimelineCachePivotCaches &lt;x15:timelineCachePivotCaches></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.TimelineCacheReferences &lt;x15:timelineCacheRefs></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.WorkbookProperties &lt;x15:workbookPr></description></item>
///<item><description>DocumentFormat.OpenXml.Office2013.Excel.DataModel &lt;x15:dataModel></description></item>
/// </list>
/// </remarks>

    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.DefinedNames), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.PivotCaches), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.SlicerCaches), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.SlicerCaches), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.WorkbookProperties), FileFormatVersions.Office2010)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotCaches), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.PivotTableReferences), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TimelineCachePivotCaches), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.TimelineCacheReferences), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.WorkbookProperties), FileFormatVersions.Office2013)]
    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2013.Excel.DataModel), FileFormatVersions.Office2013)]
[System.CodeDom.Compiler.GeneratedCode("DomGen", "3.0")]
[OfficeAvailability(FileFormatVersions.Office2007)]
[SchemaAttr(22, "ext")]
public partial class WorkbookExtension : OpenXmlCompositeElement
{
    internal const int ElementTypeIdConst = 11536;
    /// <inheritdoc/>
    public override string LocalName => "ext";
    internal override byte NamespaceId => 22;
    internal override int ElementTypeId => ElementTypeIdConst;
    internal override FileFormatVersions InitialVersion => FileFormatVersions.Office2007;

    
    
        /// <summary>
    /// <para> URI.</para>
    /// <para>Represents the following attribute in the schema: uri </para>
    /// </summary>
    [SchemaAttr(0, "uri", 0)]
    public StringValue Uri { get; set; }

    /// <summary>
    /// Initializes a new instance of the WorkbookExtension class.
    /// </summary>
    public WorkbookExtension():base(){}
    
        /// <summary>
    ///Initializes a new instance of the WorkbookExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookExtension(System.Collections.Generic.IEnumerable<OpenXmlElement> childElements)
        : base(childElements)
    { 
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookExtension class with the specified child elements.
    /// </summary>
    /// <param name="childElements">Specifies the child elements.</param>
    public WorkbookExtension(params OpenXmlElement[] childElements) : base(childElements)
    {
    }
    
    /// <summary>
    /// Initializes a new instance of the WorkbookExtension class from outer XML.
    /// </summary>
    /// <param name="outerXml">Specifies the outer XML of the element.</param>
    public WorkbookExtension(string outerXml)
        : base(outerXml)
    {
    }
    
  
     
    
    
    
    /// <inheritdoc/>
    public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorkbookExtension>(deep);

}
/// <summary>
/// Filter Operator 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FilterOperatorValues
{  
	///<summary>
///Equal.
///<para>When the item is serialized out as xml, its value is "equal".</para>
///</summary>
[EnumString("equal")]
Equal,
///<summary>
///Less Than.
///<para>When the item is serialized out as xml, its value is "lessThan".</para>
///</summary>
[EnumString("lessThan")]
LessThan,
///<summary>
///Less Than Or Equal.
///<para>When the item is serialized out as xml, its value is "lessThanOrEqual".</para>
///</summary>
[EnumString("lessThanOrEqual")]
LessThanOrEqual,
///<summary>
///Not Equal.
///<para>When the item is serialized out as xml, its value is "notEqual".</para>
///</summary>
[EnumString("notEqual")]
NotEqual,
///<summary>
///Greater Than Or Equal.
///<para>When the item is serialized out as xml, its value is "greaterThanOrEqual".</para>
///</summary>
[EnumString("greaterThanOrEqual")]
GreaterThanOrEqual,
///<summary>
///Greater Than.
///<para>When the item is serialized out as xml, its value is "greaterThan".</para>
///</summary>
[EnumString("greaterThan")]
GreaterThan,
 
}
/// <summary>
/// Dynamic Filter 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DynamicFilterValues
{  
	///<summary>
///Null.
///<para>When the item is serialized out as xml, its value is "null".</para>
///</summary>
[EnumString("null")]
Null,
///<summary>
///Above Average.
///<para>When the item is serialized out as xml, its value is "aboveAverage".</para>
///</summary>
[EnumString("aboveAverage")]
AboveAverage,
///<summary>
///Below Average.
///<para>When the item is serialized out as xml, its value is "belowAverage".</para>
///</summary>
[EnumString("belowAverage")]
BelowAverage,
///<summary>
///Tomorrow.
///<para>When the item is serialized out as xml, its value is "tomorrow".</para>
///</summary>
[EnumString("tomorrow")]
Tomorrow,
///<summary>
///Today.
///<para>When the item is serialized out as xml, its value is "today".</para>
///</summary>
[EnumString("today")]
Today,
///<summary>
///Yesterday.
///<para>When the item is serialized out as xml, its value is "yesterday".</para>
///</summary>
[EnumString("yesterday")]
Yesterday,
///<summary>
///Next Week.
///<para>When the item is serialized out as xml, its value is "nextWeek".</para>
///</summary>
[EnumString("nextWeek")]
NextWeek,
///<summary>
///This Week.
///<para>When the item is serialized out as xml, its value is "thisWeek".</para>
///</summary>
[EnumString("thisWeek")]
ThisWeek,
///<summary>
///Last Week.
///<para>When the item is serialized out as xml, its value is "lastWeek".</para>
///</summary>
[EnumString("lastWeek")]
LastWeek,
///<summary>
///Next Month.
///<para>When the item is serialized out as xml, its value is "nextMonth".</para>
///</summary>
[EnumString("nextMonth")]
NextMonth,
///<summary>
///This Month.
///<para>When the item is serialized out as xml, its value is "thisMonth".</para>
///</summary>
[EnumString("thisMonth")]
ThisMonth,
///<summary>
///Last Month.
///<para>When the item is serialized out as xml, its value is "lastMonth".</para>
///</summary>
[EnumString("lastMonth")]
LastMonth,
///<summary>
///Next Quarter.
///<para>When the item is serialized out as xml, its value is "nextQuarter".</para>
///</summary>
[EnumString("nextQuarter")]
NextQuarter,
///<summary>
///This Quarter.
///<para>When the item is serialized out as xml, its value is "thisQuarter".</para>
///</summary>
[EnumString("thisQuarter")]
ThisQuarter,
///<summary>
///Last Quarter.
///<para>When the item is serialized out as xml, its value is "lastQuarter".</para>
///</summary>
[EnumString("lastQuarter")]
LastQuarter,
///<summary>
///Next Year.
///<para>When the item is serialized out as xml, its value is "nextYear".</para>
///</summary>
[EnumString("nextYear")]
NextYear,
///<summary>
///This Year.
///<para>When the item is serialized out as xml, its value is "thisYear".</para>
///</summary>
[EnumString("thisYear")]
ThisYear,
///<summary>
///Last Year.
///<para>When the item is serialized out as xml, its value is "lastYear".</para>
///</summary>
[EnumString("lastYear")]
LastYear,
///<summary>
///Year To Date.
///<para>When the item is serialized out as xml, its value is "yearToDate".</para>
///</summary>
[EnumString("yearToDate")]
YearToDate,
///<summary>
///1st Quarter.
///<para>When the item is serialized out as xml, its value is "Q1".</para>
///</summary>
[EnumString("Q1")]
Quarter1,
///<summary>
///2nd Quarter.
///<para>When the item is serialized out as xml, its value is "Q2".</para>
///</summary>
[EnumString("Q2")]
Quarter2,
///<summary>
///3rd Quarter.
///<para>When the item is serialized out as xml, its value is "Q3".</para>
///</summary>
[EnumString("Q3")]
Quarter3,
///<summary>
///4th Quarter.
///<para>When the item is serialized out as xml, its value is "Q4".</para>
///</summary>
[EnumString("Q4")]
Quarter4,
///<summary>
///1st Month.
///<para>When the item is serialized out as xml, its value is "M1".</para>
///</summary>
[EnumString("M1")]
January,
///<summary>
///2nd Month.
///<para>When the item is serialized out as xml, its value is "M2".</para>
///</summary>
[EnumString("M2")]
February,
///<summary>
///3rd Month.
///<para>When the item is serialized out as xml, its value is "M3".</para>
///</summary>
[EnumString("M3")]
March,
///<summary>
///4th Month.
///<para>When the item is serialized out as xml, its value is "M4".</para>
///</summary>
[EnumString("M4")]
April,
///<summary>
///5th Month.
///<para>When the item is serialized out as xml, its value is "M5".</para>
///</summary>
[EnumString("M5")]
May,
///<summary>
///6th Month.
///<para>When the item is serialized out as xml, its value is "M6".</para>
///</summary>
[EnumString("M6")]
June,
///<summary>
///7th Month.
///<para>When the item is serialized out as xml, its value is "M7".</para>
///</summary>
[EnumString("M7")]
July,
///<summary>
///8th Month.
///<para>When the item is serialized out as xml, its value is "M8".</para>
///</summary>
[EnumString("M8")]
August,
///<summary>
///9th Month.
///<para>When the item is serialized out as xml, its value is "M9".</para>
///</summary>
[EnumString("M9")]
September,
///<summary>
///10th Month.
///<para>When the item is serialized out as xml, its value is "M10".</para>
///</summary>
[EnumString("M10")]
October,
///<summary>
///11th Month.
///<para>When the item is serialized out as xml, its value is "M11".</para>
///</summary>
[EnumString("M11")]
November,
///<summary>
///12th Month.
///<para>When the item is serialized out as xml, its value is "M12".</para>
///</summary>
[EnumString("M12")]
December,
 
}
/// <summary>
/// Icon Set Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum IconSetValues
{  
	///<summary>
///3 Arrows.
///<para>When the item is serialized out as xml, its value is "3Arrows".</para>
///</summary>
[EnumString("3Arrows")]
ThreeArrows,
///<summary>
///3 Arrows  (Gray).
///<para>When the item is serialized out as xml, its value is "3ArrowsGray".</para>
///</summary>
[EnumString("3ArrowsGray")]
ThreeArrowsGray,
///<summary>
///3 Flags.
///<para>When the item is serialized out as xml, its value is "3Flags".</para>
///</summary>
[EnumString("3Flags")]
ThreeFlags,
///<summary>
///3 Traffic Lights.
///<para>When the item is serialized out as xml, its value is "3TrafficLights1".</para>
///</summary>
[EnumString("3TrafficLights1")]
ThreeTrafficLights1,
///<summary>
///3 Traffic Lights Black.
///<para>When the item is serialized out as xml, its value is "3TrafficLights2".</para>
///</summary>
[EnumString("3TrafficLights2")]
ThreeTrafficLights2,
///<summary>
///3 Signs.
///<para>When the item is serialized out as xml, its value is "3Signs".</para>
///</summary>
[EnumString("3Signs")]
ThreeSigns,
///<summary>
///3 Symbols Circled.
///<para>When the item is serialized out as xml, its value is "3Symbols".</para>
///</summary>
[EnumString("3Symbols")]
ThreeSymbols,
///<summary>
///3 Symbols.
///<para>When the item is serialized out as xml, its value is "3Symbols2".</para>
///</summary>
[EnumString("3Symbols2")]
ThreeSymbols2,
///<summary>
///4 Arrows.
///<para>When the item is serialized out as xml, its value is "4Arrows".</para>
///</summary>
[EnumString("4Arrows")]
FourArrows,
///<summary>
///4 Arrows (Gray).
///<para>When the item is serialized out as xml, its value is "4ArrowsGray".</para>
///</summary>
[EnumString("4ArrowsGray")]
FourArrowsGray,
///<summary>
///4 Red To Black.
///<para>When the item is serialized out as xml, its value is "4RedToBlack".</para>
///</summary>
[EnumString("4RedToBlack")]
FourRedToBlack,
///<summary>
///4 Ratings.
///<para>When the item is serialized out as xml, its value is "4Rating".</para>
///</summary>
[EnumString("4Rating")]
FourRating,
///<summary>
///4 Traffic Lights.
///<para>When the item is serialized out as xml, its value is "4TrafficLights".</para>
///</summary>
[EnumString("4TrafficLights")]
FourTrafficLights,
///<summary>
///5 Arrows.
///<para>When the item is serialized out as xml, its value is "5Arrows".</para>
///</summary>
[EnumString("5Arrows")]
FiveArrows,
///<summary>
///5 Arrows (Gray).
///<para>When the item is serialized out as xml, its value is "5ArrowsGray".</para>
///</summary>
[EnumString("5ArrowsGray")]
FiveArrowsGray,
///<summary>
///5 Ratings Icon Set.
///<para>When the item is serialized out as xml, its value is "5Rating".</para>
///</summary>
[EnumString("5Rating")]
FiveRating,
///<summary>
///5 Quarters.
///<para>When the item is serialized out as xml, its value is "5Quarters".</para>
///</summary>
[EnumString("5Quarters")]
FiveQuarters,
 
}
/// <summary>
/// Sort By 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SortByValues
{  
	///<summary>
///Value.
///<para>When the item is serialized out as xml, its value is "value".</para>
///</summary>
[EnumString("value")]
Value,
///<summary>
///Sort by Cell Color.
///<para>When the item is serialized out as xml, its value is "cellColor".</para>
///</summary>
[EnumString("cellColor")]
CellColor,
///<summary>
///Sort by Font Color.
///<para>When the item is serialized out as xml, its value is "fontColor".</para>
///</summary>
[EnumString("fontColor")]
FontColor,
///<summary>
///Sort by Icon.
///<para>When the item is serialized out as xml, its value is "icon".</para>
///</summary>
[EnumString("icon")]
Icon,
 
}
/// <summary>
/// Sort Method 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SortMethodValues
{  
	///<summary>
///Sort by Stroke.
///<para>When the item is serialized out as xml, its value is "stroke".</para>
///</summary>
[EnumString("stroke")]
Stroke,
///<summary>
///PinYin Sort.
///<para>When the item is serialized out as xml, its value is "pinYin".</para>
///</summary>
[EnumString("pinYin")]
PinYin,
///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// Calendar Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CalendarValues
{  
	///<summary>
///No Calendar Type.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Gregorian.
///<para>When the item is serialized out as xml, its value is "gregorian".</para>
///</summary>
[EnumString("gregorian")]
Gregorian,
///<summary>
///Gregorian (U.S.) Calendar.
///<para>When the item is serialized out as xml, its value is "gregorianUs".</para>
///</summary>
[EnumString("gregorianUs")]
GregorianUs,
///<summary>
///Japanese Emperor Era Calendar.
///<para>When the item is serialized out as xml, its value is "japan".</para>
///</summary>
[EnumString("japan")]
Japan,
///<summary>
///Taiwan Era Calendar.
///<para>When the item is serialized out as xml, its value is "taiwan".</para>
///</summary>
[EnumString("taiwan")]
Taiwan,
///<summary>
///Korean Tangun Era Calendar.
///<para>When the item is serialized out as xml, its value is "korea".</para>
///</summary>
[EnumString("korea")]
Korea,
///<summary>
///Hijri (Arabic Lunar) Calendar.
///<para>When the item is serialized out as xml, its value is "hijri".</para>
///</summary>
[EnumString("hijri")]
Hijri,
///<summary>
///Thai Calendar.
///<para>When the item is serialized out as xml, its value is "thai".</para>
///</summary>
[EnumString("thai")]
Thai,
///<summary>
///Hebrew (Lunar) Calendar.
///<para>When the item is serialized out as xml, its value is "hebrew".</para>
///</summary>
[EnumString("hebrew")]
Hebrew,
///<summary>
///Gregorian Middle East French Calendar.
///<para>When the item is serialized out as xml, its value is "gregorianMeFrench".</para>
///</summary>
[EnumString("gregorianMeFrench")]
GregorianMiddleEastFrench,
///<summary>
///Gregorian Arabic Calendar.
///<para>When the item is serialized out as xml, its value is "gregorianArabic".</para>
///</summary>
[EnumString("gregorianArabic")]
GregorianArabic,
///<summary>
///Gregorian Transliterated English Calendar.
///<para>When the item is serialized out as xml, its value is "gregorianXlitEnglish".</para>
///</summary>
[EnumString("gregorianXlitEnglish")]
GregorianTransliteratedEnglish,
///<summary>
///Gregorian Transliterated French Calendar.
///<para>When the item is serialized out as xml, its value is "gregorianXlitFrench".</para>
///</summary>
[EnumString("gregorianXlitFrench")]
GregorianTransliteratedFrench,
 
}
/// <summary>
/// Date Time Grouping 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DateTimeGroupingValues
{  
	///<summary>
///Group by Year.
///<para>When the item is serialized out as xml, its value is "year".</para>
///</summary>
[EnumString("year")]
Year,
///<summary>
///Month.
///<para>When the item is serialized out as xml, its value is "month".</para>
///</summary>
[EnumString("month")]
Month,
///<summary>
///Day.
///<para>When the item is serialized out as xml, its value is "day".</para>
///</summary>
[EnumString("day")]
Day,
///<summary>
///Group by Hour.
///<para>When the item is serialized out as xml, its value is "hour".</para>
///</summary>
[EnumString("hour")]
Hour,
///<summary>
///Group by Minute.
///<para>When the item is serialized out as xml, its value is "minute".</para>
///</summary>
[EnumString("minute")]
Minute,
///<summary>
///Second.
///<para>When the item is serialized out as xml, its value is "second".</para>
///</summary>
[EnumString("second")]
Second,
 
}
/// <summary>
/// HTML Formatting Handling 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum HtmlFormattingValues
{  
	///<summary>
///No Formatting.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Honor Rich Text.
///<para>When the item is serialized out as xml, its value is "rtf".</para>
///</summary>
[EnumString("rtf")]
HonorRichText,
///<summary>
///All.
///<para>When the item is serialized out as xml, its value is "all".</para>
///</summary>
[EnumString("all")]
All,
 
}
/// <summary>
/// Parameter Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ParameterValues
{  
	///<summary>
///Prompt on Refresh.
///<para>When the item is serialized out as xml, its value is "prompt".</para>
///</summary>
[EnumString("prompt")]
Prompt,
///<summary>
///Value.
///<para>When the item is serialized out as xml, its value is "value".</para>
///</summary>
[EnumString("value")]
Value,
///<summary>
///Parameter From Cell.
///<para>When the item is serialized out as xml, its value is "cell".</para>
///</summary>
[EnumString("cell")]
Cell,
 
}
/// <summary>
/// File Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FileTypeValues
{  
	///<summary>
///Macintosh.
///<para>When the item is serialized out as xml, its value is "mac".</para>
///</summary>
[EnumString("mac")]
Mac,
///<summary>
///Windows (ANSI).
///<para>When the item is serialized out as xml, its value is "win".</para>
///</summary>
[EnumString("win")]
Win,
///<summary>
///DOS.
///<para>When the item is serialized out as xml, its value is "dos".</para>
///</summary>
[EnumString("dos")]
Dos,
 
}
/// <summary>
/// Qualifier 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum QualifierValues
{  
	///<summary>
///Double Quote.
///<para>When the item is serialized out as xml, its value is "doubleQuote".</para>
///</summary>
[EnumString("doubleQuote")]
DoubleQuote,
///<summary>
///Single Quote.
///<para>When the item is serialized out as xml, its value is "singleQuote".</para>
///</summary>
[EnumString("singleQuote")]
SingleQuote,
///<summary>
///No Text Qualifier.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// Text Field Data Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ExternalConnectionValues
{  
	///<summary>
///General.
///<para>When the item is serialized out as xml, its value is "general".</para>
///</summary>
[EnumString("general")]
General,
///<summary>
///Text.
///<para>When the item is serialized out as xml, its value is "text".</para>
///</summary>
[EnumString("text")]
Text,
///<summary>
///Month Day Year.
///<para>When the item is serialized out as xml, its value is "MDY".</para>
///</summary>
[EnumString("MDY")]
MonthDayYear,
///<summary>
///Day Month Year.
///<para>When the item is serialized out as xml, its value is "DMY".</para>
///</summary>
[EnumString("DMY")]
DayMonthYear,
///<summary>
///Year Month Day.
///<para>When the item is serialized out as xml, its value is "YMD".</para>
///</summary>
[EnumString("YMD")]
YearMonthDay,
///<summary>
///Month Day Year.
///<para>When the item is serialized out as xml, its value is "MYD".</para>
///</summary>
[EnumString("MYD")]
MonthYearDay,
///<summary>
///Day Year Month.
///<para>When the item is serialized out as xml, its value is "DYM".</para>
///</summary>
[EnumString("DYM")]
DayYearMonth,
///<summary>
///Year Day Month.
///<para>When the item is serialized out as xml, its value is "YDM".</para>
///</summary>
[EnumString("YDM")]
YearDayMonth,
///<summary>
///Skip Field.
///<para>When the item is serialized out as xml, its value is "skip".</para>
///</summary>
[EnumString("skip")]
Skip,
///<summary>
///East Asian Year Month Day.
///<para>When the item is serialized out as xml, its value is "EMD".</para>
///</summary>
[EnumString("EMD")]
EMD,
 
}
/// <summary>
/// Credentials Method 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CredentialsMethodValues
{  
	///<summary>
///Integrated Authentication.
///<para>When the item is serialized out as xml, its value is "integrated".</para>
///</summary>
[EnumString("integrated")]
Integrated,
///<summary>
///No Credentials.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Stored Credentials.
///<para>When the item is serialized out as xml, its value is "stored".</para>
///</summary>
[EnumString("stored")]
Stored,
 
}
/// <summary>
/// PivotCache Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SourceValues
{  
	///<summary>
///Worksheet.
///<para>When the item is serialized out as xml, its value is "worksheet".</para>
///</summary>
[EnumString("worksheet")]
Worksheet,
///<summary>
///External.
///<para>When the item is serialized out as xml, its value is "external".</para>
///</summary>
[EnumString("external")]
External,
///<summary>
///Consolidation Ranges.
///<para>When the item is serialized out as xml, its value is "consolidation".</para>
///</summary>
[EnumString("consolidation")]
Consolidation,
///<summary>
///Scenario Summary Report.
///<para>When the item is serialized out as xml, its value is "scenario".</para>
///</summary>
[EnumString("scenario")]
Scenario,
 
}
/// <summary>
/// Values Group By 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum GroupByValues
{  
	///<summary>
///Group By Numeric Ranges.
///<para>When the item is serialized out as xml, its value is "range".</para>
///</summary>
[EnumString("range")]
Range,
///<summary>
///Seconds.
///<para>When the item is serialized out as xml, its value is "seconds".</para>
///</summary>
[EnumString("seconds")]
Seconds,
///<summary>
///Minutes.
///<para>When the item is serialized out as xml, its value is "minutes".</para>
///</summary>
[EnumString("minutes")]
Minutes,
///<summary>
///Hours.
///<para>When the item is serialized out as xml, its value is "hours".</para>
///</summary>
[EnumString("hours")]
Hours,
///<summary>
///Days.
///<para>When the item is serialized out as xml, its value is "days".</para>
///</summary>
[EnumString("days")]
Days,
///<summary>
///Months.
///<para>When the item is serialized out as xml, its value is "months".</para>
///</summary>
[EnumString("months")]
Months,
///<summary>
///Quarters.
///<para>When the item is serialized out as xml, its value is "quarters".</para>
///</summary>
[EnumString("quarters")]
Quarters,
///<summary>
///Years.
///<para>When the item is serialized out as xml, its value is "years".</para>
///</summary>
[EnumString("years")]
Years,
 
}
/// <summary>
/// Set Sort Order 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SortValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Ascending.
///<para>When the item is serialized out as xml, its value is "ascending".</para>
///</summary>
[EnumString("ascending")]
Ascending,
///<summary>
///Descending.
///<para>When the item is serialized out as xml, its value is "descending".</para>
///</summary>
[EnumString("descending")]
Descending,
///<summary>
///Ascending Alpha.
///<para>When the item is serialized out as xml, its value is "ascendingAlpha".</para>
///</summary>
[EnumString("ascendingAlpha")]
AscendingAlpha,
///<summary>
///Alphabetic Order Descending.
///<para>When the item is serialized out as xml, its value is "descendingAlpha".</para>
///</summary>
[EnumString("descendingAlpha")]
DescendingAlpha,
///<summary>
///Ascending Natural.
///<para>When the item is serialized out as xml, its value is "ascendingNatural".</para>
///</summary>
[EnumString("ascendingNatural")]
AscendingNatural,
///<summary>
///Natural Order Descending.
///<para>When the item is serialized out as xml, its value is "descendingNatural".</para>
///</summary>
[EnumString("descendingNatural")]
DescendingNatural,
 
}
/// <summary>
/// Conditional Formatting Scope 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ScopeValues
{  
	///<summary>
///Selection.
///<para>When the item is serialized out as xml, its value is "selection".</para>
///</summary>
[EnumString("selection")]
Selection,
///<summary>
///Data Fields.
///<para>When the item is serialized out as xml, its value is "data".</para>
///</summary>
[EnumString("data")]
Data,
///<summary>
///Field Intersections.
///<para>When the item is serialized out as xml, its value is "field".</para>
///</summary>
[EnumString("field")]
Field,
 
}
/// <summary>
/// Top N Evaluation Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum RuleValues
{  
	///<summary>
///Top N None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///All.
///<para>When the item is serialized out as xml, its value is "all".</para>
///</summary>
[EnumString("all")]
All,
///<summary>
///Row Top N.
///<para>When the item is serialized out as xml, its value is "row".</para>
///</summary>
[EnumString("row")]
Row,
///<summary>
///Column Top N.
///<para>When the item is serialized out as xml, its value is "column".</para>
///</summary>
[EnumString("column")]
Column,
 
}
/// <summary>
/// Show Data As 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ShowDataAsValues
{  
	///<summary>
///Normal Data Type.
///<para>When the item is serialized out as xml, its value is "normal".</para>
///</summary>
[EnumString("normal")]
Normal,
///<summary>
///Difference.
///<para>When the item is serialized out as xml, its value is "difference".</para>
///</summary>
[EnumString("difference")]
Difference,
///<summary>
///Percentage Of.
///<para>When the item is serialized out as xml, its value is "percent".</para>
///</summary>
[EnumString("percent")]
Percent,
///<summary>
///Percentage Difference.
///<para>When the item is serialized out as xml, its value is "percentDiff".</para>
///</summary>
[EnumString("percentDiff")]
PercentageDifference,
///<summary>
///Running Total.
///<para>When the item is serialized out as xml, its value is "runTotal".</para>
///</summary>
[EnumString("runTotal")]
RunTotal,
///<summary>
///Percentage of Row.
///<para>When the item is serialized out as xml, its value is "percentOfRow".</para>
///</summary>
[EnumString("percentOfRow")]
PercentOfRaw,
///<summary>
///Percent of Column.
///<para>When the item is serialized out as xml, its value is "percentOfCol".</para>
///</summary>
[EnumString("percentOfCol")]
PercentOfColumn,
///<summary>
///Percentage of Total.
///<para>When the item is serialized out as xml, its value is "percentOfTotal".</para>
///</summary>
[EnumString("percentOfTotal")]
PercentOfTotal,
///<summary>
///Index.
///<para>When the item is serialized out as xml, its value is "index".</para>
///</summary>
[EnumString("index")]
Index,
 
}
/// <summary>
/// PivotItem Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ItemValues
{  
	///<summary>
///Data.
///<para>When the item is serialized out as xml, its value is "data".</para>
///</summary>
[EnumString("data")]
Data,
///<summary>
///Default.
///<para>When the item is serialized out as xml, its value is "default".</para>
///</summary>
[EnumString("default")]
Default,
///<summary>
///Sum.
///<para>When the item is serialized out as xml, its value is "sum".</para>
///</summary>
[EnumString("sum")]
Sum,
///<summary>
///CountA.
///<para>When the item is serialized out as xml, its value is "countA".</para>
///</summary>
[EnumString("countA")]
CountA,
///<summary>
///Average.
///<para>When the item is serialized out as xml, its value is "avg".</para>
///</summary>
[EnumString("avg")]
Average,
///<summary>
///Max.
///<para>When the item is serialized out as xml, its value is "max".</para>
///</summary>
[EnumString("max")]
Maximum,
///<summary>
///Min.
///<para>When the item is serialized out as xml, its value is "min".</para>
///</summary>
[EnumString("min")]
Minimum,
///<summary>
///Product.
///<para>When the item is serialized out as xml, its value is "product".</para>
///</summary>
[EnumString("product")]
Product,
///<summary>
///Count.
///<para>When the item is serialized out as xml, its value is "count".</para>
///</summary>
[EnumString("count")]
Count,
///<summary>
///stdDev.
///<para>When the item is serialized out as xml, its value is "stdDev".</para>
///</summary>
[EnumString("stdDev")]
StandardDeviation,
///<summary>
///StdDevP.
///<para>When the item is serialized out as xml, its value is "stdDevP".</para>
///</summary>
[EnumString("stdDevP")]
StandardDeviationP,
///<summary>
///Var.
///<para>When the item is serialized out as xml, its value is "var".</para>
///</summary>
[EnumString("var")]
Variance,
///<summary>
///VarP.
///<para>When the item is serialized out as xml, its value is "varP".</para>
///</summary>
[EnumString("varP")]
VarianceP,
///<summary>
///Grand Total Item.
///<para>When the item is serialized out as xml, its value is "grand".</para>
///</summary>
[EnumString("grand")]
Grand,
///<summary>
///Blank Pivot Item.
///<para>When the item is serialized out as xml, its value is "blank".</para>
///</summary>
[EnumString("blank")]
Blank,
 
}
/// <summary>
/// Field Sort Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FieldSortValues
{  
	///<summary>
///Manual Sort.
///<para>When the item is serialized out as xml, its value is "manual".</para>
///</summary>
[EnumString("manual")]
Manual,
///<summary>
///Ascending.
///<para>When the item is serialized out as xml, its value is "ascending".</para>
///</summary>
[EnumString("ascending")]
Ascending,
///<summary>
///Descending.
///<para>When the item is serialized out as xml, its value is "descending".</para>
///</summary>
[EnumString("descending")]
Descending,
 
}
/// <summary>
/// Pivot Filter Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PivotFilterValues
{  
	///<summary>
///Unknown.
///<para>When the item is serialized out as xml, its value is "unknown".</para>
///</summary>
[EnumString("unknown")]
Unknown,
///<summary>
///Count.
///<para>When the item is serialized out as xml, its value is "count".</para>
///</summary>
[EnumString("count")]
Count,
///<summary>
///Percent.
///<para>When the item is serialized out as xml, its value is "percent".</para>
///</summary>
[EnumString("percent")]
Percent,
///<summary>
///Sum.
///<para>When the item is serialized out as xml, its value is "sum".</para>
///</summary>
[EnumString("sum")]
Sum,
///<summary>
///Caption Equals.
///<para>When the item is serialized out as xml, its value is "captionEqual".</para>
///</summary>
[EnumString("captionEqual")]
CaptionEqual,
///<summary>
///Caption Not Equal.
///<para>When the item is serialized out as xml, its value is "captionNotEqual".</para>
///</summary>
[EnumString("captionNotEqual")]
CaptionNotEqual,
///<summary>
///Caption Begins With.
///<para>When the item is serialized out as xml, its value is "captionBeginsWith".</para>
///</summary>
[EnumString("captionBeginsWith")]
CaptionBeginsWith,
///<summary>
///Caption Does Not Begin With.
///<para>When the item is serialized out as xml, its value is "captionNotBeginsWith".</para>
///</summary>
[EnumString("captionNotBeginsWith")]
CaptionNotBeginsWith,
///<summary>
///Caption Ends With.
///<para>When the item is serialized out as xml, its value is "captionEndsWith".</para>
///</summary>
[EnumString("captionEndsWith")]
CaptionEndsWith,
///<summary>
///Caption Does Not End With.
///<para>When the item is serialized out as xml, its value is "captionNotEndsWith".</para>
///</summary>
[EnumString("captionNotEndsWith")]
CaptionNotEndsWith,
///<summary>
///Caption Contains.
///<para>When the item is serialized out as xml, its value is "captionContains".</para>
///</summary>
[EnumString("captionContains")]
CaptionContains,
///<summary>
///Caption Does Not Contain.
///<para>When the item is serialized out as xml, its value is "captionNotContains".</para>
///</summary>
[EnumString("captionNotContains")]
CaptionNotContains,
///<summary>
///Caption Is Greater Than.
///<para>When the item is serialized out as xml, its value is "captionGreaterThan".</para>
///</summary>
[EnumString("captionGreaterThan")]
CaptionGreaterThan,
///<summary>
///Caption Is Greater Than Or Equal To.
///<para>When the item is serialized out as xml, its value is "captionGreaterThanOrEqual".</para>
///</summary>
[EnumString("captionGreaterThanOrEqual")]
CaptionGreaterThanOrEqual,
///<summary>
///Caption Is Less Than.
///<para>When the item is serialized out as xml, its value is "captionLessThan".</para>
///</summary>
[EnumString("captionLessThan")]
CaptionLessThan,
///<summary>
///Caption Is Less Than Or Equal To.
///<para>When the item is serialized out as xml, its value is "captionLessThanOrEqual".</para>
///</summary>
[EnumString("captionLessThanOrEqual")]
CaptionLessThanOrEqual,
///<summary>
///Caption Is Between.
///<para>When the item is serialized out as xml, its value is "captionBetween".</para>
///</summary>
[EnumString("captionBetween")]
CaptionBetween,
///<summary>
///Caption Is Not Between.
///<para>When the item is serialized out as xml, its value is "captionNotBetween".</para>
///</summary>
[EnumString("captionNotBetween")]
CaptionNotBetween,
///<summary>
///Value Equal.
///<para>When the item is serialized out as xml, its value is "valueEqual".</para>
///</summary>
[EnumString("valueEqual")]
ValueEqual,
///<summary>
///Value Not Equal.
///<para>When the item is serialized out as xml, its value is "valueNotEqual".</para>
///</summary>
[EnumString("valueNotEqual")]
ValueNotEqual,
///<summary>
///Value Greater Than.
///<para>When the item is serialized out as xml, its value is "valueGreaterThan".</para>
///</summary>
[EnumString("valueGreaterThan")]
ValueGreaterThan,
///<summary>
///Value Greater Than Or Equal To.
///<para>When the item is serialized out as xml, its value is "valueGreaterThanOrEqual".</para>
///</summary>
[EnumString("valueGreaterThanOrEqual")]
ValueGreaterThanOrEqual,
///<summary>
///Value Less Than.
///<para>When the item is serialized out as xml, its value is "valueLessThan".</para>
///</summary>
[EnumString("valueLessThan")]
ValueLessThan,
///<summary>
///Value Less Than Or Equal To.
///<para>When the item is serialized out as xml, its value is "valueLessThanOrEqual".</para>
///</summary>
[EnumString("valueLessThanOrEqual")]
ValueLessThanOrEqual,
///<summary>
///Value Between.
///<para>When the item is serialized out as xml, its value is "valueBetween".</para>
///</summary>
[EnumString("valueBetween")]
ValueBetween,
///<summary>
///Value Not Between.
///<para>When the item is serialized out as xml, its value is "valueNotBetween".</para>
///</summary>
[EnumString("valueNotBetween")]
ValueNotBetween,
///<summary>
///Date Equals.
///<para>When the item is serialized out as xml, its value is "dateEqual".</para>
///</summary>
[EnumString("dateEqual")]
DateEqual,
///<summary>
///Date Does Not Equal.
///<para>When the item is serialized out as xml, its value is "dateNotEqual".</para>
///</summary>
[EnumString("dateNotEqual")]
DateNotEqual,
///<summary>
///Date Older Than.
///<para>When the item is serialized out as xml, its value is "dateOlderThan".</para>
///</summary>
[EnumString("dateOlderThan")]
DateOlderThan,
///<summary>
///Date Older Than Or Equal.
///<para>When the item is serialized out as xml, its value is "dateOlderThanOrEqual".</para>
///</summary>
[EnumString("dateOlderThanOrEqual")]
DateOlderThanOrEqual,
///<summary>
///Date Newer Than.
///<para>When the item is serialized out as xml, its value is "dateNewerThan".</para>
///</summary>
[EnumString("dateNewerThan")]
DateNewerThan,
///<summary>
///Date Newer Than or Equal To.
///<para>When the item is serialized out as xml, its value is "dateNewerThanOrEqual".</para>
///</summary>
[EnumString("dateNewerThanOrEqual")]
DateNewerThanOrEqual,
///<summary>
///Date Between.
///<para>When the item is serialized out as xml, its value is "dateBetween".</para>
///</summary>
[EnumString("dateBetween")]
DateBetween,
///<summary>
///Date Not Between.
///<para>When the item is serialized out as xml, its value is "dateNotBetween".</para>
///</summary>
[EnumString("dateNotBetween")]
DateNotBetween,
///<summary>
///Tomorrow.
///<para>When the item is serialized out as xml, its value is "tomorrow".</para>
///</summary>
[EnumString("tomorrow")]
Tomorrow,
///<summary>
///Today.
///<para>When the item is serialized out as xml, its value is "today".</para>
///</summary>
[EnumString("today")]
Today,
///<summary>
///Yesterday.
///<para>When the item is serialized out as xml, its value is "yesterday".</para>
///</summary>
[EnumString("yesterday")]
Yesterday,
///<summary>
///Next Week.
///<para>When the item is serialized out as xml, its value is "nextWeek".</para>
///</summary>
[EnumString("nextWeek")]
NextWeek,
///<summary>
///This Week.
///<para>When the item is serialized out as xml, its value is "thisWeek".</para>
///</summary>
[EnumString("thisWeek")]
ThisWeek,
///<summary>
///Last Week.
///<para>When the item is serialized out as xml, its value is "lastWeek".</para>
///</summary>
[EnumString("lastWeek")]
LastWeek,
///<summary>
///Next Month.
///<para>When the item is serialized out as xml, its value is "nextMonth".</para>
///</summary>
[EnumString("nextMonth")]
NextMonth,
///<summary>
///This Month.
///<para>When the item is serialized out as xml, its value is "thisMonth".</para>
///</summary>
[EnumString("thisMonth")]
ThisMonth,
///<summary>
///Last Month.
///<para>When the item is serialized out as xml, its value is "lastMonth".</para>
///</summary>
[EnumString("lastMonth")]
LastMonth,
///<summary>
///Next Quarter.
///<para>When the item is serialized out as xml, its value is "nextQuarter".</para>
///</summary>
[EnumString("nextQuarter")]
NextQuarter,
///<summary>
///This Quarter.
///<para>When the item is serialized out as xml, its value is "thisQuarter".</para>
///</summary>
[EnumString("thisQuarter")]
ThisQuarter,
///<summary>
///Last Quarter.
///<para>When the item is serialized out as xml, its value is "lastQuarter".</para>
///</summary>
[EnumString("lastQuarter")]
LastQuarter,
///<summary>
///Next Year.
///<para>When the item is serialized out as xml, its value is "nextYear".</para>
///</summary>
[EnumString("nextYear")]
NextYear,
///<summary>
///This Year.
///<para>When the item is serialized out as xml, its value is "thisYear".</para>
///</summary>
[EnumString("thisYear")]
ThisYear,
///<summary>
///Last Year.
///<para>When the item is serialized out as xml, its value is "lastYear".</para>
///</summary>
[EnumString("lastYear")]
LastYear,
///<summary>
///Year-To-Date.
///<para>When the item is serialized out as xml, its value is "yearToDate".</para>
///</summary>
[EnumString("yearToDate")]
YearToDate,
///<summary>
///First Quarter.
///<para>When the item is serialized out as xml, its value is "Q1".</para>
///</summary>
[EnumString("Q1")]
Quarter1,
///<summary>
///Second Quarter.
///<para>When the item is serialized out as xml, its value is "Q2".</para>
///</summary>
[EnumString("Q2")]
Quarter2,
///<summary>
///Third Quarter.
///<para>When the item is serialized out as xml, its value is "Q3".</para>
///</summary>
[EnumString("Q3")]
Quarter3,
///<summary>
///Fourth Quarter.
///<para>When the item is serialized out as xml, its value is "Q4".</para>
///</summary>
[EnumString("Q4")]
Quarter4,
///<summary>
///January.
///<para>When the item is serialized out as xml, its value is "M1".</para>
///</summary>
[EnumString("M1")]
January,
///<summary>
///Dates in February.
///<para>When the item is serialized out as xml, its value is "M2".</para>
///</summary>
[EnumString("M2")]
February,
///<summary>
///Dates in March.
///<para>When the item is serialized out as xml, its value is "M3".</para>
///</summary>
[EnumString("M3")]
March,
///<summary>
///Dates in April.
///<para>When the item is serialized out as xml, its value is "M4".</para>
///</summary>
[EnumString("M4")]
April,
///<summary>
///Dates in May.
///<para>When the item is serialized out as xml, its value is "M5".</para>
///</summary>
[EnumString("M5")]
May,
///<summary>
///Dates in June.
///<para>When the item is serialized out as xml, its value is "M6".</para>
///</summary>
[EnumString("M6")]
June,
///<summary>
///Dates in July.
///<para>When the item is serialized out as xml, its value is "M7".</para>
///</summary>
[EnumString("M7")]
July,
///<summary>
///Dates in August.
///<para>When the item is serialized out as xml, its value is "M8".</para>
///</summary>
[EnumString("M8")]
August,
///<summary>
///Dates in September.
///<para>When the item is serialized out as xml, its value is "M9".</para>
///</summary>
[EnumString("M9")]
September,
///<summary>
///Dates in October.
///<para>When the item is serialized out as xml, its value is "M10".</para>
///</summary>
[EnumString("M10")]
October,
///<summary>
///Dates in November.
///<para>When the item is serialized out as xml, its value is "M11".</para>
///</summary>
[EnumString("M11")]
November,
///<summary>
///Dates in December.
///<para>When the item is serialized out as xml, its value is "M12".</para>
///</summary>
[EnumString("M12")]
December,
 
}
/// <summary>
/// PivotTable Format Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FormatActionValues
{  
	///<summary>
///Blank.
///<para>When the item is serialized out as xml, its value is "blank".</para>
///</summary>
[EnumString("blank")]
Blank,
///<summary>
///Formatting.
///<para>When the item is serialized out as xml, its value is "formatting".</para>
///</summary>
[EnumString("formatting")]
Formatting,
 
}
/// <summary>
/// PivotTable Axis 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PivotTableAxisValues
{  
	///<summary>
///Row Axis.
///<para>When the item is serialized out as xml, its value is "axisRow".</para>
///</summary>
[EnumString("axisRow")]
AxisRow,
///<summary>
///Column Axis.
///<para>When the item is serialized out as xml, its value is "axisCol".</para>
///</summary>
[EnumString("axisCol")]
AxisColumn,
///<summary>
///Include Count Filter.
///<para>When the item is serialized out as xml, its value is "axisPage".</para>
///</summary>
[EnumString("axisPage")]
AxisPage,
///<summary>
///Values Axis.
///<para>When the item is serialized out as xml, its value is "axisValues".</para>
///</summary>
[EnumString("axisValues")]
AxisValues,
 
}
/// <summary>
/// Grow Shrink Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum GrowShrinkValues
{  
	///<summary>
///Insert and Delete On Refresh.
///<para>When the item is serialized out as xml, its value is "insertDelete".</para>
///</summary>
[EnumString("insertDelete")]
InsertDelete,
///<summary>
///Insert and Clear On Refresh.
///<para>When the item is serialized out as xml, its value is "insertClear".</para>
///</summary>
[EnumString("insertClear")]
InsertClear,
///<summary>
///Overwrite and Clear On Refresh.
///<para>When the item is serialized out as xml, its value is "overwriteClear".</para>
///</summary>
[EnumString("overwriteClear")]
OverwriteClear,
 
}
/// <summary>
/// Phonetic Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PhoneticValues
{  
	///<summary>
///Half-Width Katakana.
///<para>When the item is serialized out as xml, its value is "halfwidthKatakana".</para>
///</summary>
[EnumString("halfwidthKatakana")]
HalfWidthKatakana,
///<summary>
///Full-Width Katakana.
///<para>When the item is serialized out as xml, its value is "fullwidthKatakana".</para>
///</summary>
[EnumString("fullwidthKatakana")]
FullWidthKatakana,
///<summary>
///Hiragana.
///<para>When the item is serialized out as xml, its value is "Hiragana".</para>
///</summary>
[EnumString("Hiragana")]
Hiragana,
///<summary>
///No Conversion.
///<para>When the item is serialized out as xml, its value is "noConversion".</para>
///</summary>
[EnumString("noConversion")]
NoConversion,
 
}
/// <summary>
/// Phonetic Alignment Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PhoneticAlignmentValues
{  
	///<summary>
///No Control.
///<para>When the item is serialized out as xml, its value is "noControl".</para>
///</summary>
[EnumString("noControl")]
NoControl,
///<summary>
///Left Alignment.
///<para>When the item is serialized out as xml, its value is "left".</para>
///</summary>
[EnumString("left")]
Left,
///<summary>
///Center Alignment.
///<para>When the item is serialized out as xml, its value is "center".</para>
///</summary>
[EnumString("center")]
Center,
///<summary>
///Distributed.
///<para>When the item is serialized out as xml, its value is "distributed".</para>
///</summary>
[EnumString("distributed")]
Distributed,
 
}
/// <summary>
/// Row Column Action Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum RowColumnActionValues
{  
	///<summary>
///Insert Row.
///<para>When the item is serialized out as xml, its value is "insertRow".</para>
///</summary>
[EnumString("insertRow")]
InsertRow,
///<summary>
///Delete Row.
///<para>When the item is serialized out as xml, its value is "deleteRow".</para>
///</summary>
[EnumString("deleteRow")]
DeleteRow,
///<summary>
///Column Insert.
///<para>When the item is serialized out as xml, its value is "insertCol".</para>
///</summary>
[EnumString("insertCol")]
ColumnInsert,
///<summary>
///Delete Column.
///<para>When the item is serialized out as xml, its value is "deleteCol".</para>
///</summary>
[EnumString("deleteCol")]
DeleteColumn,
 
}
/// <summary>
/// Revision Action Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum RevisionActionValues
{  
	///<summary>
///Add.
///<para>When the item is serialized out as xml, its value is "add".</para>
///</summary>
[EnumString("add")]
Add,
///<summary>
///Delete.
///<para>When the item is serialized out as xml, its value is "delete".</para>
///</summary>
[EnumString("delete")]
Delete,
 
}
/// <summary>
/// Formula Expression Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FormulaExpressionValues
{  
	///<summary>
///Reference.
///<para>When the item is serialized out as xml, its value is "ref".</para>
///</summary>
[EnumString("ref")]
Reference,
///<summary>
///Reference Is Error.
///<para>When the item is serialized out as xml, its value is "refError".</para>
///</summary>
[EnumString("refError")]
ReferenceError,
///<summary>
///Area.
///<para>When the item is serialized out as xml, its value is "area".</para>
///</summary>
[EnumString("area")]
Area,
///<summary>
///Area Error.
///<para>When the item is serialized out as xml, its value is "areaError".</para>
///</summary>
[EnumString("areaError")]
AreaError,
///<summary>
///Computed Area.
///<para>When the item is serialized out as xml, its value is "computedArea".</para>
///</summary>
[EnumString("computedArea")]
ComputedArea,
 
}
/// <summary>
/// Formula Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CellFormulaValues
{  
	///<summary>
///Normal.
///<para>When the item is serialized out as xml, its value is "normal".</para>
///</summary>
[EnumString("normal")]
Normal,
///<summary>
///Array Entered.
///<para>When the item is serialized out as xml, its value is "array".</para>
///</summary>
[EnumString("array")]
Array,
///<summary>
///Table Formula.
///<para>When the item is serialized out as xml, its value is "dataTable".</para>
///</summary>
[EnumString("dataTable")]
DataTable,
///<summary>
///Shared Formula.
///<para>When the item is serialized out as xml, its value is "shared".</para>
///</summary>
[EnumString("shared")]
Shared,
 
}
/// <summary>
/// Pane Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PaneValues
{  
	///<summary>
///Bottom Right Pane.
///<para>When the item is serialized out as xml, its value is "bottomRight".</para>
///</summary>
[EnumString("bottomRight")]
BottomRight,
///<summary>
///Top Right Pane.
///<para>When the item is serialized out as xml, its value is "topRight".</para>
///</summary>
[EnumString("topRight")]
TopRight,
///<summary>
///Bottom Left Pane.
///<para>When the item is serialized out as xml, its value is "bottomLeft".</para>
///</summary>
[EnumString("bottomLeft")]
BottomLeft,
///<summary>
///Top Left Pane.
///<para>When the item is serialized out as xml, its value is "topLeft".</para>
///</summary>
[EnumString("topLeft")]
TopLeft,
 
}
/// <summary>
/// Sheet View Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SheetViewValues
{  
	///<summary>
///Normal View.
///<para>When the item is serialized out as xml, its value is "normal".</para>
///</summary>
[EnumString("normal")]
Normal,
///<summary>
///Page Break Preview.
///<para>When the item is serialized out as xml, its value is "pageBreakPreview".</para>
///</summary>
[EnumString("pageBreakPreview")]
PageBreakPreview,
///<summary>
///Page Layout View.
///<para>When the item is serialized out as xml, its value is "pageLayout".</para>
///</summary>
[EnumString("pageLayout")]
PageLayout,
 
}
/// <summary>
/// Data Consolidation Functions 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataConsolidateFunctionValues
{  
	///<summary>
///Average.
///<para>When the item is serialized out as xml, its value is "average".</para>
///</summary>
[EnumString("average")]
Average,
///<summary>
///Count.
///<para>When the item is serialized out as xml, its value is "count".</para>
///</summary>
[EnumString("count")]
Count,
///<summary>
///CountNums.
///<para>When the item is serialized out as xml, its value is "countNums".</para>
///</summary>
[EnumString("countNums")]
CountNumbers,
///<summary>
///Maximum.
///<para>When the item is serialized out as xml, its value is "max".</para>
///</summary>
[EnumString("max")]
Maximum,
///<summary>
///Minimum.
///<para>When the item is serialized out as xml, its value is "min".</para>
///</summary>
[EnumString("min")]
Minimum,
///<summary>
///Product.
///<para>When the item is serialized out as xml, its value is "product".</para>
///</summary>
[EnumString("product")]
Product,
///<summary>
///StdDev.
///<para>When the item is serialized out as xml, its value is "stdDev".</para>
///</summary>
[EnumString("stdDev")]
StandardDeviation,
///<summary>
///StdDevP.
///<para>When the item is serialized out as xml, its value is "stdDevp".</para>
///</summary>
[EnumString("stdDevp")]
StandardDeviationP,
///<summary>
///Sum.
///<para>When the item is serialized out as xml, its value is "sum".</para>
///</summary>
[EnumString("sum")]
Sum,
///<summary>
///Variance.
///<para>When the item is serialized out as xml, its value is "var".</para>
///</summary>
[EnumString("var")]
Variance,
///<summary>
///VarP.
///<para>When the item is serialized out as xml, its value is "varp".</para>
///</summary>
[EnumString("varp")]
VarianceP,
 
}
/// <summary>
/// Data Validation Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataValidationValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Whole Number.
///<para>When the item is serialized out as xml, its value is "whole".</para>
///</summary>
[EnumString("whole")]
Whole,
///<summary>
///Decimal.
///<para>When the item is serialized out as xml, its value is "decimal".</para>
///</summary>
[EnumString("decimal")]
Decimal,
///<summary>
///List.
///<para>When the item is serialized out as xml, its value is "list".</para>
///</summary>
[EnumString("list")]
List,
///<summary>
///Date.
///<para>When the item is serialized out as xml, its value is "date".</para>
///</summary>
[EnumString("date")]
Date,
///<summary>
///Time.
///<para>When the item is serialized out as xml, its value is "time".</para>
///</summary>
[EnumString("time")]
Time,
///<summary>
///Text Length.
///<para>When the item is serialized out as xml, its value is "textLength".</para>
///</summary>
[EnumString("textLength")]
TextLength,
///<summary>
///Custom.
///<para>When the item is serialized out as xml, its value is "custom".</para>
///</summary>
[EnumString("custom")]
Custom,
 
}
/// <summary>
/// Data Validation Operator 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataValidationOperatorValues
{  
	///<summary>
///Between.
///<para>When the item is serialized out as xml, its value is "between".</para>
///</summary>
[EnumString("between")]
Between,
///<summary>
///Not Between.
///<para>When the item is serialized out as xml, its value is "notBetween".</para>
///</summary>
[EnumString("notBetween")]
NotBetween,
///<summary>
///Equal.
///<para>When the item is serialized out as xml, its value is "equal".</para>
///</summary>
[EnumString("equal")]
Equal,
///<summary>
///Not Equal.
///<para>When the item is serialized out as xml, its value is "notEqual".</para>
///</summary>
[EnumString("notEqual")]
NotEqual,
///<summary>
///Less Than.
///<para>When the item is serialized out as xml, its value is "lessThan".</para>
///</summary>
[EnumString("lessThan")]
LessThan,
///<summary>
///Less Than Or Equal.
///<para>When the item is serialized out as xml, its value is "lessThanOrEqual".</para>
///</summary>
[EnumString("lessThanOrEqual")]
LessThanOrEqual,
///<summary>
///Greater Than.
///<para>When the item is serialized out as xml, its value is "greaterThan".</para>
///</summary>
[EnumString("greaterThan")]
GreaterThan,
///<summary>
///Greater Than Or Equal.
///<para>When the item is serialized out as xml, its value is "greaterThanOrEqual".</para>
///</summary>
[EnumString("greaterThanOrEqual")]
GreaterThanOrEqual,
 
}
/// <summary>
/// Data Validation Error Styles 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataValidationErrorStyleValues
{  
	///<summary>
///Stop Icon.
///<para>When the item is serialized out as xml, its value is "stop".</para>
///</summary>
[EnumString("stop")]
Stop,
///<summary>
///Warning Icon.
///<para>When the item is serialized out as xml, its value is "warning".</para>
///</summary>
[EnumString("warning")]
Warning,
///<summary>
///Information Icon.
///<para>When the item is serialized out as xml, its value is "information".</para>
///</summary>
[EnumString("information")]
Information,
 
}
/// <summary>
/// Data Validation IME Mode 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataValidationImeModeValues
{  
	///<summary>
///IME Mode Not Controlled.
///<para>When the item is serialized out as xml, its value is "noControl".</para>
///</summary>
[EnumString("noControl")]
NoControl,
///<summary>
///IME Off.
///<para>When the item is serialized out as xml, its value is "off".</para>
///</summary>
[EnumString("off")]
Off,
///<summary>
///IME On.
///<para>When the item is serialized out as xml, its value is "on".</para>
///</summary>
[EnumString("on")]
On,
///<summary>
///Disabled IME Mode.
///<para>When the item is serialized out as xml, its value is "disabled".</para>
///</summary>
[EnumString("disabled")]
Disabled,
///<summary>
///Hiragana IME Mode.
///<para>When the item is serialized out as xml, its value is "hiragana".</para>
///</summary>
[EnumString("hiragana")]
Hiragana,
///<summary>
///Full Katakana IME Mode.
///<para>When the item is serialized out as xml, its value is "fullKatakana".</para>
///</summary>
[EnumString("fullKatakana")]
FullKatakana,
///<summary>
///Half-Width Katakana.
///<para>When the item is serialized out as xml, its value is "halfKatakana".</para>
///</summary>
[EnumString("halfKatakana")]
HalfKatakana,
///<summary>
///Full-Width Alpha-Numeric IME Mode.
///<para>When the item is serialized out as xml, its value is "fullAlpha".</para>
///</summary>
[EnumString("fullAlpha")]
FullAlpha,
///<summary>
///Half Alpha IME.
///<para>When the item is serialized out as xml, its value is "halfAlpha".</para>
///</summary>
[EnumString("halfAlpha")]
HalfAlpha,
///<summary>
///Full Width Hangul.
///<para>When the item is serialized out as xml, its value is "fullHangul".</para>
///</summary>
[EnumString("fullHangul")]
FullHangul,
///<summary>
///Half-Width Hangul IME Mode.
///<para>When the item is serialized out as xml, its value is "halfHangul".</para>
///</summary>
[EnumString("halfHangul")]
HalfHangul,
 
}
/// <summary>
/// Conditional Format Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ConditionalFormatValues
{  
	///<summary>
///Expression.
///<para>When the item is serialized out as xml, its value is "expression".</para>
///</summary>
[EnumString("expression")]
Expression,
///<summary>
///Cell Is.
///<para>When the item is serialized out as xml, its value is "cellIs".</para>
///</summary>
[EnumString("cellIs")]
CellIs,
///<summary>
///Color Scale.
///<para>When the item is serialized out as xml, its value is "colorScale".</para>
///</summary>
[EnumString("colorScale")]
ColorScale,
///<summary>
///Data Bar.
///<para>When the item is serialized out as xml, its value is "dataBar".</para>
///</summary>
[EnumString("dataBar")]
DataBar,
///<summary>
///Icon Set.
///<para>When the item is serialized out as xml, its value is "iconSet".</para>
///</summary>
[EnumString("iconSet")]
IconSet,
///<summary>
///Top 10.
///<para>When the item is serialized out as xml, its value is "top10".</para>
///</summary>
[EnumString("top10")]
Top10,
///<summary>
///Unique Values.
///<para>When the item is serialized out as xml, its value is "uniqueValues".</para>
///</summary>
[EnumString("uniqueValues")]
UniqueValues,
///<summary>
///Duplicate Values.
///<para>When the item is serialized out as xml, its value is "duplicateValues".</para>
///</summary>
[EnumString("duplicateValues")]
DuplicateValues,
///<summary>
///Contains Text.
///<para>When the item is serialized out as xml, its value is "containsText".</para>
///</summary>
[EnumString("containsText")]
ContainsText,
///<summary>
///Does Not Contain Text.
///<para>When the item is serialized out as xml, its value is "notContainsText".</para>
///</summary>
[EnumString("notContainsText")]
NotContainsText,
///<summary>
///Begins With.
///<para>When the item is serialized out as xml, its value is "beginsWith".</para>
///</summary>
[EnumString("beginsWith")]
BeginsWith,
///<summary>
///Ends With.
///<para>When the item is serialized out as xml, its value is "endsWith".</para>
///</summary>
[EnumString("endsWith")]
EndsWith,
///<summary>
///Contains Blanks.
///<para>When the item is serialized out as xml, its value is "containsBlanks".</para>
///</summary>
[EnumString("containsBlanks")]
ContainsBlanks,
///<summary>
///Contains No Blanks.
///<para>When the item is serialized out as xml, its value is "notContainsBlanks".</para>
///</summary>
[EnumString("notContainsBlanks")]
NotContainsBlanks,
///<summary>
///Contains Errors.
///<para>When the item is serialized out as xml, its value is "containsErrors".</para>
///</summary>
[EnumString("containsErrors")]
ContainsErrors,
///<summary>
///Contains No Errors.
///<para>When the item is serialized out as xml, its value is "notContainsErrors".</para>
///</summary>
[EnumString("notContainsErrors")]
NotContainsErrors,
///<summary>
///Time Period.
///<para>When the item is serialized out as xml, its value is "timePeriod".</para>
///</summary>
[EnumString("timePeriod")]
TimePeriod,
///<summary>
///Above or Below Average.
///<para>When the item is serialized out as xml, its value is "aboveAverage".</para>
///</summary>
[EnumString("aboveAverage")]
AboveAverage,
 
}
/// <summary>
/// Time Period Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TimePeriodValues
{  
	///<summary>
///Today.
///<para>When the item is serialized out as xml, its value is "today".</para>
///</summary>
[EnumString("today")]
Today,
///<summary>
///Yesterday.
///<para>When the item is serialized out as xml, its value is "yesterday".</para>
///</summary>
[EnumString("yesterday")]
Yesterday,
///<summary>
///Tomorrow.
///<para>When the item is serialized out as xml, its value is "tomorrow".</para>
///</summary>
[EnumString("tomorrow")]
Tomorrow,
///<summary>
///Last 7 Days.
///<para>When the item is serialized out as xml, its value is "last7Days".</para>
///</summary>
[EnumString("last7Days")]
Last7Days,
///<summary>
///This Month.
///<para>When the item is serialized out as xml, its value is "thisMonth".</para>
///</summary>
[EnumString("thisMonth")]
ThisMonth,
///<summary>
///Last Month.
///<para>When the item is serialized out as xml, its value is "lastMonth".</para>
///</summary>
[EnumString("lastMonth")]
LastMonth,
///<summary>
///Next Month.
///<para>When the item is serialized out as xml, its value is "nextMonth".</para>
///</summary>
[EnumString("nextMonth")]
NextMonth,
///<summary>
///This Week.
///<para>When the item is serialized out as xml, its value is "thisWeek".</para>
///</summary>
[EnumString("thisWeek")]
ThisWeek,
///<summary>
///Last Week.
///<para>When the item is serialized out as xml, its value is "lastWeek".</para>
///</summary>
[EnumString("lastWeek")]
LastWeek,
///<summary>
///Next Week.
///<para>When the item is serialized out as xml, its value is "nextWeek".</para>
///</summary>
[EnumString("nextWeek")]
NextWeek,
 
}
/// <summary>
/// Conditional Format Operators 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ConditionalFormattingOperatorValues
{  
	///<summary>
///Less Than.
///<para>When the item is serialized out as xml, its value is "lessThan".</para>
///</summary>
[EnumString("lessThan")]
LessThan,
///<summary>
///Less Than Or Equal.
///<para>When the item is serialized out as xml, its value is "lessThanOrEqual".</para>
///</summary>
[EnumString("lessThanOrEqual")]
LessThanOrEqual,
///<summary>
///Equal.
///<para>When the item is serialized out as xml, its value is "equal".</para>
///</summary>
[EnumString("equal")]
Equal,
///<summary>
///Not Equal.
///<para>When the item is serialized out as xml, its value is "notEqual".</para>
///</summary>
[EnumString("notEqual")]
NotEqual,
///<summary>
///Greater Than Or Equal.
///<para>When the item is serialized out as xml, its value is "greaterThanOrEqual".</para>
///</summary>
[EnumString("greaterThanOrEqual")]
GreaterThanOrEqual,
///<summary>
///Greater Than.
///<para>When the item is serialized out as xml, its value is "greaterThan".</para>
///</summary>
[EnumString("greaterThan")]
GreaterThan,
///<summary>
///Between.
///<para>When the item is serialized out as xml, its value is "between".</para>
///</summary>
[EnumString("between")]
Between,
///<summary>
///Not Between.
///<para>When the item is serialized out as xml, its value is "notBetween".</para>
///</summary>
[EnumString("notBetween")]
NotBetween,
///<summary>
///Contains.
///<para>When the item is serialized out as xml, its value is "containsText".</para>
///</summary>
[EnumString("containsText")]
ContainsText,
///<summary>
///Does Not Contain.
///<para>When the item is serialized out as xml, its value is "notContains".</para>
///</summary>
[EnumString("notContains")]
NotContains,
///<summary>
///Begins With.
///<para>When the item is serialized out as xml, its value is "beginsWith".</para>
///</summary>
[EnumString("beginsWith")]
BeginsWith,
///<summary>
///Ends With.
///<para>When the item is serialized out as xml, its value is "endsWith".</para>
///</summary>
[EnumString("endsWith")]
EndsWith,
 
}
/// <summary>
/// Conditional Format Value Object Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ConditionalFormatValueObjectValues
{  
	///<summary>
///Number.
///<para>When the item is serialized out as xml, its value is "num".</para>
///</summary>
[EnumString("num")]
Number,
///<summary>
///Percent.
///<para>When the item is serialized out as xml, its value is "percent".</para>
///</summary>
[EnumString("percent")]
Percent,
///<summary>
///Maximum.
///<para>When the item is serialized out as xml, its value is "max".</para>
///</summary>
[EnumString("max")]
Max,
///<summary>
///Minimum.
///<para>When the item is serialized out as xml, its value is "min".</para>
///</summary>
[EnumString("min")]
Min,
///<summary>
///Formula.
///<para>When the item is serialized out as xml, its value is "formula".</para>
///</summary>
[EnumString("formula")]
Formula,
///<summary>
///Percentile.
///<para>When the item is serialized out as xml, its value is "percentile".</para>
///</summary>
[EnumString("percentile")]
Percentile,
 
}
/// <summary>
/// Page Order 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PageOrderValues
{  
	///<summary>
///Down Then Over.
///<para>When the item is serialized out as xml, its value is "downThenOver".</para>
///</summary>
[EnumString("downThenOver")]
DownThenOver,
///<summary>
///Over Then Down.
///<para>When the item is serialized out as xml, its value is "overThenDown".</para>
///</summary>
[EnumString("overThenDown")]
OverThenDown,
 
}
/// <summary>
/// Orientation 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum OrientationValues
{  
	///<summary>
///Default.
///<para>When the item is serialized out as xml, its value is "default".</para>
///</summary>
[EnumString("default")]
Default,
///<summary>
///Portrait.
///<para>When the item is serialized out as xml, its value is "portrait".</para>
///</summary>
[EnumString("portrait")]
Portrait,
///<summary>
///Landscape.
///<para>When the item is serialized out as xml, its value is "landscape".</para>
///</summary>
[EnumString("landscape")]
Landscape,
 
}
/// <summary>
/// Cell Comments 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CellCommentsValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Print Comments As Displayed.
///<para>When the item is serialized out as xml, its value is "asDisplayed".</para>
///</summary>
[EnumString("asDisplayed")]
AsDisplayed,
///<summary>
///Print At End.
///<para>When the item is serialized out as xml, its value is "atEnd".</para>
///</summary>
[EnumString("atEnd")]
AtEnd,
 
}
/// <summary>
/// Print Errors 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PrintErrorValues
{  
	///<summary>
///Display Cell Errors.
///<para>When the item is serialized out as xml, its value is "displayed".</para>
///</summary>
[EnumString("displayed")]
Displayed,
///<summary>
///Show Cell Errors As Blank.
///<para>When the item is serialized out as xml, its value is "blank".</para>
///</summary>
[EnumString("blank")]
Blank,
///<summary>
///Dash Cell Errors.
///<para>When the item is serialized out as xml, its value is "dash".</para>
///</summary>
[EnumString("dash")]
Dash,
///<summary>
///NA.
///<para>When the item is serialized out as xml, its value is "NA".</para>
///</summary>
[EnumString("NA")]
NA,
 
}
/// <summary>
/// Data View Aspect Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DataViewAspectValues
{  
	///<summary>
///Object Display Content.
///<para>When the item is serialized out as xml, its value is "DVASPECT_CONTENT".</para>
///</summary>
[EnumString("DVASPECT_CONTENT")]
DataViewAspectContent,
///<summary>
///Object Display Icon.
///<para>When the item is serialized out as xml, its value is "DVASPECT_ICON".</para>
///</summary>
[EnumString("DVASPECT_ICON")]
DataViewAspectIcon,
 
}
/// <summary>
/// OLE Update Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum OleUpdateValues
{  
	///<summary>
///Always Update OLE.
///<para>When the item is serialized out as xml, its value is "OLEUPDATE_ALWAYS".</para>
///</summary>
[EnumString("OLEUPDATE_ALWAYS")]
OleUpdateAlways,
///<summary>
///Update OLE On Call.
///<para>When the item is serialized out as xml, its value is "OLEUPDATE_ONCALL".</para>
///</summary>
[EnumString("OLEUPDATE_ONCALL")]
OleUpdateOnCall,
 
}
/// <summary>
/// Web Source Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum WebSourceValues
{  
	///<summary>
///All Sheet Content.
///<para>When the item is serialized out as xml, its value is "sheet".</para>
///</summary>
[EnumString("sheet")]
Sheet,
///<summary>
///Print Area.
///<para>When the item is serialized out as xml, its value is "printArea".</para>
///</summary>
[EnumString("printArea")]
PrintArea,
///<summary>
///AutoFilter.
///<para>When the item is serialized out as xml, its value is "autoFilter".</para>
///</summary>
[EnumString("autoFilter")]
AutoFilter,
///<summary>
///Range.
///<para>When the item is serialized out as xml, its value is "range".</para>
///</summary>
[EnumString("range")]
Range,
///<summary>
///Chart.
///<para>When the item is serialized out as xml, its value is "chart".</para>
///</summary>
[EnumString("chart")]
Chart,
///<summary>
///PivotTable.
///<para>When the item is serialized out as xml, its value is "pivotTable".</para>
///</summary>
[EnumString("pivotTable")]
PivotTable,
///<summary>
///QueryTable.
///<para>When the item is serialized out as xml, its value is "query".</para>
///</summary>
[EnumString("query")]
Query,
///<summary>
///Label.
///<para>When the item is serialized out as xml, its value is "label".</para>
///</summary>
[EnumString("label")]
Label,
 
}
/// <summary>
/// Pane State 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PaneStateValues
{  
	///<summary>
///Split.
///<para>When the item is serialized out as xml, its value is "split".</para>
///</summary>
[EnumString("split")]
Split,
///<summary>
///Frozen.
///<para>When the item is serialized out as xml, its value is "frozen".</para>
///</summary>
[EnumString("frozen")]
Frozen,
///<summary>
///Frozen Split.
///<para>When the item is serialized out as xml, its value is "frozenSplit".</para>
///</summary>
[EnumString("frozenSplit")]
FrozenSplit,
 
}
/// <summary>
/// MDX Function Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum MdxFunctionValues
{  
	///<summary>
///Cube Member.
///<para>When the item is serialized out as xml, its value is "m".</para>
///</summary>
[EnumString("m")]
CubeMember,
///<summary>
///Cube Value.
///<para>When the item is serialized out as xml, its value is "v".</para>
///</summary>
[EnumString("v")]
CubeValue,
///<summary>
///Cube Set.
///<para>When the item is serialized out as xml, its value is "s".</para>
///</summary>
[EnumString("s")]
CubeSet,
///<summary>
///Cube Set Count.
///<para>When the item is serialized out as xml, its value is "c".</para>
///</summary>
[EnumString("c")]
CubeSetCount,
///<summary>
///Cube Ranked Member.
///<para>When the item is serialized out as xml, its value is "r".</para>
///</summary>
[EnumString("r")]
CubeRankedMember,
///<summary>
///Cube Member Property.
///<para>When the item is serialized out as xml, its value is "p".</para>
///</summary>
[EnumString("p")]
CubeMemberProperty,
///<summary>
///Cube KPI Member.
///<para>When the item is serialized out as xml, its value is "k".</para>
///</summary>
[EnumString("k")]
CubeKPIMember,
 
}
/// <summary>
/// MDX Set Order 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum MdxSetOrderValues
{  
	///<summary>
///Unsorted.
///<para>When the item is serialized out as xml, its value is "u".</para>
///</summary>
[EnumString("u")]
Unsorted,
///<summary>
///Ascending.
///<para>When the item is serialized out as xml, its value is "a".</para>
///</summary>
[EnumString("a")]
Ascending,
///<summary>
///Descending.
///<para>When the item is serialized out as xml, its value is "d".</para>
///</summary>
[EnumString("d")]
Descending,
///<summary>
///Alpha Ascending Sort Order.
///<para>When the item is serialized out as xml, its value is "aa".</para>
///</summary>
[EnumString("aa")]
AlphaAscendingSortOrder,
///<summary>
///Alpha Descending Sort Order.
///<para>When the item is serialized out as xml, its value is "ad".</para>
///</summary>
[EnumString("ad")]
AlphaDescendingSortOrder,
///<summary>
///Natural Ascending.
///<para>When the item is serialized out as xml, its value is "na".</para>
///</summary>
[EnumString("na")]
NaturalAscending,
///<summary>
///Natural Descending.
///<para>When the item is serialized out as xml, its value is "nd".</para>
///</summary>
[EnumString("nd")]
NaturalDescending,
 
}
/// <summary>
/// MDX KPI Property 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum MdxKPIPropertyValues
{  
	///<summary>
///Value.
///<para>When the item is serialized out as xml, its value is "v".</para>
///</summary>
[EnumString("v")]
Value,
///<summary>
///Goal.
///<para>When the item is serialized out as xml, its value is "g".</para>
///</summary>
[EnumString("g")]
Goal,
///<summary>
///Status.
///<para>When the item is serialized out as xml, its value is "s".</para>
///</summary>
[EnumString("s")]
Status,
///<summary>
///Trend.
///<para>When the item is serialized out as xml, its value is "t".</para>
///</summary>
[EnumString("t")]
Trend,
///<summary>
///Weight.
///<para>When the item is serialized out as xml, its value is "w".</para>
///</summary>
[EnumString("w")]
Weight,
///<summary>
///Current Time Member.
///<para>When the item is serialized out as xml, its value is "m".</para>
///</summary>
[EnumString("m")]
Time,
 
}
/// <summary>
/// Border Line Styles 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum BorderStyleValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Thin Border.
///<para>When the item is serialized out as xml, its value is "thin".</para>
///</summary>
[EnumString("thin")]
Thin,
///<summary>
///Medium Border.
///<para>When the item is serialized out as xml, its value is "medium".</para>
///</summary>
[EnumString("medium")]
Medium,
///<summary>
///Dashed.
///<para>When the item is serialized out as xml, its value is "dashed".</para>
///</summary>
[EnumString("dashed")]
Dashed,
///<summary>
///Dotted.
///<para>When the item is serialized out as xml, its value is "dotted".</para>
///</summary>
[EnumString("dotted")]
Dotted,
///<summary>
///Thick Line Border.
///<para>When the item is serialized out as xml, its value is "thick".</para>
///</summary>
[EnumString("thick")]
Thick,
///<summary>
///Double Line.
///<para>When the item is serialized out as xml, its value is "double".</para>
///</summary>
[EnumString("double")]
Double,
///<summary>
///Hairline Border.
///<para>When the item is serialized out as xml, its value is "hair".</para>
///</summary>
[EnumString("hair")]
Hair,
///<summary>
///Medium Dashed.
///<para>When the item is serialized out as xml, its value is "mediumDashed".</para>
///</summary>
[EnumString("mediumDashed")]
MediumDashed,
///<summary>
///Dash Dot.
///<para>When the item is serialized out as xml, its value is "dashDot".</para>
///</summary>
[EnumString("dashDot")]
DashDot,
///<summary>
///Medium Dash Dot.
///<para>When the item is serialized out as xml, its value is "mediumDashDot".</para>
///</summary>
[EnumString("mediumDashDot")]
MediumDashDot,
///<summary>
///Dash Dot Dot.
///<para>When the item is serialized out as xml, its value is "dashDotDot".</para>
///</summary>
[EnumString("dashDotDot")]
DashDotDot,
///<summary>
///Medium Dash Dot Dot.
///<para>When the item is serialized out as xml, its value is "mediumDashDotDot".</para>
///</summary>
[EnumString("mediumDashDotDot")]
MediumDashDotDot,
///<summary>
///Slant Dash Dot.
///<para>When the item is serialized out as xml, its value is "slantDashDot".</para>
///</summary>
[EnumString("slantDashDot")]
SlantDashDot,
 
}
/// <summary>
/// Pattern Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PatternValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Solid.
///<para>When the item is serialized out as xml, its value is "solid".</para>
///</summary>
[EnumString("solid")]
Solid,
///<summary>
///Medium Gray.
///<para>When the item is serialized out as xml, its value is "mediumGray".</para>
///</summary>
[EnumString("mediumGray")]
MediumGray,
///<summary>
///Dary Gray.
///<para>When the item is serialized out as xml, its value is "darkGray".</para>
///</summary>
[EnumString("darkGray")]
DarkGray,
///<summary>
///Light Gray.
///<para>When the item is serialized out as xml, its value is "lightGray".</para>
///</summary>
[EnumString("lightGray")]
LightGray,
///<summary>
///Dark Horizontal.
///<para>When the item is serialized out as xml, its value is "darkHorizontal".</para>
///</summary>
[EnumString("darkHorizontal")]
DarkHorizontal,
///<summary>
///Dark Vertical.
///<para>When the item is serialized out as xml, its value is "darkVertical".</para>
///</summary>
[EnumString("darkVertical")]
DarkVertical,
///<summary>
///Dark Down.
///<para>When the item is serialized out as xml, its value is "darkDown".</para>
///</summary>
[EnumString("darkDown")]
DarkDown,
///<summary>
///Dark Up.
///<para>When the item is serialized out as xml, its value is "darkUp".</para>
///</summary>
[EnumString("darkUp")]
DarkUp,
///<summary>
///Dark Grid.
///<para>When the item is serialized out as xml, its value is "darkGrid".</para>
///</summary>
[EnumString("darkGrid")]
DarkGrid,
///<summary>
///Dark Trellis.
///<para>When the item is serialized out as xml, its value is "darkTrellis".</para>
///</summary>
[EnumString("darkTrellis")]
DarkTrellis,
///<summary>
///Light Horizontal.
///<para>When the item is serialized out as xml, its value is "lightHorizontal".</para>
///</summary>
[EnumString("lightHorizontal")]
LightHorizontal,
///<summary>
///Light Vertical.
///<para>When the item is serialized out as xml, its value is "lightVertical".</para>
///</summary>
[EnumString("lightVertical")]
LightVertical,
///<summary>
///Light Down.
///<para>When the item is serialized out as xml, its value is "lightDown".</para>
///</summary>
[EnumString("lightDown")]
LightDown,
///<summary>
///Light Up.
///<para>When the item is serialized out as xml, its value is "lightUp".</para>
///</summary>
[EnumString("lightUp")]
LightUp,
///<summary>
///Light Grid.
///<para>When the item is serialized out as xml, its value is "lightGrid".</para>
///</summary>
[EnumString("lightGrid")]
LightGrid,
///<summary>
///Light Trellis.
///<para>When the item is serialized out as xml, its value is "lightTrellis".</para>
///</summary>
[EnumString("lightTrellis")]
LightTrellis,
///<summary>
///Gray 0.125.
///<para>When the item is serialized out as xml, its value is "gray125".</para>
///</summary>
[EnumString("gray125")]
Gray125,
///<summary>
///Gray 0.0625.
///<para>When the item is serialized out as xml, its value is "gray0625".</para>
///</summary>
[EnumString("gray0625")]
Gray0625,
 
}
/// <summary>
/// Gradient Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum GradientValues
{  
	///<summary>
///Linear Gradient.
///<para>When the item is serialized out as xml, its value is "linear".</para>
///</summary>
[EnumString("linear")]
Linear,
///<summary>
///Path.
///<para>When the item is serialized out as xml, its value is "path".</para>
///</summary>
[EnumString("path")]
Path,
 
}
/// <summary>
/// Horizontal Alignment Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum HorizontalAlignmentValues
{  
	///<summary>
///General Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "general".</para>
///</summary>
[EnumString("general")]
General,
///<summary>
///Left Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "left".</para>
///</summary>
[EnumString("left")]
Left,
///<summary>
///Centered Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "center".</para>
///</summary>
[EnumString("center")]
Center,
///<summary>
///Right Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "right".</para>
///</summary>
[EnumString("right")]
Right,
///<summary>
///Fill.
///<para>When the item is serialized out as xml, its value is "fill".</para>
///</summary>
[EnumString("fill")]
Fill,
///<summary>
///Justify.
///<para>When the item is serialized out as xml, its value is "justify".</para>
///</summary>
[EnumString("justify")]
Justify,
///<summary>
///Center Continuous Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "centerContinuous".</para>
///</summary>
[EnumString("centerContinuous")]
CenterContinuous,
///<summary>
///Distributed Horizontal Alignment.
///<para>When the item is serialized out as xml, its value is "distributed".</para>
///</summary>
[EnumString("distributed")]
Distributed,
 
}
/// <summary>
/// Vertical Alignment Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum VerticalAlignmentValues
{  
	///<summary>
///Align Top.
///<para>When the item is serialized out as xml, its value is "top".</para>
///</summary>
[EnumString("top")]
Top,
///<summary>
///Centered Vertical Alignment.
///<para>When the item is serialized out as xml, its value is "center".</para>
///</summary>
[EnumString("center")]
Center,
///<summary>
///Aligned To Bottom.
///<para>When the item is serialized out as xml, its value is "bottom".</para>
///</summary>
[EnumString("bottom")]
Bottom,
///<summary>
///Justified Vertically.
///<para>When the item is serialized out as xml, its value is "justify".</para>
///</summary>
[EnumString("justify")]
Justify,
///<summary>
///Distributed Vertical Alignment.
///<para>When the item is serialized out as xml, its value is "distributed".</para>
///</summary>
[EnumString("distributed")]
Distributed,
 
}
/// <summary>
/// Table Style Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TableStyleValues
{  
	///<summary>
///Whole Table Style.
///<para>When the item is serialized out as xml, its value is "wholeTable".</para>
///</summary>
[EnumString("wholeTable")]
WholeTable,
///<summary>
///Header Row Style.
///<para>When the item is serialized out as xml, its value is "headerRow".</para>
///</summary>
[EnumString("headerRow")]
HeaderRow,
///<summary>
///Total Row Style.
///<para>When the item is serialized out as xml, its value is "totalRow".</para>
///</summary>
[EnumString("totalRow")]
TotalRow,
///<summary>
///First Column Style.
///<para>When the item is serialized out as xml, its value is "firstColumn".</para>
///</summary>
[EnumString("firstColumn")]
FirstColumn,
///<summary>
///Last Column Style.
///<para>When the item is serialized out as xml, its value is "lastColumn".</para>
///</summary>
[EnumString("lastColumn")]
LastColumn,
///<summary>
///First Row Stripe Style.
///<para>When the item is serialized out as xml, its value is "firstRowStripe".</para>
///</summary>
[EnumString("firstRowStripe")]
FirstRowStripe,
///<summary>
///Second Row Stripe Style.
///<para>When the item is serialized out as xml, its value is "secondRowStripe".</para>
///</summary>
[EnumString("secondRowStripe")]
SecondRowStripe,
///<summary>
///First Column Stripe Style.
///<para>When the item is serialized out as xml, its value is "firstColumnStripe".</para>
///</summary>
[EnumString("firstColumnStripe")]
FirstColumnStripe,
///<summary>
///Second Column Stripe Style.
///<para>When the item is serialized out as xml, its value is "secondColumnStripe".</para>
///</summary>
[EnumString("secondColumnStripe")]
SecondColumnStripe,
///<summary>
///First Header Row Style.
///<para>When the item is serialized out as xml, its value is "firstHeaderCell".</para>
///</summary>
[EnumString("firstHeaderCell")]
FirstHeaderCell,
///<summary>
///Last Header Style.
///<para>When the item is serialized out as xml, its value is "lastHeaderCell".</para>
///</summary>
[EnumString("lastHeaderCell")]
LastHeaderCell,
///<summary>
///First Total Row Style.
///<para>When the item is serialized out as xml, its value is "firstTotalCell".</para>
///</summary>
[EnumString("firstTotalCell")]
FirstTotalCell,
///<summary>
///Last Total Row Style.
///<para>When the item is serialized out as xml, its value is "lastTotalCell".</para>
///</summary>
[EnumString("lastTotalCell")]
LastTotalCell,
///<summary>
///First Subtotal Column Style.
///<para>When the item is serialized out as xml, its value is "firstSubtotalColumn".</para>
///</summary>
[EnumString("firstSubtotalColumn")]
FirstSubtotalColumn,
///<summary>
///Second Subtotal Column Style.
///<para>When the item is serialized out as xml, its value is "secondSubtotalColumn".</para>
///</summary>
[EnumString("secondSubtotalColumn")]
SecondSubtotalColumn,
///<summary>
///Third Subtotal Column Style.
///<para>When the item is serialized out as xml, its value is "thirdSubtotalColumn".</para>
///</summary>
[EnumString("thirdSubtotalColumn")]
ThirdSubtotalColumn,
///<summary>
///First Subtotal Row Style.
///<para>When the item is serialized out as xml, its value is "firstSubtotalRow".</para>
///</summary>
[EnumString("firstSubtotalRow")]
FirstSubtotalRow,
///<summary>
///Second Subtotal Row Style.
///<para>When the item is serialized out as xml, its value is "secondSubtotalRow".</para>
///</summary>
[EnumString("secondSubtotalRow")]
SecondSubtotalRow,
///<summary>
///Third Subtotal Row Style.
///<para>When the item is serialized out as xml, its value is "thirdSubtotalRow".</para>
///</summary>
[EnumString("thirdSubtotalRow")]
ThirdSubtotalRow,
///<summary>
///Blank Row Style.
///<para>When the item is serialized out as xml, its value is "blankRow".</para>
///</summary>
[EnumString("blankRow")]
BlankRow,
///<summary>
///First Column Subheading Style.
///<para>When the item is serialized out as xml, its value is "firstColumnSubheading".</para>
///</summary>
[EnumString("firstColumnSubheading")]
FirstColumnSubheading,
///<summary>
///Second Column Subheading Style.
///<para>When the item is serialized out as xml, its value is "secondColumnSubheading".</para>
///</summary>
[EnumString("secondColumnSubheading")]
SecondColumnSubheading,
///<summary>
///Third Column Subheading Style.
///<para>When the item is serialized out as xml, its value is "thirdColumnSubheading".</para>
///</summary>
[EnumString("thirdColumnSubheading")]
ThirdColumnSubheading,
///<summary>
///First Row Subheading Style.
///<para>When the item is serialized out as xml, its value is "firstRowSubheading".</para>
///</summary>
[EnumString("firstRowSubheading")]
FirstRowSubheading,
///<summary>
///Second Row Subheading Style.
///<para>When the item is serialized out as xml, its value is "secondRowSubheading".</para>
///</summary>
[EnumString("secondRowSubheading")]
SecondRowSubheading,
///<summary>
///Third Row Subheading Style.
///<para>When the item is serialized out as xml, its value is "thirdRowSubheading".</para>
///</summary>
[EnumString("thirdRowSubheading")]
ThirdRowSubheading,
///<summary>
///Page Field Labels Style.
///<para>When the item is serialized out as xml, its value is "pageFieldLabels".</para>
///</summary>
[EnumString("pageFieldLabels")]
PageFieldLabels,
///<summary>
///Page Field Values Style.
///<para>When the item is serialized out as xml, its value is "pageFieldValues".</para>
///</summary>
[EnumString("pageFieldValues")]
PageFieldValues,
 
}
/// <summary>
/// Vertical Alignment Run Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum VerticalAlignmentRunValues
{  
	///<summary>
///Baseline.
///<para>When the item is serialized out as xml, its value is "baseline".</para>
///</summary>
[EnumString("baseline")]
Baseline,
///<summary>
///Superscript.
///<para>When the item is serialized out as xml, its value is "superscript".</para>
///</summary>
[EnumString("superscript")]
Superscript,
///<summary>
///Subscript.
///<para>When the item is serialized out as xml, its value is "subscript".</para>
///</summary>
[EnumString("subscript")]
Subscript,
 
}
/// <summary>
/// Font scheme Styles 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum FontSchemeValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Major Font.
///<para>When the item is serialized out as xml, its value is "major".</para>
///</summary>
[EnumString("major")]
Major,
///<summary>
///Minor Font.
///<para>When the item is serialized out as xml, its value is "minor".</para>
///</summary>
[EnumString("minor")]
Minor,
 
}
/// <summary>
/// Underline Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum UnderlineValues
{  
	///<summary>
///Single Underline.
///<para>When the item is serialized out as xml, its value is "single".</para>
///</summary>
[EnumString("single")]
Single,
///<summary>
///Double Underline.
///<para>When the item is serialized out as xml, its value is "double".</para>
///</summary>
[EnumString("double")]
Double,
///<summary>
///Accounting Single Underline.
///<para>When the item is serialized out as xml, its value is "singleAccounting".</para>
///</summary>
[EnumString("singleAccounting")]
SingleAccounting,
///<summary>
///Accounting Double Underline.
///<para>When the item is serialized out as xml, its value is "doubleAccounting".</para>
///</summary>
[EnumString("doubleAccounting")]
DoubleAccounting,
///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// DDE Value Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum DdeValues
{  
	///<summary>
///Nil.
///<para>When the item is serialized out as xml, its value is "nil".</para>
///</summary>
[EnumString("nil")]
Nil,
///<summary>
///Boolean.
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Boolean,
///<summary>
///Real Number.
///<para>When the item is serialized out as xml, its value is "n".</para>
///</summary>
[EnumString("n")]
RealNumber,
///<summary>
///Error.
///<para>When the item is serialized out as xml, its value is "e".</para>
///</summary>
[EnumString("e")]
Error,
///<summary>
///String.
///<para>When the item is serialized out as xml, its value is "str".</para>
///</summary>
[EnumString("str")]
String,
 
}
/// <summary>
/// Table Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TableValues
{  
	///<summary>
///Worksheet.
///<para>When the item is serialized out as xml, its value is "worksheet".</para>
///</summary>
[EnumString("worksheet")]
Worksheet,
///<summary>
///XML.
///<para>When the item is serialized out as xml, its value is "xml".</para>
///</summary>
[EnumString("xml")]
Xml,
///<summary>
///Query Table.
///<para>When the item is serialized out as xml, its value is "queryTable".</para>
///</summary>
[EnumString("queryTable")]
QueryTable,
 
}
/// <summary>
/// Totals Row Function Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TotalsRowFunctionValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Sum.
///<para>When the item is serialized out as xml, its value is "sum".</para>
///</summary>
[EnumString("sum")]
Sum,
///<summary>
///Minimum.
///<para>When the item is serialized out as xml, its value is "min".</para>
///</summary>
[EnumString("min")]
Minimum,
///<summary>
///Maximum.
///<para>When the item is serialized out as xml, its value is "max".</para>
///</summary>
[EnumString("max")]
Maximum,
///<summary>
///Average.
///<para>When the item is serialized out as xml, its value is "average".</para>
///</summary>
[EnumString("average")]
Average,
///<summary>
///Non Empty Cell Count.
///<para>When the item is serialized out as xml, its value is "count".</para>
///</summary>
[EnumString("count")]
Count,
///<summary>
///Count Numbers.
///<para>When the item is serialized out as xml, its value is "countNums".</para>
///</summary>
[EnumString("countNums")]
CountNumbers,
///<summary>
///StdDev.
///<para>When the item is serialized out as xml, its value is "stdDev".</para>
///</summary>
[EnumString("stdDev")]
StandardDeviation,
///<summary>
///Var.
///<para>When the item is serialized out as xml, its value is "var".</para>
///</summary>
[EnumString("var")]
Variance,
///<summary>
///Custom Formula.
///<para>When the item is serialized out as xml, its value is "custom".</para>
///</summary>
[EnumString("custom")]
Custom,
 
}
/// <summary>
/// XML Data Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum XmlDataValues
{  
	///<summary>
///String.
///<para>When the item is serialized out as xml, its value is "string".</para>
///</summary>
[EnumString("string")]
String,
///<summary>
///Normalized String.
///<para>When the item is serialized out as xml, its value is "normalizedString".</para>
///</summary>
[EnumString("normalizedString")]
NormalizedString,
///<summary>
///Token.
///<para>When the item is serialized out as xml, its value is "token".</para>
///</summary>
[EnumString("token")]
Token,
///<summary>
///Byte.
///<para>When the item is serialized out as xml, its value is "byte".</para>
///</summary>
[EnumString("byte")]
Byte,
///<summary>
///Unsigned Byte.
///<para>When the item is serialized out as xml, its value is "unsignedByte".</para>
///</summary>
[EnumString("unsignedByte")]
UnsignedByte,
///<summary>
///Base 64 Encoded Binary.
///<para>When the item is serialized out as xml, its value is "base64Binary".</para>
///</summary>
[EnumString("base64Binary")]
Base64Binary,
///<summary>
///Hex Binary.
///<para>When the item is serialized out as xml, its value is "hexBinary".</para>
///</summary>
[EnumString("hexBinary")]
HexBinary,
///<summary>
///Integer.
///<para>When the item is serialized out as xml, its value is "integer".</para>
///</summary>
[EnumString("integer")]
Integer,
///<summary>
///Positive Integer.
///<para>When the item is serialized out as xml, its value is "positiveInteger".</para>
///</summary>
[EnumString("positiveInteger")]
PositiveInteger,
///<summary>
///Negative Integer.
///<para>When the item is serialized out as xml, its value is "negativeInteger".</para>
///</summary>
[EnumString("negativeInteger")]
NegativeInteger,
///<summary>
///Non Positive Integer.
///<para>When the item is serialized out as xml, its value is "nonPositiveInteger".</para>
///</summary>
[EnumString("nonPositiveInteger")]
NonPositiveInteger,
///<summary>
///Non Negative Integer.
///<para>When the item is serialized out as xml, its value is "nonNegativeInteger".</para>
///</summary>
[EnumString("nonNegativeInteger")]
NonNegativeInteger,
///<summary>
///Integer.
///<para>When the item is serialized out as xml, its value is "int".</para>
///</summary>
[EnumString("int")]
Int,
///<summary>
///Unsigned Integer.
///<para>When the item is serialized out as xml, its value is "unsignedInt".</para>
///</summary>
[EnumString("unsignedInt")]
UnsignedInteger,
///<summary>
///Long.
///<para>When the item is serialized out as xml, its value is "long".</para>
///</summary>
[EnumString("long")]
Long,
///<summary>
///Unsigned Long.
///<para>When the item is serialized out as xml, its value is "unsignedLong".</para>
///</summary>
[EnumString("unsignedLong")]
UnsignedLong,
///<summary>
///Short.
///<para>When the item is serialized out as xml, its value is "short".</para>
///</summary>
[EnumString("short")]
Short,
///<summary>
///Unsigned Short.
///<para>When the item is serialized out as xml, its value is "unsignedShort".</para>
///</summary>
[EnumString("unsignedShort")]
UnsignedShort,
///<summary>
///Decimal.
///<para>When the item is serialized out as xml, its value is "decimal".</para>
///</summary>
[EnumString("decimal")]
Decimal,
///<summary>
///Float.
///<para>When the item is serialized out as xml, its value is "float".</para>
///</summary>
[EnumString("float")]
Float,
///<summary>
///Double.
///<para>When the item is serialized out as xml, its value is "double".</para>
///</summary>
[EnumString("double")]
Double,
///<summary>
///Boolean.
///<para>When the item is serialized out as xml, its value is "boolean".</para>
///</summary>
[EnumString("boolean")]
Boolean,
///<summary>
///Time.
///<para>When the item is serialized out as xml, its value is "time".</para>
///</summary>
[EnumString("time")]
Time,
///<summary>
///Date Time.
///<para>When the item is serialized out as xml, its value is "dateTime".</para>
///</summary>
[EnumString("dateTime")]
DateTime,
///<summary>
///Duration.
///<para>When the item is serialized out as xml, its value is "duration".</para>
///</summary>
[EnumString("duration")]
Duration,
///<summary>
///Date.
///<para>When the item is serialized out as xml, its value is "date".</para>
///</summary>
[EnumString("date")]
Date,
///<summary>
///gMonth.
///<para>When the item is serialized out as xml, its value is "gMonth".</para>
///</summary>
[EnumString("gMonth")]
Gmonth,
///<summary>
///gYear.
///<para>When the item is serialized out as xml, its value is "gYear".</para>
///</summary>
[EnumString("gYear")]
Gyear,
///<summary>
///gYearMonth.
///<para>When the item is serialized out as xml, its value is "gYearMonth".</para>
///</summary>
[EnumString("gYearMonth")]
GYearMonth,
///<summary>
///gDay.
///<para>When the item is serialized out as xml, its value is "gDay".</para>
///</summary>
[EnumString("gDay")]
Gday,
///<summary>
///gMonthDays.
///<para>When the item is serialized out as xml, its value is "gMonthDay".</para>
///</summary>
[EnumString("gMonthDay")]
GMonthDay,
///<summary>
///Name.
///<para>When the item is serialized out as xml, its value is "Name".</para>
///</summary>
[EnumString("Name")]
Name,
///<summary>
///Qname.
///<para>When the item is serialized out as xml, its value is "QName".</para>
///</summary>
[EnumString("QName")]
Qname,
///<summary>
///NCName.
///<para>When the item is serialized out as xml, its value is "NCName".</para>
///</summary>
[EnumString("NCName")]
NCName,
///<summary>
///Any URI.
///<para>When the item is serialized out as xml, its value is "anyURI".</para>
///</summary>
[EnumString("anyURI")]
AnyURI,
///<summary>
///Language.
///<para>When the item is serialized out as xml, its value is "language".</para>
///</summary>
[EnumString("language")]
Language,
///<summary>
///ID.
///<para>When the item is serialized out as xml, its value is "ID".</para>
///</summary>
[EnumString("ID")]
Id,
///<summary>
///IDREF.
///<para>When the item is serialized out as xml, its value is "IDREF".</para>
///</summary>
[EnumString("IDREF")]
IdRef,
///<summary>
///IDREFS.
///<para>When the item is serialized out as xml, its value is "IDREFS".</para>
///</summary>
[EnumString("IDREFS")]
IdRefs,
///<summary>
///ENTITY.
///<para>When the item is serialized out as xml, its value is "ENTITY".</para>
///</summary>
[EnumString("ENTITY")]
Entity,
///<summary>
///ENTITIES.
///<para>When the item is serialized out as xml, its value is "ENTITIES".</para>
///</summary>
[EnumString("ENTITIES")]
Entities,
///<summary>
///Notation.
///<para>When the item is serialized out as xml, its value is "NOTATION".</para>
///</summary>
[EnumString("NOTATION")]
Notation,
///<summary>
///NMTOKEN.
///<para>When the item is serialized out as xml, its value is "NMTOKEN".</para>
///</summary>
[EnumString("NMTOKEN")]
NMToken,
///<summary>
///NMTOKENS.
///<para>When the item is serialized out as xml, its value is "NMTOKENS".</para>
///</summary>
[EnumString("NMTOKENS")]
NMTokens,
///<summary>
///Any Type.
///<para>When the item is serialized out as xml, its value is "anyType".</para>
///</summary>
[EnumString("anyType")]
AnyType,
 
}
/// <summary>
/// Volatile Dependency Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum VolatileDependencyValues
{  
	///<summary>
///Real Time Data.
///<para>When the item is serialized out as xml, its value is "realTimeData".</para>
///</summary>
[EnumString("realTimeData")]
RealTimeData,
///<summary>
///OLAP Formulas.
///<para>When the item is serialized out as xml, its value is "olapFunctions".</para>
///</summary>
[EnumString("olapFunctions")]
OlapFunctions,
 
}
/// <summary>
/// Volatile Dependency Value Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum VolatileValues
{  
	///<summary>
///Boolean.
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Boolean,
///<summary>
///Real Number.
///<para>When the item is serialized out as xml, its value is "n".</para>
///</summary>
[EnumString("n")]
RealNumber,
///<summary>
///Error.
///<para>When the item is serialized out as xml, its value is "e".</para>
///</summary>
[EnumString("e")]
Error,
///<summary>
///String.
///<para>When the item is serialized out as xml, its value is "s".</para>
///</summary>
[EnumString("s")]
String,
 
}
/// <summary>
/// Visibility Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum VisibilityValues
{  
	///<summary>
///Visible.
///<para>When the item is serialized out as xml, its value is "visible".</para>
///</summary>
[EnumString("visible")]
Visible,
///<summary>
///Hidden.
///<para>When the item is serialized out as xml, its value is "hidden".</para>
///</summary>
[EnumString("hidden")]
Hidden,
///<summary>
///Very Hidden.
///<para>When the item is serialized out as xml, its value is "veryHidden".</para>
///</summary>
[EnumString("veryHidden")]
VeryHidden,
 
}
/// <summary>
/// Comment Display Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CommentsValues
{  
	///<summary>
///No Comments.
///<para>When the item is serialized out as xml, its value is "commNone".</para>
///</summary>
[EnumString("commNone")]
CommentNone,
///<summary>
///Show Comment Indicator.
///<para>When the item is serialized out as xml, its value is "commIndicator".</para>
///</summary>
[EnumString("commIndicator")]
CommentIndicator,
///<summary>
///Show Comment and Indicator.
///<para>When the item is serialized out as xml, its value is "commIndAndComment".</para>
///</summary>
[EnumString("commIndAndComment")]
CommentIndicatorAndComment,
 
}
/// <summary>
/// Object Display Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ObjectDisplayValues
{  
	///<summary>
///All.
///<para>When the item is serialized out as xml, its value is "all".</para>
///</summary>
[EnumString("all")]
All,
///<summary>
///Show Placeholders.
///<para>When the item is serialized out as xml, its value is "placeholders".</para>
///</summary>
[EnumString("placeholders")]
Placeholders,
///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
 
}
/// <summary>
/// Sheet Visibility Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum SheetStateValues
{  
	///<summary>
///Visible.
///<para>When the item is serialized out as xml, its value is "visible".</para>
///</summary>
[EnumString("visible")]
Visible,
///<summary>
///Hidden.
///<para>When the item is serialized out as xml, its value is "hidden".</para>
///</summary>
[EnumString("hidden")]
Hidden,
///<summary>
///Very Hidden.
///<para>When the item is serialized out as xml, its value is "veryHidden".</para>
///</summary>
[EnumString("veryHidden")]
VeryHidden,
 
}
/// <summary>
/// Update Links Behavior Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum UpdateLinksBehaviorValues
{  
	///<summary>
///User Set.
///<para>When the item is serialized out as xml, its value is "userSet".</para>
///</summary>
[EnumString("userSet")]
UserSet,
///<summary>
///Never Update Links.
///<para>When the item is serialized out as xml, its value is "never".</para>
///</summary>
[EnumString("never")]
Never,
///<summary>
///Always Update Links.
///<para>When the item is serialized out as xml, its value is "always".</para>
///</summary>
[EnumString("always")]
Always,
 
}
/// <summary>
/// Calculation Mode 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CalculateModeValues
{  
	///<summary>
///Manual Calculation Mode.
///<para>When the item is serialized out as xml, its value is "manual".</para>
///</summary>
[EnumString("manual")]
Manual,
///<summary>
///Automatic.
///<para>When the item is serialized out as xml, its value is "auto".</para>
///</summary>
[EnumString("auto")]
Auto,
///<summary>
///Automatic Calculation (No Tables).
///<para>When the item is serialized out as xml, its value is "autoNoTable".</para>
///</summary>
[EnumString("autoNoTable")]
AutoNoTable,
 
}
/// <summary>
/// Reference Mode 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ReferenceModeValues
{  
	///<summary>
///A1 Mode.
///<para>When the item is serialized out as xml, its value is "A1".</para>
///</summary>
[EnumString("A1")]
A1,
///<summary>
///R1C1 Reference Mode.
///<para>When the item is serialized out as xml, its value is "R1C1".</para>
///</summary>
[EnumString("R1C1")]
R1C1,
 
}
/// <summary>
/// Target Screen Size Types 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TargetScreenSizeValues
{  
	///<summary>
///544 x 376 Resolution.
///<para>When the item is serialized out as xml, its value is "544x376".</para>
///</summary>
[EnumString("544x376")]
Sz544x376,
///<summary>
///640 x 480 Resolution.
///<para>When the item is serialized out as xml, its value is "640x480".</para>
///</summary>
[EnumString("640x480")]
Sz640x480,
///<summary>
///720 x 512 Resolution.
///<para>When the item is serialized out as xml, its value is "720x512".</para>
///</summary>
[EnumString("720x512")]
Sz720x512,
///<summary>
///800 x 600 Resolution.
///<para>When the item is serialized out as xml, its value is "800x600".</para>
///</summary>
[EnumString("800x600")]
Sz800x600,
///<summary>
///1024 x 768 Resolution.
///<para>When the item is serialized out as xml, its value is "1024x768".</para>
///</summary>
[EnumString("1024x768")]
Sz1024x768,
///<summary>
///1152 x 882 Resolution.
///<para>When the item is serialized out as xml, its value is "1152x882".</para>
///</summary>
[EnumString("1152x882")]
Sz1152x882,
///<summary>
///1152 x 900 Resolution.
///<para>When the item is serialized out as xml, its value is "1152x900".</para>
///</summary>
[EnumString("1152x900")]
Sz1152x900,
///<summary>
///1280 x 1024 Resolution.
///<para>When the item is serialized out as xml, its value is "1280x1024".</para>
///</summary>
[EnumString("1280x1024")]
Sz1280x1024,
///<summary>
///1600 x 1200 Resolution.
///<para>When the item is serialized out as xml, its value is "1600x1200".</para>
///</summary>
[EnumString("1600x1200")]
Sz1600x1200,
///<summary>
///1800 x 1440 Resolution.
///<para>When the item is serialized out as xml, its value is "1800x1440".</para>
///</summary>
[EnumString("1800x1440")]
Sz1800x1440,
///<summary>
///1920 x 1200 Resolution.
///<para>When the item is serialized out as xml, its value is "1920x1200".</para>
///</summary>
[EnumString("1920x1200")]
Sz1920x1200,
 
}
/// <summary>
/// Defines the TextHorizontalAlignmentValues enumeration. 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TextHorizontalAlignmentValues
{  
	///<summary>
///left.
///<para>When the item is serialized out as xml, its value is "left".</para>
///</summary>
[EnumString("left")]
Left,
///<summary>
///center.
///<para>When the item is serialized out as xml, its value is "center".</para>
///</summary>
[EnumString("center")]
Center,
///<summary>
///right.
///<para>When the item is serialized out as xml, its value is "right".</para>
///</summary>
[EnumString("right")]
Right,
///<summary>
///justify.
///<para>When the item is serialized out as xml, its value is "justify".</para>
///</summary>
[EnumString("justify")]
Justify,
///<summary>
///distributed.
///<para>When the item is serialized out as xml, its value is "distributed".</para>
///</summary>
[EnumString("distributed")]
Distributed,
 
}
/// <summary>
/// Defines the TextVerticalAlignmentValues enumeration. 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum TextVerticalAlignmentValues
{  
	///<summary>
///top.
///<para>When the item is serialized out as xml, its value is "top".</para>
///</summary>
[EnumString("top")]
Top,
///<summary>
///center.
///<para>When the item is serialized out as xml, its value is "center".</para>
///</summary>
[EnumString("center")]
Center,
///<summary>
///bottom.
///<para>When the item is serialized out as xml, its value is "bottom".</para>
///</summary>
[EnumString("bottom")]
Bottom,
///<summary>
///justify.
///<para>When the item is serialized out as xml, its value is "justify".</para>
///</summary>
[EnumString("justify")]
Justify,
///<summary>
///distributed.
///<para>When the item is serialized out as xml, its value is "distributed".</para>
///</summary>
[EnumString("distributed")]
Distributed,
 
}
/// <summary>
/// Cell Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum CellValues
{  
	///<summary>
///Boolean.
///<para>When the item is serialized out as xml, its value is "b".</para>
///</summary>
[EnumString("b")]
Boolean,
///<summary>
///Number.
///<para>When the item is serialized out as xml, its value is "n".</para>
///</summary>
[EnumString("n")]
Number,
///<summary>
///Error.
///<para>When the item is serialized out as xml, its value is "e".</para>
///</summary>
[EnumString("e")]
Error,
///<summary>
///Shared String.
///<para>When the item is serialized out as xml, its value is "s".</para>
///</summary>
[EnumString("s")]
SharedString,
///<summary>
///String.
///<para>When the item is serialized out as xml, its value is "str".</para>
///</summary>
[EnumString("str")]
String,
///<summary>
///Inline String.
///<para>When the item is serialized out as xml, its value is "inlineStr".</para>
///</summary>
[EnumString("inlineStr")]
InlineString,
///<summary>
///d.
///<para>When the item is serialized out as xml, its value is "d".</para>
///</summary>
[EnumString("d")]
Date,
 
}
/// <summary>
/// Rule Type 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum PivotAreaValues
{  
	///<summary>
///None.
///<para>When the item is serialized out as xml, its value is "none".</para>
///</summary>
[EnumString("none")]
None,
///<summary>
///Normal.
///<para>When the item is serialized out as xml, its value is "normal".</para>
///</summary>
[EnumString("normal")]
Normal,
///<summary>
///Data.
///<para>When the item is serialized out as xml, its value is "data".</para>
///</summary>
[EnumString("data")]
Data,
///<summary>
///All.
///<para>When the item is serialized out as xml, its value is "all".</para>
///</summary>
[EnumString("all")]
All,
///<summary>
///Origin.
///<para>When the item is serialized out as xml, its value is "origin".</para>
///</summary>
[EnumString("origin")]
Origin,
///<summary>
///Field Button.
///<para>When the item is serialized out as xml, its value is "button".</para>
///</summary>
[EnumString("button")]
Button,
///<summary>
///Top Right.
///<para>When the item is serialized out as xml, its value is "topRight".</para>
///</summary>
[EnumString("topRight")]
TopRight,
///<summary>
///topEnd.
///<para>When the item is serialized out as xml, its value is "topEnd".</para>
///</summary>
[EnumString("topEnd")]
TopEnd,
 
}
/// <summary>
/// Document Conformance Class Value 
/// </summary> 
[System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")]
public enum ConformanceClass
{  
	///<summary>
///Office Open XML Strict.
///<para>When the item is serialized out as xml, its value is "strict".</para>
///</summary>
[EnumString("strict")]
Enumstrict,
///<summary>
///Office Open XML Transitional.
///<para>When the item is serialized out as xml, its value is "transitional".</para>
///</summary>
[EnumString("transitional")]
Enumtransitional,
 
}
}
 
 

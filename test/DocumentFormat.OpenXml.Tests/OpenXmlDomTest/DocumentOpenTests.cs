// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using DocumentFormat.OpenXml.Office2010.ExcelAc;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Validation;
using System;
using System.Collections.Generic;
using System.IO;
using Xunit;

using static DocumentFormat.OpenXml.Tests.TestAssets;

namespace DocumentFormat.OpenXml.Tests
{
    public class DocumentOpenTests
    {
        [Fact]
        public void UriExceptionIsWrapped()
        {
            using (var stream = GetStream(TestFiles.malformed_uri_xlsx))
            {
                var exception = Assert.Throws<OpenXmlPackageException>(() => SpreadsheetDocument.Open(stream, false));

                Assert.IsType<UriFormatException>(exception.InnerException);
            }
        }

        [Fact]
        public void ExceptionIfNotWritable()
        {
            using (var stream = GetStream(TestFiles.malformed_uri_xlsx))
            {
                var settings = new OpenSettings
                {
                    RelationshipErrorHandlerFactory = RelationshipErrorHandler.CreateRewriterFactory((partUri, id, uri) => null),
                };

                var exception = Assert.Throws<OpenXmlPackageException>(() => SpreadsheetDocument.Open(stream, false));

                Assert.IsType<UriFormatException>(exception.InnerException);
            }
        }

        [Fact]
        public void RewriteMalformedUri()
        {
            const string Rewritten = "http://error";
            const string Id = "rId1";

            var Count = 0;

            using (var stream = GetStream(TestFiles.malformed_uri_xlsx, isEditable: true))
            {
                var settings = new OpenSettings
                {
                    RelationshipErrorHandlerFactory = RelationshipErrorHandler.CreateRewriterFactory((partUri, id, uri) =>
                    {
                        Count++;
                        Assert.Equal(Id, id);
                        Assert.Equal("/xl/worksheets/_rels/sheet1.xml.rels", partUri.OriginalString);
                        Assert.Equal("mailto:one@", uri);

                        return Rewritten;
                    }),
                };

                using (var doc = SpreadsheetDocument.Open(stream, true, settings))
                {
                    Assert.Equal(1, Count);

                    var worksheetPart = Assert.Single(doc.WorkbookPart.WorksheetParts);
                    var hyperlinkRelationship = Assert.Single(worksheetPart.HyperlinkRelationships);
                    var worksheet = Assert.IsType<Worksheet>(worksheetPart.RootElement);
                    var hyperlink = Assert.Single(worksheet.Descendants<Hyperlink>());

                    Assert.Equal(Id, hyperlinkRelationship.Id);
                    Assert.Equal(Rewritten, hyperlinkRelationship.Uri.OriginalString);

                    Assert.Equal(Id, hyperlink.Id);
                }
            }
        }

        [Fact]
        public void RewriteMalformedUriLong()
        {
            const string Rewritten = "http://error";
            const string Id = "rId1";

            var Count = 0;

            using var stream = GetStream(TestFiles.malformed_uri_long_xlsx, isEditable: true);

            var settings = new OpenSettings
            {
                RelationshipErrorHandlerFactory = RelationshipErrorHandler.CreateRewriterFactory((partUri, id, uri) =>
                {
                    Count++;
                    Assert.Equal(Id, id);
                    Assert.Equal("/xl/worksheets/_rels/sheet1.xml.rels", partUri.OriginalString);
                    Assert.Equal("mailto:test@test.com;%20test2@test.com;%252test3@test.com;%20test3@test.com;%20test4@test.com;%20test5@test.com?subject=Unsubscribe%20Request&body=Please%20unsubscribe%20me%20from%20all%20future%20communications", uri);

                    return Rewritten;
                }),
            };

            using var doc = SpreadsheetDocument.Open(stream, true, settings);

            Assert.Equal(1, Count);

            var worksheetPart = Assert.Single(doc.WorkbookPart.WorksheetParts);
            var hyperlinkRelationship = Assert.Single(worksheetPart.HyperlinkRelationships);
            var worksheet = Assert.IsType<Worksheet>(worksheetPart.RootElement);
            var hyperlink = Assert.Single(worksheet.Descendants<Hyperlink>());

            Assert.Equal(Id, hyperlinkRelationship.Id);
            Assert.Equal(Rewritten, hyperlinkRelationship.Uri.OriginalString);

            Assert.Equal(Id, hyperlink.Id);
        }

        [Fact]
        public void RemoveHyperlinks()
        {
            using (var stream = GetStream(TestFiles.malformed_uri_xlsx, isEditable: true))
            {
                var settings = new OpenSettings
                {
                    RelationshipErrorHandlerFactory = p => new RemoveMalformedHyperlinksRelationshipErrorHandler(p),
                };

                using (var doc = SpreadsheetDocument.Open(stream, true, settings))
                {
                    var worksheetPart = Assert.Single(doc.WorkbookPart.WorksheetParts);
                    Assert.Empty(worksheetPart.HyperlinkRelationships);

                    var worksheet = Assert.IsType<Worksheet>(worksheetPart.RootElement);
                    Assert.Empty(worksheet.Descendants<Hyperlink>());

                    var validator = new OpenXmlValidator();
                    Assert.Empty(validator.Validate(doc));
                }
            }
        }

        private class RemoveMalformedHyperlinksRelationshipErrorHandler : RelationshipErrorHandler
        {
            private readonly OpenXmlPackage _package;
            private readonly Dictionary<string, List<string>> _errors;

            public RemoveMalformedHyperlinksRelationshipErrorHandler(OpenXmlPackage package)
            {
                _package = package;
                _errors = new Dictionary<string, List<string>>(StringComparer.Ordinal);
            }

            public override string Rewrite(Uri partUri, string id, string uri)
            {
                var key = partUri.OriginalString
                    .Replace("_rels/", string.Empty)
                    .Replace(".rels", string.Empty);

                if (!_errors.ContainsKey(key))
                {
                    _errors.Add(key, new List<string>());
                }

                _errors[key].Add(id);

                return "http://error";
            }

            public override void OnPackageLoaded()
            {
                foreach (var part in _package.GetAllParts())
                {
                    if (_errors.TryGetValue(part.Uri.OriginalString, out var ids))
                    {
                        foreach (var id in ids)
                        {
                            part.DeleteReferenceRelationship(id);

                            if (part is WorksheetPart && part.RootElement is Worksheet ws)
                            {
                                foreach (var h in ws.Descendants<Hyperlink>())
                                {
                                    var parent = h.Parent;

                                    if (h.Id == id)
                                    {
                                        h.Remove();
                                    }

                                    if (!parent.HasChildren)
                                    {
                                        parent.Remove();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        [Fact]
        public void ThrowIfFileCannotBeFound()
        {
            const string NonExistantFile = "Unknown";

            Assert.False(File.Exists(NonExistantFile));

            Assert.Throws<FileNotFoundException>(() => SpreadsheetDocument.Open(NonExistantFile, true));
            Assert.Throws<FileNotFoundException>(() => SpreadsheetDocument.Open(NonExistantFile, false));
            Assert.Throws<FileNotFoundException>(() => SpreadsheetDocument.Open(NonExistantFile, true, new OpenSettings()));
            Assert.Throws<FileNotFoundException>(() => SpreadsheetDocument.Open(NonExistantFile, false, new OpenSettings()));

            Assert.Throws<FileNotFoundException>(() => WordprocessingDocument.Open(NonExistantFile, true));
            Assert.Throws<FileNotFoundException>(() => WordprocessingDocument.Open(NonExistantFile, false));
            Assert.Throws<FileNotFoundException>(() => WordprocessingDocument.Open(NonExistantFile, true, new OpenSettings()));
            Assert.Throws<FileNotFoundException>(() => WordprocessingDocument.Open(NonExistantFile, false, new OpenSettings()));

            Assert.Throws<FileNotFoundException>(() => PresentationDocument.Open(NonExistantFile, true));
            Assert.Throws<FileNotFoundException>(() => PresentationDocument.Open(NonExistantFile, false));
            Assert.Throws<FileNotFoundException>(() => PresentationDocument.Open(NonExistantFile, true, new OpenSettings()));
            Assert.Throws<FileNotFoundException>(() => PresentationDocument.Open(NonExistantFile, false, new OpenSettings()));
        }
    }
}

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using System;
using System.IO;
using System.Linq;
using Xunit;

using static DocumentFormat.OpenXml.Tests.TestAssets;

using a = DocumentFormat.OpenXml.Drawing;
using pic = DocumentFormat.OpenXml.Drawing.Pictures;
using w = DocumentFormat.OpenXml.Wordprocessing;
using wp = DocumentFormat.OpenXml.Drawing.Wordprocessing;
using x = DocumentFormat.OpenXml.Spreadsheet;

namespace DocumentFormat.OpenXml.Tests
{
    /// <summary>
    /// Summary description for OpenXmlPackageTest
    /// </summary>
    public class OpenXmlPackageTest
    {
        [Fact]
        public void AutoSaveTestDocxNoWrite()
        {
            byte[] GetBytes(Stream input)
            {
                input.Position = 0;

                using (var ms = new MemoryStream())
                {
                    input.CopyTo(ms);
                    input.Position = 0;

                    return ms.ToArray();
                }
            }

            using (var stream = GetStream(TestFiles.complex0docx))
            {
                var dataBefore = GetBytes(stream);

                // open the file in readonly mode, nothing should be saved on disposing
                using (var document = WordprocessingDocument.Open(stream, false))
                {
                    document.MainDocumentPart.Document.Body.Append(new Paragraph());
                }

                Assert.Equal(dataBefore, GetBytes(stream));
            }
        }

        [Fact]
        public void AutoSaveTestDocx()
        {
            // Open and close the file with SDK to normalize the file
            // since the SDK will change contents when closing the package.
            Stream NormalizeDocument(Stream input)
            {
                using (var doc = WordprocessingDocument.Open(input, true))
                {
                }

                return input;
            }

            using (var stream = GetStream(TestFiles.complex0docx, true))
            {
                NormalizeDocument(stream);

                // open the file in readWrite mode, and then changes should be saved
                using (var document = WordprocessingDocument.Open(stream, true))
                {
                    var firstText = document.MainDocumentPart.Document.Descendants<Text>().First();

                    // change text of the first run
                    firstText.Text = "Changed";

                    var stylePart = document.MainDocumentPart.GetPartsOfType<StyleDefinitionsPart>().First();
                    var heading1Style = stylePart.Styles.Descendants<Style>().Where(style => style.StyleId == "Heading1").Single();

                    // change color to be black
                    heading1Style.Descendants<Color>().First().Val = "000000";
                }

                // check the changes. other parts should be the same
                using (var document = WordprocessingDocument.Open(stream, false))
                {
                    var firstText = document.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.Equal("Changed", firstText.Text);
                    var stylePart = document.MainDocumentPart.GetPartsOfType<StyleDefinitionsPart>().First();
                    var heading1Style = stylePart.Styles.Descendants<Style>().Where(s => s.StyleId == "Heading1").Single();
                    Assert.Equal("000000", heading1Style.Descendants<Color>().First().Val.Value);
                }

                using (var originalStream = GetStream(TestFiles.complex0docx))
                using (var originalDoc = WordprocessingDocument.Open(originalStream, false))
                using (var changedDoc = WordprocessingDocument.Open(stream, false))
                {
                    var changedDocIterator = changedDoc.GetAllParts();
                    var changedDocEnumerator = changedDocIterator.GetEnumerator();

                    foreach (var originalPart in originalDoc.GetAllParts())
                    {
                        Assert.True(changedDocEnumerator.MoveNext());
                        if (!(originalPart is MainDocumentPart) && !(originalPart is StyleDefinitionsPart))
                        {
                            Assert.Equal(originalPart.GetType(), changedDocEnumerator.Current.GetType());
                            Assert.Equal(originalPart.GetStream().Length, changedDocEnumerator.Current.GetStream().Length);
                        }
                    }
                }
            }
        }

        ///<summary>
        ///AutoSaveTestCreate.
        ///</summary>
        [Fact]
        public void AutoSaveTestCreate()
        {
            // Create with a memory stream
            using (var document = WordprocessingDocument.Create(new MemoryStream(), DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
            {
                document.AddMainDocumentPart();
                document.MainDocumentPart.Document = new Document();
            }

            // Create with file stream
            using (var stream = new MemoryStream())
            {
                using (var document = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document))
                {
                    document.AddMainDocumentPart();
                    document.MainDocumentPart.Document =
                        new Document(
                            new Body(
                                new Paragraph(
                                    new Run(
                                        new Text("Hello World")))));

                    // add an image
                    var imagePart1 = document.MainDocumentPart.AddNewPart<ImagePart>("image/x-wmf", "rId6");
                    using (var writer = new BinaryWriter(imagePart1.GetStream()))
                    {
                        writer.Write(Convert.FromBase64String(""));
                    }

                    document.MainDocumentPart.Document.Body.Append(
                        new Paragraph(
                                new Run(
                                    new RunProperties(
                                        new NoProof()),
                                    new w.Drawing(
                                        new wp.Inline(
                                            new wp.Extent() { Cx = 2145665L, Cy = 2177415L },
                                            new wp.EffectExtent() { LeftEdge = 19050L, TopEdge = 0L, RightEdge = 0L, BottomEdge = 0L },
                                            new wp.DocProperties() { Id = 1U, Name = "Picture 1", Description = "C:\\Program Files (x86)\\Microsoft Office\\MEDIA\\CAGCAT10\\j0149481.wmf" },
                                            new wp.NonVisualGraphicFrameDrawingProperties(
                                                new a.GraphicFrameLocks() { NoChangeAspect = true }),
                                            new a.Graphic(
                                                new a.GraphicData(
                                                    new pic.Picture(
                                                        new pic.NonVisualPictureProperties(
                                                            new pic.NonVisualDrawingProperties() { Id = 0U, Name = "Picture 1", Description = "wmf" },
                                                            new pic.NonVisualPictureDrawingProperties(
                                                                new a.PictureLocks() { NoChangeAspect = true, NoChangeArrowheads = true })),
                                                        new pic.BlipFill(
                                                            new a.Blip() { Embed = "rId6", CompressionState = a.BlipCompressionValues.Print },
                                                            new a.SourceRectangle(),
                                                            new a.Stretch(
                                                                new a.FillRectangle())),
                                                        new pic.ShapeProperties(
                                                            new a.Transform2D(
                                                                new a.Offset() { X = 0L, Y = 0L },
                                                                new a.Extents() { Cx = 2145665L, Cy = 2177415L }),
                                                            new a.PresetGeometry(
                                                                new a.AdjustValueList()
                                                            )
                                                            { Preset = a.ShapeTypeValues.Rectangle },
                                                            new a.NoFill(),
                                                            new a.Outline(
                                                                new a.NoFill(),
                                                                new a.Miter() { Limit = 800000 },
                                                                new a.HeadEnd(),
                                                                new a.TailEnd()
                                                            )
                                                            { Width = 9525 }
                                                        )
                                                        { BlackWhiteMode = a.BlackWhiteModeValues.Auto })
                                                )
                                                { Uri = "http://schemas.openxmlformats.org/drawingml/2006/picture" })
                                        )
                                        { DistanceFromTop = 0U, DistanceFromBottom = 0U, DistanceFromLeft = 0U, DistanceFromRight = 0U }))
                                 ));
                }

                // validate created
                using (var document = WordprocessingDocument.Open(stream, false))
                {
                    var firstText = document.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.Equal("Hello World", firstText.Text);
                    Assert.True(document.MainDocumentPart.Document.Descendants<w.Drawing>().Count() == 1, "Drawing isn't added to main part.");
                    Assert.True(document.MainDocumentPart.GetPartById("rId6") is ImagePart);
                }
            }
        }

        ///<summary>
        ///AutoSaveTestPptx.
        ///</summary>
        [Fact]
        public void AutoSaveTestPptx()
        {
            // Change something in the master part.
            var textCount = 0;

            using (var stream = GetStream(TestFiles.autosave, true))
            {
                using (var doc = PresentationDocument.Open(stream, true))
                {
                    var slide1 = doc.PresentationPart.GetPartById("rId2"); // Get part slide1.xml
                    var slideLayout1 = slide1.GetPartById("rId1"); // Get part slideLayout1.xml
                    var slideMaster1 = slideLayout1.GetPartById("rId1"); // Get slideMaster1.xml
                    Assert.Equal(typeof(SlideMasterPart), slideMaster1.GetType());

                    // Change a text "5/7/2009" to be "5/9/2009"
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/7/2009");
                    foreach (var text in texts)
                    {
                        text.Text = "5/9/2009";
                        textCount++;
                    }
                }

                Assert.True(textCount > 0);

                // Validate
                using (var doc = PresentationDocument.Open(stream, false))
                {
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml in anther way
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/9/2009");
                    Assert.Equal(textCount, texts.Count());
                }
            }
        }

        /// <summary>
        /// A test for AutoSave set on open
        /// </summary>
        [Fact]
        public void AutoSaveOpenTestWord()
        {
            var s = new OpenSettings
            {
                AutoSave = false,
            };

            using (var stream = GetStream(TestFiles.complex0docx, true))
            {
                using (var doc = WordprocessingDocument.Open(stream, true, s))
                {
                    // do something, and changes should not be saved.
                    var firstText = doc.MainDocumentPart.Document.Descendants<Text>().First();
                    firstText.Text = "Changed";
                }

                s.AutoSave = true;
                stream.Position = 0;

                using (var doc = WordprocessingDocument.Open(stream, true, s))
                {
                    // check first.
                    var firstText = doc.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.NotEqual("Changed", firstText.Text);

                    // do changes, and changes shoud be saved.
                    firstText.Text = "Changed";
                }

                stream.Position = 0;

                using (var doc = WordprocessingDocument.Open(stream, true))
                {
                    var firstText = doc.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.Equal("Changed", firstText.Text);

                    firstText.Text = "Changed2";
                }

                stream.Position = 0;

                using (var docxPackage = System.IO.Packaging.Package.Open(stream, FileMode.OpenOrCreate, FileAccess.ReadWrite))
                using (var doc = WordprocessingDocument.Open(docxPackage, s))
                {
                    var firstText = doc.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.Equal("Changed2", firstText.Text);

                    firstText.Text = "Changed3";
                }

                stream.Position = 0;

                using (var doc = WordprocessingDocument.Open(stream, false))
                {
                    // check
                    var firstText = doc.MainDocumentPart.Document.Descendants<Text>().First();
                    Assert.Equal("Changed3", firstText.Text);
                }
            }
        }

        [Fact]
        public void AutoSaveOpenTestPowerPoint()
        {
            var s = new OpenSettings
            {
                AutoSave = false,
            };

            using (var stream = GetStream(TestFiles.autosave, true))
            {
                using (var doc = PresentationDocument.Open(stream, true, s))
                {
                    // do something, and changes should not be saved.
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/7/2009");
                    foreach (var text in texts)
                    {
                        text.Text = "5/9/2009";
                    }
                }

                s.AutoSave = true;
                stream.Position = 0;

                using (var doc = PresentationDocument.Open(stream, true, s))
                {
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml

                    // check first.
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/9/2009");
                    Assert.True(texts.Count() == 0);

                    // change and save.
                    texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/7/2009");
                    foreach (var text in texts)
                    {
                        text.Text = "5/9/2009";
                    }
                }

                stream.Position = 0;

                using (var doc = PresentationDocument.Open(stream, true))
                {
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml

                    // check first.
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/9/2009");
                    Assert.True(texts.Count() > 0);

                    // change and save.
                    foreach (var text in texts)
                    {
                        text.Text = "5/10/2009";
                    }
                }

                stream.Position = 0;

                using (var pptxPackage = System.IO.Packaging.Package.Open(stream, FileMode.OpenOrCreate, FileAccess.ReadWrite))
                using (var doc = PresentationDocument.Open(pptxPackage, s))
                {
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml

                    // check first.
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/10/2009");
                    Assert.True(texts.Count() > 0);

                    // change and save.
                    foreach (var text in texts)
                    {
                        text.Text = "5/11/2009";
                    }
                }

                stream.Position = 0;

                using (var doc = PresentationDocument.Open(stream, false))
                {
                    var slideMaster1 = doc.PresentationPart.GetPartById("rId1"); // Get slideMaster1.xml

                    // check first.
                    var texts = slideMaster1.RootElement.Descendants<a.Text>().Where(t => t.Text == "5/11/2009");
                    Assert.True(texts.Count() > 0);
                }
            }
        }

        [Fact]
        public void AutoSaveOpenTestExcel()
        {
            var s = new OpenSettings
            {
                AutoSave = false,
            };

            using (var stream = GetStream(TestFiles.basicspreadsheet, true))
            {
                using (var doc = SpreadsheetDocument.Open(stream, true, s))
                {
                    // do changes, and they should not be saved.
                    var sharedStringsPart = doc.WorkbookPart.GetPartById("rId7");
                    var fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "宋体");
                    foreach (var font in fonts)
                    {
                        font.Val = "微软雅黑";
                    }
                }

                s.AutoSave = true;
                stream.Position = 0;

                using (var doc = SpreadsheetDocument.Open(stream, true, s))
                {
                    // Check first
                    var sharedStringsPart = doc.WorkbookPart.GetPartById("rId7");
                    var fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "微软雅黑");
                    Assert.True(fonts.Count() == 0);

                    // do changes, and they should be saved.
                    fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "宋体");
                    foreach (var font in fonts)
                    {
                        font.Val = "微软雅黑";
                    }
                }

                stream.Position = 0;

                using (var doc = SpreadsheetDocument.Open(stream, true))
                {
                    var sharedStringsPart = doc.WorkbookPart.GetPartById("rId7");
                    var fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "微软雅黑");
                    Assert.True(fonts.Count() > 0);
                    foreach (var font in fonts)
                    {
                        font.Val = "仿宋";
                    }
                }

                stream.Position = 0;

                using (var xlsxPackage = System.IO.Packaging.Package.Open(stream, FileMode.OpenOrCreate, FileAccess.ReadWrite))
                using (var doc = SpreadsheetDocument.Open(xlsxPackage, s))
                {
                    var sharedStringsPart = doc.WorkbookPart.GetPartById("rId7");
                    var fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "仿宋");
                    Assert.True(fonts.Count() > 0);
                    foreach (var font in fonts)
                    {
                        font.Val = "楷体";
                    }
                }

                stream.Position = 0;

                using (var doc = SpreadsheetDocument.Open(stream, false))
                {
                    var sharedStringsPart = doc.WorkbookPart.GetPartById("rId7");
                    var fonts = sharedStringsPart.RootElement.Descendants<x.RunFont>().Where(e => e.Val == "楷体");
                    Assert.True(fonts.Count() > 0);
                }
            }
        }

        ///<summary>
        ///OpenXmlPackagePartIteraterTest.
        ///</summary>
        [Fact]
        public void OpenXmlPackageGetAllPartsTestWord()
        {
            using (var stream = GetStream(TestFiles.complex0docx))
            using (var document = WordprocessingDocument.Open(stream, false))
            {
                var parts = document.GetAllParts();

                Assert.Equal(31, parts.Count());

                // Make sure it works well for multi calls
                Assert.Equal(31, parts.Count());
            }
        }

        [Fact]
        public void OpenXmlPackageGetAllPartsTestPowerPoint()
        {
            using (var stream = GetStream(TestFiles.o09_Performance_typical_pptx))
            using (var document = PresentationDocument.Open(stream, false))
            {
                Assert.Equal(65, document.GetAllParts().Count());

                // There is one audio part.
                Assert.Single(document.DataParts);
            }
        }

        /// <summary>
        /// A test for AddRelationshipToPart.
        /// </summary>
        [Fact]
        public void CreateRelationshipToPartTest()
        {
            using (var stream = GetStream(TestFiles.autosave, true))
            using (var doc = PresentationDocument.Open(stream, true))
            {
                var slide1 = doc.PresentationPart.GetPartById("rId2");
                var slide2 = doc.PresentationPart.GetPartById("rId3");
                var slideLayout1 = slide1.GetPartById("rId1");
                var slideLayout2 = slide2.GetPartById("rId1");

                // add slideLayout2 to slide1
                slide1.DeletePart(slide1.GetPartById("rId1"));

                Assert.Throws<InvalidOperationException>(() => slide1.CreateRelationshipToPart(new SlideLayoutPart()));

                var id = slide1.CreateRelationshipToPart(slideLayout2);
                var part12 = slide1.GetPartById(id);
                Assert.NotNull(part12);
                Assert.Equal(slideLayout2, part12);

                // add slideLayout1 to slide2
                slide2.DeletePart(slideLayout2);

                // try to get exception
                Assert.Throws<InvalidOperationException>(() => slide2.CreateRelationshipToPart(new SlideLayoutPart()));

                var id2 = slide2.CreateRelationshipToPart(slideLayout1, "rId1001");
                Assert.Equal("rId1001", id2);
                var part21 = slide2.GetPartById(id2);
                Assert.NotNull(part21);
                Assert.Equal(slideLayout1, part21);
            }
        }

        ///<summary>
        ///ChangeDocumentTypeInternalTest.
        ///</summary>
        [Fact]
        public void ChangeDocumentTypeInternalTest()
        {
            using (var stream = GetStream(TestFiles.May_12_04, true))
            using (var doc = WordprocessingDocument.Open(stream, true))
            {
                Assert.Equal(WordprocessingDocumentType.Document, doc.DocumentType);
                var hyperlinksBefore = doc.MainDocumentPart.HyperlinkRelationships.ToArray();
                var externalRelsBefore = doc.MainDocumentPart.ExternalRelationships.ToArray();

                doc.ChangeDocumentType(WordprocessingDocumentType.Template);
                Assert.Equal(WordprocessingDocumentType.Template, doc.DocumentType);

                var hyperlinksAfter = doc.MainDocumentPart.HyperlinkRelationships.ToArray();
                var externalRelsAfter = doc.MainDocumentPart.ExternalRelationships.ToArray();

                // all hyperlink relationships should be keeped.
                Assert.Equal(hyperlinksBefore.Length, hyperlinksAfter.Length);
                for (int i = 0; i < hyperlinksBefore.Length; i++)
                {
                    Assert.Equal(hyperlinksBefore[i].Id, hyperlinksAfter[i].Id);
                    Assert.Equal(hyperlinksBefore[i].IsExternal, hyperlinksAfter[i].IsExternal);
                    Assert.Equal(hyperlinksBefore[i].Uri, hyperlinksAfter[i].Uri);
                }

                // all external relationships should be keeped.
                Assert.Equal(externalRelsBefore.Length, externalRelsAfter.Length);
            }
        }

#pragma warning disable 0618 // CS0618: A class member was marked with the Obsolete attribute, such that a warning will be issued when the class member is referenced.

        ///<summary>
        ///PackageValidateTest.
        ///</summary>
        [Fact]
        public void PackageValidateTest()
        {
            using (var stream = new MemoryStream())
            using (var doc = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document))
            {
                doc.AddMainDocumentPart();
                var document = doc.MainDocumentPart.Document = new Document();
                document.Save();
                doc.MainDocumentPart.AddNewPart<StyleDefinitionsPart>();
                var styles = doc.MainDocumentPart.StyleDefinitionsPart.Styles = new Styles();
                styles.Save();

                // should no exception
                doc.Validate(null);

                // add new O14 part
                doc.MainDocumentPart.AddNewPart<StylesWithEffectsPart>();
                Assert.IsType<StylesWithEffectsPart>(doc.MainDocumentPart.StylesWithEffectsPart);

                // should no exception
                doc.Validate(null);

                // use default DefaultValidationEventHandler( ) which throw an exception
                OpenXmlPackageValidationSettings actualValidationSettings;
                actualValidationSettings = new OpenXmlPackageValidationSettings();
                actualValidationSettings.EventHandler += (sender, e) =>
                {
                    var exception = new OpenXmlPackageException(ExceptionMessages.ValidationException);
                    exception.Data.Add("OpenXmlPackageValidationEventArgs", e);
                    throw exception;
                };

                // should no exception
                doc.Validate(actualValidationSettings, FileFormatVersions.Office2010);
            }
        }

#pragma warning restore 0618

        ///<summary>
        ///AutoSaveCreateTest.
        ///</summary>
        [Fact]
        public void AutoSaveCreateTestDefault()
        {
            using (var stream = new MemoryStream())
            {
                using (var doc = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document))
                {
                    doc.AddMainDocumentPart();
                    doc.MainDocumentPart.Document = new Document();
                }

                //should be autosaved
                using (var doc = WordprocessingDocument.Open(stream, false))
                {
                    Assert.NotNull(doc.MainDocumentPart.Document);
                }
            }
        }

        [Fact]
        public void AutoSaveCreateTestFalse()
        {
            using (var stream = new MemoryStream())
            {
                using (var doc = WordprocessingDocument.Create(stream, WordprocessingDocumentType.Document, false))
                {
                    doc.AddMainDocumentPart();
                    doc.MainDocumentPart.Document = new Document();
                }

                //should not be autosaved
                using (var doc = WordprocessingDocument.Open(stream, false))
                {
                    Assert.Null(doc.MainDocumentPart.Document);
                }
            }
        }

        ///<summary>
        ///LoadPackageWithMediaReferenceTest.
        ///</summary>
        [Fact]
        public void LoadPackageWithMediaReferenceTest()
        {
            using (var stream = GetStream(TestFiles.mediareference, true))
            {
                using (var testDocument = PresentationDocument.Open(stream, true))
                {
                    Assert.Single(testDocument.DataParts);

                    var slidePart1 = testDocument.PresentationPart.SlideParts.First();
                    Assert.Single(slidePart1.DataPartReferenceRelationships);
                    Assert.IsType<MediaReferenceRelationship>(slidePart1.DataPartReferenceRelationships.First());
                    var mediaReference = slidePart1.DataPartReferenceRelationships.First() as MediaReferenceRelationship;
                    Assert.Same(slidePart1, mediaReference.Container);

                    var slidePart2 = testDocument.PresentationPart.SlideParts.ElementAt(1);
                    Assert.Equal(2, slidePart2.DataPartReferenceRelationships.Count());
                    Assert.Same(slidePart2, slidePart2.DataPartReferenceRelationships.First().Container);
                    Assert.Same(slidePart2, slidePart2.DataPartReferenceRelationships.Last().Container);

                    var dataPart = testDocument.DataParts.First();
                    Assert.IsType<MediaDataPart>(dataPart);
                    Assert.Same(testDocument, dataPart.OpenXmlPackage);
                    Assert.NotNull(dataPart.PackagePart);
                    Assert.Same(testDocument.Package.GetPart(dataPart.Uri), dataPart.PackagePart);
                    Assert.Equal("audio/wav", dataPart.ContentType);
                    Assert.Equal(3, dataPart.GetDataPartReferenceRelationships().Count());

                    // Add a new reference
                    var newReference = slidePart1.AddAudioReferenceRelationship(mediaReference.DataPart as MediaDataPart);
                    Assert.Equal(2, slidePart1.DataPartReferenceRelationships.Count());
                    Assert.Same(slidePart1, newReference.Container);
                    Assert.Same(mediaReference.DataPart, newReference.DataPart);

                    // delete the old reference
                    slidePart1.DeleteReferenceRelationship(mediaReference);
                    Assert.Single(slidePart1.DataPartReferenceRelationships);
                    Assert.Null(mediaReference.Container);

                    // delete one reference from slide2
                    DataPartReferenceRelationship dataPartReference = slidePart2.DataPartReferenceRelationships.First();
                    slidePart2.DeleteReferenceRelationship(dataPartReference.Id);
                    Assert.Single(slidePart2.DataPartReferenceRelationships);
                    Assert.Null(mediaReference.Container);
                }

                stream.Flush();
                stream.Seek(0, SeekOrigin.Begin);

                using (var testDocument = PresentationDocument.Open(stream, true))
                {
                    Assert.Single(testDocument.DataParts);

                    var slidePart1 = testDocument.PresentationPart.SlideParts.First();
                    Assert.Single(slidePart1.DataPartReferenceRelationships);
                    Assert.IsType<AudioReferenceRelationship>(slidePart1.DataPartReferenceRelationships.First());
                    var audioReference = slidePart1.DataPartReferenceRelationships.First() as AudioReferenceRelationship;
                    Assert.Same(slidePart1, audioReference.Container);

                    var slidePart2 = testDocument.PresentationPart.SlideParts.ElementAt(1);
                    Assert.Single(slidePart2.DataPartReferenceRelationships);
                    Assert.Same(slidePart2, slidePart2.DataPartReferenceRelationships.First().Container);

                    var dataPart = testDocument.DataParts.First();
                    Assert.IsType<MediaDataPart>(dataPart);
                    Assert.Same(testDocument, dataPart.OpenXmlPackage);
                    Assert.NotNull(dataPart.PackagePart);
                    Assert.Same(testDocument.Package.GetPart(dataPart.Uri), dataPart.PackagePart);
                    Assert.Equal("audio/wav", dataPart.ContentType);
                    Assert.Equal(2, dataPart.GetDataPartReferenceRelationships().Count());

                    // remove all the reference
                    slidePart1.DeleteReferenceRelationship(audioReference);
                    slidePart2.DeleteReferenceRelationship(slidePart2.DataPartReferenceRelationships.First().Id);

                    // dataPart is still there
                    dataPart = testDocument.DataParts.First();
                    Assert.IsType<MediaDataPart>(dataPart);
                    Assert.Same(testDocument, dataPart.OpenXmlPackage);
                    Assert.NotNull(dataPart.PackagePart);
                    Assert.Empty(dataPart.GetDataPartReferenceRelationships());
                }

                stream.Flush();
                stream.Seek(0, SeekOrigin.Begin);

                using (var testDocument = PresentationDocument.Open(stream, false))
                {
                    // there should be no data part any more
                    Assert.Empty(testDocument.DataParts);
                }
            }
        }

        ///<summary>
        ///MediaDataPartReferenceTest.
        ///</summary>
        [Fact]
        public void MediaDataPartReferenceTest()
        {
            using (var stream = new MemoryStream())
            {
                using (var doc = PresentationDocument.Create(stream, PresentationDocumentType.Presentation))
                {
                    doc.AddPresentationPart();
                    var mediaDataPart = doc.CreateMediaDataPart("audio/wav", ".wav");

                    Assert.EndsWith(".wav", mediaDataPart.Uri.OriginalString);

                    var aviDataPart = doc.CreateMediaDataPart(MediaDataPartType.Avi);

                    Assert.EndsWith(".avi", aviDataPart.Uri.OriginalString);
                }
            }
        }

        // TODO: Remove test copy
        private void PrepareTestFile(string testFile, byte[] source)
        {
            if (File.Exists(testFile))
                File.Delete(testFile);
            using (var writer = new BinaryWriter(new FileStream(testFile, FileMode.Create, FileAccess.ReadWrite)))
            {
                writer.Write(source, 0, source.Length);
            }
        }

        /// <summary>
        /// A test for opening Strict Word files as read-write(editable)/read-only
        /// </summary>
        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public void StrictFileOpenTestWord(bool isEditable)
        {
            using (var stream = GetStream(TestFiles.AnnotationRef, isEditable))
            using (var doc = WordprocessingDocument.Open(stream, isEditable))
            {
                // Should open without exception.

                // Referencing doc.MainDocumentPart.RootElement triggers to load the MainDocumentPart which underneath
                // calls methods in XmlConvertingReader with the strictTranslation flag enabled.
                Assert.NotNull(doc.MainDocumentPart.RootElement);
            }
        }

        /// <summary>
        /// A test for opening Strict PowerPoint files as read-write(editable)/read-only
        /// </summary>
        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public void StrictFileOpenTestPowerpoint(bool isEditable)
        {
            using (var stream = GetStream(TestFiles.Algn_tab_TabAlignment, isEditable))
            using (var doc = PresentationDocument.Open(stream, isEditable))
            {
                // Should open without exception.

                // Calling doc.PresentationPart.RootElement triggers to load the PresentationPart which underneath
                // calls methods in XmlConvertingReader with the strictTranslation flag enabled.
                Assert.NotNull(doc.PresentationPart.RootElement);
            }
        }

        /// <summary>
        /// A test for opening Strict PowerPoint files as read-write(editable)/read-only
        /// </summary>
        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public void StrictFileOpenTestExcelReadOnly(bool isEditable)
        {
            using (var stream = GetStream(TestFiles.Comments, isEditable))
            using (var doc = SpreadsheetDocument.Open(stream, isEditable))
            {
                // Should open without exception.

                // Referencing doc.WorkbookPart.RootElement triggers to load the WorkbookPart which underneath
                // calls methods in XmlConvertingReader with the strictTranslation flag enabled.
                Assert.NotNull(doc.WorkbookPart.RootElement);
            }
        }

        /// <summary>
        /// A test for opening O15 files
        /// Check if WebExtension in the test file is accessible.
        /// If WebExtension is not integrated in the SDK, we can't even compile this unit test project...
        /// </summary>
        [Fact]
        public void O15FileOpenTest()
        {
            var settings2012 = new OpenSettings()
            {
                MarkupCompatibilityProcessSettings = new MarkupCompatibilityProcessSettings(MarkupCompatibilityProcessMode.ProcessAllParts, FileFormatVersions.Office2013),
            };

            using (var stream = GetStream(TestFiles.Youtube))
            using (var doc = SpreadsheetDocument.Open(stream, false, settings2012))
            {
                var worksheetPart = doc.WorkbookPart.WorksheetParts.First();
                var webExtensionPart = worksheetPart.DrawingsPart.WebExtensionParts.First();

                Assert.NotNull(webExtensionPart);
            }
        }
    }
}

name: Build
 
on:
  push:
    branches: 
      - 'main'
      - 'release/*'
  pull_request:
    branches: 
      - 'main'
      - 'release/*'
      - '!/docs/'
      - '!/*.md'
  
jobs: 
  event_file: # Used for test reporting
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Event File
        path: ${{ github.event_path }}
  pack:
    name: "Pack"
    runs-on: ubuntu-latest
    env:
      Configuration: Release
      ProjectLoadStyle: All
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'
      - name: GitVersion
        run: |
          dotnet tool install --global GitVersion.Tool --version 5.12.0
          dotnet gitversion /output buildserver /nofetch
      - name: Restore
        run: dotnet restore --verbosity normal
      - name: Build
        run: dotnet build --no-restore --verbosity normal
      - name: Pack
        run: dotnet pack --no-build
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Unsigned
          path: "bin/${{ env.Configuration }}/packages/shipping/*"
  validate_gen:
    name: "Validate generated files"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Remove generated files for baseline
      run: Remove-Item generated/ -Include *.g.cs -Recurse
      shell: pwsh
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
    - name: Restore
      run: dotnet restore --verbosity normal          
    - name: Build
      run: dotnet build --no-restore --verbosity normal    
    - name: Validate generated files
      run: |
        if [ "$(git diff --ignore-space-at-eol generated/ | wc -l)" -gt "0" ]; then
          echo "Detected uncommitted changes after build.  See status below:"
          git diff
          exit 1
        fi
  build_and_test:
    name: "Build and Test"
    strategy:
      fail-fast: false
      matrix:
        configuration: [ debug, release ]
        projectloadstyle: [ net35, net40, net46, net6_0, net7_0 ]
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        exclude: 
          - projectloadstyle: net35
            os: ubuntu-latest
          - projectloadstyle: net40
            os: ubuntu-latest
          - projectloadstyle: net46
            os: ubuntu-latest
          - projectloadstyle: net35
            os: macos-latest
          - projectloadstyle: net40
            os: macos-latest
          - projectloadstyle: net46
            os: macos-latest

    env:
      RunPeVerify: true 
      Solution_Name: Open-XML-SDK.sln  
      Configuration: ${{ matrix.configuration }}
      ProjectLoadStyle: ${{ matrix.projectloadstyle }}
          
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
          dotnet-version: 6.0.x
    - name: Restore
      run: dotnet restore --verbosity normal          
    - name: Build
      run: dotnet build --no-restore --verbosity normal
    - name: Test
      run: dotnet test --no-restore --verbosity normal --logger trx --results-directory test-results/
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Test Results (${{ matrix.os }} ${{ matrix.configuration }} ${{ matrix.projectloadstyle }})
        path: test-results/*
        
  sign:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps: 
        # Decode the base 64 encoded pfx and save the Signing_Certificate
        - name: Decode the pfx
          run: |
            $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
            $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
            [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

        # Create the app package by building and packaging the Windows Application Packaging project
        - name: Create the app package
          run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
          env:
            Appx_Bundle: Always
            Appx_Bundle_Platforms: x86|x64
            Appx_Package_Build_Mode: StoreUpload
            Configuration: ${{ matrix.configuration }}

        # Remove the pfx
        - name: Remove the pfx
          run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx
  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: "bin/${{ env.Configuration }}/packages/shipping"

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "bin/${{ env.Configuration }}/packages/shipping" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
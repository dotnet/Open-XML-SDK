// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using System.Threading;

namespace DocumentFormat.OpenXml.Features;

internal partial class TypedFeatures
{
    private global::DocumentFormat.OpenXml.Features.IRootElementFactory? _ReflectionBasedRootElementFactory;
    private global::DocumentFormat.OpenXml.Framework.IPartMetadataFeature? _CachedPartMetadataProvider;
    private global::DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver? _OpenXmlNamespaceResolver;
    private global::DocumentFormat.OpenXml.Features.IPartFactory? _ReflectionPartFactory;

    public partial T? Get<T>()
    {
        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Features.IRootElementFactory))
        {
            if (_ReflectionBasedRootElementFactory is null)
            {
                Interlocked.CompareExchange(ref _ReflectionBasedRootElementFactory, new global::DocumentFormat.OpenXml.Features.ReflectionBasedRootElementFactory(), null);
            }

            return (T)_ReflectionBasedRootElementFactory;
        }

        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Framework.IPartMetadataFeature))
        {
            if (_CachedPartMetadataProvider is null)
            {
                Interlocked.CompareExchange(ref _CachedPartMetadataProvider, new global::DocumentFormat.OpenXml.Framework.CachedPartMetadataProvider(), null);
            }

            return (T)_CachedPartMetadataProvider;
        }

        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver))
        {
            if (_OpenXmlNamespaceResolver is null)
            {
                Interlocked.CompareExchange(ref _OpenXmlNamespaceResolver, new global::DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver(), null);
            }

            return (T)_OpenXmlNamespaceResolver;
        }

        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Features.IPartFactory))
        {
            if (_ReflectionPartFactory is null)
            {
                Interlocked.CompareExchange(ref _ReflectionPartFactory, new global::DocumentFormat.OpenXml.Features.ReflectionPartFactory(), null);
            }

            return (T)_ReflectionPartFactory;
        }

        if (global::DocumentFormat.OpenXml.Features.FeatureCollection.Default is global::DocumentFormat.OpenXml.Features.IFeatureCollection other1 && other1.Get<T>() is T result1)
        {
            return result1;
        }

        return default;
    }
}

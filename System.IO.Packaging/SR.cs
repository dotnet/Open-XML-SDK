// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.System.IO.Packaging.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string BadPackageFormat {
              get { return SR.GetResourceString("BadPackageFormat", null); }
        }
        internal static string CannotModifyReadOnlyContainer {
              get { return SR.GetResourceString("CannotModifyReadOnlyContainer", null); }
        }
        internal static string CannotRetrievePartsOfWriteOnlyContainer {
              get { return SR.GetResourceString("CannotRetrievePartsOfWriteOnlyContainer", null); }
        }
        internal static string ContainerAndPartModeIncompatible {
              get { return SR.GetResourceString("ContainerAndPartModeIncompatible", null); }
        }
        internal static string ContentTypeCannotHaveLeadingTrailingLWS {
              get { return SR.GetResourceString("ContentTypeCannotHaveLeadingTrailingLWS", null); }
        }
        internal static string CorePropertiesElementExpected {
              get { return SR.GetResourceString("CorePropertiesElementExpected", null); }
        }
        internal static string CreateNewNotSupported {
              get { return SR.GetResourceString("CreateNewNotSupported", null); }
        }
        internal static string DanglingMetadataRelationship {
              get { return SR.GetResourceString("DanglingMetadataRelationship", null); }
        }
        internal static string DefaultTagDoesNotMatchSchema {
              get { return SR.GetResourceString("DefaultTagDoesNotMatchSchema", null); }
        }
        internal static string DuplicateCorePropertyName {
              get { return SR.GetResourceString("DuplicateCorePropertyName", null); }
        }
        internal static string ElementIsNotEmptyElement {
              get { return SR.GetResourceString("ElementIsNotEmptyElement", null); }
        }
        internal static string EncodingNotSupported {
              get { return SR.GetResourceString("EncodingNotSupported", null); }
        }
        internal static string ExpectedRelationshipsElementTag {
              get { return SR.GetResourceString("ExpectedRelationshipsElementTag", null); }
        }
        internal static string ExpectingParameterValuePairs {
              get { return SR.GetResourceString("ExpectingParameterValuePairs", null); }
        }
        internal static string ExpectingSemicolon {
              get { return SR.GetResourceString("ExpectingSemicolon", null); }
        }
        internal static string FileFormatException {
              get { return SR.GetResourceString("FileFormatException", null); }
        }
        internal static string FileFormatExceptionWithFileName {
              get { return SR.GetResourceString("FileFormatExceptionWithFileName", null); }
        }
        internal static string FragmentMustStartWithHash {
              get { return SR.GetResourceString("FragmentMustStartWithHash", null); }
        }
        internal static string GetContentTypeCoreNotImplemented {
              get { return SR.GetResourceString("GetContentTypeCoreNotImplemented", null); }
        }
        internal static string IncompatibleModeOrAccess {
              get { return SR.GetResourceString("IncompatibleModeOrAccess", null); }
        }
        internal static string InnerPackageUriHasFragment {
              get { return SR.GetResourceString("InnerPackageUriHasFragment", null); }
        }
        internal static string InvalidLinearWhiteSpaceCharacter {
              get { return SR.GetResourceString("InvalidLinearWhiteSpaceCharacter", null); }
        }
        internal static string InvalidParameterValue {
              get { return SR.GetResourceString("InvalidParameterValue", null); }
        }
        internal static string InvalidParameterValuePair {
              get { return SR.GetResourceString("InvalidParameterValuePair", null); }
        }
        internal static string InvalidPartUri {
              get { return SR.GetResourceString("InvalidPartUri", null); }
        }
        internal static string InvalidPropertyNameInCorePropertiesPart {
              get { return SR.GetResourceString("InvalidPropertyNameInCorePropertiesPart", null); }
        }
        internal static string InvalidRelationshipType {
              get { return SR.GetResourceString("InvalidRelationshipType", null); }
        }
        internal static string InvalidToken {
              get { return SR.GetResourceString("InvalidToken", null); }
        }
        internal static string InvalidTypeSubType {
              get { return SR.GetResourceString("InvalidTypeSubType", null); }
        }
        internal static string InvalidValueForTheAttribute {
              get { return SR.GetResourceString("InvalidValueForTheAttribute", null); }
        }
        internal static string InvalidXmlBaseAttributePresent {
              get { return SR.GetResourceString("InvalidXmlBaseAttributePresent", null); }
        }
        internal static string InvariantFailure {
              get { return SR.GetResourceString("InvariantFailure", null); }
        }
        internal static string MoreThanOneMetadataRelationships {
              get { return SR.GetResourceString("MoreThanOneMetadataRelationships", null); }
        }
        internal static string NoExternalTargetForMetadataRelationship {
              get { return SR.GetResourceString("NoExternalTargetForMetadataRelationship", null); }
        }
        internal static string NoStructuredContentInsideProperties {
              get { return SR.GetResourceString("NoStructuredContentInsideProperties", null); }
        }
        internal static string NotAUniqueRelationshipId {
              get { return SR.GetResourceString("NotAUniqueRelationshipId", null); }
        }
        internal static string NotAValidRelationshipPartUri {
              get { return SR.GetResourceString("NotAValidRelationshipPartUri", null); }
        }
        internal static string NotAValidXmlIdString {
              get { return SR.GetResourceString("NotAValidXmlIdString", null); }
        }
        internal static string NullContentTypeProvided {
              get { return SR.GetResourceString("NullContentTypeProvided", null); }
        }
        internal static string NullStreamReturned {
              get { return SR.GetResourceString("NullStreamReturned", null); }
        }
        internal static string ObjectDisposed {
              get { return SR.GetResourceString("ObjectDisposed", null); }
        }
        internal static string OffsetNegative {
              get { return SR.GetResourceString("OffsetNegative", null); }
        }
        internal static string OverrideTagDoesNotMatchSchema {
              get { return SR.GetResourceString("OverrideTagDoesNotMatchSchema", null); }
        }
        internal static string PackagePartDeleted {
              get { return SR.GetResourceString("PackagePartDeleted", null); }
        }
        internal static string PackagePartRelationshipDoesNotExist {
              get { return SR.GetResourceString("PackagePartRelationshipDoesNotExist", null); }
        }
        internal static string PackageRelationshipDoesNotExist {
              get { return SR.GetResourceString("PackageRelationshipDoesNotExist", null); }
        }
        internal static string ParentContainerClosed {
              get { return SR.GetResourceString("ParentContainerClosed", null); }
        }
        internal static string PartAlreadyExists {
              get { return SR.GetResourceString("PartAlreadyExists", null); }
        }
        internal static string PartDoesNotExist {
              get { return SR.GetResourceString("PartDoesNotExist", null); }
        }
        internal static string PartNamePrefixExists {
              get { return SR.GetResourceString("PartNamePrefixExists", null); }
        }
        internal static string PartUriCannotHaveAFragment {
              get { return SR.GetResourceString("PartUriCannotHaveAFragment", null); }
        }
        internal static string PartUriIsEmpty {
              get { return SR.GetResourceString("PartUriIsEmpty", null); }
        }
        internal static string PartUriShouldNotEndWithForwardSlash {
              get { return SR.GetResourceString("PartUriShouldNotEndWithForwardSlash", null); }
        }
        internal static string PartUriShouldNotStartWithTwoForwardSlashes {
              get { return SR.GetResourceString("PartUriShouldNotStartWithTwoForwardSlashes", null); }
        }
        internal static string PartUriShouldStartWithForwardSlash {
              get { return SR.GetResourceString("PartUriShouldStartWithForwardSlash", null); }
        }
        internal static string PropertyStartTagExpected {
              get { return SR.GetResourceString("PropertyStartTagExpected", null); }
        }
        internal static string PropertyWrongNumbOfAttribsDefinedOn {
              get { return SR.GetResourceString("PropertyWrongNumbOfAttribsDefinedOn", null); }
        }
        internal static string ReadBufferTooSmall {
              get { return SR.GetResourceString("ReadBufferTooSmall", null); }
        }
        internal static string ReadCountNegative {
              get { return SR.GetResourceString("ReadCountNegative", null); }
        }
        internal static string ReadNotSupported {
              get { return SR.GetResourceString("ReadNotSupported", null); }
        }
        internal static string ReadOnlyStream {
              get { return SR.GetResourceString("ReadOnlyStream", null); }
        }
        internal static string RelationshipPartIncorrectContentType {
              get { return SR.GetResourceString("RelationshipPartIncorrectContentType", null); }
        }
        internal static string RelationshipPartsCannotHaveRelationships {
              get { return SR.GetResourceString("RelationshipPartsCannotHaveRelationships", null); }
        }
        internal static string RelationshipPartUriExpected {
              get { return SR.GetResourceString("RelationshipPartUriExpected", null); }
        }
        internal static string RelationshipPartUriNotExpected {
              get { return SR.GetResourceString("RelationshipPartUriNotExpected", null); }
        }
        internal static string RelationshipsTagHasExtraAttributes {
              get { return SR.GetResourceString("RelationshipsTagHasExtraAttributes", null); }
        }
        internal static string RelationshipTagDoesntMatchSchema {
              get { return SR.GetResourceString("RelationshipTagDoesntMatchSchema", null); }
        }
        internal static string RelationshipTargetMustBeRelative {
              get { return SR.GetResourceString("RelationshipTargetMustBeRelative", null); }
        }
        internal static string RelationshipToRelationshipIllegal {
              get { return SR.GetResourceString("RelationshipToRelationshipIllegal", null); }
        }
        internal static string RequiredAttributeEmpty {
              get { return SR.GetResourceString("RequiredAttributeEmpty", null); }
        }
        internal static string RequiredAttributeMissing {
              get { return SR.GetResourceString("RequiredAttributeMissing", null); }
        }
        internal static string RequiredRelationshipAttributeMissing {
              get { return SR.GetResourceString("RequiredRelationshipAttributeMissing", null); }
        }
        internal static string StreamObjectDisposed {
              get { return SR.GetResourceString("StreamObjectDisposed", null); }
        }
        internal static string TruncateNotSupported {
              get { return SR.GetResourceString("TruncateNotSupported", null); }
        }
        internal static string TypesElementExpected {
              get { return SR.GetResourceString("TypesElementExpected", null); }
        }
        internal static string TypesTagHasExtraAttributes {
              get { return SR.GetResourceString("TypesTagHasExtraAttributes", null); }
        }
        internal static string TypesXmlDoesNotMatchSchema {
              get { return SR.GetResourceString("TypesXmlDoesNotMatchSchema", null); }
        }
        internal static string UnknownDCDateTimeXsiType {
              get { return SR.GetResourceString("UnknownDCDateTimeXsiType", null); }
        }
        internal static string UnknownNamespaceInCorePropertiesPart {
              get { return SR.GetResourceString("UnknownNamespaceInCorePropertiesPart", null); }
        }
        internal static string UnknownTagEncountered {
              get { return SR.GetResourceString("UnknownTagEncountered", null); }
        }
        internal static string UnsupportedCombinationOfModeAccess {
              get { return SR.GetResourceString("UnsupportedCombinationOfModeAccess", null); }
        }
        internal static string UriShouldBeAbsolute {
              get { return SR.GetResourceString("UriShouldBeAbsolute", null); }
        }
        internal static string UriShouldBePackScheme {
              get { return SR.GetResourceString("UriShouldBePackScheme", null); }
        }
        internal static string URIShouldNotBeAbsolute {
              get { return SR.GetResourceString("URIShouldNotBeAbsolute", null); }
        }
        internal static string WriteBufferTooSmall {
              get { return SR.GetResourceString("WriteBufferTooSmall", null); }
        }
        internal static string WriteCountNegative {
              get { return SR.GetResourceString("WriteCountNegative", null); }
        }
        internal static string WriteNotSupported {
              get { return SR.GetResourceString("WriteNotSupported", null); }
        }
        internal static string WriteOnlyStream {
              get { return SR.GetResourceString("WriteOnlyStream", null); }
        }
        internal static string WrongContentTypeForPropertyPart {
              get { return SR.GetResourceString("WrongContentTypeForPropertyPart", null); }
        }
        internal static string XCRChoiceAfterFallback {
              get { return SR.GetResourceString("XCRChoiceAfterFallback", null); }
        }
        internal static string XCRChoiceNotFound {
              get { return SR.GetResourceString("XCRChoiceNotFound", null); }
        }
        internal static string XCRChoiceOnlyInAC {
              get { return SR.GetResourceString("XCRChoiceOnlyInAC", null); }
        }
        internal static string XCRCompatCycle {
              get { return SR.GetResourceString("XCRCompatCycle", null); }
        }
        internal static string XCRDuplicatePreserve {
              get { return SR.GetResourceString("XCRDuplicatePreserve", null); }
        }
        internal static string XCRDuplicateProcessContent {
              get { return SR.GetResourceString("XCRDuplicateProcessContent", null); }
        }
        internal static string XCRDuplicateWildcardPreserve {
              get { return SR.GetResourceString("XCRDuplicateWildcardPreserve", null); }
        }
        internal static string XCRDuplicateWildcardProcessContent {
              get { return SR.GetResourceString("XCRDuplicateWildcardProcessContent", null); }
        }
        internal static string XCRFallbackOnlyInAC {
              get { return SR.GetResourceString("XCRFallbackOnlyInAC", null); }
        }
        internal static string XCRInvalidACChild {
              get { return SR.GetResourceString("XCRInvalidACChild", null); }
        }
        internal static string XCRInvalidAttribInElement {
              get { return SR.GetResourceString("XCRInvalidAttribInElement", null); }
        }
        internal static string XCRInvalidFormat {
              get { return SR.GetResourceString("XCRInvalidFormat", null); }
        }
        internal static string XCRInvalidPreserve {
              get { return SR.GetResourceString("XCRInvalidPreserve", null); }
        }
        internal static string XCRInvalidProcessContent {
              get { return SR.GetResourceString("XCRInvalidProcessContent", null); }
        }
        internal static string XCRInvalidRequiresAttribute {
              get { return SR.GetResourceString("XCRInvalidRequiresAttribute", null); }
        }
        internal static string XCRInvalidXMLName {
              get { return SR.GetResourceString("XCRInvalidXMLName", null); }
        }
        internal static string XCRMultipleFallbackFound {
              get { return SR.GetResourceString("XCRMultipleFallbackFound", null); }
        }
        internal static string XCRMustUnderstandFailed {
              get { return SR.GetResourceString("XCRMustUnderstandFailed", null); }
        }
        internal static string XCRNSPreserveNotIgnorable {
              get { return SR.GetResourceString("XCRNSPreserveNotIgnorable", null); }
        }
        internal static string XCRNSProcessContentNotIgnorable {
              get { return SR.GetResourceString("XCRNSProcessContentNotIgnorable", null); }
        }
        internal static string XCRRequiresAttribNotFound {
              get { return SR.GetResourceString("XCRRequiresAttribNotFound", null); }
        }
        internal static string XCRUndefinedPrefix {
              get { return SR.GetResourceString("XCRUndefinedPrefix", null); }
        }
        internal static string XCRUnknownCompatAttrib {
              get { return SR.GetResourceString("XCRUnknownCompatAttrib", null); }
        }
        internal static string XCRUnknownCompatElement {
              get { return SR.GetResourceString("XCRUnknownCompatElement", null); }
        }
        internal static string XsdDateTimeExpected {
              get { return SR.GetResourceString("XsdDateTimeExpected", null); }
        }
#else
        internal static string BadPackageFormat {
              get { return SR.GetResourceString("BadPackageFormat", @"Format error in package."); }
        }
        internal static string CannotModifyReadOnlyContainer {
              get { return SR.GetResourceString("CannotModifyReadOnlyContainer", @"Cannot modify readonly container"); }
        }
        internal static string CannotRetrievePartsOfWriteOnlyContainer {
              get { return SR.GetResourceString("CannotRetrievePartsOfWriteOnlyContainer", @"Cannot retrieve parts of writeonly container"); }
        }
        internal static string ContainerAndPartModeIncompatible {
              get { return SR.GetResourceString("ContainerAndPartModeIncompatible", @"FileMode/FileAccess for Part.GetStream is not compatible with FileMode/FileAccess used to open the Package."); }
        }
        internal static string ContentTypeCannotHaveLeadingTrailingLWS {
              get { return SR.GetResourceString("ContentTypeCannotHaveLeadingTrailingLWS", @"ContentType string cannot have leading/trailing Linear White Spaces [LWS - RFC 2616]."); }
        }
        internal static string CorePropertiesElementExpected {
              get { return SR.GetResourceString("CorePropertiesElementExpected", @"Unrecognized root element in Core Properties part."); }
        }
        internal static string CreateNewNotSupported {
              get { return SR.GetResourceString("CreateNewNotSupported", @"CreateNew not supported"); }
        }
        internal static string DanglingMetadataRelationship {
              get { return SR.GetResourceString("DanglingMetadataRelationship", @"The target of the Core Properties relationship does not reference an existing part."); }
        }
        internal static string DefaultTagDoesNotMatchSchema {
              get { return SR.GetResourceString("DefaultTagDoesNotMatchSchema", @"Default tag is not valid per the schema. Verify that attributes are correct."); }
        }
        internal static string DuplicateCorePropertyName {
              get { return SR.GetResourceString("DuplicateCorePropertyName", @"More than one '{0}' property found."); }
        }
        internal static string ElementIsNotEmptyElement {
              get { return SR.GetResourceString("ElementIsNotEmptyElement", @"'{0}' element must be empty."); }
        }
        internal static string EncodingNotSupported {
              get { return SR.GetResourceString("EncodingNotSupported", @"Encoding format is not supported. Only UTF-8 and UTF-16 are supported."); }
        }
        internal static string ExpectedRelationshipsElementTag {
              get { return SR.GetResourceString("ExpectedRelationshipsElementTag", @"Relationships tag expected at root level."); }
        }
        internal static string ExpectingParameterValuePairs {
              get { return SR.GetResourceString("ExpectingParameterValuePairs", @"';' must be followed by parameter=value pair."); }
        }
        internal static string ExpectingSemicolon {
              get { return SR.GetResourceString("ExpectingSemicolon", @"Semicolon separator is required between two valid parameter=value pairs."); }
        }
        internal static string FileFormatException {
              get { return SR.GetResourceString("FileFormatException", @"Invalid file format."); }
        }
        internal static string FileFormatExceptionWithFileName {
              get { return SR.GetResourceString("FileFormatExceptionWithFileName", @"Invalid file format."); }
        }
        internal static string FragmentMustStartWithHash {
              get { return SR.GetResourceString("FragmentMustStartWithHash", @"The 'fragment' parameter must start with a number sign."); }
        }
        internal static string GetContentTypeCoreNotImplemented {
              get { return SR.GetResourceString("GetContentTypeCoreNotImplemented", @"PackagePart subclass must implement GetContentTypeCore method if passing a null value for the content type when PackagePart object is constructed."); }
        }
        internal static string IncompatibleModeOrAccess {
              get { return SR.GetResourceString("IncompatibleModeOrAccess", @"Cannot open package because FileMode or FileAccess value is not valid for the stream."); }
        }
        internal static string InnerPackageUriHasFragment {
              get { return SR.GetResourceString("InnerPackageUriHasFragment", @"Package URI obtained from the pack URI cannot contain a Fragment."); }
        }
        internal static string InvalidLinearWhiteSpaceCharacter {
              get { return SR.GetResourceString("InvalidLinearWhiteSpaceCharacter", @"A Linear White Space character is not valid."); }
        }
        internal static string InvalidParameterValue {
              get { return SR.GetResourceString("InvalidParameterValue", @"Parameter value must be a valid token or a quoted string as per RFC 2616."); }
        }
        internal static string InvalidParameterValuePair {
              get { return SR.GetResourceString("InvalidParameterValuePair", @"Parameter and value pair is not valid. Expected form is parameter=value."); }
        }
        internal static string InvalidPartUri {
              get { return SR.GetResourceString("InvalidPartUri", @"Part URI is not valid per rules defined in the Open Packaging Conventions specification."); }
        }
        internal static string InvalidPropertyNameInCorePropertiesPart {
              get { return SR.GetResourceString("InvalidPropertyNameInCorePropertiesPart", @"'{0}' property name is not valid in Core Properties part."); }
        }
        internal static string InvalidRelationshipType {
              get { return SR.GetResourceString("InvalidRelationshipType", @"Relationship Type cannot contain only spaces or be empty."); }
        }
        internal static string InvalidToken {
              get { return SR.GetResourceString("InvalidToken", @"A token is not valid. Refer to RFC 2616 for correct grammar of content types."); }
        }
        internal static string InvalidTypeSubType {
              get { return SR.GetResourceString("InvalidTypeSubType", @"ContentType string is not valid. Expected format is type/subtype."); }
        }
        internal static string InvalidValueForTheAttribute {
              get { return SR.GetResourceString("InvalidValueForTheAttribute", @"'{0}' attribute value is not valid."); }
        }
        internal static string InvalidXmlBaseAttributePresent {
              get { return SR.GetResourceString("InvalidXmlBaseAttributePresent", @"Relationships XML elements cannot specify attribute '{0}'."); }
        }
        internal static string InvariantFailure {
              get { return SR.GetResourceString("InvariantFailure", @"Unrecoverable system error."); }
        }
        internal static string MoreThanOneMetadataRelationships {
              get { return SR.GetResourceString("MoreThanOneMetadataRelationships", @"Package has more than one Core Properties relationship."); }
        }
        internal static string NoExternalTargetForMetadataRelationship {
              get { return SR.GetResourceString("NoExternalTargetForMetadataRelationship", @"TargetMode for a Core Properties relationship must be 'Internal'."); }
        }
        internal static string NoStructuredContentInsideProperties {
              get { return SR.GetResourceString("NoStructuredContentInsideProperties", @"Core Properties part: core property elements can contain only text data."); }
        }
        internal static string NotAUniqueRelationshipId {
              get { return SR.GetResourceString("NotAUniqueRelationshipId", @"'{0}' ID conflicts with the ID of an existing relationship for the specified source."); }
        }
        internal static string NotAValidRelationshipPartUri {
              get { return SR.GetResourceString("NotAValidRelationshipPartUri", @"PackageRelationship part URI syntax is not valid."); }
        }
        internal static string NotAValidXmlIdString {
              get { return SR.GetResourceString("NotAValidXmlIdString", @"'{0}' ID is not a valid XSD ID."); }
        }
        internal static string NullContentTypeProvided {
              get { return SR.GetResourceString("NullContentTypeProvided", @"GetContentTypeCore method cannot return null for the content type stream."); }
        }
        internal static string NullStreamReturned {
              get { return SR.GetResourceString("NullStreamReturned", @"Returned stream for the part is null."); }
        }
        internal static string ObjectDisposed {
              get { return SR.GetResourceString("ObjectDisposed", @"Package object was closed and disposed, so cannot carry out operations on this object or any stream opened on a part of this package."); }
        }
        internal static string OffsetNegative {
              get { return SR.GetResourceString("OffsetNegative", @"Offset must be greater than or equal to zero."); }
        }
        internal static string OverrideTagDoesNotMatchSchema {
              get { return SR.GetResourceString("OverrideTagDoesNotMatchSchema", @"Override tag is not valid per the schema. Verify that attributes are correct."); }
        }
        internal static string PackagePartDeleted {
              get { return SR.GetResourceString("PackagePartDeleted", @"Part was deleted."); }
        }
        internal static string PackagePartRelationshipDoesNotExist {
              get { return SR.GetResourceString("PackagePartRelationshipDoesNotExist", @"PackageRelationship with specified ID does not exist for the source part."); }
        }
        internal static string PackageRelationshipDoesNotExist {
              get { return SR.GetResourceString("PackageRelationshipDoesNotExist", @"PackageRelationship with specified ID does not exist at the Package level."); }
        }
        internal static string ParentContainerClosed {
              get { return SR.GetResourceString("ParentContainerClosed", @"Cannot access part because parent package was closed."); }
        }
        internal static string PartAlreadyExists {
              get { return SR.GetResourceString("PartAlreadyExists", @"Cannot add part for the specified URI because it is already in the package."); }
        }
        internal static string PartDoesNotExist {
              get { return SR.GetResourceString("PartDoesNotExist", @"Specified part does not exist in the package."); }
        }
        internal static string PartNamePrefixExists {
              get { return SR.GetResourceString("PartNamePrefixExists", @"Cannot add part to the package. Part names cannot be derived from another part name by appending segments to it."); }
        }
        internal static string PartUriCannotHaveAFragment {
              get { return SR.GetResourceString("PartUriCannotHaveAFragment", @"Part URI cannot contain a Fragment component."); }
        }
        internal static string PartUriIsEmpty {
              get { return SR.GetResourceString("PartUriIsEmpty", @"Part URI is empty."); }
        }
        internal static string PartUriShouldNotEndWithForwardSlash {
              get { return SR.GetResourceString("PartUriShouldNotEndWithForwardSlash", @"Part URI cannot end with a forward slash."); }
        }
        internal static string PartUriShouldNotStartWithTwoForwardSlashes {
              get { return SR.GetResourceString("PartUriShouldNotStartWithTwoForwardSlashes", @"Part URI cannot start with two forward slashes."); }
        }
        internal static string PartUriShouldStartWithForwardSlash {
              get { return SR.GetResourceString("PartUriShouldStartWithForwardSlash", @"Part URI must start with a forward slash."); }
        }
        internal static string PropertyStartTagExpected {
              get { return SR.GetResourceString("PropertyStartTagExpected", @"Core Properties part: A property start-tag was expected."); }
        }
        internal static string PropertyWrongNumbOfAttribsDefinedOn {
              get { return SR.GetResourceString("PropertyWrongNumbOfAttribsDefinedOn", @"Unexpected number of attributes is found on '{0}'."); }
        }
        internal static string ReadBufferTooSmall {
              get { return SR.GetResourceString("ReadBufferTooSmall", @"Buffer too small to hold results of Read."); }
        }
        internal static string ReadCountNegative {
              get { return SR.GetResourceString("ReadCountNegative", @"Count of bytes to read cannot be negative."); }
        }
        internal static string ReadNotSupported {
              get { return SR.GetResourceString("ReadNotSupported", @"Stream does not support reading."); }
        }
        internal static string ReadOnlyStream {
              get { return SR.GetResourceString("ReadOnlyStream", @"Cannot write to read-only stream."); }
        }
        internal static string RelationshipPartIncorrectContentType {
              get { return SR.GetResourceString("RelationshipPartIncorrectContentType", @"Incorrect content type for PackageRelationship part."); }
        }
        internal static string RelationshipPartsCannotHaveRelationships {
              get { return SR.GetResourceString("RelationshipPartsCannotHaveRelationships", @"PackageRelationship parts cannot have relationships to other parts."); }
        }
        internal static string RelationshipPartUriExpected {
              get { return SR.GetResourceString("RelationshipPartUriExpected", @"PackageRelationship part URI is expected."); }
        }
        internal static string RelationshipPartUriNotExpected {
              get { return SR.GetResourceString("RelationshipPartUriNotExpected", @"PackageRelationship part URI is not expected."); }
        }
        internal static string RelationshipsTagHasExtraAttributes {
              get { return SR.GetResourceString("RelationshipsTagHasExtraAttributes", @"Relationships tag has extra attributes."); }
        }
        internal static string RelationshipTagDoesntMatchSchema {
              get { return SR.GetResourceString("RelationshipTagDoesntMatchSchema", @"Relationship tag contains incorrect attribute."); }
        }
        internal static string RelationshipTargetMustBeRelative {
              get { return SR.GetResourceString("RelationshipTargetMustBeRelative", @"PackageRelationship target must be relative URI if TargetMode is Internal."); }
        }
        internal static string RelationshipToRelationshipIllegal {
              get { return SR.GetResourceString("RelationshipToRelationshipIllegal", @"PackageRelationship cannot target another PackageRelationship."); }
        }
        internal static string RequiredAttributeEmpty {
              get { return SR.GetResourceString("RequiredAttributeEmpty", @"'{0}' tag requires a nonempty '{1}' attribute."); }
        }
        internal static string RequiredAttributeMissing {
              get { return SR.GetResourceString("RequiredAttributeMissing", @"'{0}' tag requires attribute '{1}'."); }
        }
        internal static string RequiredRelationshipAttributeMissing {
              get { return SR.GetResourceString("RequiredRelationshipAttributeMissing", @"Relationship tag requires attribute '{0}'."); }
        }
        internal static string StreamObjectDisposed {
              get { return SR.GetResourceString("StreamObjectDisposed", @"Cannot access Stream object because it was closed or disposed."); }
        }
        internal static string TruncateNotSupported {
              get { return SR.GetResourceString("TruncateNotSupported", @"Truncate not supported"); }
        }
        internal static string TypesElementExpected {
              get { return SR.GetResourceString("TypesElementExpected", @"Required Types tag not found."); }
        }
        internal static string TypesTagHasExtraAttributes {
              get { return SR.GetResourceString("TypesTagHasExtraAttributes", @"Types tag has attributes not valid per the schema."); }
        }
        internal static string TypesXmlDoesNotMatchSchema {
              get { return SR.GetResourceString("TypesXmlDoesNotMatchSchema", @"Content Types XML does not match schema."); }
        }
        internal static string UnknownDCDateTimeXsiType {
              get { return SR.GetResourceString("UnknownDCDateTimeXsiType", @"Unknown xsi:type for DateTime on '{0}'."); }
        }
        internal static string UnknownNamespaceInCorePropertiesPart {
              get { return SR.GetResourceString("UnknownNamespaceInCorePropertiesPart", @"Unrecognized namespace in Core Properties part."); }
        }
        internal static string UnknownTagEncountered {
              get { return SR.GetResourceString("UnknownTagEncountered", @"Unrecognized tag found in Relationships XML."); }
        }
        internal static string UnsupportedCombinationOfModeAccess {
              get { return SR.GetResourceString("UnsupportedCombinationOfModeAccess", @"Cannot get stream with FileMode.Create, FileMode.CreateNew, FileMode.Truncate, FileMode.Append when access is FileAccess.Read."); }
        }
        internal static string UriShouldBeAbsolute {
              get { return SR.GetResourceString("UriShouldBeAbsolute", @"Must have absolute URI."); }
        }
        internal static string UriShouldBePackScheme {
              get { return SR.GetResourceString("UriShouldBePackScheme", @"URI must contain pack:// scheme."); }
        }
        internal static string URIShouldNotBeAbsolute {
              get { return SR.GetResourceString("URIShouldNotBeAbsolute", @"Cannot be an absolute URI."); }
        }
        internal static string WriteBufferTooSmall {
              get { return SR.GetResourceString("WriteBufferTooSmall", @"Buffer of bytes to be written is too small."); }
        }
        internal static string WriteCountNegative {
              get { return SR.GetResourceString("WriteCountNegative", @"Count of bytes to write cannot be negative."); }
        }
        internal static string WriteNotSupported {
              get { return SR.GetResourceString("WriteNotSupported", @"Stream does not support writing."); }
        }
        internal static string WriteOnlyStream {
              get { return SR.GetResourceString("WriteOnlyStream", @"Cannot read from write-only stream."); }
        }
        internal static string WrongContentTypeForPropertyPart {
              get { return SR.GetResourceString("WrongContentTypeForPropertyPart", @"The Core Properties relationship references a part that has an incorrect content type."); }
        }
        internal static string XCRChoiceAfterFallback {
              get { return SR.GetResourceString("XCRChoiceAfterFallback", @"Choice cannot follow a Fallback."); }
        }
        internal static string XCRChoiceNotFound {
              get { return SR.GetResourceString("XCRChoiceNotFound", @"AlternateContent must contain one or more Choice elements."); }
        }
        internal static string XCRChoiceOnlyInAC {
              get { return SR.GetResourceString("XCRChoiceOnlyInAC", @"Choice is valid only in AlternateContent."); }
        }
        internal static string XCRCompatCycle {
              get { return SR.GetResourceString("XCRCompatCycle", @"There is a cycle of XML compatibility definitions, such that namespace '{0}' overrides itself. This could be due to inconsistent XmlnsCompatibilityAttributes in different assemblies. Please change the definitions to eliminate this cycle."); }
        }
        internal static string XCRDuplicatePreserve {
              get { return SR.GetResourceString("XCRDuplicatePreserve", @"Duplicate Preserve declaration for element {1} in namespace '{0}'."); }
        }
        internal static string XCRDuplicateProcessContent {
              get { return SR.GetResourceString("XCRDuplicateProcessContent", @"Duplicate ProcessContent declaration for element '{1}' in namespace '{0}'."); }
        }
        internal static string XCRDuplicateWildcardPreserve {
              get { return SR.GetResourceString("XCRDuplicateWildcardPreserve", @"Duplicate wildcard Preserve declaration for namespace '{0}'."); }
        }
        internal static string XCRDuplicateWildcardProcessContent {
              get { return SR.GetResourceString("XCRDuplicateWildcardProcessContent", @"Duplicate wildcard ProcessContent declaration for namespace '{0}'."); }
        }
        internal static string XCRFallbackOnlyInAC {
              get { return SR.GetResourceString("XCRFallbackOnlyInAC", @"Fallback is valid only in AlternateContent."); }
        }
        internal static string XCRInvalidACChild {
              get { return SR.GetResourceString("XCRInvalidACChild", @"'{0}' element is not a valid child of AlternateContent. Only Choice and Fallback elements are valid children of an AlternateContent element."); }
        }
        internal static string XCRInvalidAttribInElement {
              get { return SR.GetResourceString("XCRInvalidAttribInElement", @"'{0}' attribute is not valid for '{1}' element."); }
        }
        internal static string XCRInvalidFormat {
              get { return SR.GetResourceString("XCRInvalidFormat", @"'{0}' format is not valid."); }
        }
        internal static string XCRInvalidPreserve {
              get { return SR.GetResourceString("XCRInvalidPreserve", @"Cannot have both a specific and a wildcard Preserve declaration for namespace '{0}'."); }
        }
        internal static string XCRInvalidProcessContent {
              get { return SR.GetResourceString("XCRInvalidProcessContent", @"Cannot have both a specific and a wildcard ProcessContent declaration for namespace '{0}'."); }
        }
        internal static string XCRInvalidRequiresAttribute {
              get { return SR.GetResourceString("XCRInvalidRequiresAttribute", @"Requires attribute must contain a valid namespace prefix."); }
        }
        internal static string XCRInvalidXMLName {
              get { return SR.GetResourceString("XCRInvalidXMLName", @"'{0}' attribute value is not a valid XML name."); }
        }
        internal static string XCRMultipleFallbackFound {
              get { return SR.GetResourceString("XCRMultipleFallbackFound", @"AlternateContent must contain only one Fallback element."); }
        }
        internal static string XCRMustUnderstandFailed {
              get { return SR.GetResourceString("XCRMustUnderstandFailed", @"MustUnderstand condition failed on namespace '{0}'"); }
        }
        internal static string XCRNSPreserveNotIgnorable {
              get { return SR.GetResourceString("XCRNSPreserveNotIgnorable", @"'{0}' namespace cannot preserve items; it must be declared Ignorable first."); }
        }
        internal static string XCRNSProcessContentNotIgnorable {
              get { return SR.GetResourceString("XCRNSProcessContentNotIgnorable", @"'{0}' namespace cannot process content; it must be declared Ignorable first."); }
        }
        internal static string XCRRequiresAttribNotFound {
              get { return SR.GetResourceString("XCRRequiresAttribNotFound", @"Choice must contain Requires attribute."); }
        }
        internal static string XCRUndefinedPrefix {
              get { return SR.GetResourceString("XCRUndefinedPrefix", @"'{0}' prefix is not defined."); }
        }
        internal static string XCRUnknownCompatAttrib {
              get { return SR.GetResourceString("XCRUnknownCompatAttrib", @"Unrecognized compatibility attribute '{0}'."); }
        }
        internal static string XCRUnknownCompatElement {
              get { return SR.GetResourceString("XCRUnknownCompatElement", @"Unrecognized Compatibility element '{0}'."); }
        }
        internal static string XsdDateTimeExpected {
              get { return SR.GetResourceString("XsdDateTimeExpected", @"Core Properties part: Text data of XSD type 'DateTime' was expected."); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.System.IO.Packaging.SR); }
        }
    }
}
namespace FxResources.System.IO.Packaging
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}

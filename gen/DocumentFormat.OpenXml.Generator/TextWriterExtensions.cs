// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using DocumentFormat.OpenXml.Generator.Models;
using System;
using System.CodeDom.Compiler;
using System.IO;

namespace DocumentFormat.OpenXml.Generator;

internal static class TextWriterExtensions
{
    public static void WriteFileHeader(this TextWriter writer)
    {
        const string Line1 = "// Copyright (c) Microsoft. All rights reserved.";
        const string Line2 = "// Licensed under the MIT license. See LICENSE file in the project root for full license information.";

        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();
        writer.WriteLine(Line1);
        writer.WriteLine(Line2);
        writer.WriteLine();
        writer.WriteLine("#nullable enable");
        writer.WriteLine();
    }

    public static void WriteLineNoTabs(this IndentedTextWriter writer) => writer.WriteLineNoTabs(string.Empty);

    public static Indentation AddIndent(this IndentedTextWriter writer)
        => new(writer, null);

    public static Indentation AddBlock(this IndentedTextWriter writer, bool includeSemiColon = false)
    {
        writer.WriteLine("{");
        return new(writer, includeSemiColon ? "};" : "}");
    }

    public static void WriteEnum<T>(this TextWriter writer, string typeName, T value)
        where T : Enum
    {
        writer.Write(typeName);
        writer.Write(".");
        writer.Write(value.ToString());
    }

    public static void WriteList<T1, T2>(this TextWriter writer, T1 item1, T2 item2)
    {
        writer.Write("{ ");
        writer.WriteItem(item1);
        writer.Write(", ");
        writer.WriteItem(item2);
        writer.Write(" ");
        writer.Write("}");
    }

    public static void WriteList<T1, T2, T3>(this TextWriter writer, T1 item1, T2 item2, T3 item3)
    {
        writer.Write("{ ");
        writer.WriteItem(item1);
        writer.Write(", ");
        writer.WriteItem(item2);
        writer.Write(", ");
        writer.WriteItem(item3);
        writer.Write(" ");
        writer.Write("}");
    }

    public static void WriteItem<T>(this TextWriter writer, T item)
    {
        if (item is null)
        {
            writer.WriteNull();
        }
        else if (typeof(T) == typeof(Verbatim))
        {
            writer.Write(((Verbatim)(object)item).Value);
        }
        else if (typeof(T) == typeof(OfficeVersion))
        {
            writer.WriteEnum("FileFormatVersions", (OfficeVersion)(object)item);
        }
        else if (typeof(T) == typeof(string))
        {
            writer.WriteString((string)(object)item);
        }
        else
        {
            writer.Write(item.ToString());
        }
    }

    public static void WriteNull(this TextWriter writer) => writer.Write("null");

    public static void WriteString(this TextWriter writer, string input)
    {
        if (input is null)
        {
            writer.WriteNull();
        }
        else if (input.Length == 0)
        {
            writer.Write("string.Empty");
        }
        else
        {
            writer.Write("\"");
            writer.Write(input);
            writer.Write("\"");
        }
    }

    public readonly struct Indentation : IDisposable
    {
        private readonly IndentedTextWriter _writer;
        private readonly string? _text;

        public Indentation(IndentedTextWriter writer, string? text)
        {
            _writer = writer;
            _writer.Indent++;
            _text = text;
        }

        public void Dispose()
        {
            _writer.Indent--;

            if (_text is not null)
            {
                _writer.WriteLine(_text);
            }
        }
    }
}

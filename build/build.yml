parameters:
  buildTargets: []

jobs:
- ${{ each buildTarget in parameters.buildTargets }}:
  - ${{ each vmImage in buildTarget.vmImages }}:
    - job: ${{ buildTarget.name }}_${{ vmImage.name }}
      pool:
        vmImage: ${{ vmImage.image }}
      strategy:
        matrix:
          debug:
            buildConfiguration: debug
            upload: false
            ProjectLoadStyle: ${{ buildTarget.name }}
          release:
            buildConfiguration: release
            upload: ${{ buildTarget.upload }}
            ProjectLoadStyle: ${{ buildTarget.name }}
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK for building'
        inputs:
          packageType: 'sdk'
          useGlobalJson: true

      - ${{ each runtime in buildTarget.runtimes }}:
        - task: UseDotNet@2
          displayName: 'Install .NET Runtime ${{ runtime }}'
          inputs:
            packageType: 'runtime'
            version: ${{ runtime }}

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          arguments: '-c $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          arguments: '-c $(buildConfiguration)'
      
      - task: DotNetCoreCLI@2
        displayName: 'Benchmark'
        inputs:
          command: 'run'
          projects: 'test/DocumentFormat.OpenXml.Benchmarks/DocumentFormat.OpenXml.Benchmarks.csproj'
          arguments: '-c Release -- $(Build.ArtifactStagingDirectory)/results'
        condition: eq('release', variables['buildConfiguration'])

      - publish: '$(Build.ArtifactStagingDirectory)/results'
        artifact: benchmarks_${{ buildTarget.name }}_${{ vmImage.name }}
        displayName: 'Upload benchmark results'
        condition: eq('release', variables['buildConfiguration'])
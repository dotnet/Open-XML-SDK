// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.DrawingML.Y2006.Chart;
using DocumentFormat.OpenXml.DrawingML.Y2006.Main;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart
{
    /// <summary>
    /// <para>Defines the ShapeProperties Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:spPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry" /> <c>&lt;a:custGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry" /> <c>&lt;a:prstGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType" /> <c>&lt;a:sp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeProperties class.
        /// </summary>
        public ShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>? BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:spPr");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            builder.AddElement<ShapeProperties>()
                .AddAttribute("bwMode", a => a.BlackWhiteMode, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Individual Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D? Transform2D
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedIntegerType Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:explosion.</para>
    /// </summary>
    public partial class UnsignedIntegerType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedIntegerType class.
        /// </summary>
        public UnsignedIntegerType() : base()
        {
        }

        /// <summary>
        /// <para>Integer Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:explosion");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddElement<UnsignedIntegerType>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnsignedIntegerType>(deep);
    }

    /// <summary>
    /// <para>Defines the InvertIfNegativeBoolean Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:invertIfNegative.</para>
    /// </summary>
    public partial class InvertIfNegativeBoolean : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the InvertIfNegativeBoolean class.
        /// </summary>
        public InvertIfNegativeBoolean() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:invertIfNegative");
            builder.Availability = FileFormatVersions.Office2016;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InvertIfNegativeBoolean>(deep);
    }

    /// <summary>
    /// <para>Defines the Bubble3DBoolean Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:bubble3D.</para>
    /// </summary>
    public partial class Bubble3DBoolean : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the Bubble3DBoolean class.
        /// </summary>
        public Bubble3DBoolean() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:bubble3D");
            builder.Availability = FileFormatVersions.Office2016;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bubble3DBoolean>(deep);
    }

    /// <summary>
    /// <para>Defines the BooleanType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BooleanType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BooleanType class.
        /// </summary>
        protected BooleanType() : base()
        {
        }

        /// <summary>
        /// <para>Boolean Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue? Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<BooleanType>()
                .AddAttribute("val", a => a.Val);
        }
    }

    /// <summary>
    /// <para>Defines the Marker Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:marker.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size" /> <c>&lt;c:size></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol" /> <c>&lt;c:symbol></c></description></item>
    /// </list>
    /// </remark>
    public partial class Marker : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Marker class.
        /// </summary>
        public Marker() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Marker(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Marker(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Marker(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:marker");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Symbol.</para>
        /// <para>Represents the following element tag in the schema: c:symbol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol? Symbol
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Size.</para>
        /// <para>Represents the following element tag in the schema: c:size.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size? Size
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Chart Extensibility.</para>
        /// <para>Represents the following element tag in the schema: c:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Marker>(deep);
    }

    /// <summary>
    /// <para>Defines the DLbl Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:dLbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties" /> <c>&lt;c:txPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete" /> <c>&lt;c:delete></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey" /> <c>&lt;c:showLegendKey></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue" /> <c>&lt;c:showVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName" /> <c>&lt;c:showCatName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName" /> <c>&lt;c:showSerName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent" /> <c>&lt;c:showPercent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize" /> <c>&lt;c:showBubbleSize></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition" /> <c>&lt;c:dLblPos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout" /> <c>&lt;c:layout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat" /> <c>&lt;c:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator" /> <c>&lt;c:separator></c></description></item>
    /// </list>
    /// </remark>
    public partial class DLbl : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DLbl class.
        /// </summary>
        public DLbl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DLbl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DLbl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DLbl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DLbl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DLbl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DLbl(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:dLbl");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText), 0, 1),
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator), 0, 1)
                                }
                            }
                        }
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DLbl>(deep);
    }

    /// <summary>
    /// <para>Defines the CategoryFilterExceptions Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:categoryFilterExceptions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.CategoryFilterException" /> <c>&lt;c16:categoryFilterException></c></description></item>
    /// </list>
    /// </remark>
    public partial class CategoryFilterExceptions : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class.
        /// </summary>
        public CategoryFilterExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CategoryFilterExceptions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:categoryFilterExceptions");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.CategoryFilterException>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.CategoryFilterException), 1, 0, version: FileFormatVersions.Office2016)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CategoryFilterExceptions>(deep);
    }

    /// <summary>
    /// <para>Defines the PivotOptions16 Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:pivotOptions16.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.BooleanFalse" /> <c>&lt;c16:showExpandCollapseFieldButtons></c></description></item>
    /// </list>
    /// </remark>
    public partial class PivotOptions16 : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PivotOptions16 class.
        /// </summary>
        public PivotOptions16() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotOptions16 class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PivotOptions16(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotOptions16 class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PivotOptions16(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotOptions16 class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PivotOptions16(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:pivotOptions16");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.BooleanFalse>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.BooleanFalse), 0, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>BooleanFalse.</para>
        /// <para>Represents the following element tag in the schema: c16:showExpandCollapseFieldButtons.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.BooleanFalse? BooleanFalse
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.BooleanFalse>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotOptions16>(deep);
    }

    /// <summary>
    /// <para>Defines the ChartDataPointUniqueIDMap Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:datapointuniqueidmap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ChartDataPointUniqueIDMapEntry" /> <c>&lt;c16:ptentry></c></description></item>
    /// </list>
    /// </remark>
    public partial class ChartDataPointUniqueIDMap : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMap class.
        /// </summary>
        public ChartDataPointUniqueIDMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartDataPointUniqueIDMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartDataPointUniqueIDMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ChartDataPointUniqueIDMap(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:datapointuniqueidmap");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ChartDataPointUniqueIDMapEntry>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ChartDataPointUniqueIDMapEntry), 0, 0, version: FileFormatVersions.Office2016)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartDataPointUniqueIDMap>(deep);
    }

    /// <summary>
    /// <para>Defines the UniqueIdChartUniqueID Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:uniqueId.</para>
    /// </summary>
    public partial class UniqueIdChartUniqueID : UniqueIDChart
    {
        /// <summary>
        /// Initializes a new instance of the UniqueIdChartUniqueID class.
        /// </summary>
        public UniqueIdChartUniqueID() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:uniqueId");
            builder.Availability = FileFormatVersions.Office2016;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UniqueIdChartUniqueID>(deep);
    }

    /// <summary>
    /// <para>Defines the UniqueID Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:uniqueID.</para>
    /// </summary>
    public partial class UniqueID : UniqueIDChart
    {
        /// <summary>
        /// Initializes a new instance of the UniqueID class.
        /// </summary>
        public UniqueID() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:uniqueID");
            builder.Availability = FileFormatVersions.Office2016;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UniqueID>(deep);
    }

    /// <summary>
    /// <para>Defines the UniqueIDChart Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UniqueIDChart : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UniqueIDChart class.
        /// </summary>
        protected UniqueIDChart() : base()
        {
        }

        /// <summary>
        /// <para>val, this property is only available in Office 2016 and later.</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<UniqueIDChart>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Defines the CategoryFilterException Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:categoryFilterException.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ShapeProperties" /> <c>&lt;c16:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.InvertIfNegativeBoolean" /> <c>&lt;c16:invertIfNegative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Bubble3DBoolean" /> <c>&lt;c16:bubble3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.DLbl" /> <c>&lt;c16:dLbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Marker" /> <c>&lt;c16:marker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UnsignedIntegerType" /> <c>&lt;c16:explosion></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueIdChartUniqueID" /> <c>&lt;c16:uniqueId></c></description></item>
    /// </list>
    /// </remark>
    public partial class CategoryFilterException : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class.
        /// </summary>
        public CategoryFilterException() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterException(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterException(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CategoryFilterException(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:categoryFilterException");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.InvertIfNegativeBoolean>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Bubble3DBoolean>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.DLbl>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Marker>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UnsignedIntegerType>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueIdChartUniqueID>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueIdChartUniqueID), 1, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ShapeProperties), 0, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UnsignedIntegerType), 0, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.InvertIfNegativeBoolean), 0, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Bubble3DBoolean), 0, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Marker), 0, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.DLbl), 0, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>UniqueIdChartUniqueID.</para>
        /// <para>Represents the following element tag in the schema: c16:uniqueId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueIdChartUniqueID? UniqueIdChartUniqueID
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueIdChartUniqueID>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c16:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>UnsignedIntegerType.</para>
        /// <para>Represents the following element tag in the schema: c16:explosion.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UnsignedIntegerType? UnsignedIntegerType
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UnsignedIntegerType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InvertIfNegativeBoolean.</para>
        /// <para>Represents the following element tag in the schema: c16:invertIfNegative.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.InvertIfNegativeBoolean? InvertIfNegativeBoolean
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.InvertIfNegativeBoolean>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bubble3DBoolean.</para>
        /// <para>Represents the following element tag in the schema: c16:bubble3D.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Bubble3DBoolean? Bubble3DBoolean
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Bubble3DBoolean>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Marker.</para>
        /// <para>Represents the following element tag in the schema: c16:marker.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Marker? Marker
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.Marker>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DLbl.</para>
        /// <para>Represents the following element tag in the schema: c16:dLbl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.DLbl? DLbl
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.DLbl>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CategoryFilterException>(deep);
    }

    /// <summary>
    /// <para>Defines the NumberDataType Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:numCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumericPoint" /> <c>&lt;c:pt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatCode" /> <c>&lt;c:formatCode></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumberDataType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberDataType class.
        /// </summary>
        public NumberDataType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberDataType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberDataType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberDataType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberDataType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:numCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumericPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatCode>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatCode), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumericPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Format Code.</para>
        /// <para>Represents the following element tag in the schema: c:formatCode.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatCode? FormatCode
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatCode>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Point Count.</para>
        /// <para>Represents the following element tag in the schema: c:ptCount.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount? PointCount
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberDataType>(deep);
    }

    /// <summary>
    /// <para>Defines the NumFilteredLiteralCache Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:filteredLitCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.NumberDataType" /> <c>&lt;c16:numCache></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumFilteredLiteralCache : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumFilteredLiteralCache class.
        /// </summary>
        public NumFilteredLiteralCache() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumFilteredLiteralCache(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumFilteredLiteralCache(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumFilteredLiteralCache class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumFilteredLiteralCache(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:filteredLitCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.NumberDataType>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.NumberDataType), 1, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>NumberDataType.</para>
        /// <para>Represents the following element tag in the schema: c16:numCache.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.NumberDataType? NumberDataType
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.NumberDataType>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumFilteredLiteralCache>(deep);
    }

    /// <summary>
    /// <para>Defines the StringDataType Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:strCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint" /> <c>&lt;c:pt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    /// </list>
    /// </remark>
    public partial class StringDataType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StringDataType class.
        /// </summary>
        public StringDataType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StringDataType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StringDataType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StringDataType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:strCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>PointCount.</para>
        /// <para>Represents the following element tag in the schema: c:ptCount.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount? PointCount
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StringDataType>(deep);
    }

    /// <summary>
    /// <para>Defines the StrFilteredLiteralCache Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:filteredLitCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.StringDataType" /> <c>&lt;c16:strCache></c></description></item>
    /// </list>
    /// </remark>
    public partial class StrFilteredLiteralCache : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StrFilteredLiteralCache class.
        /// </summary>
        public StrFilteredLiteralCache() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StrFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StrFilteredLiteralCache(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StrFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StrFilteredLiteralCache(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StrFilteredLiteralCache class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StrFilteredLiteralCache(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:filteredLitCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.StringDataType>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.StringDataType), 1, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>StringDataType.</para>
        /// <para>Represents the following element tag in the schema: c16:strCache.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.StringDataType? StringDataType
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.StringDataType>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StrFilteredLiteralCache>(deep);
    }

    /// <summary>
    /// <para>Defines the MultiLvlStrData Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:multiLvlStrCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Level" /> <c>&lt;c:lvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    /// </list>
    /// </remark>
    public partial class MultiLvlStrData : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MultiLvlStrData class.
        /// </summary>
        public MultiLvlStrData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MultiLvlStrData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MultiLvlStrData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MultiLvlStrData(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:multiLvlStrCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Level>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Level), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>PointCount.</para>
        /// <para>Represents the following element tag in the schema: c:ptCount.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount? PointCount
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MultiLvlStrData>(deep);
    }

    /// <summary>
    /// <para>Defines the MultiLvlStrFilteredLiteralCache Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:filteredLitCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.MultiLvlStrData" /> <c>&lt;c16:multiLvlStrCache></c></description></item>
    /// </list>
    /// </remark>
    public partial class MultiLvlStrFilteredLiteralCache : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MultiLvlStrFilteredLiteralCache class.
        /// </summary>
        public MultiLvlStrFilteredLiteralCache() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MultiLvlStrFilteredLiteralCache(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrFilteredLiteralCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MultiLvlStrFilteredLiteralCache(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultiLvlStrFilteredLiteralCache class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MultiLvlStrFilteredLiteralCache(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:filteredLitCache");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.MultiLvlStrData>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.MultiLvlStrData), 1, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>MultiLvlStrData.</para>
        /// <para>Represents the following element tag in the schema: c16:multiLvlStrCache.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.MultiLvlStrData? MultiLvlStrData
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.MultiLvlStrData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MultiLvlStrFilteredLiteralCache>(deep);
    }

    /// <summary>
    /// <para>Defines the LiteralDataChart Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:literalDataChart.</para>
    /// </summary>
    public partial class LiteralDataChart : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LiteralDataChart class.
        /// </summary>
        public LiteralDataChart() : base()
        {
        }

        /// <summary>
        /// <para>val, this property is only available in Office 2016 and later.</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue? Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:literalDataChart");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddElement<LiteralDataChart>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LiteralDataChart>(deep);
    }

    /// <summary>
    /// <para>Defines the BooleanFalse Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:showExpandCollapseFieldButtons.</para>
    /// </summary>
    public partial class BooleanFalse : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BooleanFalse class.
        /// </summary>
        public BooleanFalse() : base()
        {
        }

        /// <summary>
        /// <para>val, this property is only available in Office 2016 and later.</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue? Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:showExpandCollapseFieldButtons");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddElement<BooleanFalse>()
                .AddAttribute("val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BooleanFalse>(deep);
    }

    /// <summary>
    /// <para>Defines the XsdunsignedInt Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:ptidx.</para>
    /// </summary>
    public partial class XsdunsignedInt : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the XsdunsignedInt class.
        /// </summary>
        public XsdunsignedInt() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the XsdunsignedInt class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public XsdunsignedInt(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new UInt32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<UInt32Value>(NumberValidator.Instance);
            builder.SetSchema("c16:ptidx");
            builder.Availability = FileFormatVersions.Office2016;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<XsdunsignedInt>(deep);
    }

    /// <summary>
    /// <para>Defines the ChartDataPointUniqueIDMapEntry Class.</para>
    /// <para>This class is available in Office 2016 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c16:ptentry.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueID" /> <c>&lt;c16:uniqueID></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.XsdunsignedInt" /> <c>&lt;c16:ptidx></c></description></item>
    /// </list>
    /// </remark>
    public partial class ChartDataPointUniqueIDMapEntry : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMapEntry class.
        /// </summary>
        public ChartDataPointUniqueIDMapEntry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMapEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartDataPointUniqueIDMapEntry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMapEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartDataPointUniqueIDMapEntry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartDataPointUniqueIDMapEntry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ChartDataPointUniqueIDMapEntry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c16:ptentry");
            builder.Availability = FileFormatVersions.Office2016;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueID>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.XsdunsignedInt>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.XsdunsignedInt), 1, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueID), 1, 1, version: FileFormatVersions.Office2016)
            };
        }

        /// <summary>
        /// <para>XsdunsignedInt.</para>
        /// <para>Represents the following element tag in the schema: c16:ptidx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.XsdunsignedInt? XsdunsignedInt
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.XsdunsignedInt>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>UniqueID.</para>
        /// <para>Represents the following element tag in the schema: c16:uniqueID.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c16 = http://schemas.microsoft.com/office/drawing/2014/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueID? UniqueID
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2014.Chart.UniqueID>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartDataPointUniqueIDMapEntry>(deep);
    }
}
// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Excel.Y2006.Main
{
    /// <summary>
    /// <para>Defines the Macrosheet Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:macrosheet.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.AutoFilter" /> <c>&lt;x:autoFilter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Columns" /> <c>&lt;x:cols></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ConditionalFormatting" /> <c>&lt;x:conditionalFormatting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomProperties" /> <c>&lt;x:customProperties></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomSheetViews" /> <c>&lt;x:customSheetViews></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DataConsolidate" /> <c>&lt;x:dataConsolidate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Drawing" /> <c>&lt;x:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DrawingHeaderFooter" /> <c>&lt;x:drawingHF></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ExtensionList" /> <c>&lt;x:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.HeaderFooter" /> <c>&lt;x:headerFooter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawing" /> <c>&lt;x:legacyDrawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawingHeaderFooter" /> <c>&lt;x:legacyDrawingHF></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.OleObjects" /> <c>&lt;x:oleObjects></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.RowBreaks" /> <c>&lt;x:rowBreaks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ColumnBreaks" /> <c>&lt;x:colBreaks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageMargins" /> <c>&lt;x:pageMargins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageSetup" /> <c>&lt;x:pageSetup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PhoneticProperties" /> <c>&lt;x:phoneticPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PrintOptions" /> <c>&lt;x:printOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Picture" /> <c>&lt;x:picture></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetData" /> <c>&lt;x:sheetData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetDimension" /> <c>&lt;x:dimension></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetFormatProperties" /> <c>&lt;x:sheetFormatPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProperties" /> <c>&lt;x:sheetPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProtection" /> <c>&lt;x:sheetProtection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetViews" /> <c>&lt;x:sheetViews></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SortState" /> <c>&lt;x:sortState></c></description></item>
    /// </list>
    /// </remark>
    public partial class Macrosheet : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Macrosheet class.
        /// </summary>
        public Macrosheet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Macrosheet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Macrosheet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Macrosheet(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:macrosheet");
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.AutoFilter>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Columns>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ConditionalFormatting>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomProperties>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomSheetViews>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DataConsolidate>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DrawingHeaderFooter>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.HeaderFooter>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawing>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawingHeaderFooter>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.OleObjects>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.RowBreaks>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ColumnBreaks>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageMargins>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageSetup>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PhoneticProperties>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PrintOptions>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Picture>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetData>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetDimension>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetFormatProperties>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProperties>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProtection>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetViews>();
            builder.AddChild<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SortState>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetDimension), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetViews), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetFormatProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Columns), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetData), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProtection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.AutoFilter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SortState), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DataConsolidate), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomSheetViews), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PhoneticProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ConditionalFormatting), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PrintOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageMargins), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.PageSetup), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.HeaderFooter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.RowBreaks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ColumnBreaks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.CustomProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Drawing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.LegacyDrawingHeaderFooter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.Picture), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.OleObjects), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.DrawingHeaderFooter), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Sheet Properties.</para>
        /// <para>Represents the following element tag in the schema: x:sheetPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProperties? SheetProperties
        {
            get => GetElement<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Macro Sheet Dimensions.</para>
        /// <para>Represents the following element tag in the schema: x:dimension.</para>
        /// </summary>
        /// <remark>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetDimension? SheetDimension
        {
            get => GetElement<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetDimension>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Macro Sheet Views.</para>
        /// <para>Represents the following element tag in the schema: x:sheetViews.</para>
        /// </summary>
        /// <remark>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetViews? SheetViews
        {
            get => GetElement<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetViews>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Sheet Format Properties.</para>
        /// <para>Represents the following element tag in the schema: x:sheetFormatPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetFormatProperties? SheetFormatProperties
        {
            get => GetElement<DocumentFormat.OpenXml.SpreadsheetML.Y2006.Main.SheetFormatProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Macrosheet>(deep);

        internal Macrosheet(MacroSheetPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the MacroSheetPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(MacroSheetPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the MacroSheetPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(MacroSheetPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the MacroSheetPart associated with this element.
        /// </summary>
        public MacroSheetPart? MacroSheetPart
        {
            get => OpenXmlPart as MacroSheetPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Worksheet Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:worksheetSortMap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMap" /> <c>&lt;xne:colSortMap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMap" /> <c>&lt;xne:rowSortMap></c></description></item>
    /// </list>
    /// </remark>
    public partial class WorksheetSortMap : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class.
        /// </summary>
        public WorksheetSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WorksheetSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WorksheetSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WorksheetSortMap(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:worksheetSortMap");
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMap>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMap>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMap), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMap), 0, 1)
            };
        }

        /// <summary>
        /// <para>Row Sort Map.</para>
        /// <para>Represents the following element tag in the schema: xne:rowSortMap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:xne = http://schemas.microsoft.com/office/excel/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMap? RowSortMap
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Column Sort Map.</para>
        /// <para>Represents the following element tag in the schema: xne:colSortMap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:xne = http://schemas.microsoft.com/office/excel/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMap? ColumnSortMap
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMap>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorksheetSortMap>(deep);

        internal WorksheetSortMap(WorksheetSortMapPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WorksheetSortMapPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WorksheetSortMapPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WorksheetSortMapPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WorksheetSortMapPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WorksheetSortMapPart associated with this element.
        /// </summary>
        public WorksheetSortMapPart? WorksheetSortMapPart
        {
            get => OpenXmlPart as WorksheetSortMapPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the ReferenceSequence Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:sqref.</para>
    /// </summary>
    public partial class ReferenceSequence : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ReferenceSequence class.
        /// </summary>
        public ReferenceSequence() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ReferenceSequence class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ReferenceSequence(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new ListValue<StringValue> { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<ListValue<StringValue>>(NumberValidator.Instance);
            builder.SetSchema("xne:sqref");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReferenceSequence>(deep);
    }

    /// <summary>
    /// <para>Defines the Formula Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:f.</para>
    /// </summary>
    public partial class Formula : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Formula class.
        /// </summary>
        public Formula() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Formula class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Formula(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:f");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula>(deep);
    }

    /// <summary>
    /// <para>Row Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:rowSortMap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMapItem" /> <c>&lt;xne:row></c></description></item>
    /// </list>
    /// </remark>
    public partial class RowSortMap : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RowSortMap class.
        /// </summary>
        public RowSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RowSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RowSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RowSortMap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Ref
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Count</para>
        /// <para>Represents the following attribute in the schema: count</para>
        /// </summary>
        public UInt32Value? Count
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:rowSortMap");
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMapItem>();
            builder.AddElement<RowSortMap>()
                .AddAttribute("ref", a => a.Ref, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("count", a => a.Count, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (536870910L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Excel.Y2006.Main.RowSortMapItem), 1, 536870910)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowSortMap>(deep);
    }

    /// <summary>
    /// <para>Column Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:colSortMap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMapItem" /> <c>&lt;xne:col></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColumnSortMap : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class.
        /// </summary>
        public ColumnSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColumnSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColumnSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColumnSortMap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Ref
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Count</para>
        /// <para>Represents the following attribute in the schema: count</para>
        /// </summary>
        public UInt32Value? Count
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:colSortMap");
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMapItem>();
            builder.AddElement<ColumnSortMap>()
                .AddAttribute("ref", a => a.Ref, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("count", a => a.Count, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (536870910L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Excel.Y2006.Main.ColumnSortMapItem), 1, 536870910)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnSortMap>(deep);
    }

    /// <summary>
    /// <para>Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:row.</para>
    /// </summary>
    public partial class RowSortMapItem : SortMapItemType
    {
        /// <summary>
        /// Initializes a new instance of the RowSortMapItem class.
        /// </summary>
        public RowSortMapItem() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:row");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowSortMapItem>(deep);
    }

    /// <summary>
    /// <para>Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:col.</para>
    /// </summary>
    public partial class ColumnSortMapItem : SortMapItemType
    {
        /// <summary>
        /// Initializes a new instance of the ColumnSortMapItem class.
        /// </summary>
        public ColumnSortMapItem() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xne:col");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnSortMapItem>(deep);
    }

    /// <summary>
    /// <para>Defines the SortMapItemType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class SortMapItemType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SortMapItemType class.
        /// </summary>
        protected SortMapItemType() : base()
        {
        }

        /// <summary>
        /// <para>New Value</para>
        /// <para>Represents the following attribute in the schema: newVal</para>
        /// </summary>
        public UInt32Value? NewVal
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Old Value</para>
        /// <para>Represents the following attribute in the schema: oldVal</para>
        /// </summary>
        public UInt32Value? OldVal
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<SortMapItemType>()
                .AddAttribute("newVal", a => a.NewVal, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("oldVal", a => a.OldVal, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }
}
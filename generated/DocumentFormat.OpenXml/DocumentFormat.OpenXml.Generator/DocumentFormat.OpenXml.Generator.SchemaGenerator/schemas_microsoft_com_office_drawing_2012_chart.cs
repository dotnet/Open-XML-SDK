// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.DrawingML.Y2006.Chart;
using DocumentFormat.OpenXml.DrawingML.Y2006.Main;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart
{
    /// <summary>
    /// <para>Defines the PivotSource Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:pivotSource.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatId" /> <c>&lt;c:fmtId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PivotTableName" /> <c>&lt;c:name></c></description></item>
    /// </list>
    /// </remark>
    public partial class PivotSource : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PivotSource class.
        /// </summary>
        public PivotSource() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotSource class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PivotSource(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotSource class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PivotSource(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PivotSource class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PivotSource(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:pivotSource");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatId>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PivotTableName>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PivotTableName), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatId), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Pivot Name.</para>
        /// <para>Represents the following element tag in the schema: c:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PivotTableName? PivotTableName
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PivotTableName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Format ID.</para>
        /// <para>Represents the following element tag in the schema: c:fmtId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatId? FormatId
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.FormatId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Chart Extensibility.</para>
        /// <para>Represents the following element tag in the schema: c:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotSource>(deep);
    }

    /// <summary>
    /// <para>Defines the NumberingFormat Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:numFmt.</para>
    /// </summary>
    public partial class NumberingFormat : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingFormat class.
        /// </summary>
        public NumberingFormat() : base()
        {
        }

        /// <summary>
        /// <para>Number Format Code</para>
        /// <para>Represents the following attribute in the schema: formatCode</para>
        /// </summary>
        public StringValue? FormatCode
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Linked to Source</para>
        /// <para>Represents the following attribute in the schema: sourceLinked</para>
        /// </summary>
        public BooleanValue? SourceLinked
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:numFmt");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddElement<NumberingFormat>()
                .AddAttribute("formatCode", a => a.FormatCode, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("sourceLinked", a => a.SourceLinked);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingFormat>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapeProperties Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:spPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry" /> <c>&lt;a:custGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry" /> <c>&lt;a:prstGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType" /> <c>&lt;a:sp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeProperties class.
        /// </summary>
        public ShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>? BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:spPr");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            builder.AddElement<ShapeProperties>()
                .AddAttribute("bwMode", a => a.BlackWhiteMode, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Individual Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D? Transform2D
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the Layout Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:layout.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ManualLayout" /> <c>&lt;c:manualLayout></c></description></item>
    /// </list>
    /// </remark>
    public partial class Layout : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Layout class.
        /// </summary>
        public Layout() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Layout class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Layout(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Layout class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Layout(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Layout class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Layout(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:layout");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ManualLayout>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ManualLayout), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Manual Layout.</para>
        /// <para>Represents the following element tag in the schema: c:manualLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ManualLayout? ManualLayout
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ManualLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Chart Extensibility.</para>
        /// <para>Represents the following element tag in the schema: c:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Layout>(deep);
    }

    /// <summary>
    /// <para>Defines the FullReference Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:fullRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences" /> <c>&lt;c15:sqref></c></description></item>
    /// </list>
    /// </remark>
    public partial class FullReference : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FullReference class.
        /// </summary>
        public FullReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FullReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FullReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FullReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FullReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FullReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FullReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:fullRef");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>SequenceOfReferences.</para>
        /// <para>Represents the following element tag in the schema: c15:sqref.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences? SequenceOfReferences
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FullReference>(deep);
    }

    /// <summary>
    /// <para>Defines the LevelReference Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:levelRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences" /> <c>&lt;c15:sqref></c></description></item>
    /// </list>
    /// </remark>
    public partial class LevelReference : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelReference class.
        /// </summary>
        public LevelReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LevelReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:levelRef");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>SequenceOfReferences.</para>
        /// <para>Represents the following element tag in the schema: c15:sqref.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences? SequenceOfReferences
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FormulaReference Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:formulaRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences" /> <c>&lt;c15:sqref></c></description></item>
    /// </list>
    /// </remark>
    public partial class FormulaReference : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FormulaReference class.
        /// </summary>
        public FormulaReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormulaReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormulaReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormulaReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormulaReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormulaReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FormulaReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:formulaRef");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>SequenceOfReferences.</para>
        /// <para>Represents the following element tag in the schema: c15:sqref.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences? SequenceOfReferences
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormulaReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredSeriesTitle Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredSeriesTitle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText" /> <c>&lt;c15:tx></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredSeriesTitle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredSeriesTitle class.
        /// </summary>
        public FilteredSeriesTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSeriesTitle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredSeriesTitle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSeriesTitle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredSeriesTitle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSeriesTitle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredSeriesTitle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredSeriesTitle");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>ChartText.</para>
        /// <para>Represents the following element tag in the schema: c15:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText? ChartText
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredSeriesTitle>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredCategoryTitle Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredCategoryTitle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AxisDataSourceType" /> <c>&lt;c15:cat></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredCategoryTitle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredCategoryTitle class.
        /// </summary>
        public FilteredCategoryTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredCategoryTitle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredCategoryTitle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredCategoryTitle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredCategoryTitle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredCategoryTitle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredCategoryTitle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredCategoryTitle");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AxisDataSourceType>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AxisDataSourceType), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>AxisDataSourceType.</para>
        /// <para>Represents the following element tag in the schema: c15:cat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AxisDataSourceType? AxisDataSourceType
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AxisDataSourceType>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredCategoryTitle>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredAreaSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredAreaSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AreaChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredAreaSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredAreaSeries class.
        /// </summary>
        public FilteredAreaSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredAreaSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredAreaSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredAreaSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredAreaSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredAreaSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredAreaSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredAreaSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AreaChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AreaChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>AreaChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AreaChartSeries? AreaChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AreaChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredAreaSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredBarSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredBarSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BarChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredBarSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredBarSeries class.
        /// </summary>
        public FilteredBarSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBarSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredBarSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBarSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredBarSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBarSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredBarSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredBarSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BarChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BarChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>BarChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BarChartSeries? BarChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BarChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredBarSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredBubbleSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredBubbleSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BubbleChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredBubbleSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredBubbleSeries class.
        /// </summary>
        public FilteredBubbleSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBubbleSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredBubbleSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBubbleSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredBubbleSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredBubbleSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredBubbleSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredBubbleSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BubbleChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BubbleChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>BubbleChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BubbleChartSeries? BubbleChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.BubbleChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredBubbleSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredLineSeriesExtension Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredLineSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LineChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredLineSeriesExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredLineSeriesExtension class.
        /// </summary>
        public FilteredLineSeriesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredLineSeriesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredLineSeriesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredLineSeriesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredLineSeriesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredLineSeriesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredLineSeriesExtension(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredLineSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LineChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LineChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>LineChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LineChartSeries? LineChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LineChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredLineSeriesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredPieSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredPieSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PieChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredPieSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredPieSeries class.
        /// </summary>
        public FilteredPieSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredPieSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredPieSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredPieSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredPieSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredPieSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredPieSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredPieSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PieChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PieChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>PieChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PieChartSeries? PieChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PieChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredPieSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredRadarSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredRadarSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.RadarChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredRadarSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredRadarSeries class.
        /// </summary>
        public FilteredRadarSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredRadarSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredRadarSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredRadarSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredRadarSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredRadarSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredRadarSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredRadarSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.RadarChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.RadarChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>RadarChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.RadarChartSeries? RadarChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.RadarChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredRadarSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredScatterSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredScatterSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ScatterChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredScatterSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredScatterSeries class.
        /// </summary>
        public FilteredScatterSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredScatterSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredScatterSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredScatterSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredScatterSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredScatterSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredScatterSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredScatterSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ScatterChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ScatterChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>ScatterChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ScatterChartSeries? ScatterChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ScatterChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredScatterSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the FilteredSurfaceSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:filteredSurfaceSeries.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SurfaceChartSeries" /> <c>&lt;c15:ser></c></description></item>
    /// </list>
    /// </remark>
    public partial class FilteredSurfaceSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FilteredSurfaceSeries class.
        /// </summary>
        public FilteredSurfaceSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSurfaceSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredSurfaceSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSurfaceSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FilteredSurfaceSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FilteredSurfaceSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FilteredSurfaceSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:filteredSurfaceSeries");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SurfaceChartSeries>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SurfaceChartSeries), 1, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>SurfaceChartSeries.</para>
        /// <para>Represents the following element tag in the schema: c15:ser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SurfaceChartSeries? SurfaceChartSeries
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SurfaceChartSeries>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FilteredSurfaceSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabelsRange Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:datalabelsRange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRangeChache" /> <c>&lt;c15:dlblRangeCache></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula" /> <c>&lt;c15:f></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabelsRange : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataLabelsRange class.
        /// </summary>
        public DataLabelsRange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelsRange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelsRange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabelsRange(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:datalabelsRange");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRangeChache>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRangeChache), 0, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>Formula.</para>
        /// <para>Represents the following element tag in the schema: c15:f.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula? Formula
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DataLabelsRangeChache.</para>
        /// <para>Represents the following element tag in the schema: c15:dlblRangeCache.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRangeChache? DataLabelsRangeChache
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRangeChache>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabelsRange>(deep);
    }

    /// <summary>
    /// <para>Defines the CategoryFilterExceptions Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:categoryFilterExceptions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.CategoryFilterException" /> <c>&lt;c15:categoryFilterException></c></description></item>
    /// </list>
    /// </remark>
    public partial class CategoryFilterExceptions : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class.
        /// </summary>
        public CategoryFilterExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CategoryFilterExceptions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:categoryFilterExceptions");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.CategoryFilterException>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.CategoryFilterException), 1, 0, version: FileFormatVersions.Office2013)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CategoryFilterExceptions>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabelFieldTable Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:dlblFieldTable.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableEntry" /> <c>&lt;c15:dlblFTEntry></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabelFieldTable : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTable class.
        /// </summary>
        public DataLabelFieldTable() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTable(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTable(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTable class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabelFieldTable(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:dlblFieldTable");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableEntry>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableEntry), 0, 0, version: FileFormatVersions.Office2013)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabelFieldTable>(deep);
    }

    /// <summary>
    /// <para>Defines the ExceptionForSave Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:xForSave.</para>
    /// </summary>
    public partial class ExceptionForSave : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the ExceptionForSave class.
        /// </summary>
        public ExceptionForSave() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:xForSave");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExceptionForSave>(deep);
    }

    /// <summary>
    /// <para>Defines the ShowDataLabelsRange Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:showDataLabelsRange.</para>
    /// </summary>
    public partial class ShowDataLabelsRange : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the ShowDataLabelsRange class.
        /// </summary>
        public ShowDataLabelsRange() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:showDataLabelsRange");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowDataLabelsRange>(deep);
    }

    /// <summary>
    /// <para>Defines the ShowLeaderLines Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:showLeaderLines.</para>
    /// </summary>
    public partial class ShowLeaderLines : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the ShowLeaderLines class.
        /// </summary>
        public ShowLeaderLines() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:showLeaderLines");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowLeaderLines>(deep);
    }

    /// <summary>
    /// <para>Defines the AutoGeneneratedCategories Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:autoCat.</para>
    /// </summary>
    public partial class AutoGeneneratedCategories : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the AutoGeneneratedCategories class.
        /// </summary>
        public AutoGeneneratedCategories() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:autoCat");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoGeneneratedCategories>(deep);
    }

    /// <summary>
    /// <para>Defines the InvertIfNegativeBoolean Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:invertIfNegative.</para>
    /// </summary>
    public partial class InvertIfNegativeBoolean : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the InvertIfNegativeBoolean class.
        /// </summary>
        public InvertIfNegativeBoolean() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:invertIfNegative");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InvertIfNegativeBoolean>(deep);
    }

    /// <summary>
    /// <para>Defines the Bubble3D Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:bubble3D.</para>
    /// </summary>
    public partial class Bubble3D : BooleanType
    {
        /// <summary>
        /// Initializes a new instance of the Bubble3D class.
        /// </summary>
        public Bubble3D() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:bubble3D");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bubble3D>(deep);
    }

    /// <summary>
    /// <para>Defines the BooleanType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BooleanType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BooleanType class.
        /// </summary>
        protected BooleanType() : base()
        {
        }

        /// <summary>
        /// <para>Boolean Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue? Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<BooleanType>()
                .AddAttribute("val", a => a.Val);
        }
    }

    /// <summary>
    /// <para>Defines the ChartText Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:tx.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RichText" /> <c>&lt;c:rich></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral" /> <c>&lt;c:strLit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference" /> <c>&lt;c:strRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class ChartText : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ChartText class.
        /// </summary>
        public ChartText() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartText class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartText(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartText class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ChartText(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChartText class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ChartText(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:tx");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RichText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RichText), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>String Reference.</para>
        /// <para>Represents the following element tag in the schema: c:strRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference? StringReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Rich Text.</para>
        /// <para>Represents the following element tag in the schema: c:rich.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RichText? RichText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RichText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>String Literal.</para>
        /// <para>Represents the following element tag in the schema: c:strLit.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral? StringLiteral
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChartText>(deep);
    }

    /// <summary>
    /// <para>Defines the LeaderLines Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:leaderLines.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class LeaderLines : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LeaderLines class.
        /// </summary>
        public LeaderLines() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeaderLines class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeaderLines(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeaderLines class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeaderLines(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeaderLines class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LeaderLines(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:leaderLines");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeaderLines>(deep);
    }

    /// <summary>
    /// <para>Defines the SequenceOfReferences Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:sqref.</para>
    /// </summary>
    public partial class SequenceOfReferences : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the SequenceOfReferences class.
        /// </summary>
        public SequenceOfReferences() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SequenceOfReferences class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public SequenceOfReferences(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:sqref");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SequenceOfReferences>(deep);
    }

    /// <summary>
    /// <para>Defines the Formula Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:f.</para>
    /// </summary>
    public partial class Formula : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Formula class.
        /// </summary>
        public Formula() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Formula class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Formula(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:f");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula>(deep);
    }

    /// <summary>
    /// <para>Defines the TextFieldGuid Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:txfldGUID.</para>
    /// </summary>
    public partial class TextFieldGuid : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the TextFieldGuid class.
        /// </summary>
        public TextFieldGuid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextFieldGuid class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public TextFieldGuid(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:txfldGUID");
            builder.Availability = FileFormatVersions.Office2013;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextFieldGuid>(deep);
    }

    /// <summary>
    /// <para>Defines the AxisDataSourceType Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:cat.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.MultiLevelStringReference" /> <c>&lt;c:multiLvlStrRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberLiteral" /> <c>&lt;c:numLit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberReference" /> <c>&lt;c:numRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral" /> <c>&lt;c:strLit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference" /> <c>&lt;c:strRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class AxisDataSourceType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AxisDataSourceType class.
        /// </summary>
        public AxisDataSourceType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AxisDataSourceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AxisDataSourceType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AxisDataSourceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AxisDataSourceType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AxisDataSourceType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AxisDataSourceType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:cat");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.MultiLevelStringReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberLiteral>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.MultiLevelStringReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberLiteral), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>Multi Level String Reference.</para>
        /// <para>Represents the following element tag in the schema: c:multiLvlStrRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.MultiLevelStringReference? MultiLevelStringReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.MultiLevelStringReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Number Reference.</para>
        /// <para>Represents the following element tag in the schema: c:numRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberReference? NumberReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Number Literal.</para>
        /// <para>Represents the following element tag in the schema: c:numLit.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberLiteral? NumberLiteral
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberLiteral>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StringReference.</para>
        /// <para>Represents the following element tag in the schema: c:strRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference? StringReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>String Literal.</para>
        /// <para>Represents the following element tag in the schema: c:strLit.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral? StringLiteral
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringLiteral>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AxisDataSourceType>(deep);
    }

    /// <summary>
    /// <para>Defines the BarChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BarSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative" /> <c>&lt;c:invertIfNegative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars" /> <c>&lt;c:errBars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Shape" /> <c>&lt;c:shape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline" /> <c>&lt;c:trendline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class BarChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BarChartSeries class.
        /// </summary>
        public BarChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BarChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BarChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BarChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BarChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BarChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BarChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BarSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Shape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BarSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InvertIfNegative.</para>
        /// <para>Represents the following element tag in the schema: c:invertIfNegative.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative? InvertIfNegative
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BarChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the LineChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth" /> <c>&lt;c:smooth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars" /> <c>&lt;c:errBars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.LineSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker" /> <c>&lt;c:marker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline" /> <c>&lt;c:trendline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LineChartSeries class.
        /// </summary>
        public LineChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.LineSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.LineSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Marker.</para>
        /// <para>Represents the following element tag in the schema: c:marker.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker? Marker
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the ScatterChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues" /> <c>&lt;c:xVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth" /> <c>&lt;c:smooth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars" /> <c>&lt;c:errBars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker" /> <c>&lt;c:marker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues" /> <c>&lt;c:yVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ScatterSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline" /> <c>&lt;c:trendline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class ScatterChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ScatterChartSeries class.
        /// </summary>
        public ScatterChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ScatterChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ScatterChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ScatterChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ScatterChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ScatterChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ScatterChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ScatterSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars), 0, 2),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Smooth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ScatterSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Marker.</para>
        /// <para>Represents the following element tag in the schema: c:marker.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker? Marker
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScatterChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the AreaChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.AreaSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars" /> <c>&lt;c:errBars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline" /> <c>&lt;c:trendline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class AreaChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AreaChartSeries class.
        /// </summary>
        public AreaChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AreaChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AreaChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AreaChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AreaChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AreaChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AreaChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.AreaSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars), 0, 2),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.AreaSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AreaChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the PieChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PieSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Explosion" /> <c>&lt;c:explosion></c></description></item>
    /// </list>
    /// </remark>
    public partial class PieChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PieChartSeries class.
        /// </summary>
        public PieChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PieChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PieChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PieChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PieChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PieChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PieChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PieSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Explosion>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Explosion), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PieSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Explosion.</para>
        /// <para>Represents the following element tag in the schema: c:explosion.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Explosion? Explosion
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Explosion>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PieChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the BubbleChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues" /> <c>&lt;c:xVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative" /> <c>&lt;c:invertIfNegative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D" /> <c>&lt;c:bubble3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars" /> <c>&lt;c:errBars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues" /> <c>&lt;c:yVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSize" /> <c>&lt;c:bubbleSize></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline" /> <c>&lt;c:trendline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class BubbleChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BubbleChartSeries class.
        /// </summary>
        public BubbleChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BubbleChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BubbleChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BubbleChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BubbleChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BubbleChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BubbleChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSize>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Trendline), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ErrorBars), 0, 2),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.XValues), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.YValues), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSize), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.BubbleSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InvertIfNegative.</para>
        /// <para>Represents the following element tag in the schema: c:invertIfNegative.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative? InvertIfNegative
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.InvertIfNegative>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BubbleChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the RadarChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels" /> <c>&lt;c:dLbls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint" /> <c>&lt;c:dPt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker" /> <c>&lt;c:marker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RadarSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class RadarChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RadarChartSeries class.
        /// </summary>
        public RadarChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RadarChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RadarChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RadarChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RadarChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RadarChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RadarChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RadarSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabels), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.RadarSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Marker.</para>
        /// <para>Represents the following element tag in the schema: c:marker.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker? Marker
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Marker>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RadarChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the SurfaceChartSeries Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:ser.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData" /> <c>&lt;c:cat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D" /> <c>&lt;c:bubble3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values" /> <c>&lt;c:val></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions" /> <c>&lt;c:pictureOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SurfaceSerExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order" /> <c>&lt;c:order></c></description></item>
    /// </list>
    /// </remark>
    public partial class SurfaceChartSeries : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SurfaceChartSeries class.
        /// </summary>
        public SurfaceChartSeries() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SurfaceChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SurfaceChartSeries(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SurfaceChartSeries class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SurfaceChartSeries(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SurfaceChartSeries class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SurfaceChartSeries(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:ser");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SurfaceSerExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SurfaceSerExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Order.</para>
        /// <para>Represents the following element tag in the schema: c:order.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order? Order
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Order>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Series Text.</para>
        /// <para>Represents the following element tag in the schema: c:tx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText? SeriesText
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SeriesText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PictureOptions.</para>
        /// <para>Represents the following element tag in the schema: c:pictureOptions.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions? PictureOptions
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PictureOptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CategoryAxisData.</para>
        /// <para>Represents the following element tag in the schema: c:cat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData? CategoryAxisData
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.CategoryAxisData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Values.</para>
        /// <para>Represents the following element tag in the schema: c:val.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values? Values
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Values>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bubble3D.</para>
        /// <para>Represents the following element tag in the schema: c:bubble3D.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D? Bubble3D
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Bubble3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SurfaceSerExtensionList.</para>
        /// <para>Represents the following element tag in the schema: c:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SurfaceSerExtensionList? SurfaceSerExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.SurfaceSerExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SurfaceChartSeries>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabelsRangeChache Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:dlblRangeCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint" /> <c>&lt;c:pt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabelsRangeChache : StringDataType
    {
        /// <summary>
        /// Initializes a new instance of the DataLabelsRangeChache class.
        /// </summary>
        public DataLabelsRangeChache() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRangeChache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelsRangeChache(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRangeChache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelsRangeChache(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelsRangeChache class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabelsRangeChache(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:dlblRangeCache");
            builder.Availability = FileFormatVersions.Office2013;
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabelsRangeChache>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabelFieldTableCache Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:dlblFieldTableCache.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint" /> <c>&lt;c:pt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabelFieldTableCache : StringDataType
    {
        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableCache class.
        /// </summary>
        public DataLabelFieldTableCache() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTableCache(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableCache class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTableCache(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableCache class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabelFieldTableCache(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:dlblFieldTableCache");
            builder.Availability = FileFormatVersions.Office2013;
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabelFieldTableCache>(deep);
    }

    /// <summary>
    /// <para>Defines the StringDataType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint" /> <c>&lt;c:pt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount" /> <c>&lt;c:ptCount></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class StringDataType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StringDataType class.
        /// </summary>
        protected StringDataType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StringDataType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StringDataType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringDataType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected StringDataType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StrDataExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.StringPoint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
        }

        /// <summary>
        /// <para>PointCount.</para>
        /// <para>Represents the following element tag in the schema: c:ptCount.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount? PointCount
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.PointCount>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the Explosion Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:explosion.</para>
    /// </summary>
    public partial class Explosion : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Explosion class.
        /// </summary>
        public Explosion() : base()
        {
        }

        /// <summary>
        /// <para>Integer Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:explosion");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddElement<Explosion>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Explosion>(deep);
    }

    /// <summary>
    /// <para>Defines the Marker Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:marker.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size" /> <c>&lt;c:size></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol" /> <c>&lt;c:symbol></c></description></item>
    /// </list>
    /// </remark>
    public partial class Marker : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Marker class.
        /// </summary>
        public Marker() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Marker(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Marker(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Marker class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Marker(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:marker");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Symbol.</para>
        /// <para>Represents the following element tag in the schema: c:symbol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol? Symbol
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Symbol>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Size.</para>
        /// <para>Represents the following element tag in the schema: c:size.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size? Size
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Size>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ChartShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties? ChartShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Chart Extensibility.</para>
        /// <para>Represents the following element tag in the schema: c:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Marker>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabel Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:dLbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties" /> <c>&lt;c:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties" /> <c>&lt;c:txPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete" /> <c>&lt;c:delete></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey" /> <c>&lt;c:showLegendKey></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue" /> <c>&lt;c:showVal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName" /> <c>&lt;c:showCatName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName" /> <c>&lt;c:showSerName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent" /> <c>&lt;c:showPercent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize" /> <c>&lt;c:showBubbleSize></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList" /> <c>&lt;c:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition" /> <c>&lt;c:dLblPos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout" /> <c>&lt;c:layout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat" /> <c>&lt;c:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText" /> <c>&lt;c:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index" /> <c>&lt;c:idx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator" /> <c>&lt;c:separator></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabel : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataLabel class.
        /// </summary>
        public DataLabel() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabel(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabel(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabel class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabel(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:dLbl");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index), 1, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Delete), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Layout), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartText), 0, 1),
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.NumberingFormat), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartShapeProperties), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.TextProperties), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DataLabelPosition), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowLegendKey), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowValue), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowCategoryName), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowSeriesName), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowPercent), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ShowBubbleSize), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Separator), 0, 1)
                                }
                            }
                        }
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Chart.DLblExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Index.</para>
        /// <para>Represents the following element tag in the schema: c:idx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c = http://schemas.openxmlformats.org/drawingml/2006/chart
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index? Index
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.Index>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabel>(deep);
    }

    /// <summary>
    /// <para>Defines the CategoryFilterException Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:categoryFilterException.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties" /> <c>&lt;c15:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.InvertIfNegativeBoolean" /> <c>&lt;c15:invertIfNegative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Bubble3D" /> <c>&lt;c15:bubble3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabel" /> <c>&lt;c15:dLbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Marker" /> <c>&lt;c15:marker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Explosion" /> <c>&lt;c15:explosion></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences" /> <c>&lt;c15:sqref></c></description></item>
    /// </list>
    /// </remark>
    public partial class CategoryFilterException : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class.
        /// </summary>
        public CategoryFilterException() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterException(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CategoryFilterException(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CategoryFilterException class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CategoryFilterException(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:categoryFilterException");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.InvertIfNegativeBoolean>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Bubble3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabel>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Marker>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Explosion>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Explosion), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.InvertIfNegativeBoolean), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Bubble3D), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Marker), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabel), 0, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>SequenceOfReferences.</para>
        /// <para>Represents the following element tag in the schema: c15:sqref.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences? SequenceOfReferences
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.SequenceOfReferences>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeProperties.</para>
        /// <para>Represents the following element tag in the schema: c15:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Explosion.</para>
        /// <para>Represents the following element tag in the schema: c15:explosion.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Explosion? Explosion
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Explosion>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InvertIfNegativeBoolean.</para>
        /// <para>Represents the following element tag in the schema: c15:invertIfNegative.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.InvertIfNegativeBoolean? InvertIfNegativeBoolean
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.InvertIfNegativeBoolean>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bubble3D.</para>
        /// <para>Represents the following element tag in the schema: c15:bubble3D.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Bubble3D? Bubble3D
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Bubble3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Marker.</para>
        /// <para>Represents the following element tag in the schema: c15:marker.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Marker? Marker
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Marker>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DataLabel.</para>
        /// <para>Represents the following element tag in the schema: c15:dLbl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabel? DataLabel
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabel>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CategoryFilterException>(deep);
    }

    /// <summary>
    /// <para>Defines the DataLabelFieldTableEntry Class.</para>
    /// <para>This class is available in Office 2013 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is c15:dlblFTEntry.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableCache" /> <c>&lt;c15:dlblFieldTableCache></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.TextFieldGuid" /> <c>&lt;c15:txfldGUID></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula" /> <c>&lt;c15:f></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataLabelFieldTableEntry : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableEntry class.
        /// </summary>
        public DataLabelFieldTableEntry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTableEntry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataLabelFieldTableEntry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataLabelFieldTableEntry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataLabelFieldTableEntry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("c15:dlblFTEntry");
            builder.Availability = FileFormatVersions.Office2013;
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableCache>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.TextFieldGuid>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.TextFieldGuid), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableCache), 0, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>TextFieldGuid.</para>
        /// <para>Represents the following element tag in the schema: c15:txfldGUID.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.TextFieldGuid? TextFieldGuid
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.TextFieldGuid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Formula.</para>
        /// <para>Represents the following element tag in the schema: c15:f.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula? Formula
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Formula>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DataLabelFieldTableCache.</para>
        /// <para>Represents the following element tag in the schema: c15:dlblFieldTableCache.</para>
        /// </summary>
        /// <remark>
        /// xmlns:c15 = http://schemas.microsoft.com/office/drawing/2012/chart
        /// </remark>
        public DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableCache? DataLabelFieldTableCache
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTableCache>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataLabelFieldTableEntry>(deep);
    }
}
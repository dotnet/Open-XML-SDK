// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Validation.Semantic;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.OfficeDocument.Y2006.Custom_Properties
{
    /// <summary>
    /// <para>Custom File Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is op:Properties.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Custom_Properties.CustomDocumentProperty" /> <c>&lt;op:property></c></description></item>
    /// </list>
    /// </remark>
    public partial class Properties : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Properties class.
        /// </summary>
        public Properties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Properties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Properties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Properties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("op:Properties");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Custom_Properties.CustomDocumentProperty>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Custom_Properties.CustomDocumentProperty), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Properties>(deep);

        internal Properties(CustomFilePropertiesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the CustomFilePropertiesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(CustomFilePropertiesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the CustomFilePropertiesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(CustomFilePropertiesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the CustomFilePropertiesPart associated with this element.
        /// </summary>
        public CustomFilePropertiesPart? CustomFilePropertiesPart
        {
            get => OpenXmlPart as CustomFilePropertiesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Custom File Property.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is op:property.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTArray" /> <c>&lt;vt:array></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClipboardData" /> <c>&lt;vt:cf></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTEmpty" /> <c>&lt;vt:empty></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTNull" /> <c>&lt;vt:null></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVector" /> <c>&lt;vt:vector></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVStreamData" /> <c>&lt;vt:vstream></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClassId" /> <c>&lt;vt:clsid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTCurrency" /> <c>&lt;vt:cy></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTError" /> <c>&lt;vt:error></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBlob" /> <c>&lt;vt:blob></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOBlob" /> <c>&lt;vt:oblob></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStreamData" /> <c>&lt;vt:stream></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStreamData" /> <c>&lt;vt:ostream></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStorage" /> <c>&lt;vt:storage></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStorage" /> <c>&lt;vt:ostorage></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBool" /> <c>&lt;vt:bool></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTByte" /> <c>&lt;vt:i1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDate" /> <c>&lt;vt:date></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFileTime" /> <c>&lt;vt:filetime></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDecimal" /> <c>&lt;vt:decimal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDouble" /> <c>&lt;vt:r8></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFloat" /> <c>&lt;vt:r4></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt32" /> <c>&lt;vt:i4></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInteger" /> <c>&lt;vt:int></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt64" /> <c>&lt;vt:i8></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTShort" /> <c>&lt;vt:i2></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPSTR" /> <c>&lt;vt:lpstr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPWSTR" /> <c>&lt;vt:lpwstr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBString" /> <c>&lt;vt:bstr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedByte" /> <c>&lt;vt:ui1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt32" /> <c>&lt;vt:ui4></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInteger" /> <c>&lt;vt:uint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt64" /> <c>&lt;vt:ui8></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedShort" /> <c>&lt;vt:ui2></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomDocumentProperty : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomDocumentProperty class.
        /// </summary>
        public CustomDocumentProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDocumentProperty class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDocumentProperty(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDocumentProperty class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDocumentProperty(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDocumentProperty class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomDocumentProperty(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Format ID</para>
        /// <para>Represents the following attribute in the schema: fmtid</para>
        /// </summary>
        public StringValue? FormatId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Property ID</para>
        /// <para>Represents the following attribute in the schema: pid</para>
        /// </summary>
        public Int32Value? PropertyId
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Custom File Property Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bookmark Link Target</para>
        /// <para>Represents the following attribute in the schema: linkTarget</para>
        /// </summary>
        public StringValue? LinkTarget
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("op:property");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTArray>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClipboardData>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTEmpty>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTNull>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVector>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVStreamData>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClassId>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTCurrency>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTError>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBlob>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOBlob>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStreamData>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStreamData>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStorage>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStorage>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBool>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTByte>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDate>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFileTime>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDecimal>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDouble>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFloat>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt32>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInteger>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt64>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTShort>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPSTR>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPWSTR>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBString>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedByte>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt32>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInteger>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt64>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedShort>();
            builder.AddElement<CustomDocumentProperty>()
                .AddAttribute("fmtid", a => a.FormatId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("\\s*\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}\\s*") });
                })
                .AddAttribute("pid", a => a.PropertyId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("name", a => a.Name)
                .AddAttribute("linkTarget", a => a.LinkTarget);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVector), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTArray), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBlob), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOBlob), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTEmpty), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTNull), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTByte), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTShort), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt32), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt64), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInteger), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedByte), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedShort), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt32), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt64), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInteger), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFloat), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDouble), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDecimal), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPSTR), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPWSTR), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBString), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDate), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFileTime), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBool), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTCurrency), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTError), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStreamData), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStreamData), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStorage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStorage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVStreamData), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClassId), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClipboardData), 1, 1)
            };
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("op:pid"), true, 2, true, double.PositiveInfinity, true));
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("op:name"), false, null));
        }

        /// <summary>
        /// <para>Vector.</para>
        /// <para>Represents the following element tag in the schema: vt:vector.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVector? VTVector
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVector>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Array.</para>
        /// <para>Represents the following element tag in the schema: vt:array.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTArray? VTArray
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTArray>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Blob.</para>
        /// <para>Represents the following element tag in the schema: vt:blob.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBlob? VTBlob
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBlob>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Blob Object.</para>
        /// <para>Represents the following element tag in the schema: vt:oblob.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOBlob? VTOBlob
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOBlob>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Empty.</para>
        /// <para>Represents the following element tag in the schema: vt:empty.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTEmpty? VTEmpty
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTEmpty>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Null.</para>
        /// <para>Represents the following element tag in the schema: vt:null.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTNull? VTNull
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTNull>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>1-Byte Signed Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:i1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTByte? VTByte
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTByte>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>2-Byte Signed Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:i2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTShort? VTShort
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTShort>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>4-Byte Signed Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:i4.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt32? VTInt32
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt32>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>8-Byte Signed Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:i8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt64? VTInt64
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInt64>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:int.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInteger? VTInteger
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTInteger>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>1-Byte Unsigned Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:ui1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedByte? VTUnsignedByte
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedByte>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>2-Byte Unsigned Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:ui2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedShort? VTUnsignedShort
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedShort>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>4-Byte Unsigned Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:ui4.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt32? VTUnsignedInt32
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt32>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>8-Byte Unsigned Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:ui8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt64? VTUnsignedInt64
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInt64>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Unsigned Integer.</para>
        /// <para>Represents the following element tag in the schema: vt:uint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInteger? VTUnsignedInteger
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTUnsignedInteger>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>4-Byte Real Number.</para>
        /// <para>Represents the following element tag in the schema: vt:r4.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFloat? VTFloat
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFloat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>8-Byte Real Number.</para>
        /// <para>Represents the following element tag in the schema: vt:r8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDouble? VTDouble
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDouble>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Decimal.</para>
        /// <para>Represents the following element tag in the schema: vt:decimal.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDecimal? VTDecimal
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDecimal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>LPSTR.</para>
        /// <para>Represents the following element tag in the schema: vt:lpstr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPSTR? VTLPSTR
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPSTR>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>LPWSTR.</para>
        /// <para>Represents the following element tag in the schema: vt:lpwstr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPWSTR? VTLPWSTR
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTLPWSTR>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Basic String.</para>
        /// <para>Represents the following element tag in the schema: vt:bstr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBString? VTBString
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Date and Time.</para>
        /// <para>Represents the following element tag in the schema: vt:date.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDate? VTDate
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTDate>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>File Time.</para>
        /// <para>Represents the following element tag in the schema: vt:filetime.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFileTime? VTFileTime
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTFileTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Boolean.</para>
        /// <para>Represents the following element tag in the schema: vt:bool.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBool? VTBool
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTBool>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Currency.</para>
        /// <para>Represents the following element tag in the schema: vt:cy.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTCurrency? VTCurrency
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTCurrency>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Error Status Code.</para>
        /// <para>Represents the following element tag in the schema: vt:error.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTError? VTError
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTError>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Stream.</para>
        /// <para>Represents the following element tag in the schema: vt:stream.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStreamData? VTStreamData
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStreamData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Stream Object.</para>
        /// <para>Represents the following element tag in the schema: vt:ostream.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStreamData? VTOStreamData
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStreamData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Storage.</para>
        /// <para>Represents the following element tag in the schema: vt:storage.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStorage? VTStorage
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTStorage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Storage Object.</para>
        /// <para>Represents the following element tag in the schema: vt:ostorage.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStorage? VTOStorage
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTOStorage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Binary Versioned Stream.</para>
        /// <para>Represents the following element tag in the schema: vt:vstream.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVStreamData? VTVStreamData
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTVStreamData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Class ID.</para>
        /// <para>Represents the following element tag in the schema: vt:clsid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClassId? VTClassId
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClassId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Clipboard Data.</para>
        /// <para>Represents the following element tag in the schema: vt:cf.</para>
        /// </summary>
        /// <remark>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClipboardData? VTClipboardData
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.DocPropsVTypes.VTClipboardData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomDocumentProperty>(deep);
    }
}
// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography
{
    /// <summary>
    /// <para>Sources.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Sources.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Source" /> <c>&lt;b:Source></c></description></item>
    /// </list>
    /// </remark>
    public partial class Sources : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Sources class.
        /// </summary>
        public Sources() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Sources(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Sources(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Sources(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Selected Style</para>
        /// <para>Represents the following attribute in the schema: SelectedStyle</para>
        /// </summary>
        public StringValue? SelectedStyle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Documentation Style Name</para>
        /// <para>Represents the following attribute in the schema: StyleName</para>
        /// </summary>
        public StringValue? StyleName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Uniform Resource Identifier</para>
        /// <para>Represents the following attribute in the schema: URI</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Sources");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Source>();
            builder.AddElement<Sources>()
                .AddAttribute("SelectedStyle", a => a.SelectedStyle, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                })
                .AddAttribute("StyleName", a => a.StyleName, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                })
                .AddAttribute("URI", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Source), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Sources>(deep);
    }

    /// <summary>
    /// <para>Person.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Person.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Last" /> <c>&lt;b:Last></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.First" /> <c>&lt;b:First></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Middle" /> <c>&lt;b:Middle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Person : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Person class.
        /// </summary>
        public Person() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Person(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Person(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Person(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Person");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Last>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.First>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Middle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Last), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.First), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Middle), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Person>(deep);
    }

    /// <summary>
    /// <para>Person's Last, or Family, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Last.</para>
    /// </summary>
    public partial class Last : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Last class.
        /// </summary>
        public Last() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Last class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Last(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Last");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Last>(deep);
    }

    /// <summary>
    /// <para>Person's First, or Given, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:First.</para>
    /// </summary>
    public partial class First : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the First class.
        /// </summary>
        public First() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the First class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public First(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:First");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<First>(deep);
    }

    /// <summary>
    /// <para>Person's Middle, or Other, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Middle.</para>
    /// </summary>
    public partial class Middle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Middle class.
        /// </summary>
        public Middle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Middle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Middle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Middle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Middle>(deep);
    }

    /// <summary>
    /// <para>Corporate Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Corporate.</para>
    /// </summary>
    public partial class Corporate : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Corporate class.
        /// </summary>
        public Corporate() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Corporate class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Corporate(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Corporate");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Corporate>(deep);
    }

    /// <summary>
    /// <para>Abbreviated Case Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:AbbreviatedCaseNumber.</para>
    /// </summary>
    public partial class AbbreviatedCaseNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the AbbreviatedCaseNumber class.
        /// </summary>
        public AbbreviatedCaseNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbbreviatedCaseNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public AbbreviatedCaseNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:AbbreviatedCaseNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbbreviatedCaseNumber>(deep);
    }

    /// <summary>
    /// <para>Album Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:AlbumTitle.</para>
    /// </summary>
    public partial class AlbumTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the AlbumTitle class.
        /// </summary>
        public AlbumTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlbumTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public AlbumTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:AlbumTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlbumTitle>(deep);
    }

    /// <summary>
    /// <para>Book Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BookTitle.</para>
    /// </summary>
    public partial class BookTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the BookTitle class.
        /// </summary>
        public BookTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BookTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:BookTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookTitle>(deep);
    }

    /// <summary>
    /// <para>Broadcaster.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Broadcaster.</para>
    /// </summary>
    public partial class Broadcaster : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Broadcaster class.
        /// </summary>
        public Broadcaster() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Broadcaster class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Broadcaster(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Broadcaster");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Broadcaster>(deep);
    }

    /// <summary>
    /// <para>Broadcast Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BroadcastTitle.</para>
    /// </summary>
    public partial class BroadcastTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the BroadcastTitle class.
        /// </summary>
        public BroadcastTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BroadcastTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BroadcastTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:BroadcastTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BroadcastTitle>(deep);
    }

    /// <summary>
    /// <para>Case Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:CaseNumber.</para>
    /// </summary>
    public partial class CaseNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the CaseNumber class.
        /// </summary>
        public CaseNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CaseNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public CaseNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:CaseNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CaseNumber>(deep);
    }

    /// <summary>
    /// <para>Chapter Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ChapterNumber.</para>
    /// </summary>
    public partial class ChapterNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ChapterNumber class.
        /// </summary>
        public ChapterNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChapterNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ChapterNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:ChapterNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChapterNumber>(deep);
    }

    /// <summary>
    /// <para>City.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:City.</para>
    /// </summary>
    public partial class City : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the City class.
        /// </summary>
        public City() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the City class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public City(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:City");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<City>(deep);
    }

    /// <summary>
    /// <para>Comments.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Comments.</para>
    /// </summary>
    public partial class Comments : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Comments class.
        /// </summary>
        public Comments() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Comments(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Comments");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comments>(deep);
    }

    /// <summary>
    /// <para>Conference or Proceedings Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ConferenceName.</para>
    /// </summary>
    public partial class ConferenceName : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ConferenceName class.
        /// </summary>
        public ConferenceName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConferenceName class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ConferenceName(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:ConferenceName");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConferenceName>(deep);
    }

    /// <summary>
    /// <para>Country or Region.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:CountryRegion.</para>
    /// </summary>
    public partial class CountryRegion : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the CountryRegion class.
        /// </summary>
        public CountryRegion() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CountryRegion class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public CountryRegion(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:CountryRegion");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CountryRegion>(deep);
    }

    /// <summary>
    /// <para>Court.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Court.</para>
    /// </summary>
    public partial class Court : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Court class.
        /// </summary>
        public Court() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Court class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Court(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Court");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Court>(deep);
    }

    /// <summary>
    /// <para>Day.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Day.</para>
    /// </summary>
    public partial class Day : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Day class.
        /// </summary>
        public Day() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Day class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Day(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Day");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Day>(deep);
    }

    /// <summary>
    /// <para>Day Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:DayAccessed.</para>
    /// </summary>
    public partial class DayAccessed : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the DayAccessed class.
        /// </summary>
        public DayAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DayAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DayAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:DayAccessed");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayAccessed>(deep);
    }

    /// <summary>
    /// <para>Department.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Department.</para>
    /// </summary>
    public partial class Department : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Department class.
        /// </summary>
        public Department() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Department class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Department(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Department");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Department>(deep);
    }

    /// <summary>
    /// <para>Distributor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Distributor.</para>
    /// </summary>
    public partial class Distributor : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Distributor class.
        /// </summary>
        public Distributor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Distributor class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Distributor(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Distributor");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Distributor>(deep);
    }

    /// <summary>
    /// <para>Editor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Edition.</para>
    /// </summary>
    public partial class Edition : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Edition class.
        /// </summary>
        public Edition() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Edition class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Edition(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Edition");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Edition>(deep);
    }

    /// <summary>
    /// <para>GUID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Guid.</para>
    /// </summary>
    public partial class GuidString : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the GuidString class.
        /// </summary>
        public GuidString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GuidString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public GuidString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Guid");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GuidString>(deep);
    }

    /// <summary>
    /// <para>Institution.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Institution.</para>
    /// </summary>
    public partial class Institution : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Institution class.
        /// </summary>
        public Institution() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Institution class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Institution(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Institution");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Institution>(deep);
    }

    /// <summary>
    /// <para>Internet Site Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:InternetSiteTitle.</para>
    /// </summary>
    public partial class InternetSiteTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the InternetSiteTitle class.
        /// </summary>
        public InternetSiteTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InternetSiteTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public InternetSiteTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:InternetSiteTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InternetSiteTitle>(deep);
    }

    /// <summary>
    /// <para>Issue.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Issue.</para>
    /// </summary>
    public partial class Issue : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Issue class.
        /// </summary>
        public Issue() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Issue class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Issue(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Issue");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Issue>(deep);
    }

    /// <summary>
    /// <para>Journal Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:JournalName.</para>
    /// </summary>
    public partial class JournalName : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the JournalName class.
        /// </summary>
        public JournalName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the JournalName class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public JournalName(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:JournalName");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<JournalName>(deep);
    }

    /// <summary>
    /// <para>Locale ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:LCID.</para>
    /// </summary>
    public partial class LcId : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the LcId class.
        /// </summary>
        public LcId() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LcId class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public LcId(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:LCID");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LcId>(deep);
    }

    /// <summary>
    /// <para>Medium.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Medium.</para>
    /// </summary>
    public partial class Medium : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Medium class.
        /// </summary>
        public Medium() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Medium class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Medium(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Medium");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Medium>(deep);
    }

    /// <summary>
    /// <para>Month.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Month.</para>
    /// </summary>
    public partial class Month : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Month class.
        /// </summary>
        public Month() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Month class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Month(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Month");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Month>(deep);
    }

    /// <summary>
    /// <para>Month Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:MonthAccessed.</para>
    /// </summary>
    public partial class MonthAccessed : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the MonthAccessed class.
        /// </summary>
        public MonthAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MonthAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public MonthAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:MonthAccessed");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthAccessed>(deep);
    }

    /// <summary>
    /// <para>Number of Volumes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:NumberVolumes.</para>
    /// </summary>
    public partial class NumberVolumes : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberVolumes class.
        /// </summary>
        public NumberVolumes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberVolumes class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public NumberVolumes(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:NumberVolumes");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberVolumes>(deep);
    }

    /// <summary>
    /// <para>Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Pages.</para>
    /// </summary>
    public partial class Pages : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Pages class.
        /// </summary>
        public Pages() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Pages class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Pages(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Pages");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pages>(deep);
    }

    /// <summary>
    /// <para>Patent Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PatentNumber.</para>
    /// </summary>
    public partial class PatentNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the PatentNumber class.
        /// </summary>
        public PatentNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatentNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PatentNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:PatentNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatentNumber>(deep);
    }

    /// <summary>
    /// <para>Periodical Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PeriodicalTitle.</para>
    /// </summary>
    public partial class PeriodicalTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the PeriodicalTitle class.
        /// </summary>
        public PeriodicalTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PeriodicalTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PeriodicalTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:PeriodicalTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PeriodicalTitle>(deep);
    }

    /// <summary>
    /// <para>Production Company.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ProductionCompany.</para>
    /// </summary>
    public partial class ProductionCompany : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ProductionCompany class.
        /// </summary>
        public ProductionCompany() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProductionCompany class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ProductionCompany(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:ProductionCompany");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProductionCompany>(deep);
    }

    /// <summary>
    /// <para>Publication Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PublicationTitle.</para>
    /// </summary>
    public partial class PublicationTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the PublicationTitle class.
        /// </summary>
        public PublicationTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PublicationTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PublicationTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:PublicationTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PublicationTitle>(deep);
    }

    /// <summary>
    /// <para>Publisher.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Publisher.</para>
    /// </summary>
    public partial class Publisher : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Publisher class.
        /// </summary>
        public Publisher() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Publisher class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Publisher(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Publisher");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Publisher>(deep);
    }

    /// <summary>
    /// <para>Recording Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:RecordingNumber.</para>
    /// </summary>
    public partial class RecordingNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the RecordingNumber class.
        /// </summary>
        public RecordingNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecordingNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public RecordingNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:RecordingNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecordingNumber>(deep);
    }

    /// <summary>
    /// <para>Reference Order.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:RefOrder.</para>
    /// </summary>
    public partial class ReferenceOrder : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ReferenceOrder class.
        /// </summary>
        public ReferenceOrder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ReferenceOrder class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ReferenceOrder(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:RefOrder");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReferenceOrder>(deep);
    }

    /// <summary>
    /// <para>Reporter.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Reporter.</para>
    /// </summary>
    public partial class Reporter : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Reporter class.
        /// </summary>
        public Reporter() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Reporter class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Reporter(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Reporter");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reporter>(deep);
    }

    /// <summary>
    /// <para>Short Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ShortTitle.</para>
    /// </summary>
    public partial class ShortTitle : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ShortTitle class.
        /// </summary>
        public ShortTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShortTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ShortTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:ShortTitle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShortTitle>(deep);
    }

    /// <summary>
    /// <para>Standard Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:StandardNumber.</para>
    /// </summary>
    public partial class StandardNumber : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the StandardNumber class.
        /// </summary>
        public StandardNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StandardNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public StandardNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:StandardNumber");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StandardNumber>(deep);
    }

    /// <summary>
    /// <para>State or Province.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:StateProvince.</para>
    /// </summary>
    public partial class StateProvince : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the StateProvince class.
        /// </summary>
        public StateProvince() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StateProvince class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public StateProvince(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:StateProvince");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StateProvince>(deep);
    }

    /// <summary>
    /// <para>Station.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Station.</para>
    /// </summary>
    public partial class Station : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Station class.
        /// </summary>
        public Station() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Station class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Station(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Station");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Station>(deep);
    }

    /// <summary>
    /// <para>Tag.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Tag.</para>
    /// </summary>
    public partial class Tag : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tag class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Tag(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Tag");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tag>(deep);
    }

    /// <summary>
    /// <para>Theater.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Theater.</para>
    /// </summary>
    public partial class Theater : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Theater class.
        /// </summary>
        public Theater() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theater class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Theater(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Theater");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Theater>(deep);
    }

    /// <summary>
    /// <para>Thesis Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ThesisType.</para>
    /// </summary>
    public partial class ThesisType : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the ThesisType class.
        /// </summary>
        public ThesisType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThesisType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ThesisType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:ThesisType");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThesisType>(deep);
    }

    /// <summary>
    /// <para>Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Title.</para>
    /// </summary>
    public partial class Title : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Title class.
        /// </summary>
        public Title() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Title class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Title(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Title");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Title>(deep);
    }

    /// <summary>
    /// <para>Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Type.</para>
    /// </summary>
    public partial class PatentType : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the PatentType class.
        /// </summary>
        public PatentType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatentType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PatentType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Type");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatentType>(deep);
    }

    /// <summary>
    /// <para>URL.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:URL.</para>
    /// </summary>
    public partial class UrlString : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the UrlString class.
        /// </summary>
        public UrlString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UrlString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public UrlString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:URL");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UrlString>(deep);
    }

    /// <summary>
    /// <para>Version.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Version.</para>
    /// </summary>
    public partial class Version : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Version class.
        /// </summary>
        public Version() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Version class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Version(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Version");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Version>(deep);
    }

    /// <summary>
    /// <para>Volume.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Volume.</para>
    /// </summary>
    public partial class Volume : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Volume class.
        /// </summary>
        public Volume() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Volume class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Volume(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Volume");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Volume>(deep);
    }

    /// <summary>
    /// <para>Year.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Year.</para>
    /// </summary>
    public partial class Year : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Year class.
        /// </summary>
        public Year() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Year class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Year(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:Year");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Year>(deep);
    }

    /// <summary>
    /// <para>Year Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:YearAccessed.</para>
    /// </summary>
    public partial class YearAccessed : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the YearAccessed class.
        /// </summary>
        public YearAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the YearAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public YearAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema("b:YearAccessed");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearAccessed>(deep);
    }

    /// <summary>
    /// <para>Name List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:NameList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Person" /> <c>&lt;b:Person></c></description></item>
    /// </list>
    /// </remark>
    public partial class NameList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NameList class.
        /// </summary>
        public NameList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NameList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NameList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NameList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:NameList");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Person>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Person), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NameList>(deep);
    }

    /// <summary>
    /// <para>Artist.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Artist.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Artist : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Artist class.
        /// </summary>
        public Artist() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Artist(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Artist(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Artist(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Artist");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Artist>(deep);
    }

    /// <summary>
    /// <para>Book Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BookAuthor.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class BookAuthor : NameType
    {
        /// <summary>
        /// Initializes a new instance of the BookAuthor class.
        /// </summary>
        public BookAuthor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BookAuthor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BookAuthor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BookAuthor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:BookAuthor");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookAuthor>(deep);
    }

    /// <summary>
    /// <para>Compiler.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Compiler.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Compiler : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Compiler class.
        /// </summary>
        public Compiler() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compiler(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compiler(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Compiler(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Compiler");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Compiler>(deep);
    }

    /// <summary>
    /// <para>Composer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Composer.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Composer : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Composer class.
        /// </summary>
        public Composer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Composer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Composer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Composer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Composer");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Composer>(deep);
    }

    /// <summary>
    /// <para>Conductor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Conductor.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Conductor : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Conductor class.
        /// </summary>
        public Conductor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Conductor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Conductor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Conductor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Conductor");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Conductor>(deep);
    }

    /// <summary>
    /// <para>Counsel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Counsel.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Counsel : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Counsel class.
        /// </summary>
        public Counsel() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Counsel(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Counsel(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Counsel(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Counsel");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Counsel>(deep);
    }

    /// <summary>
    /// <para>Director.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Director.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Director : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Director class.
        /// </summary>
        public Director() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Director(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Director(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Director(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Director");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Director>(deep);
    }

    /// <summary>
    /// <para>Editor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Editor.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Editor : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Editor class.
        /// </summary>
        public Editor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Editor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Editor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Editor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Editor");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Editor>(deep);
    }

    /// <summary>
    /// <para>Interviewee.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Interviewee.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Interviewee : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Interviewee class.
        /// </summary>
        public Interviewee() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewee(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewee(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Interviewee(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Interviewee");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Interviewee>(deep);
    }

    /// <summary>
    /// <para>Interviewer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Interviewer.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Interviewer : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Interviewer class.
        /// </summary>
        public Interviewer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Interviewer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Interviewer");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Interviewer>(deep);
    }

    /// <summary>
    /// <para>Inventor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Inventor.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Inventor : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Inventor class.
        /// </summary>
        public Inventor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Inventor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Inventor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Inventor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Inventor");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inventor>(deep);
    }

    /// <summary>
    /// <para>Producer Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ProducerName.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class ProducerName : NameType
    {
        /// <summary>
        /// Initializes a new instance of the ProducerName class.
        /// </summary>
        public ProducerName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ProducerName(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ProducerName(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ProducerName(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:ProducerName");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProducerName>(deep);
    }

    /// <summary>
    /// <para>Translator.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Translator.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Translator : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Translator class.
        /// </summary>
        public Translator() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Translator(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Translator(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Translator(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Translator");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Translator>(deep);
    }

    /// <summary>
    /// <para>Writer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Writer.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public partial class Writer : NameType
    {
        /// <summary>
        /// Initializes a new instance of the Writer class.
        /// </summary>
        public Writer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Writer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Writer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Writer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Writer");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Writer>(deep);
    }

    /// <summary>
    /// <para>Defines the NameType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class NameType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NameType class.
        /// </summary>
        protected NameType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected NameType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList>();
        }

        /// <summary>
        /// <para>Name List.</para>
        /// <para>Represents the following element tag in the schema: b:NameList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList? NameList
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Author.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remark>
    public partial class Author : NameOrCorporateType
    {
        /// <summary>
        /// Initializes a new instance of the Author class.
        /// </summary>
        public Author() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Author(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Author(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Author(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Author");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Author>(deep);
    }

    /// <summary>
    /// <para>Performer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Performer.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remark>
    public partial class Performer : NameOrCorporateType
    {
        /// <summary>
        /// Initializes a new instance of the Performer class.
        /// </summary>
        public Performer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Performer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Performer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Performer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Performer");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Performer>(deep);
    }

    /// <summary>
    /// <para>Defines the NameOrCorporateType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class NameOrCorporateType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class.
        /// </summary>
        protected NameOrCorporateType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameOrCorporateType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameOrCorporateType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected NameOrCorporateType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate>();
        }

        /// <summary>
        /// <para>NameList.</para>
        /// <para>Represents the following element tag in the schema: b:NameList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList? NameList
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NameList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Corporate Author.</para>
        /// <para>Represents the following element tag in the schema: b:Corporate.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate? Corporate
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Corporate>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Contributors List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Author.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Author" /> <c>&lt;b:Author></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Performer" /> <c>&lt;b:Performer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Artist" /> <c>&lt;b:Artist></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookAuthor" /> <c>&lt;b:BookAuthor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Compiler" /> <c>&lt;b:Compiler></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Composer" /> <c>&lt;b:Composer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Conductor" /> <c>&lt;b:Conductor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Counsel" /> <c>&lt;b:Counsel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Director" /> <c>&lt;b:Director></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Editor" /> <c>&lt;b:Editor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewee" /> <c>&lt;b:Interviewee></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewer" /> <c>&lt;b:Interviewer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Inventor" /> <c>&lt;b:Inventor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProducerName" /> <c>&lt;b:ProducerName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Translator" /> <c>&lt;b:Translator></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Writer" /> <c>&lt;b:Writer></c></description></item>
    /// </list>
    /// </remark>
    public partial class AuthorList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AuthorList class.
        /// </summary>
        public AuthorList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AuthorList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AuthorList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AuthorList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Author");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Author>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Performer>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Artist>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookAuthor>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Compiler>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Composer>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Conductor>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Counsel>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Director>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Editor>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewee>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewer>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Inventor>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProducerName>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Translator>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Writer>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Artist), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Author), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookAuthor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Compiler), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Composer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Conductor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Counsel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Director), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Editor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewee), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Inventor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Performer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProducerName), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Translator), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Writer), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>Artist.</para>
        /// <para>Represents the following element tag in the schema: b:Artist.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Artist? Artist
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Artist>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Author.</para>
        /// <para>Represents the following element tag in the schema: b:Author.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Author? Author
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Author>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Book Author.</para>
        /// <para>Represents the following element tag in the schema: b:BookAuthor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookAuthor? BookAuthor
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookAuthor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Compiler.</para>
        /// <para>Represents the following element tag in the schema: b:Compiler.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Compiler? Compiler
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Compiler>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Composer.</para>
        /// <para>Represents the following element tag in the schema: b:Composer.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Composer? Composer
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Composer>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Conductor.</para>
        /// <para>Represents the following element tag in the schema: b:Conductor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Conductor? Conductor
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Conductor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Counsel.</para>
        /// <para>Represents the following element tag in the schema: b:Counsel.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Counsel? Counsel
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Counsel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Director.</para>
        /// <para>Represents the following element tag in the schema: b:Director.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Director? Director
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Director>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Editor.</para>
        /// <para>Represents the following element tag in the schema: b:Editor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Editor? Editor
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Editor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Interviewee.</para>
        /// <para>Represents the following element tag in the schema: b:Interviewee.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewee? Interviewee
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewee>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Interviewer.</para>
        /// <para>Represents the following element tag in the schema: b:Interviewer.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewer? Interviewer
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Interviewer>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inventor.</para>
        /// <para>Represents the following element tag in the schema: b:Inventor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Inventor? Inventor
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Inventor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Performer.</para>
        /// <para>Represents the following element tag in the schema: b:Performer.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Performer? Performer
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Performer>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Producer Name.</para>
        /// <para>Represents the following element tag in the schema: b:ProducerName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProducerName? ProducerName
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProducerName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Translator.</para>
        /// <para>Represents the following element tag in the schema: b:Translator.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Translator? Translator
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Translator>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Writer.</para>
        /// <para>Represents the following element tag in the schema: b:Writer.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Writer? Writer
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Writer>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AuthorList>(deep);
    }

    /// <summary>
    /// <para>Source Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:SourceType.</para>
    /// </summary>
    public partial class SourceType : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the SourceType class.
        /// </summary>
        public SourceType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SourceType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public SourceType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new EnumValue<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DataSourceValues> { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<EnumValue<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DataSourceValues>>(EnumValidator.Instance);
            builder.SetSchema("b:SourceType");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceType>(deep);
    }

    /// <summary>
    /// <para>Source.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Source.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AuthorList" /> <c>&lt;b:Author></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.SourceType" /> <c>&lt;b:SourceType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AbbreviatedCaseNumber" /> <c>&lt;b:AbbreviatedCaseNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AlbumTitle" /> <c>&lt;b:AlbumTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookTitle" /> <c>&lt;b:BookTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Broadcaster" /> <c>&lt;b:Broadcaster></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BroadcastTitle" /> <c>&lt;b:BroadcastTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CaseNumber" /> <c>&lt;b:CaseNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ChapterNumber" /> <c>&lt;b:ChapterNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.City" /> <c>&lt;b:City></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Comments" /> <c>&lt;b:Comments></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ConferenceName" /> <c>&lt;b:ConferenceName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CountryRegion" /> <c>&lt;b:CountryRegion></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Court" /> <c>&lt;b:Court></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Day" /> <c>&lt;b:Day></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DayAccessed" /> <c>&lt;b:DayAccessed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Department" /> <c>&lt;b:Department></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Distributor" /> <c>&lt;b:Distributor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Edition" /> <c>&lt;b:Edition></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.GuidString" /> <c>&lt;b:Guid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Institution" /> <c>&lt;b:Institution></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.InternetSiteTitle" /> <c>&lt;b:InternetSiteTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Issue" /> <c>&lt;b:Issue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.JournalName" /> <c>&lt;b:JournalName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.LcId" /> <c>&lt;b:LCID></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Medium" /> <c>&lt;b:Medium></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Month" /> <c>&lt;b:Month></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.MonthAccessed" /> <c>&lt;b:MonthAccessed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NumberVolumes" /> <c>&lt;b:NumberVolumes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Pages" /> <c>&lt;b:Pages></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentNumber" /> <c>&lt;b:PatentNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PeriodicalTitle" /> <c>&lt;b:PeriodicalTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProductionCompany" /> <c>&lt;b:ProductionCompany></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PublicationTitle" /> <c>&lt;b:PublicationTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Publisher" /> <c>&lt;b:Publisher></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.RecordingNumber" /> <c>&lt;b:RecordingNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ReferenceOrder" /> <c>&lt;b:RefOrder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Reporter" /> <c>&lt;b:Reporter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ShortTitle" /> <c>&lt;b:ShortTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StandardNumber" /> <c>&lt;b:StandardNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StateProvince" /> <c>&lt;b:StateProvince></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Station" /> <c>&lt;b:Station></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Tag" /> <c>&lt;b:Tag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Theater" /> <c>&lt;b:Theater></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ThesisType" /> <c>&lt;b:ThesisType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Title" /> <c>&lt;b:Title></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentType" /> <c>&lt;b:Type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.UrlString" /> <c>&lt;b:URL></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Version" /> <c>&lt;b:Version></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Volume" /> <c>&lt;b:Volume></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Year" /> <c>&lt;b:Year></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.YearAccessed" /> <c>&lt;b:YearAccessed></c></description></item>
    /// </list>
    /// </remark>
    public partial class Source : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Source class.
        /// </summary>
        public Source() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Source(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Source(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Source(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("b:Source");
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AuthorList>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.SourceType>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AbbreviatedCaseNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AlbumTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Broadcaster>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BroadcastTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CaseNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ChapterNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.City>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Comments>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ConferenceName>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CountryRegion>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Court>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Day>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DayAccessed>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Department>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Distributor>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Edition>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.GuidString>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Institution>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.InternetSiteTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Issue>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.JournalName>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.LcId>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Medium>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Month>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.MonthAccessed>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NumberVolumes>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Pages>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PeriodicalTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProductionCompany>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PublicationTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Publisher>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.RecordingNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ReferenceOrder>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Reporter>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ShortTitle>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StandardNumber>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StateProvince>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Station>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Tag>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Theater>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ThesisType>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Title>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentType>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.UrlString>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Version>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Volume>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Year>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.YearAccessed>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AbbreviatedCaseNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AlbumTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AuthorList), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Broadcaster), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BroadcastTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CaseNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ChapterNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.City), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Comments), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ConferenceName), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CountryRegion), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Court), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Day), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DayAccessed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Department), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Distributor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Edition), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.GuidString), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Institution), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.InternetSiteTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Issue), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.JournalName), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.LcId), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Medium), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Month), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.MonthAccessed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NumberVolumes), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Pages), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PeriodicalTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProductionCompany), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PublicationTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Publisher), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.RecordingNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ReferenceOrder), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Reporter), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.SourceType), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ShortTitle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StandardNumber), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StateProvince), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Station), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Tag), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Theater), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ThesisType), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Title), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentType), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.UrlString), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Version), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Volume), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Year), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.YearAccessed), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>Abbreviated Case Number.</para>
        /// <para>Represents the following element tag in the schema: b:AbbreviatedCaseNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AbbreviatedCaseNumber? AbbreviatedCaseNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AbbreviatedCaseNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Album Title.</para>
        /// <para>Represents the following element tag in the schema: b:AlbumTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AlbumTitle? AlbumTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AlbumTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Contributors List.</para>
        /// <para>Represents the following element tag in the schema: b:Author.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AuthorList? AuthorList
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.AuthorList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Book Title.</para>
        /// <para>Represents the following element tag in the schema: b:BookTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookTitle? BookTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BookTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Broadcaster.</para>
        /// <para>Represents the following element tag in the schema: b:Broadcaster.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Broadcaster? Broadcaster
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Broadcaster>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Broadcast Title.</para>
        /// <para>Represents the following element tag in the schema: b:BroadcastTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BroadcastTitle? BroadcastTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.BroadcastTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Case Number.</para>
        /// <para>Represents the following element tag in the schema: b:CaseNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CaseNumber? CaseNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CaseNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Chapter Number.</para>
        /// <para>Represents the following element tag in the schema: b:ChapterNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ChapterNumber? ChapterNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ChapterNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>City.</para>
        /// <para>Represents the following element tag in the schema: b:City.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.City? City
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.City>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Comments.</para>
        /// <para>Represents the following element tag in the schema: b:Comments.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Comments? Comments
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Comments>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Conference or Proceedings Name.</para>
        /// <para>Represents the following element tag in the schema: b:ConferenceName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ConferenceName? ConferenceName
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ConferenceName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Country or Region.</para>
        /// <para>Represents the following element tag in the schema: b:CountryRegion.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CountryRegion? CountryRegion
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.CountryRegion>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Court.</para>
        /// <para>Represents the following element tag in the schema: b:Court.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Court? Court
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Court>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Day.</para>
        /// <para>Represents the following element tag in the schema: b:Day.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Day? Day
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Day>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Day Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:DayAccessed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DayAccessed? DayAccessed
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.DayAccessed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Department.</para>
        /// <para>Represents the following element tag in the schema: b:Department.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Department? Department
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Department>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Distributor.</para>
        /// <para>Represents the following element tag in the schema: b:Distributor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Distributor? Distributor
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Distributor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Editor.</para>
        /// <para>Represents the following element tag in the schema: b:Edition.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Edition? Edition
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Edition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GUID.</para>
        /// <para>Represents the following element tag in the schema: b:Guid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.GuidString? GuidString
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.GuidString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Institution.</para>
        /// <para>Represents the following element tag in the schema: b:Institution.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Institution? Institution
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Institution>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Internet Site Title.</para>
        /// <para>Represents the following element tag in the schema: b:InternetSiteTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.InternetSiteTitle? InternetSiteTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.InternetSiteTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Issue.</para>
        /// <para>Represents the following element tag in the schema: b:Issue.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Issue? Issue
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Issue>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Journal Name.</para>
        /// <para>Represents the following element tag in the schema: b:JournalName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.JournalName? JournalName
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.JournalName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Locale ID.</para>
        /// <para>Represents the following element tag in the schema: b:LCID.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.LcId? LcId
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.LcId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Medium.</para>
        /// <para>Represents the following element tag in the schema: b:Medium.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Medium? Medium
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Medium>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Month.</para>
        /// <para>Represents the following element tag in the schema: b:Month.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Month? Month
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Month>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Month Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:MonthAccessed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.MonthAccessed? MonthAccessed
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.MonthAccessed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Number of Volumes.</para>
        /// <para>Represents the following element tag in the schema: b:NumberVolumes.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NumberVolumes? NumberVolumes
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.NumberVolumes>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pages.</para>
        /// <para>Represents the following element tag in the schema: b:Pages.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Pages? Pages
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Pages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Patent Number.</para>
        /// <para>Represents the following element tag in the schema: b:PatentNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentNumber? PatentNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Periodical Title.</para>
        /// <para>Represents the following element tag in the schema: b:PeriodicalTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PeriodicalTitle? PeriodicalTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PeriodicalTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Production Company.</para>
        /// <para>Represents the following element tag in the schema: b:ProductionCompany.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProductionCompany? ProductionCompany
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ProductionCompany>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Publication Title.</para>
        /// <para>Represents the following element tag in the schema: b:PublicationTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PublicationTitle? PublicationTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PublicationTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Publisher.</para>
        /// <para>Represents the following element tag in the schema: b:Publisher.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Publisher? Publisher
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Publisher>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Recording Number.</para>
        /// <para>Represents the following element tag in the schema: b:RecordingNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.RecordingNumber? RecordingNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.RecordingNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reference Order.</para>
        /// <para>Represents the following element tag in the schema: b:RefOrder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ReferenceOrder? ReferenceOrder
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ReferenceOrder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reporter.</para>
        /// <para>Represents the following element tag in the schema: b:Reporter.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Reporter? Reporter
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Reporter>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Source Type.</para>
        /// <para>Represents the following element tag in the schema: b:SourceType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.SourceType? SourceType
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.SourceType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Short Title.</para>
        /// <para>Represents the following element tag in the schema: b:ShortTitle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ShortTitle? ShortTitle
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ShortTitle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Standard Number.</para>
        /// <para>Represents the following element tag in the schema: b:StandardNumber.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StandardNumber? StandardNumber
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StandardNumber>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>State or Province.</para>
        /// <para>Represents the following element tag in the schema: b:StateProvince.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StateProvince? StateProvince
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.StateProvince>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Station.</para>
        /// <para>Represents the following element tag in the schema: b:Station.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Station? Station
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Station>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tag.</para>
        /// <para>Represents the following element tag in the schema: b:Tag.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Tag? Tag
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Tag>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Theater.</para>
        /// <para>Represents the following element tag in the schema: b:Theater.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Theater? Theater
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Theater>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Thesis Type.</para>
        /// <para>Represents the following element tag in the schema: b:ThesisType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ThesisType? ThesisType
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.ThesisType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Title.</para>
        /// <para>Represents the following element tag in the schema: b:Title.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Title? Title
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Title>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Type.</para>
        /// <para>Represents the following element tag in the schema: b:Type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentType? PatentType
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.PatentType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>URL.</para>
        /// <para>Represents the following element tag in the schema: b:URL.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.UrlString? UrlString
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.UrlString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Version.</para>
        /// <para>Represents the following element tag in the schema: b:Version.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Version? Version
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Version>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Volume.</para>
        /// <para>Represents the following element tag in the schema: b:Volume.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Volume? Volume
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Volume>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Year.</para>
        /// <para>Represents the following element tag in the schema: b:Year.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Year? Year
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.Year>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Year Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:YearAccessed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remark>
        public DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.YearAccessed? YearAccessed
        {
            get => GetElement<DocumentFormat.OpenXml.OfficeDocument.Y2006.Bibliography.YearAccessed>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Source>(deep);
    }

    /// <summary>
    /// Bibliographic Data Source Types
    /// </summary>
    public enum DataSourceValues
    {
        /// <summary>
        /// Article in a Periodical.
        /// <para>When the item is serialized out as xml, its value is "ArticleInAPeriodical".</para>
        /// </summary>
        [EnumString("ArticleInAPeriodical")]
        ArticleInAPeriodical,
        /// <summary>
        /// Book.
        /// <para>When the item is serialized out as xml, its value is "Book".</para>
        /// </summary>
        [EnumString("Book")]
        Book,
        /// <summary>
        /// Book Section.
        /// <para>When the item is serialized out as xml, its value is "BookSection".</para>
        /// </summary>
        [EnumString("BookSection")]
        BookSection,
        /// <summary>
        /// Journal Article.
        /// <para>When the item is serialized out as xml, its value is "JournalArticle".</para>
        /// </summary>
        [EnumString("JournalArticle")]
        JournalArticle,
        /// <summary>
        /// Conference Proceedings.
        /// <para>When the item is serialized out as xml, its value is "ConferenceProceedings".</para>
        /// </summary>
        [EnumString("ConferenceProceedings")]
        ConferenceProceedings,
        /// <summary>
        /// Reporter.
        /// <para>When the item is serialized out as xml, its value is "Report".</para>
        /// </summary>
        [EnumString("Report")]
        Report,
        /// <summary>
        /// Sound Recording.
        /// <para>When the item is serialized out as xml, its value is "SoundRecording".</para>
        /// </summary>
        [EnumString("SoundRecording")]
        SoundRecording,
        /// <summary>
        /// Performance.
        /// <para>When the item is serialized out as xml, its value is "Performance".</para>
        /// </summary>
        [EnumString("Performance")]
        Performance,
        /// <summary>
        /// Art.
        /// <para>When the item is serialized out as xml, its value is "Art".</para>
        /// </summary>
        [EnumString("Art")]
        Art,
        /// <summary>
        /// Document from Internet Site.
        /// <para>When the item is serialized out as xml, its value is "DocumentFromInternetSite".</para>
        /// </summary>
        [EnumString("DocumentFromInternetSite")]
        DocumentFromInternetSite,
        /// <summary>
        /// Internet Site.
        /// <para>When the item is serialized out as xml, its value is "InternetSite".</para>
        /// </summary>
        [EnumString("InternetSite")]
        InternetSite,
        /// <summary>
        /// Film.
        /// <para>When the item is serialized out as xml, its value is "Film".</para>
        /// </summary>
        [EnumString("Film")]
        Film,
        /// <summary>
        /// Interview.
        /// <para>When the item is serialized out as xml, its value is "Interview".</para>
        /// </summary>
        [EnumString("Interview")]
        Interview,
        /// <summary>
        /// Patent.
        /// <para>When the item is serialized out as xml, its value is "Patent".</para>
        /// </summary>
        [EnumString("Patent")]
        Patent,
        /// <summary>
        /// Electronic Source.
        /// <para>When the item is serialized out as xml, its value is "ElectronicSource".</para>
        /// </summary>
        [EnumString("ElectronicSource")]
        ElectronicSource,
        /// <summary>
        /// Case.
        /// <para>When the item is serialized out as xml, its value is "Case".</para>
        /// </summary>
        [EnumString("Case")]
        Case,
        /// <summary>
        /// Miscellaneous.
        /// <para>When the item is serialized out as xml, its value is "Misc".</para>
        /// </summary>
        [EnumString("Misc")]
        Miscellaneous
    }
}
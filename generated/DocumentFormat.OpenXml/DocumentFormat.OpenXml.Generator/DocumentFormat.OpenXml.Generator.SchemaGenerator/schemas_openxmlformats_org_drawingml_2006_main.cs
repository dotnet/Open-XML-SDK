// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram;
using DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram;
using DocumentFormat.OpenXml.Office.Drawing.Y2010.Main;
using DocumentFormat.OpenXml.Office.Drawing.Y2012.Main;
using DocumentFormat.OpenXml.Office.Drawing.Y2014.Main;
using DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main;
using DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main;
using DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative;
using DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor;
using DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes;
using DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape;
using DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed;
using DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed;
using DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink;
using DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main;
using DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed;
using DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Validation.Semantic;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.DrawingML.Y2006.Main
{
    /// <summary>
    /// <para>Audio from CD.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:audioCd.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartTime" /> <c>&lt;a:st></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndTime" /> <c>&lt;a:end></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class AudioFromCD : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioFromCD class.
        /// </summary>
        public AudioFromCD() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromCD(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromCD(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromCD class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AudioFromCD(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:audioCd");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartTime>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndTime>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartTime), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndTime), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Audio Start Time.</para>
        /// <para>Represents the following element tag in the schema: a:st.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartTime? StartTime
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Audio End Time.</para>
        /// <para>Represents the following element tag in the schema: a:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndTime? EndTime
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromCD>(deep);
    }

    /// <summary>
    /// <para>Audio from WAV File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:wavAudioFile.</para>
    /// </summary>
    public partial class WaveAudioFile : EmbeddedWavAudioFileType
    {
        /// <summary>
        /// Initializes a new instance of the WaveAudioFile class.
        /// </summary>
        public WaveAudioFile() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:wavAudioFile");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WaveAudioFile>(deep);
    }

    /// <summary>
    /// <para>Sound to play..</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:snd.</para>
    /// </summary>
    public partial class HyperlinkSound : EmbeddedWavAudioFileType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkSound class.
        /// </summary>
        public HyperlinkSound() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:snd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkSound>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbeddedWavAudioFileType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmbeddedWavAudioFileType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmbeddedWavAudioFileType class.
        /// </summary>
        protected EmbeddedWavAudioFileType() : base()
        {
        }

        /// <summary>
        /// <para>Embedded Audio File Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:embed</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Embed
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Sound Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Recognized Built-In Sound</para>
        /// <para>Represents the following attribute in the schema: builtIn</para>
        /// </summary>
        public BooleanValue? BuiltIn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<EmbeddedWavAudioFileType>()
                .AddAttribute("r:embed", a => a.Embed, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("name", a => a.Name)
                .AddAttribute("builtIn", a => a.BuiltIn);
        }
    }

    /// <summary>
    /// <para>Audio from File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:audioFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class AudioFromFile : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioFromFile class.
        /// </summary>
        public AudioFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AudioFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AudioFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AudioFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:audioFile");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<AudioFromFile>()
                .AddAttribute("r:link", a => a.Link, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AudioFromFile>(deep);
    }

    /// <summary>
    /// <para>Video from File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:videoFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class VideoFromFile : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the VideoFromFile class.
        /// </summary>
        public VideoFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VideoFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VideoFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public VideoFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:videoFile");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<VideoFromFile>()
                .AddAttribute("r:link", a => a.Link, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VideoFromFile>(deep);
    }

    /// <summary>
    /// <para>QuickTime from File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:quickTimeFile.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class QuickTimeFromFile : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class.
        /// </summary>
        public QuickTimeFromFile() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuickTimeFromFile(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuickTimeFromFile(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuickTimeFromFile class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public QuickTimeFromFile(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Linked Relationship ID</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:quickTimeFile");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<QuickTimeFromFile>()
                .AddAttribute("r:link", a => a.Link, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuickTimeFromFile>(deep);
    }

    /// <summary>
    /// <para>Tint.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tint.</para>
    /// </summary>
    public partial class Tint : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Tint class.
        /// </summary>
        public Tint() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tint");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tint>(deep);
    }

    /// <summary>
    /// <para>Shade.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:shade.</para>
    /// </summary>
    public partial class Shade : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Shade class.
        /// </summary>
        public Shade() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:shade");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shade>(deep);
    }

    /// <summary>
    /// <para>Alpha.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alpha.</para>
    /// </summary>
    public partial class Alpha : PositiveFixedPercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Alpha class.
        /// </summary>
        public Alpha() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alpha");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Alpha>(deep);
    }

    /// <summary>
    /// <para>Defines the PositiveFixedPercentageType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositiveFixedPercentageType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositiveFixedPercentageType class.
        /// </summary>
        protected PositiveFixedPercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositiveFixedPercentageType>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                });
        }
    }

    /// <summary>
    /// <para>Complement.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:comp.</para>
    /// </summary>
    public partial class Complement : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Complement class.
        /// </summary>
        public Complement() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:comp");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Complement>(deep);
    }

    /// <summary>
    /// <para>Inverse.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:inv.</para>
    /// </summary>
    public partial class Inverse : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Inverse class.
        /// </summary>
        public Inverse() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:inv");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inverse>(deep);
    }

    /// <summary>
    /// <para>Gray.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gray.</para>
    /// </summary>
    public partial class Gray : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gray class.
        /// </summary>
        public Gray() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gray");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gray>(deep);
    }

    /// <summary>
    /// <para>Alpha Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaOff.</para>
    /// </summary>
    public partial class AlphaOffset : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaOffset class.
        /// </summary>
        public AlphaOffset() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaOff");
            builder.AddElement<AlphaOffset>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOffset>(deep);
    }

    /// <summary>
    /// <para>Alpha Modulation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaMod.</para>
    /// </summary>
    public partial class AlphaModulation : PositivePercentageType
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulation class.
        /// </summary>
        public AlphaModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulation>(deep);
    }

    /// <summary>
    /// <para>Hue Modulate.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hueMod.</para>
    /// </summary>
    public partial class HueModulation : PositivePercentageType
    {
        /// <summary>
        /// Initializes a new instance of the HueModulation class.
        /// </summary>
        public HueModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hueMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueModulation>(deep);
    }

    /// <summary>
    /// <para>Defines the PositivePercentageType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositivePercentageType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositivePercentageType class.
        /// </summary>
        protected PositivePercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositivePercentageType>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
        }
    }

    /// <summary>
    /// <para>Hue.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hue.</para>
    /// </summary>
    public partial class Hue : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Hue class.
        /// </summary>
        public Hue() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hue");
            builder.AddElement<Hue>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hue>(deep);
    }

    /// <summary>
    /// <para>Hue Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hueOff.</para>
    /// </summary>
    public partial class HueOffset : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HueOffset class.
        /// </summary>
        public HueOffset() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hueOff");
            builder.AddElement<HueOffset>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HueOffset>(deep);
    }

    /// <summary>
    /// <para>Saturation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sat.</para>
    /// </summary>
    public partial class Saturation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Saturation class.
        /// </summary>
        public Saturation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sat");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Saturation>(deep);
    }

    /// <summary>
    /// <para>Saturation Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:satOff.</para>
    /// </summary>
    public partial class SaturationOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the SaturationOffset class.
        /// </summary>
        public SaturationOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:satOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationOffset>(deep);
    }

    /// <summary>
    /// <para>Saturation Modulation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:satMod.</para>
    /// </summary>
    public partial class SaturationModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the SaturationModulation class.
        /// </summary>
        public SaturationModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:satMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaturationModulation>(deep);
    }

    /// <summary>
    /// <para>Luminance.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lum.</para>
    /// </summary>
    public partial class Luminance : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Luminance class.
        /// </summary>
        public Luminance() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lum");
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:val"), true, 0, true, 100000, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Luminance>(deep);
    }

    /// <summary>
    /// <para>Luminance Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lumOff.</para>
    /// </summary>
    public partial class LuminanceOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceOffset class.
        /// </summary>
        public LuminanceOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lumOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceOffset>(deep);
    }

    /// <summary>
    /// <para>Luminance Modulation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lumMod.</para>
    /// </summary>
    public partial class LuminanceModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceModulation class.
        /// </summary>
        public LuminanceModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lumMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceModulation>(deep);
    }

    /// <summary>
    /// <para>Red.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:red.</para>
    /// </summary>
    public partial class Red : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Red class.
        /// </summary>
        public Red() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:red");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Red>(deep);
    }

    /// <summary>
    /// <para>Red Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:redOff.</para>
    /// </summary>
    public partial class RedOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the RedOffset class.
        /// </summary>
        public RedOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:redOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedOffset>(deep);
    }

    /// <summary>
    /// <para>Red Modulation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:redMod.</para>
    /// </summary>
    public partial class RedModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the RedModulation class.
        /// </summary>
        public RedModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:redMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RedModulation>(deep);
    }

    /// <summary>
    /// <para>Green.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:green.</para>
    /// </summary>
    public partial class Green : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Green class.
        /// </summary>
        public Green() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:green");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Green>(deep);
    }

    /// <summary>
    /// <para>Green Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:greenOff.</para>
    /// </summary>
    public partial class GreenOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the GreenOffset class.
        /// </summary>
        public GreenOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:greenOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenOffset>(deep);
    }

    /// <summary>
    /// <para>Green Modification.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:greenMod.</para>
    /// </summary>
    public partial class GreenModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the GreenModulation class.
        /// </summary>
        public GreenModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:greenMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GreenModulation>(deep);
    }

    /// <summary>
    /// <para>Blue.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blue.</para>
    /// </summary>
    public partial class Blue : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the Blue class.
        /// </summary>
        public Blue() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blue");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blue>(deep);
    }

    /// <summary>
    /// <para>Blue Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blueOff.</para>
    /// </summary>
    public partial class BlueOffset : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the BlueOffset class.
        /// </summary>
        public BlueOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blueOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueOffset>(deep);
    }

    /// <summary>
    /// <para>Blue Modification.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blueMod.</para>
    /// </summary>
    public partial class BlueModulation : PercentageType
    {
        /// <summary>
        /// Initializes a new instance of the BlueModulation class.
        /// </summary>
        public BlueModulation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blueMod");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlueModulation>(deep);
    }

    /// <summary>
    /// <para>Defines the PercentageType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PercentageType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PercentageType class.
        /// </summary>
        protected PercentageType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PercentageType>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Gamma.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gamma.</para>
    /// </summary>
    public partial class Gamma : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gamma class.
        /// </summary>
        public Gamma() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gamma");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gamma>(deep);
    }

    /// <summary>
    /// <para>Inverse Gamma.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:invGamma.</para>
    /// </summary>
    public partial class InverseGamma : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the InverseGamma class.
        /// </summary>
        public InverseGamma() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:invGamma");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InverseGamma>(deep);
    }

    /// <summary>
    /// <para>Extension.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    public partial class Extension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        public Extension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Extension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Extension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Extension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Extension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddElement<Extension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extension>(deep);
    }

    /// <summary>
    /// <para>RGB Color Model - Percentage Variant.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:scrgbClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class RgbColorModelPercentage : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class.
        /// </summary>
        public RgbColorModelPercentage() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelPercentage(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelPercentage(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelPercentage class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RgbColorModelPercentage(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Red</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public Int32Value? RedPortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Green</para>
        /// <para>Represents the following attribute in the schema: g</para>
        /// </summary>
        public Int32Value? GreenPortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Blue</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public Int32Value? BluePortion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:scrgbClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<RgbColorModelPercentage>()
                .AddAttribute("r", a => a.RedPortion, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("g", a => a.GreenPortion, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("b", a => a.BluePortion, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelPercentage>(deep);
    }

    /// <summary>
    /// <para>RGB Color Model - Hex Variant.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:srgbClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class RgbColorModelHex : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class.
        /// </summary>
        public RgbColorModelHex() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelHex(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RgbColorModelHex(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RgbColorModelHex class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RgbColorModelHex(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>legacySpreadsheetColorIndex, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: a14:legacySpreadsheetColorIndex</para>
        /// </summary>
        /// <remark>
        /// xmlns:a14=http://schemas.microsoft.com/office/drawing/2010/main
        /// </remark>
        public Int32Value? LegacySpreadsheetColorIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:srgbClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<RgbColorModelHex>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (3L) });
                })
                .AddAttribute("a14:legacySpreadsheetColorIndex", a => a.LegacySpreadsheetColorIndex, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (80L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RgbColorModelHex>(deep);
    }

    /// <summary>
    /// <para>Hue, Saturation, Luminance Color Model.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hslClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class HslColor : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HslColor class.
        /// </summary>
        public HslColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HslColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HslColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HslColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HslColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value? HueValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Saturation</para>
        /// <para>Represents the following attribute in the schema: sat</para>
        /// </summary>
        public Int32Value? SatValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Luminance</para>
        /// <para>Represents the following attribute in the schema: lum</para>
        /// </summary>
        public Int32Value? LumValue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hslClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<HslColor>()
                .AddAttribute("hue", a => a.HueValue, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("sat", a => a.SatValue, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("lum", a => a.LumValue, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HslColor>(deep);
    }

    /// <summary>
    /// <para>System Color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sysClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class SystemColor : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SystemColor class.
        /// </summary>
        public SystemColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SystemColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SystemColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SystemColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SystemColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColorValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Color</para>
        /// <para>Represents the following attribute in the schema: lastClr</para>
        /// </summary>
        public HexBinaryValue? LastColor
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sysClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<SystemColor>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("lastClr", a => a.LastColor, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (3L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SystemColor>(deep);
    }

    /// <summary>
    /// <para>Scheme Color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:schemeClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class SchemeColor : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SchemeColor class.
        /// </summary>
        public SchemeColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SchemeColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SchemeColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SchemeColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SchemeColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColorValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:schemeClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<SchemeColor>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SchemeColor>(deep);
    }

    /// <summary>
    /// <para>Preset Color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset" /> <c>&lt;a:hueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement" /> <c>&lt;a:comp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset" /> <c>&lt;a:alphaOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma" /> <c>&lt;a:gamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray" /> <c>&lt;a:gray></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma" /> <c>&lt;a:invGamma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse" /> <c>&lt;a:inv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation" /> <c>&lt;a:sat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset" /> <c>&lt;a:satOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation" /> <c>&lt;a:satMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset" /> <c>&lt;a:lumOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation" /> <c>&lt;a:lumMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red" /> <c>&lt;a:red></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset" /> <c>&lt;a:redOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation" /> <c>&lt;a:redMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green" /> <c>&lt;a:green></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset" /> <c>&lt;a:greenOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation" /> <c>&lt;a:greenMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue" /> <c>&lt;a:blue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset" /> <c>&lt;a:blueOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation" /> <c>&lt;a:blueMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue" /> <c>&lt;a:hue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade" /> <c>&lt;a:shade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha" /> <c>&lt;a:alpha></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation" /> <c>&lt;a:hueMod></c></description></item>
    /// </list>
    /// </remark>
    public partial class PresetColor : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetColor class.
        /// </summary>
        public PresetColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColorValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:prstClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation>();
            builder.AddElement<PresetColor>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tint), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shade), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Complement), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Inverse), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gray), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Alpha), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Saturation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SaturationModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Luminance), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Red), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RedModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Green), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GreenModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blue), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueOffset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlueModulation), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Gamma), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InverseGamma), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetColor>(deep);
    }

    /// <summary>
    /// <para>Apply 3D shape properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sp3d.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelTop" /> <c>&lt;a:bevelT></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelBottom" /> <c>&lt;a:bevelB></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtrusionColor" /> <c>&lt;a:extrusionClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ContourColor" /> <c>&lt;a:contourClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Shape3DType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Shape3DType class.
        /// </summary>
        public Shape3DType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape3DType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape3DType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape3DType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Shape3DType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Shape Depth</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value? Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Extrusion Height</para>
        /// <para>Represents the following attribute in the schema: extrusionH</para>
        /// </summary>
        public Int64Value? ExtrusionHeight
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Contour Width</para>
        /// <para>Represents the following attribute in the schema: contourW</para>
        /// </summary>
        public Int64Value? ContourWidth
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Preset Material Type</para>
        /// <para>Represents the following attribute in the schema: prstMaterial</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetMaterialTypeValues>? PresetMaterial
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetMaterialTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sp3d");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelTop>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelBottom>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtrusionColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ContourColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<Shape3DType>()
                .AddAttribute("z", a => a.Z, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("extrusionH", a => a.ExtrusionHeight, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("contourW", a => a.ContourWidth, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("prstMaterial", a => a.PresetMaterial, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelTop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelBottom), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtrusionColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ContourColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Top Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevelT.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelTop? BevelTop
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelTop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevelB.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelBottom? BevelBottom
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelBottom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extrusion Color.</para>
        /// <para>Represents the following element tag in the schema: a:extrusionClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtrusionColor? ExtrusionColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtrusionColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Contour Color.</para>
        /// <para>Represents the following element tag in the schema: a:contourClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ContourColor? ContourColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ContourColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape3DType>(deep);
    }

    /// <summary>
    /// <para>No text in 3D scene.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:flatTx.</para>
    /// </summary>
    public partial class FlatText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FlatText class.
        /// </summary>
        public FlatText() : base()
        {
        }

        /// <summary>
        /// <para>Z Coordinate</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value? Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:flatTx");
            builder.AddElement<FlatText>()
                .AddAttribute("z", a => a.Z, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FlatText>(deep);
    }

    /// <summary>
    /// <para>Linear Gradient Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lin.</para>
    /// </summary>
    public partial class LinearGradientFill : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LinearGradientFill class.
        /// </summary>
        public LinearGradientFill() : base()
        {
        }

        /// <summary>
        /// <para>Angle</para>
        /// <para>Represents the following attribute in the schema: ang</para>
        /// </summary>
        public Int32Value? Angle
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Scaled</para>
        /// <para>Represents the following attribute in the schema: scaled</para>
        /// </summary>
        public BooleanValue? Scaled
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lin");
            builder.AddElement<LinearGradientFill>()
                .AddAttribute("ang", a => a.Angle, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("scaled", a => a.Scaled);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinearGradientFill>(deep);
    }

    /// <summary>
    /// <para>Path Gradient.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:path.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillToRectangle" /> <c>&lt;a:fillToRect></c></description></item>
    /// </list>
    /// </remark>
    public partial class PathGradientFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PathGradientFill class.
        /// </summary>
        public PathGradientFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathGradientFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathGradientFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathGradientFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PathGradientFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Gradient Fill Path</para>
        /// <para>Represents the following attribute in the schema: path</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathShadeValues>? Path
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathShadeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:path");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillToRectangle>();
            builder.AddElement<PathGradientFill>()
                .AddAttribute("path", a => a.Path, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillToRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Fill To Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:fillToRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillToRectangle? FillToRectangle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillToRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathGradientFill>(deep);
    }

    /// <summary>
    /// <para>Tile.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tile.</para>
    /// </summary>
    public partial class Tile : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Tile class.
        /// </summary>
        public Tile() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Offset</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int64Value? HorizontalOffset
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Offset</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int64Value? VerticalOffset
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value? HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value? VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tile Flipping</para>
        /// <para>Represents the following attribute in the schema: flip</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileFlipValues>? Flip
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileFlipValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tile");
            builder.AddElement<Tile>()
                .AddAttribute("tx", a => a.HorizontalOffset, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("ty", a => a.VerticalOffset, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("sx", a => a.HorizontalRatio)
                .AddAttribute("sy", a => a.VerticalRatio)
                .AddAttribute("flip", a => a.Flip, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tile>(deep);
    }

    /// <summary>
    /// <para>Stretch.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:stretch.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillRectangle" /> <c>&lt;a:fillRect></c></description></item>
    /// </list>
    /// </remark>
    public partial class Stretch : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Stretch class.
        /// </summary>
        public Stretch() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Stretch(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Stretch(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Stretch class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Stretch(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:stretch");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillRectangle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Fill Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:fillRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillRectangle? FillRectangle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Stretch>(deep);
    }

    /// <summary>
    /// <para>Defines the NoFill Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:noFill.</para>
    /// </summary>
    public partial class NoFill : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoFill class.
        /// </summary>
        public NoFill() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:noFill");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoFill>(deep);
    }

    /// <summary>
    /// <para>Defines the SolidFill Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:solidFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class SolidFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SolidFill class.
        /// </summary>
        public SolidFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SolidFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SolidFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SolidFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SolidFill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:solidFill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SolidFill>(deep);
    }

    /// <summary>
    /// <para>Defines the GradientFill Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gradFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStopList" /> <c>&lt;a:gsLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinearGradientFill" /> <c>&lt;a:lin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathGradientFill" /> <c>&lt;a:path></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileRectangle" /> <c>&lt;a:tileRect></c></description></item>
    /// </list>
    /// </remark>
    public partial class GradientFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientFill class.
        /// </summary>
        public GradientFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Tile Flip</para>
        /// <para>Represents the following attribute in the schema: flip</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileFlipValues>? Flip
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileFlipValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue? RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gradFill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStopList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinearGradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathGradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileRectangle>();
            builder.AddElement<GradientFill>()
                .AddAttribute("flip", a => a.Flip, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStopList), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinearGradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathGradientFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TileRectangle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Gradient Stop List.</para>
        /// <para>Represents the following element tag in the schema: a:gsLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStopList? GradientStopList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStopList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientFill>(deep);
    }

    /// <summary>
    /// <para>Defines the BlipFill Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blipFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip" /> <c>&lt;a:blip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SourceRectangle" /> <c>&lt;a:srcRect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Stretch" /> <c>&lt;a:stretch></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tile" /> <c>&lt;a:tile></c></description></item>
    /// </list>
    /// </remark>
    public partial class BlipFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipFill class.
        /// </summary>
        public BlipFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>DPI Setting</para>
        /// <para>Represents the following attribute in the schema: dpi</para>
        /// </summary>
        public UInt32Value? Dpi
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue? RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blipFill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SourceRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Stretch>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tile>();
            builder.AddElement<BlipFill>()
                .AddAttribute("dpi", a => a.Dpi)
                .AddAttribute("rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SourceRectangle), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Tile), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Stretch), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Blip.</para>
        /// <para>Represents the following element tag in the schema: a:blip.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip? Blip
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Source Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:srcRect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SourceRectangle? SourceRectangle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SourceRectangle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipFill>(deep);
    }

    /// <summary>
    /// <para>Pattern Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pattFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ForegroundColor" /> <c>&lt;a:fgClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundColor" /> <c>&lt;a:bgClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class PatternFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PatternFill class.
        /// </summary>
        public PatternFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PatternFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PatternFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatternFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PatternFill(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Pattern</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetPatternValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetPatternValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pattFill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ForegroundColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundColor>();
            builder.AddElement<PatternFill>()
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ForegroundColor), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundColor), 0, 1)
            };
        }

        /// <summary>
        /// <para>Foreground color.</para>
        /// <para>Represents the following element tag in the schema: a:fgClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ForegroundColor? ForegroundColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ForegroundColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Background color.</para>
        /// <para>Represents the following element tag in the schema: a:bgClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundColor? BackgroundColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatternFill>(deep);
    }

    /// <summary>
    /// <para>Group Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpFill.</para>
    /// </summary>
    public partial class GroupFill : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupFill class.
        /// </summary>
        public GroupFill() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:grpFill");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupFill>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel" /> <c>&lt;a:alphaBiLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling" /> <c>&lt;a:alphaCeiling></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor" /> <c>&lt;a:alphaFloor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse" /> <c>&lt;a:alphaInv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed" /> <c>&lt;a:alphaModFix></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset" /> <c>&lt;a:alphaOutset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace" /> <c>&lt;a:alphaRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel" /> <c>&lt;a:biLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend" /> <c>&lt;a:blend></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur" /> <c>&lt;a:blur></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange" /> <c>&lt;a:clrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement" /> <c>&lt;a:clrRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone" /> <c>&lt;a:duotone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer" /> <c>&lt;a:cont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect" /> <c>&lt;a:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill" /> <c>&lt;a:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay" /> <c>&lt;a:fillOverlay></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow" /> <c>&lt;a:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale" /> <c>&lt;a:grayscl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl" /> <c>&lt;a:hsl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow" /> <c>&lt;a:innerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow" /> <c>&lt;a:outerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow" /> <c>&lt;a:prstShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection" /> <c>&lt;a:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset" /> <c>&lt;a:relOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge" /> <c>&lt;a:softEdge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectContainer : EffectContainerType
    {
        /// <summary>
        /// Initializes a new instance of the EffectContainer class.
        /// </summary>
        public EffectContainer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectContainer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectContainer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectContainer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cont");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectContainer>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectDag.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel" /> <c>&lt;a:alphaBiLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling" /> <c>&lt;a:alphaCeiling></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor" /> <c>&lt;a:alphaFloor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse" /> <c>&lt;a:alphaInv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed" /> <c>&lt;a:alphaModFix></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset" /> <c>&lt;a:alphaOutset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace" /> <c>&lt;a:alphaRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel" /> <c>&lt;a:biLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend" /> <c>&lt;a:blend></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur" /> <c>&lt;a:blur></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange" /> <c>&lt;a:clrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement" /> <c>&lt;a:clrRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone" /> <c>&lt;a:duotone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer" /> <c>&lt;a:cont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect" /> <c>&lt;a:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill" /> <c>&lt;a:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay" /> <c>&lt;a:fillOverlay></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow" /> <c>&lt;a:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale" /> <c>&lt;a:grayscl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl" /> <c>&lt;a:hsl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow" /> <c>&lt;a:innerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow" /> <c>&lt;a:outerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow" /> <c>&lt;a:prstShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection" /> <c>&lt;a:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset" /> <c>&lt;a:relOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge" /> <c>&lt;a:softEdge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectDag : EffectContainerType
    {
        /// <summary>
        /// Initializes a new instance of the EffectDag class.
        /// </summary>
        public EffectDag() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectDag(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectDag(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectDag class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectDag(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effectDag");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectDag>(deep);
    }

    /// <summary>
    /// <para>Defines the EffectContainerType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel" /> <c>&lt;a:alphaBiLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling" /> <c>&lt;a:alphaCeiling></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor" /> <c>&lt;a:alphaFloor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse" /> <c>&lt;a:alphaInv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed" /> <c>&lt;a:alphaModFix></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset" /> <c>&lt;a:alphaOutset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace" /> <c>&lt;a:alphaRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel" /> <c>&lt;a:biLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend" /> <c>&lt;a:blend></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur" /> <c>&lt;a:blur></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange" /> <c>&lt;a:clrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement" /> <c>&lt;a:clrRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone" /> <c>&lt;a:duotone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer" /> <c>&lt;a:cont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect" /> <c>&lt;a:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill" /> <c>&lt;a:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay" /> <c>&lt;a:fillOverlay></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow" /> <c>&lt;a:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale" /> <c>&lt;a:grayscl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl" /> <c>&lt;a:hsl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow" /> <c>&lt;a:innerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow" /> <c>&lt;a:outerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow" /> <c>&lt;a:prstShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection" /> <c>&lt;a:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset" /> <c>&lt;a:relOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge" /> <c>&lt;a:softEdge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect" /> <c>&lt;a:tint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class EffectContainerType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectContainerType class.
        /// </summary>
        protected EffectContainerType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected EffectContainerType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected EffectContainerType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectContainerType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected EffectContainerType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Effect Container Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainerValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainerValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaOutset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blend>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Effect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RelativeOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformEffect>();
            builder.AddElement<EffectContainerType>()
                .AddAttribute("type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }
    }

    /// <summary>
    /// <para>Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effect.</para>
    /// </summary>
    public partial class Effect : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Effect class.
        /// </summary>
        public Effect() : base()
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Reference
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effect");
            builder.AddElement<Effect>()
                .AddAttribute("ref", a => a.Reference, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Effect>(deep);
    }

    /// <summary>
    /// <para>Defines the AlphaBiLevel Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaBiLevel.</para>
    /// </summary>
    public partial class AlphaBiLevel : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaBiLevel class.
        /// </summary>
        public AlphaBiLevel() : base()
        {
        }

        /// <summary>
        /// <para>Threshold</para>
        /// <para>Represents the following attribute in the schema: thresh</para>
        /// </summary>
        public Int32Value? Threshold
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaBiLevel");
            builder.AddElement<AlphaBiLevel>()
                .AddAttribute("thresh", a => a.Threshold, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaBiLevel>(deep);
    }

    /// <summary>
    /// <para>Alpha Ceiling Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaCeiling.</para>
    /// </summary>
    public partial class AlphaCeiling : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaCeiling class.
        /// </summary>
        public AlphaCeiling() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaCeiling");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaCeiling>(deep);
    }

    /// <summary>
    /// <para>Alpha Floor Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaFloor.</para>
    /// </summary>
    public partial class AlphaFloor : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaFloor class.
        /// </summary>
        public AlphaFloor() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaFloor");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaFloor>(deep);
    }

    /// <summary>
    /// <para>Alpha Inverse Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaInv.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class AlphaInverse : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaInverse class.
        /// </summary>
        public AlphaInverse() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaInverse(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaInverse(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaInverse class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AlphaInverse(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaInv");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaInverse>(deep);
    }

    /// <summary>
    /// <para>Alpha Modulate Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaMod.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer" /> <c>&lt;a:cont></c></description></item>
    /// </list>
    /// </remark>
    public partial class AlphaModulationEffect : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class.
        /// </summary>
        public AlphaModulationEffect() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaModulationEffect(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AlphaModulationEffect(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlphaModulationEffect class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AlphaModulationEffect(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaMod");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer), 1, 1)
            };
        }

        /// <summary>
        /// <para>EffectContainer.</para>
        /// <para>Represents the following element tag in the schema: a:cont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer? EffectContainer
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationEffect>(deep);
    }

    /// <summary>
    /// <para>Defines the AlphaModulationFixed Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaModFix.</para>
    /// </summary>
    public partial class AlphaModulationFixed : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaModulationFixed class.
        /// </summary>
        public AlphaModulationFixed() : base()
        {
        }

        /// <summary>
        /// <para>Amount</para>
        /// <para>Represents the following attribute in the schema: amt</para>
        /// </summary>
        public Int32Value? Amount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaModFix");
            builder.AddElement<AlphaModulationFixed>()
                .AddAttribute("amt", a => a.Amount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaModulationFixed>(deep);
    }

    /// <summary>
    /// <para>Alpha Inset/Outset Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaOutset.</para>
    /// </summary>
    public partial class AlphaOutset : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaOutset class.
        /// </summary>
        public AlphaOutset() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value? Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaOutset");
            builder.AddElement<AlphaOutset>()
                .AddAttribute("rad", a => a.Radius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaOutset>(deep);
    }

    /// <summary>
    /// <para>Alpha Replace Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:alphaRepl.</para>
    /// </summary>
    public partial class AlphaReplace : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AlphaReplace class.
        /// </summary>
        public AlphaReplace() : base()
        {
        }

        /// <summary>
        /// <para>Alpha</para>
        /// <para>Represents the following attribute in the schema: a</para>
        /// </summary>
        public Int32Value? Alpha
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:alphaRepl");
            builder.AddElement<AlphaReplace>()
                .AddAttribute("a", a => a.Alpha, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlphaReplace>(deep);
    }

    /// <summary>
    /// <para>Defines the BiLevel Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:biLevel.</para>
    /// </summary>
    public partial class BiLevel : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BiLevel class.
        /// </summary>
        public BiLevel() : base()
        {
        }

        /// <summary>
        /// <para>Threshold</para>
        /// <para>Represents the following attribute in the schema: thresh</para>
        /// </summary>
        public Int32Value? Threshold
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:biLevel");
            builder.AddElement<BiLevel>()
                .AddAttribute("thresh", a => a.Threshold, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiLevel>(deep);
    }

    /// <summary>
    /// <para>Blend Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blend.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer" /> <c>&lt;a:cont></c></description></item>
    /// </list>
    /// </remark>
    public partial class Blend : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Blend class.
        /// </summary>
        public Blend() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blend(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blend(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blend class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Blend(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blend Mode</para>
        /// <para>Represents the following attribute in the schema: blend</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlendModeValues>? BlendMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlendModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blend");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer>();
            builder.AddElement<Blend>()
                .AddAttribute("blend", a => a.BlendMode, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer), 1, 1)
            };
        }

        /// <summary>
        /// <para>Effect to blend.</para>
        /// <para>Represents the following element tag in the schema: a:cont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer? EffectContainer
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectContainer>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blend>(deep);
    }

    /// <summary>
    /// <para>Defines the Blur Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blur.</para>
    /// </summary>
    public partial class Blur : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Blur class.
        /// </summary>
        public Blur() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value? Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grow Bounds</para>
        /// <para>Represents the following attribute in the schema: grow</para>
        /// </summary>
        public BooleanValue? Grow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blur");
            builder.AddElement<Blur>()
                .AddAttribute("rad", a => a.Radius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("grow", a => a.Grow);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blur>(deep);
    }

    /// <summary>
    /// <para>Color Change Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorFrom" /> <c>&lt;a:clrFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorTo" /> <c>&lt;a:clrTo></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorChange : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorChange class.
        /// </summary>
        public ColorChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Consider Alpha Values</para>
        /// <para>Represents the following attribute in the schema: useA</para>
        /// </summary>
        public BooleanValue? UseAlpha
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrChange");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorFrom>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorTo>();
            builder.AddElement<ColorChange>()
                .AddAttribute("useA", a => a.UseAlpha);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorFrom), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorTo), 1, 1)
            };
        }

        /// <summary>
        /// <para>Change Color From.</para>
        /// <para>Represents the following element tag in the schema: a:clrFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorFrom? ColorFrom
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Change Color To.</para>
        /// <para>Represents the following element tag in the schema: a:clrTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorTo? ColorTo
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorTo>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorChange>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorReplacement Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrRepl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorReplacement : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorReplacement class.
        /// </summary>
        public ColorReplacement() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorReplacement(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorReplacement(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorReplacement class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorReplacement(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrRepl");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorReplacement>(deep);
    }

    /// <summary>
    /// <para>Duotone Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:duotone.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Duotone : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Duotone class.
        /// </summary>
        public Duotone() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Duotone(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Duotone(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Duotone class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Duotone(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:duotone");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 2, 2)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Duotone>(deep);
    }

    /// <summary>
    /// <para>Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class Fill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Fill class.
        /// </summary>
        public Fill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill? NoFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill? SolidFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill? GradientFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill? BlipFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill? PatternFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill? GroupFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fill>(deep);
    }

    /// <summary>
    /// <para>Fill Overlay Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillOverlay.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class FillOverlay : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillOverlay class.
        /// </summary>
        public FillOverlay() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillOverlay(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillOverlay(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillOverlay class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillOverlay(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blend</para>
        /// <para>Represents the following attribute in the schema: blend</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlendModeValues>? Blend
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlendModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fillOverlay");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddElement<FillOverlay>()
                .AddAttribute("blend", a => a.Blend, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill? NoFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill? SolidFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill? GradientFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill? BlipFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill? PatternFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill? GroupFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillOverlay>(deep);
    }

    /// <summary>
    /// <para>Glow Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:glow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Glow : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Glow class.
        /// </summary>
        public Glow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Glow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Glow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Glow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Glow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value? Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:glow");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<Glow>()
                .AddAttribute("rad", a => a.Radius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Glow>(deep);
    }

    /// <summary>
    /// <para>Gray Scale Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grayscl.</para>
    /// </summary>
    public partial class Grayscale : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Grayscale class.
        /// </summary>
        public Grayscale() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:grayscl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Grayscale>(deep);
    }

    /// <summary>
    /// <para>Hue Saturation Luminance Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hsl.</para>
    /// </summary>
    public partial class Hsl : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Hsl class.
        /// </summary>
        public Hsl() : base()
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value? Hue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Saturation</para>
        /// <para>Represents the following attribute in the schema: sat</para>
        /// </summary>
        public Int32Value? Saturation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Luminance</para>
        /// <para>Represents the following attribute in the schema: lum</para>
        /// </summary>
        public Int32Value? Luminance
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hsl");
            builder.AddElement<Hsl>()
                .AddAttribute("hue", a => a.Hue, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("sat", a => a.Saturation, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                })
                .AddAttribute("lum", a => a.Luminance, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hsl>(deep);
    }

    /// <summary>
    /// <para>Inner Shadow Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:innerShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class InnerShadow : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the InnerShadow class.
        /// </summary>
        public InnerShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InnerShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InnerShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InnerShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InnerShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value? BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value? Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value? Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:innerShdw");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<InnerShadow>()
                .AddAttribute("blurRad", a => a.BlurRadius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dist", a => a.Distance, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dir", a => a.Direction, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InnerShadow>(deep);
    }

    /// <summary>
    /// <para>Luminance.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lum.</para>
    /// </summary>
    public partial class LuminanceEffect : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LuminanceEffect class.
        /// </summary>
        public LuminanceEffect() : base()
        {
        }

        /// <summary>
        /// <para>Brightness</para>
        /// <para>Represents the following attribute in the schema: bright</para>
        /// </summary>
        public Int32Value? Brightness
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Contrast</para>
        /// <para>Represents the following attribute in the schema: contrast</para>
        /// </summary>
        public Int32Value? Contrast
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lum");
            builder.AddElement<LuminanceEffect>()
                .AddAttribute("bright", a => a.Brightness, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                })
                .AddAttribute("contrast", a => a.Contrast, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                });
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:val"), true, 0, true, 100000, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LuminanceEffect>(deep);
    }

    /// <summary>
    /// <para>Outer Shadow Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:outerShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class OuterShadow : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OuterShadow class.
        /// </summary>
        public OuterShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OuterShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OuterShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OuterShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OuterShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value? BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Offset Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value? Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value? Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Scaling Factor</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value? HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Scaling Factor</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value? VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value? HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value? VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue? RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:outerShdw");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<OuterShadow>()
                .AddAttribute("blurRad", a => a.BlurRadius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dist", a => a.Distance, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dir", a => a.Direction, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("sx", a => a.HorizontalRatio)
                .AddAttribute("sy", a => a.VerticalRatio)
                .AddAttribute("kx", a => a.HorizontalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("ky", a => a.VerticalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("rotWithShape", a => a.RotateWithShape);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OuterShadow>(deep);
    }

    /// <summary>
    /// <para>Preset Shadow.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstShdw.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class PresetShadow : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetShadow class.
        /// </summary>
        public PresetShadow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetShadow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetShadow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetShadow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetShadow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Shadow</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadowValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value? Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value? Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:prstShdw");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<PresetShadow>()
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("dist", a => a.Distance, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dir", a => a.Direction, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetShadow>(deep);
    }

    /// <summary>
    /// <para>Reflection Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:reflection.</para>
    /// </summary>
    public partial class Reflection : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Reflection class.
        /// </summary>
        public Reflection() : base()
        {
        }

        /// <summary>
        /// <para>Blur Radius</para>
        /// <para>Represents the following attribute in the schema: blurRad</para>
        /// </summary>
        public Int64Value? BlurRadius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Opacity</para>
        /// <para>Represents the following attribute in the schema: stA</para>
        /// </summary>
        public Int32Value? StartOpacity
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Position</para>
        /// <para>Represents the following attribute in the schema: stPos</para>
        /// </summary>
        public Int32Value? StartPosition
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>End Alpha</para>
        /// <para>Represents the following attribute in the schema: endA</para>
        /// </summary>
        public Int32Value? EndAlpha
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>End Position</para>
        /// <para>Represents the following attribute in the schema: endPos</para>
        /// </summary>
        public Int32Value? EndPosition
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance</para>
        /// <para>Represents the following attribute in the schema: dist</para>
        /// </summary>
        public Int64Value? Distance
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public Int32Value? Direction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Fade Direction</para>
        /// <para>Represents the following attribute in the schema: fadeDir</para>
        /// </summary>
        public Int32Value? FadeDirection
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value? HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value? VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value? HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value? VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shadow Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RectangleAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Rotate With Shape</para>
        /// <para>Represents the following attribute in the schema: rotWithShape</para>
        /// </summary>
        public BooleanValue? RotateWithShape
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:reflection");
            builder.AddElement<Reflection>()
                .AddAttribute("blurRad", a => a.BlurRadius, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("stA", a => a.StartOpacity, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                })
                .AddAttribute("stPos", a => a.StartPosition, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                })
                .AddAttribute("endA", a => a.EndAlpha, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                })
                .AddAttribute("endPos", a => a.EndPosition, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                })
                .AddAttribute("dist", a => a.Distance, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("dir", a => a.Direction, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("fadeDir", a => a.FadeDirection, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("sx", a => a.HorizontalRatio)
                .AddAttribute("sy", a => a.VerticalRatio)
                .AddAttribute("kx", a => a.HorizontalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("ky", a => a.VerticalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("rotWithShape", a => a.RotateWithShape);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reflection>(deep);
    }

    /// <summary>
    /// <para>Relative Offset Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:relOff.</para>
    /// </summary>
    public partial class RelativeOffset : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelativeOffset class.
        /// </summary>
        public RelativeOffset() : base()
        {
        }

        /// <summary>
        /// <para>Offset X</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int32Value? OffsetX
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Offset Y</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int32Value? OffsetY
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:relOff");
            builder.AddElement<RelativeOffset>()
                .AddAttribute("tx", a => a.OffsetX)
                .AddAttribute("ty", a => a.OffsetY);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelativeOffset>(deep);
    }

    /// <summary>
    /// <para>Soft Edge Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:softEdge.</para>
    /// </summary>
    public partial class SoftEdge : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SoftEdge class.
        /// </summary>
        public SoftEdge() : base()
        {
        }

        /// <summary>
        /// <para>Radius</para>
        /// <para>Represents the following attribute in the schema: rad</para>
        /// </summary>
        public Int64Value? Radius
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:softEdge");
            builder.AddElement<SoftEdge>()
                .AddAttribute("rad", a => a.Radius, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoftEdge>(deep);
    }

    /// <summary>
    /// <para>Defines the TintEffect Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tint.</para>
    /// </summary>
    public partial class TintEffect : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TintEffect class.
        /// </summary>
        public TintEffect() : base()
        {
        }

        /// <summary>
        /// <para>Hue</para>
        /// <para>Represents the following attribute in the schema: hue</para>
        /// </summary>
        public Int32Value? Hue
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Amount</para>
        /// <para>Represents the following attribute in the schema: amt</para>
        /// </summary>
        public Int32Value? Amount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tint");
            builder.AddElement<TintEffect>()
                .AddAttribute("hue", a => a.Hue, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("amt", a => a.Amount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-100000L), MaxInclusive = (100000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TintEffect>(deep);
    }

    /// <summary>
    /// <para>Transform Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    public partial class TransformEffect : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TransformEffect class.
        /// </summary>
        public TransformEffect() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Ratio</para>
        /// <para>Represents the following attribute in the schema: sx</para>
        /// </summary>
        public Int32Value? HorizontalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Ratio</para>
        /// <para>Represents the following attribute in the schema: sy</para>
        /// </summary>
        public Int32Value? VerticalRatio
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Skew</para>
        /// <para>Represents the following attribute in the schema: kx</para>
        /// </summary>
        public Int32Value? HorizontalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Skew</para>
        /// <para>Represents the following attribute in the schema: ky</para>
        /// </summary>
        public Int32Value? VerticalSkew
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Shift</para>
        /// <para>Represents the following attribute in the schema: tx</para>
        /// </summary>
        public Int64Value? HorizontalShift
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Shift</para>
        /// <para>Represents the following attribute in the schema: ty</para>
        /// </summary>
        public Int64Value? VerticalShift
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:xfrm");
            builder.AddElement<TransformEffect>()
                .AddAttribute("sx", a => a.HorizontalRatio)
                .AddAttribute("sy", a => a.VerticalRatio)
                .AddAttribute("kx", a => a.HorizontalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("ky", a => a.VerticalSkew, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinExclusive = (-5400000L), MaxExclusive = (5400000L) });
                })
                .AddAttribute("tx", a => a.HorizontalShift, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("ty", a => a.VerticalShift, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformEffect>(deep);
    }

    /// <summary>
    /// <para>Effect Container.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur" /> <c>&lt;a:blur></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay" /> <c>&lt;a:fillOverlay></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow" /> <c>&lt;a:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow" /> <c>&lt;a:innerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow" /> <c>&lt;a:outerShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow" /> <c>&lt;a:prstShdw></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection" /> <c>&lt;a:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge" /> <c>&lt;a:softEdge></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectList class.
        /// </summary>
        public EffectList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effectLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge), 0, 1)
            };
        }

        /// <summary>
        /// <para>Blur Effect.</para>
        /// <para>Represents the following element tag in the schema: a:blur.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur? Blur
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillOverlay.</para>
        /// <para>Represents the following element tag in the schema: a:fillOverlay.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay? FillOverlay
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Glow.</para>
        /// <para>Represents the following element tag in the schema: a:glow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow? Glow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Glow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>InnerShadow.</para>
        /// <para>Represents the following element tag in the schema: a:innerShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow? InnerShadow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InnerShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OuterShadow.</para>
        /// <para>Represents the following element tag in the schema: a:outerShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow? OuterShadow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OuterShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PresetShadow.</para>
        /// <para>Represents the following element tag in the schema: a:prstShdw.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow? PresetShadow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetShadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reflection.</para>
        /// <para>Represents the following element tag in the schema: a:reflection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection? Reflection
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Reflection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SoftEdge.</para>
        /// <para>Represents the following element tag in the schema: a:softEdge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge? SoftEdge
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoftEdge>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectList>(deep);
    }

    /// <summary>
    /// <para>Custom geometry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custGeom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleList" /> <c>&lt;a:ahLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSiteList" /> <c>&lt;a:cxnLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList" /> <c>&lt;a:avLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuideList" /> <c>&lt;a:gdLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rectangle" /> <c>&lt;a:rect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathList" /> <c>&lt;a:pathLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomGeometry : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomGeometry class.
        /// </summary>
        public CustomGeometry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomGeometry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomGeometry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomGeometry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomGeometry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:custGeom");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSiteList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuideList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuideList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSiteList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rectangle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathList), 1, 1)
            };
        }

        /// <summary>
        /// <para>Adjust Value List.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList? AdjustValueList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Guides.</para>
        /// <para>Represents the following element tag in the schema: a:gdLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuideList? ShapeGuideList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuideList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Adjust Handles.</para>
        /// <para>Represents the following element tag in the schema: a:ahLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleList? AdjustHandleList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Connection Sites.</para>
        /// <para>Represents the following element tag in the schema: a:cxnLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSiteList? ConnectionSiteList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSiteList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Text Rectangle.</para>
        /// <para>Represents the following element tag in the schema: a:rect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rectangle? Rectangle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rectangle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Shape Paths.</para>
        /// <para>Represents the following element tag in the schema: a:pathLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathList? PathList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomGeometry>(deep);
    }

    /// <summary>
    /// <para>Preset geometry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstGeom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList" /> <c>&lt;a:avLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class PresetGeometry : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetGeometry class.
        /// </summary>
        public PresetGeometry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetGeometry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetGeometry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetGeometry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetGeometry(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Shape</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeTypeValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:prstGeom");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            builder.AddElement<PresetGeometry>()
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList), 0, 1)
            };
        }

        /// <summary>
        /// <para>List of Shape Adjust Values.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList? AdjustValueList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetGeometry>(deep);
    }

    /// <summary>
    /// <para>Preset Text Warp.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstTxWarp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList" /> <c>&lt;a:avLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class PresetTextWrap : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class.
        /// </summary>
        public PresetTextWrap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetTextWrap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PresetTextWrap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresetTextWrap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PresetTextWrap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Warp Shape</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShapeValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShapeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:prstTxWarp");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            builder.AddElement<PresetTextWrap>()
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Adjust Value List.</para>
        /// <para>Represents the following element tag in the schema: a:avLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList? AdjustValueList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustValueList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetTextWrap>(deep);
    }

    /// <summary>
    /// <para>Round Line Join.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:round.</para>
    /// </summary>
    public partial class Round : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Round class.
        /// </summary>
        public Round() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:round");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Round>(deep);
    }

    /// <summary>
    /// <para>Line Join Bevel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevel.</para>
    /// </summary>
    public partial class LineJoinBevel : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineJoinBevel class.
        /// </summary>
        public LineJoinBevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bevel");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineJoinBevel>(deep);
    }

    /// <summary>
    /// <para>Miter Line Join.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:miter.</para>
    /// </summary>
    public partial class Miter : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Miter class.
        /// </summary>
        public Miter() : base()
        {
        }

        /// <summary>
        /// <para>Miter Join Limit</para>
        /// <para>Represents the following attribute in the schema: lim</para>
        /// </summary>
        public Int32Value? Limit
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:miter");
            builder.AddElement<Miter>()
                .AddAttribute("lim", a => a.Limit, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Miter>(deep);
    }

    /// <summary>
    /// <para>Preset Dash.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:prstDash.</para>
    /// </summary>
    public partial class PresetDash : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PresetDash class.
        /// </summary>
        public PresetDash() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetLineDashValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetLineDashValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:prstDash");
            builder.AddElement<PresetDash>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresetDash>(deep);
    }

    /// <summary>
    /// <para>Custom Dash.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custDash.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DashStop" /> <c>&lt;a:ds></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomDash : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomDash class.
        /// </summary>
        public CustomDash() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDash(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomDash(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomDash class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomDash(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:custDash");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DashStop>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DashStop), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomDash>(deep);
    }

    /// <summary>
    /// <para>Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class FillProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillProperties class.
        /// </summary>
        public FillProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill? NoFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill? SolidFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill? GradientFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill? BlipFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill? PatternFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill? GroupFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillProperties>(deep);
    }

    /// <summary>
    /// <para>Fill Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class FillReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FillReference class.
        /// </summary>
        public FillReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fillRef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillReference>(deep);
    }

    /// <summary>
    /// <para>Effect Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EffectReference class.
        /// </summary>
        public EffectReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effectRef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectReference>(deep);
    }

    /// <summary>
    /// <para>Defines the LineReference Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineReference : StyleMatrixReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the LineReference class.
        /// </summary>
        public LineReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineReference(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnRef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineReference>(deep);
    }

    /// <summary>
    /// <para>Defines the StyleMatrixReferenceType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class StyleMatrixReferenceType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class.
        /// </summary>
        protected StyleMatrixReferenceType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StyleMatrixReferenceType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected StyleMatrixReferenceType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleMatrixReferenceType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected StyleMatrixReferenceType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style Matrix Index</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public UInt32Value? Index
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<StyleMatrixReferenceType>()
                .AddAttribute("idx", a => a.Index, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Effect.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effect.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectPropertiesType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class.
        /// </summary>
        public EffectPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectPropertiesType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effect");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Effect Container.</para>
        /// <para>Represents the following element tag in the schema: a:effectLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList? EffectList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Effect Container.</para>
        /// <para>Represents the following element tag in the schema: a:effectDag.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag? EffectDag
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectPropertiesType>(deep);
    }

    /// <summary>
    /// <para>Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:font.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont" /> <c>&lt;a:font></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    /// </list>
    /// </remark>
    public partial class Fonts : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the Fonts class.
        /// </summary>
        public Fonts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fonts(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:font");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);
    }

    /// <summary>
    /// <para>Major Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:majorFont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont" /> <c>&lt;a:font></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    /// </list>
    /// </remark>
    public partial class MajorFont : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the MajorFont class.
        /// </summary>
        public MajorFont() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MajorFont(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MajorFont(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MajorFont class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MajorFont(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:majorFont");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MajorFont>(deep);
    }

    /// <summary>
    /// <para>Minor fonts.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:minorFont.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont" /> <c>&lt;a:font></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    /// </list>
    /// </remark>
    public partial class MinorFont : FontCollectionType
    {
        /// <summary>
        /// Initializes a new instance of the MinorFont class.
        /// </summary>
        public MinorFont() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MinorFont(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MinorFont(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MinorFont class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MinorFont(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:minorFont");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MinorFont>(deep);
    }

    /// <summary>
    /// <para>Defines the FontCollectionType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont" /> <c>&lt;a:font></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class FontCollectionType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontCollectionType class.
        /// </summary>
        protected FontCollectionType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FontCollectionType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FontCollectionType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontCollectionType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected FontCollectionType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SupplementalFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont>();
        }

        /// <summary>
        /// <para>Latin Font.</para>
        /// <para>Represents the following element tag in the schema: a:latin.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont? LatinFont
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>East Asian Font.</para>
        /// <para>Represents the following element tag in the schema: a:ea.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont? EastAsianFont
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Complex Script Font.</para>
        /// <para>Represents the following element tag in the schema: a:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont? ComplexScriptFont
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the FontReference Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fontRef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class FontReference : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontReference class.
        /// </summary>
        public FontReference() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontReference(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontReference(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontReference class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FontReference(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontCollectionIndexValues>? Index
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontCollectionIndexValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fontRef");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<FontReference>()
                .AddAttribute("idx", a => a.Index, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontReference>(deep);
    }

    /// <summary>
    /// <para>No AutoFit.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:noAutofit.</para>
    /// </summary>
    public partial class NoAutoFit : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoAutoFit class.
        /// </summary>
        public NoAutoFit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:noAutofit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoAutoFit>(deep);
    }

    /// <summary>
    /// <para>Normal AutoFit.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:normAutofit.</para>
    /// </summary>
    public partial class NormalAutoFit : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NormalAutoFit class.
        /// </summary>
        public NormalAutoFit() : base()
        {
        }

        /// <summary>
        /// <para>Font Scale</para>
        /// <para>Represents the following attribute in the schema: fontScale</para>
        /// </summary>
        public Int32Value? FontScale
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Line Space Reduction</para>
        /// <para>Represents the following attribute in the schema: lnSpcReduction</para>
        /// </summary>
        public Int32Value? LineSpaceReduction
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:normAutofit");
            builder.AddElement<NormalAutoFit>()
                .AddAttribute("fontScale", a => a.FontScale, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1000L), MaxInclusive = (100000L) });
                })
                .AddAttribute("lnSpcReduction", a => a.LineSpaceReduction, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (13200000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NormalAutoFit>(deep);
    }

    /// <summary>
    /// <para>Shape AutoFit.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spAutoFit.</para>
    /// </summary>
    public partial class ShapeAutoFit : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeAutoFit class.
        /// </summary>
        public ShapeAutoFit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spAutoFit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeAutoFit>(deep);
    }

    /// <summary>
    /// <para>Follow Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buClrTx.</para>
    /// </summary>
    public partial class BulletColorText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletColorText class.
        /// </summary>
        public BulletColorText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buClrTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColorText>(deep);
    }

    /// <summary>
    /// <para>Color Specified.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class BulletColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the BulletColor class.
        /// </summary>
        public BulletColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BulletColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BulletColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BulletColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BulletColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buClr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletColor>(deep);
    }

    /// <summary>
    /// <para>Extrusion Color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extrusionClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ExtrusionColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class.
        /// </summary>
        public ExtrusionColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtrusionColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtrusionColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtrusionColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtrusionColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extrusionClr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtrusionColor>(deep);
    }

    /// <summary>
    /// <para>Contour Color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:contourClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ContourColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ContourColor class.
        /// </summary>
        public ContourColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ContourColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ContourColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ContourColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ContourColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:contourClr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContourColor>(deep);
    }

    /// <summary>
    /// <para>Change Color From.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorFrom : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ColorFrom class.
        /// </summary>
        public ColorFrom() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorFrom(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorFrom(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorFrom class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorFrom(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrFrom");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorFrom>(deep);
    }

    /// <summary>
    /// <para>Change Color To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorTo : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ColorTo class.
        /// </summary>
        public ColorTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrTo");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorTo>(deep);
    }

    /// <summary>
    /// <para>Foreground color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fgClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ForegroundColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the ForegroundColor class.
        /// </summary>
        public ForegroundColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ForegroundColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ForegroundColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ForegroundColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ForegroundColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fgClr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForegroundColor>(deep);
    }

    /// <summary>
    /// <para>Background color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bgClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class BackgroundColor : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the BackgroundColor class.
        /// </summary>
        public BackgroundColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BackgroundColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bgClr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundColor>(deep);
    }

    /// <summary>
    /// <para>Defines the Highlight Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:highlight.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Highlight : ColorType
    {
        /// <summary>
        /// Initializes a new instance of the Highlight class.
        /// </summary>
        public Highlight() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Highlight(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Highlight(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Highlight class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Highlight(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:highlight");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Highlight>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ColorType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorType class.
        /// </summary>
        protected ColorType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ColorType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Bullet Size Follows Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzTx.</para>
    /// </summary>
    public partial class BulletSizeText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizeText class.
        /// </summary>
        public BulletSizeText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buSzTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizeText>(deep);
    }

    /// <summary>
    /// <para>Bullet Size Percentage.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzPct.</para>
    /// </summary>
    public partial class BulletSizePercentage : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizePercentage class.
        /// </summary>
        public BulletSizePercentage() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buSzPct");
            builder.AddElement<BulletSizePercentage>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (25000L), MaxInclusive = (400000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePercentage>(deep);
    }

    /// <summary>
    /// <para>Bullet Size Points.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buSzPts.</para>
    /// </summary>
    public partial class BulletSizePoints : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletSizePoints class.
        /// </summary>
        public BulletSizePoints() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buSzPts");
            builder.AddElement<BulletSizePoints>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (100L), MaxInclusive = (400000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletSizePoints>(deep);
    }

    /// <summary>
    /// <para>Follow text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buFontTx.</para>
    /// </summary>
    public partial class BulletFontText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BulletFontText class.
        /// </summary>
        public BulletFontText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buFontTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFontText>(deep);
    }

    /// <summary>
    /// <para>Specified.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buFont.</para>
    /// </summary>
    public partial class BulletFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the BulletFont class.
        /// </summary>
        public BulletFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buFont");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BulletFont>(deep);
    }

    /// <summary>
    /// <para>Latin Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:latin.</para>
    /// </summary>
    public partial class LatinFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the LatinFont class.
        /// </summary>
        public LatinFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:latin");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatinFont>(deep);
    }

    /// <summary>
    /// <para>East Asian Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ea.</para>
    /// </summary>
    public partial class EastAsianFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the EastAsianFont class.
        /// </summary>
        public EastAsianFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ea");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EastAsianFont>(deep);
    }

    /// <summary>
    /// <para>Complex Script Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cs.</para>
    /// </summary>
    public partial class ComplexScriptFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the ComplexScriptFont class.
        /// </summary>
        public ComplexScriptFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ComplexScriptFont>(deep);
    }

    /// <summary>
    /// <para>Defines the SymbolFont Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sym.</para>
    /// </summary>
    public partial class SymbolFont : TextFontType
    {
        /// <summary>
        /// Initializes a new instance of the SymbolFont class.
        /// </summary>
        public SymbolFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sym");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SymbolFont>(deep);
    }

    /// <summary>
    /// <para>Defines the TextFontType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TextFontType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextFontType class.
        /// </summary>
        protected TextFontType() : base()
        {
        }

        /// <summary>
        /// <para>Text Typeface</para>
        /// <para>Represents the following attribute in the schema: typeface</para>
        /// </summary>
        public StringValue? Typeface
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Panose Setting</para>
        /// <para>Represents the following attribute in the schema: panose</para>
        /// </summary>
        public HexBinaryValue? Panose
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Similar Font Family</para>
        /// <para>Represents the following attribute in the schema: pitchFamily</para>
        /// </summary>
        public SByteValue? PitchFamily
        {
            get => GetAttribute<SByteValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Similar Character Set</para>
        /// <para>Represents the following attribute in the schema: charset</para>
        /// </summary>
        public SByteValue? CharacterSet
        {
            get => GetAttribute<SByteValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TextFontType>()
                .AddAttribute("typeface", a => a.Typeface)
                .AddAttribute("panose", a => a.Panose, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (10L) });
                })
                .AddAttribute("pitchFamily", a => a.PitchFamily)
                .AddAttribute("charset", a => a.CharacterSet);
        }
    }

    /// <summary>
    /// <para>No Bullet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buNone.</para>
    /// </summary>
    public partial class NoBullet : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoBullet class.
        /// </summary>
        public NoBullet() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buNone");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBullet>(deep);
    }

    /// <summary>
    /// <para>Auto-Numbered Bullet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buAutoNum.</para>
    /// </summary>
    public partial class AutoNumberedBullet : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoNumberedBullet class.
        /// </summary>
        public AutoNumberedBullet() : base()
        {
        }

        /// <summary>
        /// <para>Bullet Autonumbering Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAutoNumberSchemeValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAutoNumberSchemeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Start Numbering At</para>
        /// <para>Represents the following attribute in the schema: startAt</para>
        /// </summary>
        public Int32Value? StartAt
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buAutoNum");
            builder.AddElement<AutoNumberedBullet>()
                .AddAttribute("type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("startAt", a => a.StartAt, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (32767L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoNumberedBullet>(deep);
    }

    /// <summary>
    /// <para>Character Bullet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buChar.</para>
    /// </summary>
    public partial class CharacterBullet : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterBullet class.
        /// </summary>
        public CharacterBullet() : base()
        {
        }

        /// <summary>
        /// <para>Bullet Character</para>
        /// <para>Represents the following attribute in the schema: char</para>
        /// </summary>
        public StringValue? Char
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buChar");
            builder.AddElement<CharacterBullet>()
                .AddAttribute("char", a => a.Char, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterBullet>(deep);
    }

    /// <summary>
    /// <para>Picture Bullet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:buBlip.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip" /> <c>&lt;a:blip></c></description></item>
    /// </list>
    /// </remark>
    public partial class PictureBullet : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureBullet class.
        /// </summary>
        public PictureBullet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBullet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBullet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBullet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureBullet(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:buBlip");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip), 1, 1)
            };
        }

        /// <summary>
        /// <para>Blip.</para>
        /// <para>Represents the following element tag in the schema: a:blip.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip? Blip
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureBullet>(deep);
    }

    /// <summary>
    /// <para>Underline Follows Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uLnTx.</para>
    /// </summary>
    public partial class UnderlineFollowsText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFollowsText class.
        /// </summary>
        public UnderlineFollowsText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:uLnTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFollowsText>(deep);
    }

    /// <summary>
    /// <para>Underline Stroke.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uLn.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class Underline : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Underline class.
        /// </summary>
        public Underline() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Underline(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Underline(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Underline class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Underline(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:uLn");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);
    }

    /// <summary>
    /// <para>Defines the Outline Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ln.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class Outline : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Outline(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Outline(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Outline class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Outline(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ln");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);
    }

    /// <summary>
    /// <para>Left Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnL.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class LeftBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class.
        /// </summary>
        public LeftBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LeftBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnL");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnR.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class RightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class.
        /// </summary>
        public RightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnR");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Top Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnT.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class TopBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class.
        /// </summary>
        public TopBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnT");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Bottom Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnB.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class BottomBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class.
        /// </summary>
        public BottomBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnB");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Top-Left to Bottom-Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnTlToBr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class TopLeftToBottomRightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class.
        /// </summary>
        public TopLeftToBottomRightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopLeftToBottomRightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnTlToBr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Bottom-Left to Top-Right Border Line Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnBlToTr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class BottomLeftToTopRightBorderLineProperties : LinePropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class.
        /// </summary>
        public BottomLeftToTopRightBorderLineProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomLeftToTopRightBorderLineProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomLeftToTopRightBorderLineProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomLeftToTopRightBorderLineProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomLeftToTopRightBorderLineProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnBlToTr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomLeftToTopRightBorderLineProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the LinePropertiesType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash" /> <c>&lt;a:custDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd" /> <c>&lt;a:headEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd" /> <c>&lt;a:tailEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter" /> <c>&lt;a:miter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round" /> <c>&lt;a:round></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash" /> <c>&lt;a:prstDash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class LinePropertiesType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class.
        /// </summary>
        protected LinePropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected LinePropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected LinePropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected LinePropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>line width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int32Value? Width
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>line cap</para>
        /// <para>Represents the following attribute in the schema: cap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineCapValues>? CapType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineCapValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>compound line type</para>
        /// <para>Represents the following attribute in the schema: cmpd</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CompoundLineValues>? CompoundLineType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CompoundLineValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>pen alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PenAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PenAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomDash>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HeadEnd>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TailEnd>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineJoinBevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Miter>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Round>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetDash>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddElement<LinePropertiesType>()
                .AddAttribute("w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (20116800L) });
                })
                .AddAttribute("cap", a => a.CapType, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("cmpd", a => a.CompoundLineType, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }
    }

    /// <summary>
    /// <para>Underline Fill Properties Follow Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uFillTx.</para>
    /// </summary>
    public partial class UnderlineFillText : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFillText class.
        /// </summary>
        public UnderlineFillText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:uFillTx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFillText>(deep);
    }

    /// <summary>
    /// <para>Underline Fill.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:uFill.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class UnderlineFill : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineFill class.
        /// </summary>
        public UnderlineFill() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public UnderlineFill(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public UnderlineFill(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the UnderlineFill class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public UnderlineFill(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:uFill");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>NoFill.</para>
        /// <para>Represents the following element tag in the schema: a:noFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill? NoFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SolidFill.</para>
        /// <para>Represents the following element tag in the schema: a:solidFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill? SolidFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GradientFill.</para>
        /// <para>Represents the following element tag in the schema: a:gradFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill? GradientFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BlipFill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill? BlipFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pattern Fill.</para>
        /// <para>Represents the following element tag in the schema: a:pattFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill? PatternFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Group Fill.</para>
        /// <para>Represents the following element tag in the schema: a:grpFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill? GroupFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineFill>(deep);
    }

    /// <summary>
    /// <para>Text Run.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:r.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties" /> <c>&lt;a:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text" /> <c>&lt;a:t></c></description></item>
    /// </list>
    /// </remark>
    public partial class Run : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Run class.
        /// </summary>
        public Run() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Run(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:r");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text), 1, 1)
            };
        }

        /// <summary>
        /// <para>Text Character Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties? RunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text String.</para>
        /// <para>Represents the following element tag in the schema: a:t.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text? Text
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);
    }

    /// <summary>
    /// <para>Text Line Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:br.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties" /> <c>&lt;a:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Break : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Break class.
        /// </summary>
        public Break() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Break(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Break(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Break class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Break(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:br");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Run Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties? RunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);
    }

    /// <summary>
    /// <para>Text Field.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fld.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties" /> <c>&lt;a:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties" /> <c>&lt;a:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text" /> <c>&lt;a:t></c></description></item>
    /// </list>
    /// </remark>
    public partial class Field : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Field class.
        /// </summary>
        public Field() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Field(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Field(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Field class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Field(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field ID</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public StringValue? Type
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fld");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text>();
            builder.AddElement<Field>()
                .AddAttribute("id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                })
                .AddAttribute("type", a => a.Type);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Character Properties.</para>
        /// <para>Represents the following element tag in the schema: a:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties? RunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: a:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties? ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text.</para>
        /// <para>Represents the following element tag in the schema: a:t.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text? Text
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Text>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Field>(deep);
    }

    /// <summary>
    /// <para>Graphic Object.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphic.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicData" /> <c>&lt;a:graphicData></c></description></item>
    /// </list>
    /// </remark>
    public partial class Graphic : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Graphic class.
        /// </summary>
        public Graphic() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Graphic(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Graphic(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Graphic class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Graphic(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:graphic");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicData>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicData), 1, 1)
            };
        }

        /// <summary>
        /// <para>Graphic Object Data.</para>
        /// <para>Represents the following element tag in the schema: a:graphicData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicData? GraphicData
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Graphic>(deep);
    }

    /// <summary>
    /// <para>Defines the Blip Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:blip.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel" /> <c>&lt;a:alphaBiLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling" /> <c>&lt;a:alphaCeiling></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor" /> <c>&lt;a:alphaFloor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse" /> <c>&lt;a:alphaInv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect" /> <c>&lt;a:alphaMod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed" /> <c>&lt;a:alphaModFix></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace" /> <c>&lt;a:alphaRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel" /> <c>&lt;a:biLevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur" /> <c>&lt;a:blur></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange" /> <c>&lt;a:clrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement" /> <c>&lt;a:clrRepl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone" /> <c>&lt;a:duotone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay" /> <c>&lt;a:fillOverlay></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale" /> <c>&lt;a:grayscl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl" /> <c>&lt;a:hsl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect" /> <c>&lt;a:lum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect" /> <c>&lt;a:tint></c></description></item>
    /// </list>
    /// </remark>
    public partial class Blip : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Blip class.
        /// </summary>
        public Blip() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blip(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Blip(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Blip class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Blip(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Embedded Picture Reference</para>
        /// <para>Represents the following attribute in the schema: r:embed</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Embed
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Linked Picture Reference</para>
        /// <para>Represents the following attribute in the schema: r:link</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Link
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Compression state for blips.</para>
        /// <para>Represents the following attribute in the schema: cstate</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipCompressionValues>? CompressionState
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipCompressionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:blip");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect>();
            builder.AddElement<Blip>()
                .AddAttribute("r:embed", a => a.Embed)
                .AddAttribute("r:link", a => a.Link)
                .AddAttribute("cstate", a => a.CompressionState, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaBiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaCeiling), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaFloor), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaInverse), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaModulationFixed), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AlphaReplace), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BiLevel), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blur), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorChange), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorReplacement), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Duotone), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillOverlay), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Grayscale), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hsl), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LuminanceEffect), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TintEffect), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtensionList), 0, 1)
            };
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:embed")));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:link")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Blip>(deep);
    }

    /// <summary>
    /// <para>Theme.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:theme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeElements" /> <c>&lt;a:themeElements></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorSchemeList" /> <c>&lt;a:extraClrSchemeLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColorList" /> <c>&lt;a:custClrLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ObjectDefaults" /> <c>&lt;a:objectDefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Theme : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Theme class.
        /// </summary>
        public Theme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Theme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Theme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Theme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>id, this property is only available in Office 2013 and later.</para>
        /// <para>Represents the following attribute in the schema: thm15:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:thm15=http://schemas.microsoft.com/office/thememl/2012/main
        /// </remark>
        public StringValue? ThemeId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:theme");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeElements>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorSchemeList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColorList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ObjectDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtensionList>();
            builder.AddElement<Theme>()
                .AddAttribute("name", a => a.Name)
                .AddAttribute("thm15:id", a => a.ThemeId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2013));
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeElements), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ObjectDefaults), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorSchemeList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColorList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ThemeElements.</para>
        /// <para>Represents the following element tag in the schema: a:themeElements.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeElements? ThemeElements
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeElements>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ObjectDefaults.</para>
        /// <para>Represents the following element tag in the schema: a:objectDefaults.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ObjectDefaults? ObjectDefaults
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ObjectDefaults>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtraColorSchemeList.</para>
        /// <para>Represents the following element tag in the schema: a:extraClrSchemeLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorSchemeList? ExtraColorSchemeList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorSchemeList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CustomColorList.</para>
        /// <para>Represents the following element tag in the schema: a:custClrLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColorList? CustomColorList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColorList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OfficeStyleSheetExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtensionList? OfficeStyleSheetExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Theme>(deep);

        internal Theme(ThemePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the ThemePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(ThemePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the ThemePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(ThemePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the ThemePart associated with this element.
        /// </summary>
        public ThemePart? ThemePart
        {
            get => OpenXmlPart as ThemePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Theme Override.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeOverride.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme" /> <c>&lt;a:clrScheme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme" /> <c>&lt;a:fontScheme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme" /> <c>&lt;a:fmtScheme></c></description></item>
    /// </list>
    /// </remark>
    public partial class ThemeOverride : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeOverride class.
        /// </summary>
        public ThemeOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ThemeOverride(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:themeOverride");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme), 0, 1)
            };
        }

        /// <summary>
        /// <para>Color Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme? ColorScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontScheme.</para>
        /// <para>Represents the following element tag in the schema: a:fontScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme? FontScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FormatScheme.</para>
        /// <para>Represents the following element tag in the schema: a:fmtScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme? FormatScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeOverride>(deep);

        internal ThemeOverride(ThemeOverridePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the ThemeOverridePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(ThemeOverridePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the ThemeOverridePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(ThemeOverridePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the ThemeOverridePart associated with this element.
        /// </summary>
        public ThemeOverridePart? ThemeOverridePart
        {
            get => OpenXmlPart as ThemeOverridePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Theme Manager.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeManager.</para>
    /// </summary>
    public partial class ThemeManager : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ThemeManager class.
        /// </summary>
        public ThemeManager() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:themeManager");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeManager>(deep);
    }

    /// <summary>
    /// <para>Master Color Mapping.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:masterClrMapping.</para>
    /// </summary>
    public partial class MasterColorMapping : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MasterColorMapping class.
        /// </summary>
        public MasterColorMapping() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:masterClrMapping");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MasterColorMapping>(deep);
    }

    /// <summary>
    /// <para>Defines the EmptyType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmptyType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmptyType class.
        /// </summary>
        protected EmptyType() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
        }
    }

    /// <summary>
    /// <para>Table.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableGrid" /> <c>&lt;a:tblGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableProperties" /> <c>&lt;a:tblPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableRow" /> <c>&lt;a:tr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Table : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Table(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tbl");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableGrid>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableRow>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableGrid), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableRow), 1, 1000)
            };
        }

        /// <summary>
        /// <para>Table Properties.</para>
        /// <para>Represents the following element tag in the schema: a:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableProperties? TableProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Grid.</para>
        /// <para>Represents the following element tag in the schema: a:tblGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableGrid? TableGrid
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableGrid>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);
    }

    /// <summary>
    /// <para>Table Style List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleEntry" /> <c>&lt;a:tblStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleList : TypedOpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleList class.
        /// </summary>
        public TableStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleList(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Default</para>
        /// <para>Represents the following attribute in the schema: def</para>
        /// </summary>
        public StringValue? Default
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tblStyleLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleEntry>();
            builder.AddElement<TableStyleList>()
                .AddAttribute("def", a => a.Default, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleEntry), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleList>(deep);

        internal TableStyleList(TableStylesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the TableStylesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(TableStylesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the TableStylesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(TableStylesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the TableStylesPart associated with this element.
        /// </summary>
        public TableStylesPart? TableStylesPart
        {
            get => OpenXmlPart as TableStylesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the ExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class ExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionList class.
        /// </summary>
        public ExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extension), 0, 0)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtensionList>(deep);
    }

    /// <summary>
    /// <para>Audio Start Time.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:st.</para>
    /// </summary>
    public partial class StartTime : AudioCDTimeType
    {
        /// <summary>
        /// Initializes a new instance of the StartTime class.
        /// </summary>
        public StartTime() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:st");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartTime>(deep);
    }

    /// <summary>
    /// <para>Audio End Time.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:end.</para>
    /// </summary>
    public partial class EndTime : AudioCDTimeType
    {
        /// <summary>
        /// Initializes a new instance of the EndTime class.
        /// </summary>
        public EndTime() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:end");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndTime>(deep);
    }

    /// <summary>
    /// <para>Defines the AudioCDTimeType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class AudioCDTimeType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AudioCDTimeType class.
        /// </summary>
        protected AudioCDTimeType() : base()
        {
        }

        /// <summary>
        /// <para>Track</para>
        /// <para>Represents the following attribute in the schema: track</para>
        /// </summary>
        public ByteValue? Track
        {
            get => GetAttribute<ByteValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Time</para>
        /// <para>Represents the following attribute in the schema: time</para>
        /// </summary>
        public UInt32Value? Time
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<AudioCDTimeType>()
                .AddAttribute("track", a => a.Track, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("time", a => a.Time);
        }
    }

    /// <summary>
    /// <para>Custom color.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custClr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomColor : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomColor class.
        /// </summary>
        public CustomColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomColor(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:custClr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<CustomColor>()
                .AddAttribute("name", a => a.Name);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColor>(deep);
    }

    /// <summary>
    /// <para>Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:font.</para>
    /// </summary>
    public partial class SupplementalFont : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SupplementalFont class.
        /// </summary>
        public SupplementalFont() : base()
        {
        }

        /// <summary>
        /// <para>Script</para>
        /// <para>Represents the following attribute in the schema: script</para>
        /// </summary>
        public StringValue? Script
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Typeface</para>
        /// <para>Represents the following attribute in the schema: typeface</para>
        /// </summary>
        public StringValue? Typeface
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:font");
            builder.AddElement<SupplementalFont>()
                .AddAttribute("script", a => a.Script, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("typeface", a => a.Typeface, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SupplementalFont>(deep);
    }

    /// <summary>
    /// <para>3D Scene Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:scene3d.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Backdrop" /> <c>&lt;a:backdrop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Camera" /> <c>&lt;a:camera></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig" /> <c>&lt;a:lightRig></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Scene3DType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Scene3DType class.
        /// </summary>
        public Scene3DType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Scene3DType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Scene3DType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Scene3DType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Scene3DType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:scene3d");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Backdrop>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Camera>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Camera), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Backdrop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Camera.</para>
        /// <para>Represents the following element tag in the schema: a:camera.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Camera? Camera
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Camera>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light Rig.</para>
        /// <para>Represents the following element tag in the schema: a:lightRig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig? LightRig
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Backdrop Plane.</para>
        /// <para>Represents the following element tag in the schema: a:backdrop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Backdrop? Backdrop
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Backdrop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Scene3DType>(deep);
    }

    /// <summary>
    /// <para>Effect Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType" /> <c>&lt;a:sp3d></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectStyle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectStyle class.
        /// </summary>
        public EffectStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effectStyle");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyle>(deep);
    }

    /// <summary>
    /// <para>Fill Style List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class FillStyleList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FillStyleList class.
        /// </summary>
        public FillStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FillStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FillStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FillStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fillStyleLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 3, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillStyleList>(deep);
    }

    /// <summary>
    /// <para>Line Style List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineStyleList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LineStyleList class.
        /// </summary>
        public LineStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnStyleLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 3, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineStyleList>(deep);
    }

    /// <summary>
    /// <para>Effect Style List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:effectStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyle" /> <c>&lt;a:effectStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class EffectStyleList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EffectStyleList class.
        /// </summary>
        public EffectStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EffectStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EffectStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EffectStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:effectStyleLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyle), 3, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EffectStyleList>(deep);
    }

    /// <summary>
    /// <para>Background Fill Style List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bgFillStyleLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class BackgroundFillStyleList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class.
        /// </summary>
        public BackgroundFillStyleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundFillStyleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BackgroundFillStyleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BackgroundFillStyleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BackgroundFillStyleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bgFillStyleLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 3, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BackgroundFillStyleList>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorScheme Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark1Color" /> <c>&lt;a:dk1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light1Color" /> <c>&lt;a:lt1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark2Color" /> <c>&lt;a:dk2></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light2Color" /> <c>&lt;a:lt2></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent1Color" /> <c>&lt;a:accent1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent2Color" /> <c>&lt;a:accent2></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent3Color" /> <c>&lt;a:accent3></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent4Color" /> <c>&lt;a:accent4></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent5Color" /> <c>&lt;a:accent5></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent6Color" /> <c>&lt;a:accent6></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hyperlink" /> <c>&lt;a:hlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FollowedHyperlinkColor" /> <c>&lt;a:folHlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorScheme : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorScheme class.
        /// </summary>
        public ColorScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrScheme");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark1Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light1Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark2Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light2Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent1Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent2Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent3Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent4Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent5Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent6Color>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FollowedHyperlinkColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<ColorScheme>()
                .AddAttribute("name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent1Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent2Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent3Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent4Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent5Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent6Color), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hyperlink), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FollowedHyperlinkColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Dark 1.</para>
        /// <para>Represents the following element tag in the schema: a:dk1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark1Color? Dark1Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light 1.</para>
        /// <para>Represents the following element tag in the schema: a:lt1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light1Color? Light1Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Dark 2.</para>
        /// <para>Represents the following element tag in the schema: a:dk2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark2Color? Dark2Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Dark2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light 2.</para>
        /// <para>Represents the following element tag in the schema: a:lt2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light2Color? Light2Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Light2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 1.</para>
        /// <para>Represents the following element tag in the schema: a:accent1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent1Color? Accent1Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent1Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 2.</para>
        /// <para>Represents the following element tag in the schema: a:accent2.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent2Color? Accent2Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent2Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 3.</para>
        /// <para>Represents the following element tag in the schema: a:accent3.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent3Color? Accent3Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent3Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 4.</para>
        /// <para>Represents the following element tag in the schema: a:accent4.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent4Color? Accent4Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent4Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 5.</para>
        /// <para>Represents the following element tag in the schema: a:accent5.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent5Color? Accent5Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent5Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Accent 6.</para>
        /// <para>Represents the following element tag in the schema: a:accent6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent6Color? Accent6Color
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Accent6Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hyperlink.</para>
        /// <para>Represents the following element tag in the schema: a:hlink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hyperlink? Hyperlink
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Hyperlink>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Followed Hyperlink.</para>
        /// <para>Represents the following element tag in the schema: a:folHlink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FollowedHyperlinkColor? FollowedHyperlinkColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FollowedHyperlinkColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorScheme>(deep);
    }

    /// <summary>
    /// <para>Font Scheme.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fontScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.MajorFont" /> <c>&lt;a:majorFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.MinorFont" /> <c>&lt;a:minorFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class FontScheme : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FontScheme class.
        /// </summary>
        public FontScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FontScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FontScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FontScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fontScheme");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.MajorFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.MinorFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<FontScheme>()
                .AddAttribute("name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.MajorFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.MinorFont), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Major Font.</para>
        /// <para>Represents the following element tag in the schema: a:majorFont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.MajorFont? MajorFont
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.MajorFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Minor fonts.</para>
        /// <para>Represents the following element tag in the schema: a:minorFont.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.MinorFont? MinorFont
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.MinorFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontScheme>(deep);
    }

    /// <summary>
    /// <para>Format Scheme.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fmtScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundFillStyleList" /> <c>&lt;a:bgFillStyleLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyleList" /> <c>&lt;a:effectStyleLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillStyleList" /> <c>&lt;a:fillStyleLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineStyleList" /> <c>&lt;a:lnStyleLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class FormatScheme : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FormatScheme class.
        /// </summary>
        public FormatScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormatScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormatScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormatScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FormatScheme(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fmtScheme");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundFillStyleList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyleList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillStyleList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineStyleList>();
            builder.AddElement<FormatScheme>()
                .AddAttribute("name", a => a.Name);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyleList), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundFillStyleList), 1, 1)
            };
        }

        /// <summary>
        /// <para>Fill Style List.</para>
        /// <para>Represents the following element tag in the schema: a:fillStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillStyleList? FillStyleList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Style List.</para>
        /// <para>Represents the following element tag in the schema: a:lnStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineStyleList? LineStyleList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Effect Style List.</para>
        /// <para>Represents the following element tag in the schema: a:effectStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyleList? EffectStyleList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectStyleList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Background Fill Style List.</para>
        /// <para>Represents the following element tag in the schema: a:bgFillStyleLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundFillStyleList? BackgroundFillStyleList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BackgroundFillStyleList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormatScheme>(deep);
    }

    /// <summary>
    /// <para>Dark 1.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dk1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Dark1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Dark1Color class.
        /// </summary>
        public Dark1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Dark1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:dk1");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark1Color>(deep);
    }

    /// <summary>
    /// <para>Light 1.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lt1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Light1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Light1Color class.
        /// </summary>
        public Light1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Light1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lt1");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light1Color>(deep);
    }

    /// <summary>
    /// <para>Dark 2.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dk2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Dark2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Dark2Color class.
        /// </summary>
        public Dark2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Dark2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Dark2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Dark2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:dk2");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dark2Color>(deep);
    }

    /// <summary>
    /// <para>Light 2.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lt2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Light2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Light2Color class.
        /// </summary>
        public Light2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Light2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Light2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Light2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lt2");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Light2Color>(deep);
    }

    /// <summary>
    /// <para>Accent 1.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent1.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent1Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent1Color class.
        /// </summary>
        public Accent1Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent1Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent1Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent1Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent1Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent1");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent1Color>(deep);
    }

    /// <summary>
    /// <para>Accent 2.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent2.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent2Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent2Color class.
        /// </summary>
        public Accent2Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent2Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent2Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent2Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent2Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent2");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent2Color>(deep);
    }

    /// <summary>
    /// <para>Accent 3.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent3.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent3Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent3Color class.
        /// </summary>
        public Accent3Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent3Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent3Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent3Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent3Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent3");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent3Color>(deep);
    }

    /// <summary>
    /// <para>Accent 4.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent4.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent4Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent4Color class.
        /// </summary>
        public Accent4Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent4Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent4Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent4Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent4Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent4");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent4Color>(deep);
    }

    /// <summary>
    /// <para>Accent 5.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent5.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent5Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent5Color class.
        /// </summary>
        public Accent5Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent5Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent5Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent5Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent5Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent5");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent5Color>(deep);
    }

    /// <summary>
    /// <para>Accent 6.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:accent6.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Accent6Color : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Accent6Color class.
        /// </summary>
        public Accent6Color() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent6Color(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Accent6Color(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Accent6Color class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Accent6Color(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:accent6");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Accent6Color>(deep);
    }

    /// <summary>
    /// <para>Hyperlink.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Hyperlink : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the Hyperlink class.
        /// </summary>
        public Hyperlink() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Hyperlink(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hlink");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);
    }

    /// <summary>
    /// <para>Followed Hyperlink.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:folHlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class FollowedHyperlinkColor : Color2Type
    {
        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class.
        /// </summary>
        public FollowedHyperlinkColor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FollowedHyperlinkColor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FollowedHyperlinkColor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FollowedHyperlinkColor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FollowedHyperlinkColor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:folHlink");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FollowedHyperlinkColor>(deep);
    }

    /// <summary>
    /// <para>Defines the Color2Type Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class Color2Type : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Color2Type class.
        /// </summary>
        protected Color2Type() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected Color2Type(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected Color2Type(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Color2Type class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected Color2Type(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Horizontal Ratio.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sx.</para>
    /// </summary>
    public partial class ScaleX : RatioType
    {
        /// <summary>
        /// Initializes a new instance of the ScaleX class.
        /// </summary>
        public ScaleX() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleX>(deep);
    }

    /// <summary>
    /// <para>Vertical Ratio.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sy.</para>
    /// </summary>
    public partial class ScaleY : RatioType
    {
        /// <summary>
        /// Initializes a new instance of the ScaleY class.
        /// </summary>
        public ScaleY() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sy");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleY>(deep);
    }

    /// <summary>
    /// <para>Defines the RatioType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RatioType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RatioType class.
        /// </summary>
        protected RatioType() : base()
        {
        }

        /// <summary>
        /// <para>Numerator</para>
        /// <para>Represents the following attribute in the schema: n</para>
        /// </summary>
        public Int32Value? Numerator
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Denominator</para>
        /// <para>Represents the following attribute in the schema: d</para>
        /// </summary>
        public Int32Value? Denominator
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<RatioType>()
                .AddAttribute("n", a => a.Numerator, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("d", a => a.Denominator, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:off.</para>
    /// </summary>
    public partial class Offset : Point2DType
    {
        /// <summary>
        /// Initializes a new instance of the Offset class.
        /// </summary>
        public Offset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:off");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Offset>(deep);
    }

    /// <summary>
    /// <para>Child Offset.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chOff.</para>
    /// </summary>
    public partial class ChildOffset : Point2DType
    {
        /// <summary>
        /// Initializes a new instance of the ChildOffset class.
        /// </summary>
        public ChildOffset() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:chOff");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildOffset>(deep);
    }

    /// <summary>
    /// <para>Defines the Point2DType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class Point2DType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Point2DType class.
        /// </summary>
        protected Point2DType() : base()
        {
        }

        /// <summary>
        /// <para>X-Axis Coordinate</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public Int64Value? X
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Axis Coordinate</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public Int64Value? Y
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<Point2DType>()
                .AddAttribute("x", a => a.X, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("y", a => a.Y, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }
    }

    /// <summary>
    /// <para>Extents.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    public partial class Extents : PositiveSize2DType
    {
        /// <summary>
        /// Initializes a new instance of the Extents class.
        /// </summary>
        public Extents() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Extents>(deep);
    }

    /// <summary>
    /// <para>Child Extents.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chExt.</para>
    /// </summary>
    public partial class ChildExtents : PositiveSize2DType
    {
        /// <summary>
        /// Initializes a new instance of the ChildExtents class.
        /// </summary>
        public ChildExtents() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:chExt");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChildExtents>(deep);
    }

    /// <summary>
    /// <para>Defines the PositiveSize2DType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PositiveSize2DType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositiveSize2DType class.
        /// </summary>
        protected PositiveSize2DType() : base()
        {
        }

        /// <summary>
        /// <para>Extent Length</para>
        /// <para>Represents the following attribute in the schema: cx</para>
        /// </summary>
        public Int64Value? Cx
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Extent Width</para>
        /// <para>Represents the following attribute in the schema: cy</para>
        /// </summary>
        public Int64Value? Cy
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PositiveSize2DType>()
                .AddAttribute("cx", a => a.Cx, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("cy", a => a.Cy, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                });
        }
    }

    /// <summary>
    /// <para>Shape Locks.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeLocks : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeLocks class.
        /// </summary>
        public ShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue? NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue? NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue? NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue? NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue? NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue? NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue? NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue? NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue? NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue? NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Text Editing</para>
        /// <para>Represents the following attribute in the schema: noTextEdit</para>
        /// </summary>
        public BooleanValue? NoTextEdit
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spLocks");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<ShapeLocks>()
                .AddAttribute("noGrp", a => a.NoGrouping)
                .AddAttribute("noSelect", a => a.NoSelection)
                .AddAttribute("noRot", a => a.NoRotation)
                .AddAttribute("noChangeAspect", a => a.NoChangeAspect)
                .AddAttribute("noMove", a => a.NoMove)
                .AddAttribute("noResize", a => a.NoResize)
                .AddAttribute("noEditPoints", a => a.NoEditPoints)
                .AddAttribute("noAdjustHandles", a => a.NoAdjustHandles)
                .AddAttribute("noChangeArrowheads", a => a.NoChangeArrowheads)
                .AddAttribute("noChangeShapeType", a => a.NoChangeShapeType)
                .AddAttribute("noTextEdit", a => a.NoTextEdit);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Connection Shape Locks.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnSpLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionShapeLocks : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class.
        /// </summary>
        public ConnectionShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue? NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue? NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue? NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue? NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue? NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue? NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue? NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue? NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue? NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue? NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cxnSpLocks");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtensionList>();
            builder.AddElement<ConnectionShapeLocks>()
                .AddAttribute("noGrp", a => a.NoGrouping)
                .AddAttribute("noSelect", a => a.NoSelection)
                .AddAttribute("noRot", a => a.NoRotation)
                .AddAttribute("noChangeAspect", a => a.NoChangeAspect)
                .AddAttribute("noMove", a => a.NoMove)
                .AddAttribute("noResize", a => a.NoResize)
                .AddAttribute("noEditPoints", a => a.NoEditPoints)
                .AddAttribute("noAdjustHandles", a => a.NoAdjustHandles)
                .AddAttribute("noChangeArrowheads", a => a.NoChangeArrowheads)
                .AddAttribute("noChangeShapeType", a => a.NoChangeShapeType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ConnectorLockingExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtensionList? ConnectorLockingExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Connection Start.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:stCxn.</para>
    /// </summary>
    public partial class StartConnection : ConnectionType
    {
        /// <summary>
        /// Initializes a new instance of the StartConnection class.
        /// </summary>
        public StartConnection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:stCxn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartConnection>(deep);
    }

    /// <summary>
    /// <para>Connection End.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:endCxn.</para>
    /// </summary>
    public partial class EndConnection : ConnectionType
    {
        /// <summary>
        /// Initializes a new instance of the EndConnection class.
        /// </summary>
        public EndConnection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:endCxn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndConnection>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectionType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class ConnectionType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionType class.
        /// </summary>
        protected ConnectionType() : base()
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public UInt32Value? Id
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Index</para>
        /// <para>Represents the following attribute in the schema: idx</para>
        /// </summary>
        public UInt32Value? Index
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<ConnectionType>()
                .AddAttribute("id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("idx", a => a.Index, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Graphic Frame Locks.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicFrameLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicFrameLocks : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class.
        /// </summary>
        public GraphicFrameLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrameLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrameLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrameLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicFrameLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue? NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Selection of Child Shapes</para>
        /// <para>Represents the following attribute in the schema: noDrilldown</para>
        /// </summary>
        public BooleanValue? NoDrilldown
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue? NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue? NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue? NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue? NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:graphicFrameLocks");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<GraphicFrameLocks>()
                .AddAttribute("noGrp", a => a.NoGrouping)
                .AddAttribute("noDrilldown", a => a.NoDrilldown)
                .AddAttribute("noSelect", a => a.NoSelection)
                .AddAttribute("noChangeAspect", a => a.NoChangeAspect)
                .AddAttribute("noMove", a => a.NoMove)
                .AddAttribute("noResize", a => a.NoResize);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrameLocks>(deep);
    }

    /// <summary>
    /// <para>Graphic Object Data.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeOverride" /> <c>&lt;a:themeOverride></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip" /> <c>&lt;a:blip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.LaserColor" /> <c>&lt;p14:laserClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenEffectsProperties" /> <c>&lt;a14:hiddenEffects></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeManager" /> <c>&lt;a:themeManager></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenFillProperties" /> <c>&lt;a14:hiddenFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic" /> <c>&lt;a:graphic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.LockedCanvas.LockedCanvas" /> <c>&lt;lc:lockedCanvas></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenLineProperties" /> <c>&lt;a14:hiddenLine></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.NonVisualDrawingProperties" /> <c>&lt;dgm14:cNvPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Picture.OfficeArtExtensionList" /> <c>&lt;pic14:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Theme" /> <c>&lt;a:theme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenScene3D" /> <c>&lt;a14:hiddenScene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenShape3D" /> <c>&lt;a14:hiddenSp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.M12.Diagram.ShapeProperties" /> <c>&lt;dgm1612:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties" /> <c>&lt;c15:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Picture.ShapeStyle" /> <c>&lt;pic14:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Table" /> <c>&lt;a:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleList" /> <c>&lt;a:tblStyleLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.M12.Diagram.TextListStyleType" /> <c>&lt;dgm1612:lstStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.Transform2D" /> <c>&lt;p14:xfrm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.PercentagePositionHeightOffset" /> <c>&lt;wp14:pctPosHOffset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.PercentagePositionVerticalOffset" /> <c>&lt;wp14:pctPosVOffset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CameraTool" /> <c>&lt;a14:cameraTool></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CompatExtension" /> <c>&lt;a14:compatExt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.GvmlContentPart" /> <c>&lt;a14:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.IsCanvas" /> <c>&lt;a14:isCanvas></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ImageProperties" /> <c>&lt;a14:imgProps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ShadowObscured" /> <c>&lt;a14:shadowObscured></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.TextMath" /> <c>&lt;a14:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.UseLocalDpi" /> <c>&lt;a14:useLocalDpi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.BackgroundProperties" /> <c>&lt;a15:backgroundPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.NonVisualGroupProperties" /> <c>&lt;a15:nonVisualGroupProps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.ObjectProperties" /> <c>&lt;a15:objectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.SignatureLine" /> <c>&lt;a15:signatureLine></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.ConnectableReferences" /> <c>&lt;a16:cxnDERefs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.CreationId" /> <c>&lt;a16:creationId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.RowIdIdentifier" /> <c>&lt;a16:rowId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.ColIdIdentifier" /> <c>&lt;a16:colId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.PredecessorDrawingElementReference" /> <c>&lt;a16:predDERef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main.PictureAttributionSourceURL" /> <c>&lt;a1611:picAttrSrcUrl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape.ClassificationOutcome" /> <c>&lt;aclsh:classification></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative.Decorative" /> <c>&lt;adec:decorative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor.HyperlinkColor" /> <c>&lt;ahyp:hlinkClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed.LiveFeedProperties" /> <c>&lt;alf:liveFeedProps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed.OEmbedShared" /> <c>&lt;aoe:oembedShared></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes.LineSketchStyleProperties" /> <c>&lt;ask:lineSketchStyleProps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink.ScriptLink" /> <c>&lt;asl:scriptLink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main.SVGBlip" /> <c>&lt;asvg:svgBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ExceptionForSave" /> <c>&lt;c15:xForSave></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShowDataLabelsRange" /> <c>&lt;c15:showDataLabelsRange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShowLeaderLines" /> <c>&lt;c15:showLeaderLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AutoGeneneratedCategories" /> <c>&lt;c15:autoCat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LeaderLines" /> <c>&lt;c15:leaderLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartSpace" /> <c>&lt;c:chartSpace></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Layout" /> <c>&lt;c15:layout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.NumberingFormat" /> <c>&lt;c15:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PivotSource" /> <c>&lt;c15:pivotSource></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartReference" /> <c>&lt;c:chart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText" /> <c>&lt;c15:tx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.InvertSolidFillFormat" /> <c>&lt;c14:invertSolidFillFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.PivotOptions" /> <c>&lt;c14:pivotOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.SketchOptions" /> <c>&lt;c14:sketchOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.Style" /> <c>&lt;c14:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.CategoryFilterExceptions" /> <c>&lt;c15:categoryFilterExceptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTable" /> <c>&lt;c15:dlblFieldTable></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredAreaSeries" /> <c>&lt;c15:filteredAreaSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredBarSeries" /> <c>&lt;c15:filteredBarSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredBubbleSeries" /> <c>&lt;c15:filteredBubbleSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredCategoryTitle" /> <c>&lt;c15:filteredCategoryTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredLineSeriesExtension" /> <c>&lt;c15:filteredLineSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredPieSeries" /> <c>&lt;c15:filteredPieSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredRadarSeries" /> <c>&lt;c15:filteredRadarSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredScatterSeries" /> <c>&lt;c15:filteredScatterSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredSeriesTitle" /> <c>&lt;c15:filteredSeriesTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredSurfaceSeries" /> <c>&lt;c15:filteredSurfaceSeries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FormulaReference" /> <c>&lt;c15:formulaRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FullReference" /> <c>&lt;c15:fullRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LevelReference" /> <c>&lt;c15:levelRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRange" /> <c>&lt;c15:datalabelsRange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2017.M03.Chart.DataDisplayOptions16" /> <c>&lt;c16r3:dataDisplayOptions16></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Chart.UserShapes" /> <c>&lt;c:userShapes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.ChartDrawing.ContentPart" /> <c>&lt;cdr14:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Compatibility.LegacyDrawing" /> <c>&lt;comp:legacyDrawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.ChartStyle.ChartStyle" /> <c>&lt;cs:chartStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.ChartStyle.ColorStyle" /> <c>&lt;cs:colorStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinition" /> <c>&lt;dgm:colorsDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinitionHeader" /> <c>&lt;dgm:colorsDefHdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinitionHeaderList" /> <c>&lt;dgm:colorsDefHdrLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.DataModelRoot" /> <c>&lt;dgm:dataModel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinition" /> <c>&lt;dgm:layoutDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinitionHeader" /> <c>&lt;dgm:layoutDefHdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinitionHeaderList" /> <c>&lt;dgm:layoutDefHdrLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.RelationshipIds" /> <c>&lt;dgm:relIds></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinition" /> <c>&lt;dgm:styleDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinitionHeader" /> <c>&lt;dgm:styleDefHdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinitionHeaderList" /> <c>&lt;dgm:styleDefHdrLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.RecolorImages" /> <c>&lt;dgm14:recolorImg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Diagram.NumberDiagramInfoList" /> <c>&lt;dgm1611:autoBuNodeInfoLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.DataModelExtensionBlock" /> <c>&lt;dsp:dataModelExt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.Drawing" /> <c>&lt;dsp:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Arc" /> <c>&lt;emma:arc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Derivation" /> <c>&lt;emma:derivation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.DerivedFrom" /> <c>&lt;emma:derived-from></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Emma" /> <c>&lt;emma:emma></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.EndPoint" /> <c>&lt;emma:endpoint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.EndPointInfo" /> <c>&lt;emma:endpoint-info></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Grammar" /> <c>&lt;emma:grammar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Group" /> <c>&lt;emma:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.GroupInfo" /> <c>&lt;emma:group-info></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Info" /> <c>&lt;emma:info></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Interpretation" /> <c>&lt;emma:interpretation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Lattice" /> <c>&lt;emma:lattice></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Literal" /> <c>&lt;emma:literal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Model" /> <c>&lt;emma:model></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Node" /> <c>&lt;emma:node></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.OneOf" /> <c>&lt;emma:one-of></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.M04.EMMA.Sequence" /> <c>&lt;emma:sequence></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Y2003.InkML.Ink" /> <c>&lt;inkml:ink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.MathProperties" /> <c>&lt;m:mathPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Ink.Y2010.Main.ContextNode" /> <c>&lt;msink:context></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Callout" /> <c>&lt;o:callout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.ClipPath" /> <c>&lt;o:clippath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Complex" /> <c>&lt;o:complex></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Diagram" /> <c>&lt;o:diagram></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Extrusion" /> <c>&lt;o:extrusion></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.FillExtendedProperties" /> <c>&lt;o:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Ink" /> <c>&lt;o:ink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Lock" /> <c>&lt;o:lock></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.OleObject" /> <c>&lt;o:OLEObject></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.ShapeDefaults" /> <c>&lt;o:shapedefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.ShapeLayout" /> <c>&lt;o:shapelayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.SignatureLine" /> <c>&lt;o:signatureline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.Skew" /> <c>&lt;o:skew></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.LeftStroke" /> <c>&lt;o:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.TopStroke" /> <c>&lt;o:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.RightStroke" /> <c>&lt;o:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.BottomStroke" /> <c>&lt;o:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Office.VML.ColumnStroke" /> <c>&lt;o:column></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ConnectorMonikerList" /> <c>&lt;oac:cxnSpMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DocumentContextMonikerList" /> <c>&lt;oac:dcMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DeMkLstDrawingElementMonikerList" /> <c>&lt;oac:deMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DeMasterMkLstDrawingElementMonikerList" /> <c>&lt;oac:deMasterMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DrawingMonikerList" /> <c>&lt;oac:dgMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DrawingSelectionStgList" /> <c>&lt;oac:drSelLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.EditorSelectionStgList" /> <c>&lt;oac:editorSelLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GraphicFrameMonikerList" /> <c>&lt;oac:graphicFrameMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GraphicParentMonikerList" /> <c>&lt;oac:graphicParentMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GroupCommand" /> <c>&lt;oac:grpCmd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GroupShapeMonikerList" /> <c>&lt;oac:grpSpMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.HyperlinkMonikerList" /> <c>&lt;oac:hlinkMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ImgDataImgData" /> <c>&lt;oac:imgData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.OrigImgDataImgData" /> <c>&lt;oac:origImgData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ImgLink" /> <c>&lt;oac:imgLink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.InkMonikerList" /> <c>&lt;oac:inkMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.Model3DMonikerList" /> <c>&lt;oac:model3DMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.PictureMonikerList" /> <c>&lt;oac:picMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ShapeMonikerList" /> <c>&lt;oac:spMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableCellMonikerList" /> <c>&lt;oac:tcMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableColumnMonikerList" /> <c>&lt;oac:gridColMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableMonikerList" /> <c>&lt;oac:tblMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableRowMonikerList" /> <c>&lt;oac:trMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextBodyMonikerList" /> <c>&lt;oac:txBodyMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextBodyPackage" /> <c>&lt;oac:txBodyPkg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextCharRangeMonikerList" /> <c>&lt;oac:txMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ViewSelectionStgList" /> <c>&lt;oac:viewSelLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.CommentAuthorList" /> <c>&lt;p:cmAuthorLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.CommentList" /> <c>&lt;p:cmLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.ContentPart" /> <c>&lt;p:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.HoneycombTransition" /> <c>&lt;p14:honeycomb></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlashTransition" /> <c>&lt;p14:flash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ExtensionListModify" /> <c>&lt;p14:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.HandoutMaster" /> <c>&lt;p:handoutMaster></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WarpTransition" /> <c>&lt;p14:warp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.NotesMaster" /> <c>&lt;p:notesMaster></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.NotesSlide" /> <c>&lt;p:notes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.OleObject" /> <c>&lt;p:oleObj></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DoorsTransition" /> <c>&lt;p14:doors></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WindowTransition" /> <c>&lt;p14:window></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.Presentation" /> <c>&lt;p:presentation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.PresentationProperties" /> <c>&lt;p:presentationPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.VortexTransition" /> <c>&lt;p14:vortex></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.PanTransition" /> <c>&lt;p14:pan></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.Slide" /> <c>&lt;p:sld></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideLayout" /> <c>&lt;p:sldLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideMaster" /> <c>&lt;p:sldMaster></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideSyncProperties" /> <c>&lt;p:sldSyncPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.TagList" /> <c>&lt;p:tagLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.PresentationML.Y2006.Main.ViewProperties" /> <c>&lt;p:viewPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WheelReverseTransition" /> <c>&lt;p14:wheelReverse></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.BrowseMode" /> <c>&lt;p14:browseMode></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.NonVisualContentPartProperties" /> <c>&lt;p14:nvContentPartPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DefaultImageDpi" /> <c>&lt;p14:defaultImageDpi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DiscardImageEditData" /> <c>&lt;p14:discardImageEditData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlythroughTransition" /> <c>&lt;p14:flythrough></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.GlitterTransition" /> <c>&lt;p14:glitter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.LaserTraceList" /> <c>&lt;p14:laserTraceLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SwitchTransition" /> <c>&lt;p14:switch></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlipTransition" /> <c>&lt;p14:flip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FerrisTransition" /> <c>&lt;p14:ferris></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.GalleryTransition" /> <c>&lt;p14:gallery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ConveyorTransition" /> <c>&lt;p14:conveyor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.Media" /> <c>&lt;p14:media></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.BookmarkTarget" /> <c>&lt;p14:bmkTgt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.PrismTransition" /> <c>&lt;p14:prism></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.CreationId" /> <c>&lt;p14:creationId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ModificationId" /> <c>&lt;p14:modId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.RevealTransition" /> <c>&lt;p14:reveal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.RippleTransition" /> <c>&lt;p14:ripple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SectionList" /> <c>&lt;p14:sectionLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SectionProperties" /> <c>&lt;p14:sectionPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShowEventRecordList" /> <c>&lt;p14:showEvtLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShowMediaControls" /> <c>&lt;p14:showMediaCtrls></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShredTransition" /> <c>&lt;p14:shred></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.ChartTrackingReferenceBased" /> <c>&lt;p15:chartTrackingRefBased></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.ThreadingInfo" /> <c>&lt;p15:threadingInfo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.SlideGuideList" /> <c>&lt;p15:sldGuideLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.NotesGuideList" /> <c>&lt;p15:notesGuideLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.PresenceInfo" /> <c>&lt;p15:presenceInfo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.PresetTransition" /> <c>&lt;p15:prstTrans></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.AuthorList" /> <c>&lt;p188:authorLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.CommentList" /> <c>&lt;p188:cmLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.CommentRelationship" /> <c>&lt;p188:commentRel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2019.M12.Main.TaskHistoryDetails" /> <c>&lt;p1912:taskHistoryDetails></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.AnimEffectMkLstAnimationEffectMonikerList" /> <c>&lt;pc:animEffectMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.AnimEffectParentMkLstAnimationEffectMonikerList" /> <c>&lt;pc:animEffectParentMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CommentAuthorMonikerList" /> <c>&lt;pc:cmAuthorMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CommentMonikerList" /> <c>&lt;pc:cmMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CustomShowMonikerList" /> <c>&lt;pc:custShowMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CustomXmlPartMonikerList" /> <c>&lt;pc:cXmlMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.DesignerTagMonikerList" /> <c>&lt;pc:designTagMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.DocumentMonikerList" /> <c>&lt;pc:docMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.HandoutMonikerList" /> <c>&lt;pc:handoutMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.MainMasterMonikerList" /> <c>&lt;pc:sldMasterMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesMasterMonikerList" /> <c>&lt;pc:notesMasterMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesMonikerList" /> <c>&lt;pc:notesMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesTextMonikerList" /> <c>&lt;pc:notesTxtMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.OsfTaskPaneAppMonikerList" /> <c>&lt;pc:tkAppMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SectionLinkObjMonikerList" /> <c>&lt;pc:sectionLnkObjMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SectionMonikerList" /> <c>&lt;pc:sectionMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideBaseMonikerList" /> <c>&lt;pc:sldBaseMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideLayoutMonikerList" /> <c>&lt;pc:sldLayoutMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideMonikerList" /> <c>&lt;pc:sldMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlidePosMonikerList" /> <c>&lt;pc:sldPosMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.StringTagMonikerList" /> <c>&lt;pc:tagMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SummaryZoomMonikerList" /> <c>&lt;pc:tocMkLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Picture.Picture" /> <c>&lt;pic:pic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.VML.InkAnnotationFlag" /> <c>&lt;pvml:iscomment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.VML.TextData" /> <c>&lt;pvml:textdata></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.SchemaLibrary.Y2006.Main.SchemaLibrary" /> <c>&lt;sl:schemaLibrary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Slicer.Slicer" /> <c>&lt;sle:slicer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main.ThemeFamily" /> <c>&lt;thm15:themeFamily></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.TimeSlicer.TimeSlicer" /> <c>&lt;tsle:timeslicer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Arc" /> <c>&lt;v:arc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Background" /> <c>&lt;v:background></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Curve" /> <c>&lt;v:curve></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Fill" /> <c>&lt;v:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Formulas" /> <c>&lt;v:formulas></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Group" /> <c>&lt;v:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ShapeHandles" /> <c>&lt;v:handles></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ImageFile" /> <c>&lt;v:image></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ImageData" /> <c>&lt;v:imagedata></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Line" /> <c>&lt;v:line></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Oval" /> <c>&lt;v:oval></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Path" /> <c>&lt;v:path></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.PolyLine" /> <c>&lt;v:polyline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Rectangle" /> <c>&lt;v:rect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.RoundRectangle" /> <c>&lt;v:roundrect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shadow" /> <c>&lt;v:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shape" /> <c>&lt;v:shape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shapetype" /> <c>&lt;v:shapetype></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Stroke" /> <c>&lt;v:stroke></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.TextBox" /> <c>&lt;v:textbox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.TextPath" /> <c>&lt;v:textpath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.Color" /> <c>&lt;w15:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Comments" /> <c>&lt;w:comments></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.DataBinding" /> <c>&lt;w15:dataBinding></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.FootnoteColumns" /> <c>&lt;w15:footnoteColumns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Document" /> <c>&lt;w:document></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.SdtRepeatedSectionItem" /> <c>&lt;w15:repeatingSectionItem></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.EntityPickerEmpty" /> <c>&lt;w14:entityPicker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Endnotes" /> <c>&lt;w:endnotes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Fonts" /> <c>&lt;w:fonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Footnotes" /> <c>&lt;w:footnotes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.GlossaryDocument" /> <c>&lt;w:glossaryDocument></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Header" /> <c>&lt;w:hdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Footer" /> <c>&lt;w:ftr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Numbering" /> <c>&lt;w:numbering></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.ChartTrackingRefBased" /> <c>&lt;w15:chartTrackingRefBased></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.DefaultCollapsed" /> <c>&lt;w15:collapsed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.WebExtensionLinked" /> <c>&lt;w15:webExtensionLinked></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.WebExtensionCreated" /> <c>&lt;w15:webExtensionCreated></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Recipients" /> <c>&lt;w:recipients></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Settings" /> <c>&lt;w:settings></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Styles" /> <c>&lt;w:styles></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.TextBoxContent" /> <c>&lt;w:txbxContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.WebSettings" /> <c>&lt;w:webSettings></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.AnchorLock" /> <c>&lt;w10:anchorlock></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.TopBorder" /> <c>&lt;w10:bordertop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.LeftBorder" /> <c>&lt;w10:borderleft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.RightBorder" /> <c>&lt;w10:borderright></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.BottomBorder" /> <c>&lt;w10:borderbottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.VML.TextWrap" /> <c>&lt;w10:wrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DefaultImageDpi" /> <c>&lt;w14:defaultImageDpi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DocumentId" /> <c>&lt;w14:docId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.ConflictMode" /> <c>&lt;w14:conflictMode></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DiscardImageEditingData" /> <c>&lt;w14:discardImageEditingData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.SdtContentCheckBox" /> <c>&lt;w14:checkbox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordML.ContentPart" /> <c>&lt;w14:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.CommentsEx" /> <c>&lt;w15:commentsEx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.PersistentDocumentId" /> <c>&lt;w15:docId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.People" /> <c>&lt;w15:people></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.Appearance" /> <c>&lt;w15:appearance></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2012.WordML.SdtRepeatedSection" /> <c>&lt;w15:repeatingSection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.WebExtensions.WebExtensions.Y2010.M11.WebExtension" /> <c>&lt;we:webextension></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.WebExtensions.WebExtensions.Y2010.M11.WebExtensionReference" /> <c>&lt;we:webextensionref></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed.OEmbed" /> <c>&lt;woe:oembed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.WordprocessingDrawing.Anchor" /> <c>&lt;wp:anchor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.WordprocessingDrawing.Inline" /> <c>&lt;wp:inline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.RelativeWidth" /> <c>&lt;wp14:sizeRelH></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.RelativeHeight" /> <c>&lt;wp14:sizeRelV></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing.WebVideoProperty" /> <c>&lt;wp15:webVideoPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingCanvas.WordprocessingCanvas" /> <c>&lt;wpc:wpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingGroup.WordprocessingGroup" /> <c>&lt;wpg:wgp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingShape.WordprocessingShape" /> <c>&lt;wps:wsp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.SpreadSheetDrawing.WorksheetDrawing" /> <c>&lt;xdr:wsDr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.SpreadSheetDrawing.ContentPart" /> <c>&lt;xdr:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.Y2010.SpreadSheetDrawing.ContentPart" /> <c>&lt;xdr14:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.VML.ClientData" /> <c>&lt;xvml:ClientData></c></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicData : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicData class.
        /// </summary>
        public GraphicData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicData(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Uniform Resource Identifier</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:graphicData");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeOverride>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Blip>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.LaserColor>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenEffectsProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ThemeManager>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenFillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.LockedCanvas.LockedCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Picture.OfficeArtExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Theme>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenScene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenShape3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.M12.Diagram.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Picture.ShapeStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Table>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.M12.Diagram.TextListStyleType>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.Transform2D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.PercentagePositionHeightOffset>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.PercentagePositionVerticalOffset>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CameraTool>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CompatExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.GvmlContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.IsCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ImageProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ShadowObscured>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.TextMath>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.UseLocalDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.BackgroundProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.NonVisualGroupProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.ObjectProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.ConnectableReferences>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.CreationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.RowIdIdentifier>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.ColIdIdentifier>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.PredecessorDrawingElementReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main.PictureAttributionSourceURL>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape.ClassificationOutcome>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative.Decorative>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor.HyperlinkColor>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed.LiveFeedProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed.OEmbedShared>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes.LineSketchStyleProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink.ScriptLink>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main.SVGBlip>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ExceptionForSave>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShowDataLabelsRange>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ShowLeaderLines>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.AutoGeneneratedCategories>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LeaderLines>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartSpace>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.Layout>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.PivotSource>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.ChartReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.ChartText>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.InvertSolidFillFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.PivotOptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.SketchOptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2007.M08.D02.Chart.Style>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.CategoryFilterExceptions>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelFieldTable>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredAreaSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredBarSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredBubbleSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredCategoryTitle>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredLineSeriesExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredPieSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredRadarSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredScatterSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredSeriesTitle>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FilteredSurfaceSeries>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FormulaReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.FullReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.LevelReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Chart.DataLabelsRange>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2017.M03.Chart.DataDisplayOptions16>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Chart.UserShapes>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.ChartDrawing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Compatibility.LegacyDrawing>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.ChartStyle.ChartStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.ChartStyle.ColorStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.ColorsDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.DataModelRoot>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.LayoutDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.RelationshipIds>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinition>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinitionHeader>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Diagram.StyleDefinitionHeaderList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.RecolorImages>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Diagram.NumberDiagramInfoList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.DataModelExtensionBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Arc>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Derivation>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.DerivedFrom>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Emma>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.EndPoint>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.EndPointInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Grammar>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.GroupInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Info>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Interpretation>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Lattice>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Literal>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Model>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Node>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.OneOf>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.M04.EMMA.Sequence>();
            builder.AddChild<DocumentFormat.OpenXml.Y2003.InkML.Ink>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.MathProperties>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.OfficeDocument.Y2006.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Ink.Y2010.Main.ContextNode>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Callout>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.ClipPath>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Complex>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Diagram>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Extrusion>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.FillExtendedProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Ink>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Lock>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.ShapeDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.ShapeLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.Skew>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.LeftStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.TopStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.RightStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.BottomStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Office.VML.ColumnStroke>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ConnectorMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DocumentContextMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DeMkLstDrawingElementMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DeMasterMkLstDrawingElementMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DrawingMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.DrawingSelectionStgList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.EditorSelectionStgList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GraphicFrameMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GraphicParentMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GroupCommand>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.GroupShapeMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.HyperlinkMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ImgDataImgData>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.OrigImgDataImgData>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ImgLink>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.InkMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.Model3DMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.PictureMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ShapeMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableCellMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableColumnMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TableRowMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextBodyMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextBodyPackage>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.TextCharRangeMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2013.Main.Command.ViewSelectionStgList>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.CommentAuthorList>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.CommentList>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.HoneycombTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlashTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ExtensionListModify>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.HandoutMaster>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WarpTransition>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.NotesMaster>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.NotesSlide>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DoorsTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WindowTransition>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.Presentation>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.PresentationProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.VortexTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.PanTransition>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.Slide>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideLayout>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideMaster>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.SlideSyncProperties>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.TagList>();
            builder.AddChild<DocumentFormat.OpenXml.PresentationML.Y2006.Main.ViewProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.WheelReverseTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.BrowseMode>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.NonVisualContentPartProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DefaultImageDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.DiscardImageEditData>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlythroughTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.GlitterTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.LaserTraceList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SwitchTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FlipTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.FerrisTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.GalleryTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ConveyorTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.Media>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.BookmarkTarget>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.PrismTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.CreationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ModificationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.RevealTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.RippleTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SectionList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.SectionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShowEventRecordList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShowMediaControls>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2010.Main.ShredTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.ChartTrackingReferenceBased>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.ThreadingInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.SlideGuideList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.NotesGuideList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.PresenceInfo>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2012.Main.PresetTransition>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.AuthorList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.CommentList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2018.M08.Main.CommentRelationship>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2019.M12.Main.TaskHistoryDetails>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.AnimEffectMkLstAnimationEffectMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.AnimEffectParentMkLstAnimationEffectMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CommentAuthorMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CommentMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CustomShowMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.CustomXmlPartMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.DesignerTagMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.DocumentMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.HandoutMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.MainMasterMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesMasterMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.NotesTextMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.OsfTaskPaneAppMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SectionLinkObjMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SectionMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideBaseMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideLayoutMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlideMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SlidePosMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.StringTagMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2013.Main.Command.SummaryZoomMonikerList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Picture.Picture>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.VML.InkAnnotationFlag>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.VML.TextData>();
            builder.AddChild<DocumentFormat.OpenXml.SchemaLibrary.Y2006.Main.SchemaLibrary>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Slicer.Slicer>();
            builder.AddChild<DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main.ThemeFamily>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.TimeSlicer.TimeSlicer>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Arc>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Background>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Curve>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Fill>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Formulas>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ShapeHandles>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageFile>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageData>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Line>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Oval>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Path>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.PolyLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.RoundRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shapetype>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Stroke>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.TextBox>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.TextPath>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.Color>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Comments>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.DataBinding>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.FootnoteColumns>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Document>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.SdtRepeatedSectionItem>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.EntityPickerEmpty>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Endnotes>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Fonts>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Footnotes>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.GlossaryDocument>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Header>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Footer>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Numbering>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.ChartTrackingRefBased>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.DefaultCollapsed>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.WebExtensionLinked>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.WebExtensionCreated>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Recipients>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Settings>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.Styles>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.CustomXmlConflictDeletionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.TextBoxContent>();
            builder.AddChild<DocumentFormat.OpenXml.WordprocessingML.Y2006.Main.WebSettings>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.AnchorLock>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.VML.TextWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DefaultImageDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DocumentId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.ConflictMode>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.DiscardImageEditingData>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.SdtContentCheckBox>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordML.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.CommentsEx>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.PersistentDocumentId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.People>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.Appearance>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2012.WordML.SdtRepeatedSection>();
            builder.AddChild<DocumentFormat.OpenXml.Office.WebExtensions.WebExtensions.Y2010.M11.WebExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office.WebExtensions.WebExtensions.Y2010.M11.WebExtensionReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed.OEmbed>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.WordprocessingDrawing.Anchor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.WordprocessingDrawing.Inline>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.RelativeWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingDrawing.RelativeHeight>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing.WebVideoProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingCanvas.WordprocessingCanvas>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingGroup.WordprocessingGroup>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2010.WordprocessingShape.WordprocessingShape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.SpreadSheetDrawing.WorksheetDrawing>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.SpreadSheetDrawing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.Y2010.SpreadSheetDrawing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Excel.VML.ClientData>();
            builder.AddElement<GraphicData>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new AnyParticle(0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicData>(deep);
    }

    /// <summary>
    /// <para>Diagram to Animate.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:dgm.</para>
    /// </summary>
    public partial class Diagram : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Diagram class.
        /// </summary>
        public Diagram() : base()
        {
        }

        /// <summary>
        /// <para>Identifier</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animation Build Step</para>
        /// <para>Represents the following attribute in the schema: bldStep</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DiagramBuildStepValues>? BuildStep
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DiagramBuildStepValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:dgm");
            builder.AddElement<Diagram>()
                .AddAttribute("id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                })
                .AddAttribute("bldStep", a => a.BuildStep, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Diagram>(deep);
    }

    /// <summary>
    /// <para>Chart to Animate.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:chart.</para>
    /// </summary>
    public partial class Chart : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Chart class.
        /// </summary>
        public Chart() : base()
        {
        }

        /// <summary>
        /// <para>Series Index</para>
        /// <para>Represents the following attribute in the schema: seriesIdx</para>
        /// </summary>
        public Int32Value? SeriesIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Category Index</para>
        /// <para>Represents the following attribute in the schema: categoryIdx</para>
        /// </summary>
        public Int32Value? CategoryIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animation Build Step</para>
        /// <para>Represents the following attribute in the schema: bldStep</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChartBuildStepValues>? BuildStep
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChartBuildStepValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:chart");
            builder.AddElement<Chart>()
                .AddAttribute("seriesIdx", a => a.SeriesIndex)
                .AddAttribute("categoryIdx", a => a.CategoryIndex)
                .AddAttribute("bldStep", a => a.BuildStep, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Chart>(deep);
    }

    /// <summary>
    /// <para>Build Diagram.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bldDgm.</para>
    /// </summary>
    public partial class BuildDiagram : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BuildDiagram class.
        /// </summary>
        public BuildDiagram() : base()
        {
        }

        /// <summary>
        /// <para>Build</para>
        /// <para>Represents the following attribute in the schema: bld</para>
        /// </summary>
        public StringValue? Build
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Reverse Animation</para>
        /// <para>Represents the following attribute in the schema: rev</para>
        /// </summary>
        public BooleanValue? ReverseAnimation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bldDgm");
            builder.AddElement<BuildDiagram>()
                .AddAttribute("bld", a => a.Build, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AnimationBuildValues>>(EnumValidator.Instance);
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AnimationDiagramOnlyBuildValues>>(EnumValidator.Instance);
                    });
                })
                .AddAttribute("rev", a => a.ReverseAnimation);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildDiagram>(deep);
    }

    /// <summary>
    /// <para>Build Chart.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bldChart.</para>
    /// </summary>
    public partial class BuildChart : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BuildChart class.
        /// </summary>
        public BuildChart() : base()
        {
        }

        /// <summary>
        /// <para>Build</para>
        /// <para>Represents the following attribute in the schema: bld</para>
        /// </summary>
        public StringValue? Build
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Animate Background</para>
        /// <para>Represents the following attribute in the schema: animBg</para>
        /// </summary>
        public BooleanValue? AnimateBackground
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bldChart");
            builder.AddElement<BuildChart>()
                .AddAttribute("bld", a => a.Build, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AnimationBuildValues>>(EnumValidator.Instance);
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AnimationChartOnlyBuildValues>>(EnumValidator.Instance);
                    });
                })
                .AddAttribute("animBg", a => a.AnimateBackground);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BuildChart>(deep);
    }

    /// <summary>
    /// <para>Shape Text Body.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txBody.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties" /> <c>&lt;a:bodyPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle" /> <c>&lt;a:lstStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Paragraph" /> <c>&lt;a:p></c></description></item>
    /// </list>
    /// </remark>
    public partial class TextBody : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBody class.
        /// </summary>
        public TextBody() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBody(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBody(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBody class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextBody(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:txBody");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Paragraph>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Paragraph), 1, 0)
            };
        }

        /// <summary>
        /// <para>Body Properties.</para>
        /// <para>Represents the following element tag in the schema: a:bodyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties? BodyProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text List Styles.</para>
        /// <para>Represents the following element tag in the schema: a:lstStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle? ListStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBody>(deep);
    }

    /// <summary>
    /// <para>Use Shape Text Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:useSpRect.</para>
    /// </summary>
    public partial class UseShapeRectangle : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UseShapeRectangle class.
        /// </summary>
        public UseShapeRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:useSpRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseShapeRectangle>(deep);
    }

    /// <summary>
    /// <para>Defines the Transform2D Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset" /> <c>&lt;a:off></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class Transform2D : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Transform2D class.
        /// </summary>
        public Transform2D() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Transform2D(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Transform2D(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Transform2D class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Transform2D(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value? Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Flip</para>
        /// <para>Represents the following attribute in the schema: flipH</para>
        /// </summary>
        public BooleanValue? HorizontalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Flip</para>
        /// <para>Represents the following attribute in the schema: flipV</para>
        /// </summary>
        public BooleanValue? VerticalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:xfrm");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents>();
            builder.AddElement<Transform2D>()
                .AddAttribute("rot", a => a.Rotation)
                .AddAttribute("flipH", a => a.HorizontalFlip)
                .AddAttribute("flipV", a => a.VerticalFlip);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents), 0, 1)
            };
        }

        /// <summary>
        /// <para>Offset.</para>
        /// <para>Represents the following element tag in the schema: a:off.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset? Offset
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extents.</para>
        /// <para>Represents the following element tag in the schema: a:ext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents? Extents
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Transform2D>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick" /> <c>&lt;a:hlinkClick></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnHover" /> <c>&lt;a:hlinkHover></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class.
        /// </summary>
        public NonVisualDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Application defined unique identifier.</para>
        /// <para>Represents the following attribute in the schema: id</para>
        /// </summary>
        public UInt32Value? Id
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Name compatible with Object Model (non-unique).</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Description of the drawing element.</para>
        /// <para>Represents the following attribute in the schema: descr</para>
        /// </summary>
        public StringValue? Description
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Flag determining to show or hide this element.</para>
        /// <para>Represents the following attribute in the schema: hidden</para>
        /// </summary>
        public BooleanValue? Hidden
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Title</para>
        /// <para>Represents the following attribute in the schema: title</para>
        /// </summary>
        public StringValue? Title
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnHover>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtensionList>();
            builder.AddElement<NonVisualDrawingProperties>()
                .AddAttribute("id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("descr", a => a.Description)
                .AddAttribute("hidden", a => a.Hidden)
                .AddAttribute("title", a => a.Title);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnHover), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Hyperlink associated with clicking or selecting the element..</para>
        /// <para>Represents the following element tag in the schema: a:hlinkClick.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick? HyperlinkOnClick
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hyperlink associated with hovering over the element..</para>
        /// <para>Represents the following element tag in the schema: a:hlinkHover.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnHover? HyperlinkOnHover
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnHover>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Future extension.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtensionList? NonVisualDrawingPropertiesExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeLocks" /> <c>&lt;a:spLocks></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualShapeDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class.
        /// </summary>
        public NonVisualShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Text Box</para>
        /// <para>Represents the following attribute in the schema: txBox</para>
        /// </summary>
        public BooleanValue? TextBox
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeLocks>();
            builder.AddElement<NonVisualShapeDrawingProperties>()
                .AddAttribute("txBox", a => a.TextBox);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Locks.</para>
        /// <para>Represents the following element tag in the schema: a:spLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeLocks? ShapeLocks
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties" /> <c>&lt;a:cNvPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeDrawingProperties" /> <c>&lt;a:cNvSpPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class.
        /// </summary>
        public NonVisualShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nvSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeDrawingProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties? NonVisualDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeDrawingProperties? NonVisualShapeDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Visual Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry" /> <c>&lt;a:custGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry" /> <c>&lt;a:prstGeom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType" /> <c>&lt;a:sp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeProperties class.
        /// </summary>
        public ShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>? BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            builder.AddElement<ShapeProperties>()
                .AddAttribute("bwMode", a => a.BlackWhiteMode, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomGeometry), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetGeometry), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Individual Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D? Transform2D
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Text Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UseShapeRectangle" /> <c>&lt;a:useSpRect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody" /> <c>&lt;a:txBody></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class TextShape : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextShape class.
        /// </summary>
        public TextShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:txSp");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UseShapeRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody), 1, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UseShapeRectangle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Text Body.</para>
        /// <para>Represents the following element tag in the schema: a:txBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody? TextBody
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextShape>(deep);
    }

    /// <summary>
    /// <para>Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:style.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference" /> <c>&lt;a:fontRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference" /> <c>&lt;a:fillRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference" /> <c>&lt;a:effectRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeStyle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeStyle class.
        /// </summary>
        public ShapeStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:style");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference), 1, 1)
            };
        }

        /// <summary>
        /// <para>LineReference.</para>
        /// <para>Represents the following element tag in the schema: a:lnRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference? LineReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillReference.</para>
        /// <para>Represents the following element tag in the schema: a:fillRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference? FillReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EffectReference.</para>
        /// <para>Represents the following element tag in the schema: a:effectRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference? EffectReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Font Reference.</para>
        /// <para>Represents the following element tag in the schema: a:fontRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference? FontReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeStyle>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Connector Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvCxnSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartConnection" /> <c>&lt;a:stCxn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndConnection" /> <c>&lt;a:endCxn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShapeLocks" /> <c>&lt;a:cxnSpLocks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualConnectorShapeDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class.
        /// </summary>
        public NonVisualConnectorShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectorShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectorShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectorShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualConnectorShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvCxnSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartConnection>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndConnection>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShapeLocks>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartConnection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndConnection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Connection Shape Locks.</para>
        /// <para>Represents the following element tag in the schema: a:cxnSpLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShapeLocks? ConnectionShapeLocks
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Connection Start.</para>
        /// <para>Represents the following element tag in the schema: a:stCxn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartConnection? StartConnection
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.StartConnection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Connection End.</para>
        /// <para>Represents the following element tag in the schema: a:endCxn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndConnection? EndConnection
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndConnection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectorShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Connection Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvCxnSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectorShapeDrawingProperties" /> <c>&lt;a:cNvCxnSpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties" /> <c>&lt;a:cNvPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualConnectionShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class.
        /// </summary>
        public NonVisualConnectionShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectionShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualConnectionShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualConnectionShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualConnectionShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nvCxnSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectorShapeDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectorShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties? NonVisualDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Connector Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvCxnSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectorShapeDrawingProperties? NonVisualConnectorShapeDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectorShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualConnectionShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Picture Drawing Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvPicPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureLocks" /> <c>&lt;a:picLocks></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPictureDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class.
        /// </summary>
        public NonVisualPictureDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPictureDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>preferRelativeResize</para>
        /// <para>Represents the following attribute in the schema: preferRelativeResize</para>
        /// </summary>
        public BooleanValue? PreferRelativeResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvPicPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureLocks>();
            builder.AddElement<NonVisualPictureDrawingProperties>()
                .AddAttribute("preferRelativeResize", a => a.PreferRelativeResize);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>PictureLocks.</para>
        /// <para>Represents the following element tag in the schema: a:picLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureLocks? PictureLocks
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NonVisualPicturePropertiesExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtensionList? NonVisualPicturePropertiesExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Picture.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvPicPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties" /> <c>&lt;a:cNvPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureDrawingProperties" /> <c>&lt;a:cNvPicPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPictureProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class.
        /// </summary>
        public NonVisualPictureProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPictureProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPictureProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPictureProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nvPicPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureDrawingProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties? NonVisualDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Picture Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPicPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureDrawingProperties? NonVisualPictureDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPictureProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Graphic Frame Drawing Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvGraphicFramePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrameLocks" /> <c>&lt;a:graphicFrameLocks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGraphicFrameDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class.
        /// </summary>
        public NonVisualGraphicFrameDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGraphicFrameDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvGraphicFramePr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrameLocks>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrameLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Graphic Frame Locks.</para>
        /// <para>Represents the following element tag in the schema: a:graphicFrameLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrameLocks? GraphicFrameLocks
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrameLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Graphic Frame.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvGraphicFramePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties" /> <c>&lt;a:cNvPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameDrawingProperties" /> <c>&lt;a:cNvGraphicFramePr></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGraphicFrameProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class.
        /// </summary>
        public NonVisualGraphicFrameProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGraphicFrameProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGraphicFrameProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGraphicFrameProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nvGraphicFramePr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameDrawingProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties? NonVisualDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Graphic Frame Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvGraphicFramePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameDrawingProperties? NonVisualGraphicFrameDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGraphicFrameProperties>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Group Shape Drawing Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cNvGrpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShapeLocks" /> <c>&lt;a:grpSpLocks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupShapeDrawingProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class.
        /// </summary>
        public NonVisualGroupShapeDrawingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeDrawingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeDrawingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeDrawingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupShapeDrawingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cNvGrpSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShapeLocks>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShapeLocks), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>GroupShapeLocks.</para>
        /// <para>Represents the following element tag in the schema: a:grpSpLocks.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShapeLocks? GroupShapeLocks
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShapeLocks>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NonVisualGroupDrawingShapePropsExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtensionList? NonVisualGroupDrawingShapePropsExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeDrawingProperties>(deep);
    }

    /// <summary>
    /// <para>Rotation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rot.</para>
    /// </summary>
    public partial class Rotation : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Rotation class.
        /// </summary>
        public Rotation() : base()
        {
        }

        /// <summary>
        /// <para>Latitude</para>
        /// <para>Represents the following attribute in the schema: lat</para>
        /// </summary>
        public Int32Value? Latitude
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Longitude</para>
        /// <para>Represents the following attribute in the schema: lon</para>
        /// </summary>
        public Int32Value? Longitude
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revolution</para>
        /// <para>Represents the following attribute in the schema: rev</para>
        /// </summary>
        public Int32Value? Revolution
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:rot");
            builder.AddElement<Rotation>()
                .AddAttribute("lat", a => a.Latitude, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("lon", a => a.Longitude, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                })
                .AddAttribute("rev", a => a.Revolution, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxExclusive = (21600000L), MinInclusive = (0L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rotation>(deep);
    }

    /// <summary>
    /// <para>Camera.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:camera.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation" /> <c>&lt;a:rot></c></description></item>
    /// </list>
    /// </remark>
    public partial class Camera : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Camera class.
        /// </summary>
        public Camera() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Camera(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Camera(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Camera class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Camera(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Camera Type</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetCameraValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetCameraValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field of View</para>
        /// <para>Represents the following attribute in the schema: fov</para>
        /// </summary>
        public Int32Value? FieldOfView
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Zoom</para>
        /// <para>Represents the following attribute in the schema: zoom</para>
        /// </summary>
        public Int32Value? Zoom
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:camera");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation>();
            builder.AddElement<Camera>()
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("fov", a => a.FieldOfView, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (10800000L) });
                })
                .AddAttribute("zoom", a => a.Zoom, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation), 0, 1)
            };
        }

        /// <summary>
        /// <para>Rotation.</para>
        /// <para>Represents the following element tag in the schema: a:rot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation? Rotation
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Camera>(deep);
    }

    /// <summary>
    /// <para>Light Rig.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lightRig.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation" /> <c>&lt;a:rot></c></description></item>
    /// </list>
    /// </remark>
    public partial class LightRig : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LightRig class.
        /// </summary>
        public LightRig() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LightRig(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LightRig(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LightRig class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LightRig(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rig Preset</para>
        /// <para>Represents the following attribute in the schema: rig</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRigValues>? Rig
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRigValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Direction</para>
        /// <para>Represents the following attribute in the schema: dir</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRigDirectionValues>? Direction
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRigDirectionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lightRig");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation>();
            builder.AddElement<LightRig>()
                .AddAttribute("rig", a => a.Rig, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("dir", a => a.Direction, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation), 0, 1)
            };
        }

        /// <summary>
        /// <para>Rotation.</para>
        /// <para>Represents the following element tag in the schema: a:rot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation? Rotation
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Rotation>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LightRig>(deep);
    }

    /// <summary>
    /// <para>Backdrop Plane.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:backdrop.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Anchor" /> <c>&lt;a:anchor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Normal" /> <c>&lt;a:norm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UpVector" /> <c>&lt;a:up></c></description></item>
    /// </list>
    /// </remark>
    public partial class Backdrop : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Backdrop class.
        /// </summary>
        public Backdrop() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Backdrop(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Backdrop(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Backdrop class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Backdrop(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:backdrop");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Anchor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Normal>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UpVector>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Anchor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Normal), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UpVector), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Anchor Point.</para>
        /// <para>Represents the following element tag in the schema: a:anchor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Anchor? Anchor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Anchor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Normal.</para>
        /// <para>Represents the following element tag in the schema: a:norm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Normal? Normal
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Normal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Up Vector.</para>
        /// <para>Represents the following element tag in the schema: a:up.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.UpVector? UpVector
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UpVector>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Backdrop>(deep);
    }

    /// <summary>
    /// <para>Anchor Point.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:anchor.</para>
    /// </summary>
    public partial class Anchor : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Anchor class.
        /// </summary>
        public Anchor() : base()
        {
        }

        /// <summary>
        /// <para>X-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public Int64Value? X
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public Int64Value? Y
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Z-Coordinate in 3D</para>
        /// <para>Represents the following attribute in the schema: z</para>
        /// </summary>
        public Int64Value? Z
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:anchor");
            builder.AddElement<Anchor>()
                .AddAttribute("x", a => a.X, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("y", a => a.Y, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("z", a => a.Z, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Anchor>(deep);
    }

    /// <summary>
    /// <para>Normal.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:norm.</para>
    /// </summary>
    public partial class Normal : Vector3DType
    {
        /// <summary>
        /// Initializes a new instance of the Normal class.
        /// </summary>
        public Normal() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:norm");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Normal>(deep);
    }

    /// <summary>
    /// <para>Up Vector.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:up.</para>
    /// </summary>
    public partial class UpVector : Vector3DType
    {
        /// <summary>
        /// Initializes a new instance of the UpVector class.
        /// </summary>
        public UpVector() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:up");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UpVector>(deep);
    }

    /// <summary>
    /// <para>Defines the Vector3DType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class Vector3DType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Vector3DType class.
        /// </summary>
        protected Vector3DType() : base()
        {
        }

        /// <summary>
        /// <para>Distance along X-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dx</para>
        /// </summary>
        public Int64Value? Dx
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance along Y-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dy</para>
        /// </summary>
        public Int64Value? Dy
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance along Z-axis in 3D</para>
        /// <para>Represents the following attribute in the schema: dz</para>
        /// </summary>
        public Int64Value? Dz
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<Vector3DType>()
                .AddAttribute("dx", a => a.Dx, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("dy", a => a.Dy, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                })
                .AddAttribute("dz", a => a.Dz, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
        }
    }

    /// <summary>
    /// <para>Top Bevel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevelT.</para>
    /// </summary>
    public partial class BevelTop : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the BevelTop class.
        /// </summary>
        public BevelTop() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bevelT");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelTop>(deep);
    }

    /// <summary>
    /// <para>Bottom Bevel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevelB.</para>
    /// </summary>
    public partial class BevelBottom : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the BevelBottom class.
        /// </summary>
        public BevelBottom() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bevelB");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BevelBottom>(deep);
    }

    /// <summary>
    /// <para>Bevel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bevel.</para>
    /// </summary>
    public partial class Bevel : BevelType
    {
        /// <summary>
        /// Initializes a new instance of the Bevel class.
        /// </summary>
        public Bevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bevel");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bevel>(deep);
    }

    /// <summary>
    /// <para>Defines the BevelType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BevelType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BevelType class.
        /// </summary>
        protected BevelType() : base()
        {
        }

        /// <summary>
        /// <para>Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value? Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value? Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Preset Bevel</para>
        /// <para>Represents the following attribute in the schema: prst</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelPresetValues>? Preset
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BevelPresetValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<BevelType>()
                .AddAttribute("w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("prst", a => a.Preset, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }
    }

    /// <summary>
    /// <para>Fill To Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillToRect.</para>
    /// </summary>
    public partial class FillToRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the FillToRectangle class.
        /// </summary>
        public FillToRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fillToRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillToRectangle>(deep);
    }

    /// <summary>
    /// <para>Tile Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tileRect.</para>
    /// </summary>
    public partial class TileRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the TileRectangle class.
        /// </summary>
        public TileRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tileRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TileRectangle>(deep);
    }

    /// <summary>
    /// <para>Fill Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:fillRect.</para>
    /// </summary>
    public partial class FillRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the FillRectangle class.
        /// </summary>
        public FillRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:fillRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FillRectangle>(deep);
    }

    /// <summary>
    /// <para>Source Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:srcRect.</para>
    /// </summary>
    public partial class SourceRectangle : RelativeRectangleType
    {
        /// <summary>
        /// Initializes a new instance of the SourceRectangle class.
        /// </summary>
        public SourceRectangle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:srcRect");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceRectangle>(deep);
    }

    /// <summary>
    /// <para>Defines the RelativeRectangleType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RelativeRectangleType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelativeRectangleType class.
        /// </summary>
        protected RelativeRectangleType() : base()
        {
        }

        /// <summary>
        /// <para>Left Offset</para>
        /// <para>Represents the following attribute in the schema: l</para>
        /// </summary>
        public Int32Value? Left
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Offset</para>
        /// <para>Represents the following attribute in the schema: t</para>
        /// </summary>
        public Int32Value? Top
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Offset</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public Int32Value? Right
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Offset</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public Int32Value? Bottom
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<RelativeRectangleType>()
                .AddAttribute("l", a => a.Left)
                .AddAttribute("t", a => a.Top)
                .AddAttribute("r", a => a.Right)
                .AddAttribute("b", a => a.Bottom);
        }
    }

    /// <summary>
    /// <para>Gradient stops.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class GradientStop : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientStop class.
        /// </summary>
        public GradientStop() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStop(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStop(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStop class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientStop(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Position</para>
        /// <para>Represents the following attribute in the schema: pos</para>
        /// </summary>
        public Int32Value? Position
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gs");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<GradientStop>()
                .AddAttribute("pos", a => a.Position, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100000L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RGB Color Model - Percentage Variant.</para>
        /// <para>Represents the following element tag in the schema: a:scrgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage? RgbColorModelPercentage
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RGB Color Model - Hex Variant.</para>
        /// <para>Represents the following element tag in the schema: a:srgbClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex? RgbColorModelHex
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hue, Saturation, Luminance Color Model.</para>
        /// <para>Represents the following element tag in the schema: a:hslClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor? HslColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>System Color.</para>
        /// <para>Represents the following element tag in the schema: a:sysClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor? SystemColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scheme Color.</para>
        /// <para>Represents the following element tag in the schema: a:schemeClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor? SchemeColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Preset Color.</para>
        /// <para>Represents the following element tag in the schema: a:prstClr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor? PresetColor
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStop>(deep);
    }

    /// <summary>
    /// <para>Gradient Stop List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gsLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStop" /> <c>&lt;a:gs></c></description></item>
    /// </list>
    /// </remark>
    public partial class GradientStopList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GradientStopList class.
        /// </summary>
        public GradientStopList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStopList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GradientStopList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GradientStopList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GradientStopList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gsLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStop>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientStop), 2, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GradientStopList>(deep);
    }

    /// <summary>
    /// <para>Shape Guide.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gd.</para>
    /// </summary>
    public partial class ShapeGuide : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeGuide class.
        /// </summary>
        public ShapeGuide() : base()
        {
        }

        /// <summary>
        /// <para>Shape Guide Name</para>
        /// <para>Represents the following attribute in the schema: name</para>
        /// </summary>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Guide Formula</para>
        /// <para>Represents the following attribute in the schema: fmla</para>
        /// </summary>
        public StringValue? Formula
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gd");
            builder.AddElement<ShapeGuide>()
                .AddAttribute("name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("fmla", a => a.Formula, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuide>(deep);
    }

    /// <summary>
    /// <para>Position.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pos.</para>
    /// </summary>
    public partial class Position : AdjustPoint2DType
    {
        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pos");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Position>(deep);
    }

    /// <summary>
    /// <para>Move end point.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pt.</para>
    /// </summary>
    public partial class Point : AdjustPoint2DType
    {
        /// <summary>
        /// Initializes a new instance of the Point class.
        /// </summary>
        public Point() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pt");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Point>(deep);
    }

    /// <summary>
    /// <para>Defines the AdjustPoint2DType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class AdjustPoint2DType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustPoint2DType class.
        /// </summary>
        protected AdjustPoint2DType() : base()
        {
        }

        /// <summary>
        /// <para>X-Coordinate</para>
        /// <para>Represents the following attribute in the schema: x</para>
        /// </summary>
        public StringValue? X
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Y-Coordinate</para>
        /// <para>Represents the following attribute in the schema: y</para>
        /// </summary>
        public StringValue? Y
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<AdjustPoint2DType>()
                .AddAttribute("x", a => a.X, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("y", a => a.Y, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                });
        }
    }

    /// <summary>
    /// <para>XY Adjust Handle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahXY.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position" /> <c>&lt;a:pos></c></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandleXY : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class.
        /// </summary>
        public AdjustHandleXY() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleXY(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleXY(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleXY class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandleXY(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Horizontal Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefX</para>
        /// </summary>
        public StringValue? XAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Horizontal Adjustment</para>
        /// <para>Represents the following attribute in the schema: minX</para>
        /// </summary>
        public StringValue? MinX
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Horizontal Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxX</para>
        /// </summary>
        public StringValue? MaxX
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefY</para>
        /// </summary>
        public StringValue? YAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Vertical Adjustment</para>
        /// <para>Represents the following attribute in the schema: minY</para>
        /// </summary>
        public StringValue? MinY
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Vertical Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxY</para>
        /// </summary>
        public StringValue? MaxY
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ahXY");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            builder.AddElement<AdjustHandleXY>()
                .AddAttribute("gdRefX", a => a.XAdjustmentGuide, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("minX", a => a.MinX, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("maxX", a => a.MaxX, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("gdRefY", a => a.YAdjustmentGuide, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("minY", a => a.MinY, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("maxY", a => a.MaxY, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleXY>(deep);
    }

    /// <summary>
    /// <para>Polar Adjust Handle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahPolar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position" /> <c>&lt;a:pos></c></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandlePolar : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class.
        /// </summary>
        public AdjustHandlePolar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandlePolar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandlePolar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandlePolar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandlePolar(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Radial Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefR</para>
        /// </summary>
        public StringValue? RadialAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Radial Adjustment</para>
        /// <para>Represents the following attribute in the schema: minR</para>
        /// </summary>
        public StringValue? MinRadial
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Radial Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxR</para>
        /// </summary>
        public StringValue? MaxRadial
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Angle Adjustment Guide</para>
        /// <para>Represents the following attribute in the schema: gdRefAng</para>
        /// </summary>
        public StringValue? AngleAdjustmentGuide
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Minimum Angle Adjustment</para>
        /// <para>Represents the following attribute in the schema: minAng</para>
        /// </summary>
        public StringValue? MinAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Maximum Angle Adjustment</para>
        /// <para>Represents the following attribute in the schema: maxAng</para>
        /// </summary>
        public StringValue? MaxAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ahPolar");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            builder.AddElement<AdjustHandlePolar>()
                .AddAttribute("gdRefR", a => a.RadialAdjustmentGuide, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("minR", a => a.MinRadial, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("maxR", a => a.MaxRadial, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("gdRefAng", a => a.AngleAdjustmentGuide, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("minAng", a => a.MinAngle, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(NumberValidator.Instance);
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("maxAng", a => a.MaxAngle, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(NumberValidator.Instance);
                        union.AddValidator(StringValidator.Instance);
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Shape Position Coordinate.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandlePolar>(deep);
    }

    /// <summary>
    /// <para>Shape Connection Site.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxn.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position" /> <c>&lt;a:pos></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionSite : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionSite class.
        /// </summary>
        public ConnectionSite() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSite(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSite(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSite class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionSite(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Connection Site Angle</para>
        /// <para>Represents the following attribute in the schema: ang</para>
        /// </summary>
        public StringValue? Angle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cxn");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            builder.AddElement<ConnectionSite>()
                .AddAttribute("ang", a => a.Angle, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(NumberValidator.Instance);
                        union.AddValidator(StringValidator.Instance);
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position), 1, 1)
            };
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: a:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Position>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSite>(deep);
    }

    /// <summary>
    /// <para>Close Shape Path.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:close.</para>
    /// </summary>
    public partial class CloseShapePath : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CloseShapePath class.
        /// </summary>
        public CloseShapePath() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:close");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CloseShapePath>(deep);
    }

    /// <summary>
    /// <para>Move Path To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point" /> <c>&lt;a:pt></c></description></item>
    /// </list>
    /// </remark>
    public partial class MoveTo : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MoveTo class.
        /// </summary>
        public MoveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:moveTo");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point), 1, 1)
            };
        }

        /// <summary>
        /// <para>Move end point.</para>
        /// <para>Represents the following element tag in the schema: a:pt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point? Point
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveTo>(deep);
    }

    /// <summary>
    /// <para>Draw Line To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point" /> <c>&lt;a:pt></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineTo : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LineTo class.
        /// </summary>
        public LineTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnTo");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point), 1, 1)
            };
        }

        /// <summary>
        /// <para>Line end point.</para>
        /// <para>Represents the following element tag in the schema: a:pt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point? Point
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineTo>(deep);
    }

    /// <summary>
    /// <para>Draw Arc To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:arcTo.</para>
    /// </summary>
    public partial class ArcTo : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ArcTo class.
        /// </summary>
        public ArcTo() : base()
        {
        }

        /// <summary>
        /// <para>Shape Arc Width Radius</para>
        /// <para>Represents the following attribute in the schema: wR</para>
        /// </summary>
        public StringValue? WidthRadius
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Height Radius</para>
        /// <para>Represents the following attribute in the schema: hR</para>
        /// </summary>
        public StringValue? HeightRadius
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Start Angle</para>
        /// <para>Represents the following attribute in the schema: stAng</para>
        /// </summary>
        public StringValue? StartAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shape Arc Swing Angle</para>
        /// <para>Represents the following attribute in the schema: swAng</para>
        /// </summary>
        public StringValue? SwingAngle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:arcTo");
            builder.AddElement<ArcTo>()
                .AddAttribute("wR", a => a.WidthRadius, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("hR", a => a.HeightRadius, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("stAng", a => a.StartAngle, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(NumberValidator.Instance);
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("swAng", a => a.SwingAngle, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(NumberValidator.Instance);
                        union.AddValidator(StringValidator.Instance);
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ArcTo>(deep);
    }

    /// <summary>
    /// <para>Draw Quadratic Bezier Curve To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:quadBezTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point" /> <c>&lt;a:pt></c></description></item>
    /// </list>
    /// </remark>
    public partial class QuadraticBezierCurveTo : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class.
        /// </summary>
        public QuadraticBezierCurveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuadraticBezierCurveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public QuadraticBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the QuadraticBezierCurveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public QuadraticBezierCurveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:quadBezTo");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point), 2, 2)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<QuadraticBezierCurveTo>(deep);
    }

    /// <summary>
    /// <para>Draw Cubic Bezier Curve To.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cubicBezTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point" /> <c>&lt;a:pt></c></description></item>
    /// </list>
    /// </remark>
    public partial class CubicBezierCurveTo : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class.
        /// </summary>
        public CubicBezierCurveTo() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CubicBezierCurveTo(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CubicBezierCurveTo(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CubicBezierCurveTo class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CubicBezierCurveTo(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cubicBezTo");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Point), 3, 3)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CubicBezierCurveTo>(deep);
    }

    /// <summary>
    /// <para>Shape Path.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:path.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ArcTo" /> <c>&lt;a:arcTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CloseShapePath" /> <c>&lt;a:close></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CubicBezierCurveTo" /> <c>&lt;a:cubicBezTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineTo" /> <c>&lt;a:lnTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.MoveTo" /> <c>&lt;a:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.QuadraticBezierCurveTo" /> <c>&lt;a:quadBezTo></c></description></item>
    /// </list>
    /// </remark>
    public partial class Path : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Path class.
        /// </summary>
        public Path() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Path(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Path(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Path class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Path(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Path Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value? Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value? Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Fill</para>
        /// <para>Represents the following attribute in the schema: fill</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathFillModeValues>? Fill
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PathFillModeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Path Stroke</para>
        /// <para>Represents the following attribute in the schema: stroke</para>
        /// </summary>
        public BooleanValue? Stroke
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>3D Extrusion Allowed</para>
        /// <para>Represents the following attribute in the schema: extrusionOk</para>
        /// </summary>
        public BooleanValue? ExtrusionOk
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:path");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ArcTo>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CloseShapePath>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CubicBezierCurveTo>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineTo>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.MoveTo>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.QuadraticBezierCurveTo>();
            builder.AddElement<Path>()
                .AddAttribute("w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (2147483647L) });
                })
                .AddAttribute("fill", a => a.Fill, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("stroke", a => a.Stroke)
                .AddAttribute("extrusionOk", a => a.ExtrusionOk);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CloseShapePath), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.MoveTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ArcTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.QuadraticBezierCurveTo), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CubicBezierCurveTo), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Path>(deep);
    }

    /// <summary>
    /// <para>List of Shape Adjust Values.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:avLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide" /> <c>&lt;a:gd></c></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustValueList : GeometryGuideListType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustValueList class.
        /// </summary>
        public AdjustValueList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustValueList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustValueList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustValueList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustValueList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:avLst");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustValueList>(deep);
    }

    /// <summary>
    /// <para>List of Shape Guides.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gdLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide" /> <c>&lt;a:gd></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeGuideList : GeometryGuideListType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class.
        /// </summary>
        public ShapeGuideList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeGuideList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeGuideList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeGuideList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeGuideList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gdLst");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeGuideList>(deep);
    }

    /// <summary>
    /// <para>Defines the GeometryGuideListType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide" /> <c>&lt;a:gd></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class GeometryGuideListType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class.
        /// </summary>
        protected GeometryGuideListType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected GeometryGuideListType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected GeometryGuideListType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeometryGuideListType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected GeometryGuideListType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeGuide>();
        }
    }

    /// <summary>
    /// <para>List of Shape Adjust Handles.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ahLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandlePolar" /> <c>&lt;a:ahPolar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleXY" /> <c>&lt;a:ahXY></c></description></item>
    /// </list>
    /// </remark>
    public partial class AdjustHandleList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class.
        /// </summary>
        public AdjustHandleList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AdjustHandleList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AdjustHandleList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AdjustHandleList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ahLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandlePolar>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleXY>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandleXY), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AdjustHandlePolar), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustHandleList>(deep);
    }

    /// <summary>
    /// <para>List of Shape Connection Sites.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSite" /> <c>&lt;a:cxn></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionSiteList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class.
        /// </summary>
        public ConnectionSiteList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSiteList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionSiteList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionSiteList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionSiteList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cxnLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSite>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionSite), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionSiteList>(deep);
    }

    /// <summary>
    /// <para>Shape Text Rectangle.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rect.</para>
    /// </summary>
    public partial class Rectangle : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Rectangle class.
        /// </summary>
        public Rectangle() : base()
        {
        }

        /// <summary>
        /// <para>Left</para>
        /// <para>Represents the following attribute in the schema: l</para>
        /// </summary>
        public StringValue? Left
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top</para>
        /// <para>Represents the following attribute in the schema: t</para>
        /// </summary>
        public StringValue? Top
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right</para>
        /// <para>Represents the following attribute in the schema: r</para>
        /// </summary>
        public StringValue? Right
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Position</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public StringValue? Bottom
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:rect");
            builder.AddElement<Rectangle>()
                .AddAttribute("l", a => a.Left, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("t", a => a.Top, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("r", a => a.Right, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                })
                .AddAttribute("b", a => a.Bottom, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int64Value>(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                        union.AddValidator(StringValidator.Instance);
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rectangle>(deep);
    }

    /// <summary>
    /// <para>List of Shape Paths.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pathLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Path" /> <c>&lt;a:path></c></description></item>
    /// </list>
    /// </remark>
    public partial class PathList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PathList class.
        /// </summary>
        public PathList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PathList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PathList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PathList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pathLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Path>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Path), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PathList>(deep);
    }

    /// <summary>
    /// <para>Dash Stop.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ds.</para>
    /// </summary>
    public partial class DashStop : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DashStop class.
        /// </summary>
        public DashStop() : base()
        {
        }

        /// <summary>
        /// <para>Dash Length</para>
        /// <para>Represents the following attribute in the schema: d</para>
        /// </summary>
        public Int32Value? DashLength
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Space Length</para>
        /// <para>Represents the following attribute in the schema: sp</para>
        /// </summary>
        public Int32Value? SpaceLength
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ds");
            builder.AddElement<DashStop>()
                .AddAttribute("d", a => a.DashLength, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("sp", a => a.SpaceLength, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:d"), true, 1, true, double.PositiveInfinity, true));
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:sp"), true, 1, true, double.PositiveInfinity, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DashStop>(deep);
    }

    /// <summary>
    /// <para>2D Transform for Grouped Objects.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:xfrm.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset" /> <c>&lt;a:off></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildOffset" /> <c>&lt;a:chOff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents" /> <c>&lt;a:ext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildExtents" /> <c>&lt;a:chExt></c></description></item>
    /// </list>
    /// </remark>
    public partial class TransformGroup : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TransformGroup class.
        /// </summary>
        public TransformGroup() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TransformGroup(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TransformGroup(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TransformGroup class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TransformGroup(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value? Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Flip</para>
        /// <para>Represents the following attribute in the schema: flipH</para>
        /// </summary>
        public BooleanValue? HorizontalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Flip</para>
        /// <para>Represents the following attribute in the schema: flipV</para>
        /// </summary>
        public BooleanValue? VerticalFlip
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:xfrm");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildOffset>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildExtents>();
            builder.AddElement<TransformGroup>()
                .AddAttribute("rot", a => a.Rotation)
                .AddAttribute("flipH", a => a.HorizontalFlip)
                .AddAttribute("flipV", a => a.VerticalFlip);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildOffset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildExtents), 0, 1)
            };
        }

        /// <summary>
        /// <para>Offset.</para>
        /// <para>Represents the following element tag in the schema: a:off.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset? Offset
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Offset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Extents.</para>
        /// <para>Represents the following element tag in the schema: a:ext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents? Extents
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Extents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Child Offset.</para>
        /// <para>Represents the following element tag in the schema: a:chOff.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildOffset? ChildOffset
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildOffset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Child Extents.</para>
        /// <para>Represents the following element tag in the schema: a:chExt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildExtents? ChildExtents
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ChildExtents>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TransformGroup>(deep);
    }

    /// <summary>
    /// <para>Defines the BodyProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bodyPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FlatText" /> <c>&lt;a:flatTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetTextWrap" /> <c>&lt;a:prstTxWarp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType" /> <c>&lt;a:sp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoAutoFit" /> <c>&lt;a:noAutofit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NormalAutoFit" /> <c>&lt;a:normAutofit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeAutoFit" /> <c>&lt;a:spAutoFit></c></description></item>
    /// </list>
    /// </remark>
    public partial class BodyProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BodyProperties class.
        /// </summary>
        public BodyProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BodyProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BodyProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BodyProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Rotation</para>
        /// <para>Represents the following attribute in the schema: rot</para>
        /// </summary>
        public Int32Value? Rotation
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Paragraph Spacing</para>
        /// <para>Represents the following attribute in the schema: spcFirstLastPara</para>
        /// </summary>
        public BooleanValue? UseParagraphSpacing
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Vertical Overflow</para>
        /// <para>Represents the following attribute in the schema: vertOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalOverflowValues>? VerticalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalOverflowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Horizontal Overflow</para>
        /// <para>Represents the following attribute in the schema: horzOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextHorizontalOverflowValues>? HorizontalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextHorizontalOverflowValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Text</para>
        /// <para>Represents the following attribute in the schema: vert</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalValues>? Vertical
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Wrapping Type</para>
        /// <para>Represents the following attribute in the schema: wrap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextWrappingValues>? Wrap
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextWrappingValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Left Inset</para>
        /// <para>Represents the following attribute in the schema: lIns</para>
        /// </summary>
        public Int32Value? LeftInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Inset</para>
        /// <para>Represents the following attribute in the schema: tIns</para>
        /// </summary>
        public Int32Value? TopInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Inset</para>
        /// <para>Represents the following attribute in the schema: rIns</para>
        /// </summary>
        public Int32Value? RightInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Inset</para>
        /// <para>Represents the following attribute in the schema: bIns</para>
        /// </summary>
        public Int32Value? BottomInset
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Number of Columns</para>
        /// <para>Represents the following attribute in the schema: numCol</para>
        /// </summary>
        public Int32Value? ColumnCount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Space Between Columns</para>
        /// <para>Represents the following attribute in the schema: spcCol</para>
        /// </summary>
        public Int32Value? ColumnSpacing
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Columns Right-To-Left</para>
        /// <para>Represents the following attribute in the schema: rtlCol</para>
        /// </summary>
        public BooleanValue? RightToLeftColumns
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>From WordArt</para>
        /// <para>Represents the following attribute in the schema: fromWordArt</para>
        /// </summary>
        public BooleanValue? FromWordArt
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor</para>
        /// <para>Represents the following attribute in the schema: anchor</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAnchoringTypeValues>? Anchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAnchoringTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor Center</para>
        /// <para>Represents the following attribute in the schema: anchorCtr</para>
        /// </summary>
        public BooleanValue? AnchorCenter
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Force Anti-Alias</para>
        /// <para>Represents the following attribute in the schema: forceAA</para>
        /// </summary>
        public BooleanValue? ForceAntiAlias
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Upright</para>
        /// <para>Represents the following attribute in the schema: upright</para>
        /// </summary>
        public BooleanValue? UpRight
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Compatible Line Spacing</para>
        /// <para>Represents the following attribute in the schema: compatLnSpc</para>
        /// </summary>
        public BooleanValue? CompatibleLineSpacing
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bodyPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FlatText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetTextWrap>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoAutoFit>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NormalAutoFit>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeAutoFit>();
            builder.AddElement<BodyProperties>()
                .AddAttribute("rot", a => a.Rotation)
                .AddAttribute("spcFirstLastPara", a => a.UseParagraphSpacing)
                .AddAttribute("vertOverflow", a => a.VerticalOverflow, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("horzOverflow", a => a.HorizontalOverflow, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("vert", a => a.Vertical, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("wrap", a => a.Wrap, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("lIns", a => a.LeftInset)
                .AddAttribute("tIns", a => a.TopInset)
                .AddAttribute("rIns", a => a.RightInset)
                .AddAttribute("bIns", a => a.BottomInset)
                .AddAttribute("numCol", a => a.ColumnCount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (16L) });
                })
                .AddAttribute("spcCol", a => a.ColumnSpacing, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("rtlCol", a => a.RightToLeftColumns)
                .AddAttribute("fromWordArt", a => a.FromWordArt)
                .AddAttribute("anchor", a => a.Anchor, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("anchorCtr", a => a.AnchorCenter)
                .AddAttribute("forceAA", a => a.ForceAntiAlias)
                .AddAttribute("upright", a => a.UpRight)
                .AddAttribute("compatLnSpc", a => a.CompatibleLineSpacing);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetTextWrap), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoAutoFit), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NormalAutoFit), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeAutoFit), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape3DType), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FlatText), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Preset Text Shape.</para>
        /// <para>Represents the following element tag in the schema: a:prstTxWarp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetTextWrap? PresetTextWrap
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetTextWrap>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BodyProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the ListStyle Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lstStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultParagraphProperties" /> <c>&lt;a:defPPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level1ParagraphProperties" /> <c>&lt;a:lvl1pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level2ParagraphProperties" /> <c>&lt;a:lvl2pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level3ParagraphProperties" /> <c>&lt;a:lvl3pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level4ParagraphProperties" /> <c>&lt;a:lvl4pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level5ParagraphProperties" /> <c>&lt;a:lvl5pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level6ParagraphProperties" /> <c>&lt;a:lvl6pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level7ParagraphProperties" /> <c>&lt;a:lvl7pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level8ParagraphProperties" /> <c>&lt;a:lvl8pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level9ParagraphProperties" /> <c>&lt;a:lvl9pPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ListStyle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ListStyle class.
        /// </summary>
        public ListStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ListStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ListStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ListStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ListStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lstStyle");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level1ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level2ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level3ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level4ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level5ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level6ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level7ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level8ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level9ParagraphProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level1ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level2ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level3ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level4ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level5ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level6ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level7ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level8ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level9ParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Default Paragraph Style.</para>
        /// <para>Represents the following element tag in the schema: a:defPPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultParagraphProperties? DefaultParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 1 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl1pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level1ParagraphProperties? Level1ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level1ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 2 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl2pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level2ParagraphProperties? Level2ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level2ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 3 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl3pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level3ParagraphProperties? Level3ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level3ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 4 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl4pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level4ParagraphProperties? Level4ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level4ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 5 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl5pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level5ParagraphProperties? Level5ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level5ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 6 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl6pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level6ParagraphProperties? Level6ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level6ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 7 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl7pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level7ParagraphProperties? Level7ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level7ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 8 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl8pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level8ParagraphProperties? Level8ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level8ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List Level 9 Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:lvl9pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level9ParagraphProperties? Level9ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Level9ParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListStyle>(deep);
    }

    /// <summary>
    /// <para>Shape Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties" /> <c>&lt;a:bodyPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle" /> <c>&lt;a:lstStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefault class.
        /// </summary>
        public ShapeDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spDef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeDefault>(deep);
    }

    /// <summary>
    /// <para>Line Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties" /> <c>&lt;a:bodyPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle" /> <c>&lt;a:lstStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the LineDefault class.
        /// </summary>
        public LineDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnDef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineDefault>(deep);
    }

    /// <summary>
    /// <para>Text Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:txDef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties" /> <c>&lt;a:bodyPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle" /> <c>&lt;a:lstStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class TextDefault : DefaultShapeDefinitionType
    {
        /// <summary>
        /// Initializes a new instance of the TextDefault class.
        /// </summary>
        public TextDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:txDef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextDefault>(deep);
    }

    /// <summary>
    /// <para>Defines the DefaultShapeDefinitionType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties" /> <c>&lt;a:bodyPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle" /> <c>&lt;a:lstStyle></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class DefaultShapeDefinitionType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class.
        /// </summary>
        protected DefaultShapeDefinitionType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DefaultShapeDefinitionType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DefaultShapeDefinitionType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultShapeDefinitionType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected DefaultShapeDefinitionType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle>();
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BodyProperties.</para>
        /// <para>Represents the following element tag in the schema: a:bodyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties? BodyProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BodyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ListStyle.</para>
        /// <para>Represents the following element tag in the schema: a:lstStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle? ListStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ListStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeStyle.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle? ShapeStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Override Color Mapping.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:overrideClrMapping.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class OverrideColorMapping : ColorMappingType
    {
        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class.
        /// </summary>
        public OverrideColorMapping() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OverrideColorMapping(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OverrideColorMapping(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OverrideColorMapping class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OverrideColorMapping(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:overrideClrMapping");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OverrideColorMapping>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorMap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:clrMap.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ColorMap : ColorMappingType
    {
        /// <summary>
        /// Initializes a new instance of the ColorMap class.
        /// </summary>
        public ColorMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColorMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColorMap(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:clrMap");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorMap>(deep);
    }

    /// <summary>
    /// <para>Defines the ColorMappingType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ColorMappingType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorMappingType class.
        /// </summary>
        protected ColorMappingType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorMappingType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ColorMappingType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColorMappingType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ColorMappingType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Background 1</para>
        /// <para>Represents the following attribute in the schema: bg1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Background1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 1</para>
        /// <para>Represents the following attribute in the schema: tx1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Text1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Background 2</para>
        /// <para>Represents the following attribute in the schema: bg2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Background2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 2</para>
        /// <para>Represents the following attribute in the schema: tx2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Text2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 1</para>
        /// <para>Represents the following attribute in the schema: accent1</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 2</para>
        /// <para>Represents the following attribute in the schema: accent2</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 3</para>
        /// <para>Represents the following attribute in the schema: accent3</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent3
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 4</para>
        /// <para>Represents the following attribute in the schema: accent4</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent4
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 5</para>
        /// <para>Represents the following attribute in the schema: accent5</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent5
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 6</para>
        /// <para>Represents the following attribute in the schema: accent6</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Accent6
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink</para>
        /// <para>Represents the following attribute in the schema: hlink</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? Hyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Followed Hyperlink</para>
        /// <para>Represents the following attribute in the schema: folHlink</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>? FollowedHyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<ColorMappingType>()
                .AddAttribute("bg1", a => a.Background1, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("tx1", a => a.Text1, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("bg2", a => a.Background2, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("tx2", a => a.Text2, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent1", a => a.Accent1, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent2", a => a.Accent2, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent3", a => a.Accent3, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent4", a => a.Accent4, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent5", a => a.Accent5, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("accent6", a => a.Accent6, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("hlink", a => a.Hyperlink, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("folHlink", a => a.FollowedHyperlink, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Extra Color Scheme.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extraClrScheme.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorMap" /> <c>&lt;a:clrMap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme" /> <c>&lt;a:clrScheme></c></description></item>
    /// </list>
    /// </remark>
    public partial class ExtraColorScheme : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class.
        /// </summary>
        public ExtraColorScheme() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorScheme(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorScheme(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorScheme class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtraColorScheme(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extraClrScheme");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorMap>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorMap), 0, 1)
            };
        }

        /// <summary>
        /// <para>ColorScheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme? ColorScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ColorMap.</para>
        /// <para>Represents the following element tag in the schema: a:clrMap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorMap? ColorMap
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorMap>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorScheme>(deep);
    }

    /// <summary>
    /// <para>Defines the ThemeElements Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:themeElements.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme" /> <c>&lt;a:clrScheme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme" /> <c>&lt;a:fontScheme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme" /> <c>&lt;a:fmtScheme></c></description></item>
    /// </list>
    /// </remark>
    public partial class ThemeElements : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeElements class.
        /// </summary>
        public ThemeElements() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeElements(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ThemeElements(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeElements class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ThemeElements(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:themeElements");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ColorScheme.</para>
        /// <para>Represents the following element tag in the schema: a:clrScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme? ColorScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ColorScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Font Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:fontScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme? FontScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Format Scheme.</para>
        /// <para>Represents the following element tag in the schema: a:fmtScheme.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme? FormatScheme
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FormatScheme>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeElements>(deep);
    }

    /// <summary>
    /// <para>Cell 3-D.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cell3D.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Bevel" /> <c>&lt;a:bevel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig" /> <c>&lt;a:lightRig></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Cell3DProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class.
        /// </summary>
        public Cell3DProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Cell3DProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Cell3DProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Cell3DProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Cell3DProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Preset Material</para>
        /// <para>Represents the following attribute in the schema: prstMaterial</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetMaterialTypeValues>? PresetMaterial
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetMaterialTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cell3D");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Bevel>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<Cell3DProperties>()
                .AddAttribute("prstMaterial", a => a.PresetMaterial, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Bevel), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Bevel.</para>
        /// <para>Represents the following element tag in the schema: a:bevel.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Bevel? Bevel
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Bevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Light Rig.</para>
        /// <para>Represents the following element tag in the schema: a:lightRig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig? LightRig
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LightRig>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Cell3DProperties>(deep);
    }

    /// <summary>
    /// <para>Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties" /> <c>&lt;a:cell3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorderLineProperties" /> <c>&lt;a:lnL></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorderLineProperties" /> <c>&lt;a:lnR></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorderLineProperties" /> <c>&lt;a:lnT></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorderLineProperties" /> <c>&lt;a:lnB></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorderLineProperties" /> <c>&lt;a:lnTlToBr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomLeftToTopRightBorderLineProperties" /> <c>&lt;a:lnBlToTr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellProperties class.
        /// </summary>
        public TableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Left Margin</para>
        /// <para>Represents the following attribute in the schema: marL</para>
        /// </summary>
        public Int32Value? LeftMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Margin</para>
        /// <para>Represents the following attribute in the schema: marR</para>
        /// </summary>
        public Int32Value? RightMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Top Margin</para>
        /// <para>Represents the following attribute in the schema: marT</para>
        /// </summary>
        public Int32Value? TopMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Bottom Margin</para>
        /// <para>Represents the following attribute in the schema: marB</para>
        /// </summary>
        public Int32Value? BottomMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Direction</para>
        /// <para>Represents the following attribute in the schema: vert</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalValues>? Vertical
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextVerticalValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor</para>
        /// <para>Represents the following attribute in the schema: anchor</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAnchoringTypeValues>? Anchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAnchoringTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Anchor Center</para>
        /// <para>Represents the following attribute in the schema: anchorCtr</para>
        /// </summary>
        public BooleanValue? AnchorCenter
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Overflow</para>
        /// <para>Represents the following attribute in the schema: horzOverflow</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextHorizontalOverflowValues>? HorizontalOverflow
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextHorizontalOverflowValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tcPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomLeftToTopRightBorderLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddElement<TableCellProperties>()
                .AddAttribute("marL", a => a.LeftMargin)
                .AddAttribute("marR", a => a.RightMargin)
                .AddAttribute("marT", a => a.TopMargin)
                .AddAttribute("marB", a => a.BottomMargin)
                .AddAttribute("vert", a => a.Vertical, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("anchor", a => a.Anchor, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("anchorCtr", a => a.AnchorCenter)
                .AddAttribute("horzOverflow", a => a.HorizontalOverflow, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomLeftToTopRightBorderLineProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Left Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnL.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorderLineProperties? LeftBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnR.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorderLineProperties? RightBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnT.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorderLineProperties? TopBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnB.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorderLineProperties? BottomBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top-Left to Bottom-Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnTlToBr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorderLineProperties? TopLeftToBottomRightBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom-Left to Top-Right Border Line Properties.</para>
        /// <para>Represents the following element tag in the schema: a:lnBlToTr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomLeftToTopRightBorderLineProperties? BottomLeftToTopRightBorderLineProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomLeftToTopRightBorderLineProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Cell 3-D.</para>
        /// <para>Represents the following element tag in the schema: a:cell3D.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties? Cell3DProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Table Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellProperties" /> <c>&lt;a:tcPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody" /> <c>&lt;a:txBody></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCell : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCell class.
        /// </summary>
        public TableCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCell(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Row Span</para>
        /// <para>Represents the following attribute in the schema: rowSpan</para>
        /// </summary>
        public Int32Value? RowSpan
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grid Span</para>
        /// <para>Represents the following attribute in the schema: gridSpan</para>
        /// </summary>
        public Int32Value? GridSpan
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Merge</para>
        /// <para>Represents the following attribute in the schema: hMerge</para>
        /// </summary>
        public BooleanValue? HorizontalMerge
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Merge</para>
        /// <para>Represents the following attribute in the schema: vMerge</para>
        /// </summary>
        public BooleanValue? VerticalMerge
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tc");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody>();
            builder.AddElement<TableCell>()
                .AddAttribute("rowSpan", a => a.RowSpan)
                .AddAttribute("gridSpan", a => a.GridSpan)
                .AddAttribute("hMerge", a => a.HorizontalMerge)
                .AddAttribute("vMerge", a => a.VerticalMerge);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:rowSpan"), true, 1, true, double.PositiveInfinity, true));
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("a:gridSpan"), true, 1, true, double.PositiveInfinity, true));
        }

        /// <summary>
        /// <para>Text Body.</para>
        /// <para>Represents the following element tag in the schema: a:txBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody? TextBody
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextBody>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: a:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellProperties? TableCellProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCell>(deep);
    }

    /// <summary>
    /// <para>Table Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tableStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground" /> <c>&lt;a:tblBg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable" /> <c>&lt;a:wholeTbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal" /> <c>&lt;a:band1H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal" /> <c>&lt;a:band2H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical" /> <c>&lt;a:band1V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical" /> <c>&lt;a:band2V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn" /> <c>&lt;a:lastCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn" /> <c>&lt;a:firstCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow" /> <c>&lt;a:lastRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell" /> <c>&lt;a:seCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell" /> <c>&lt;a:swCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow" /> <c>&lt;a:firstRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell" /> <c>&lt;a:neCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell" /> <c>&lt;a:nwCell></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyle : TableStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TableStyle class.
        /// </summary>
        public TableStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tableStyle");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("a:styleId"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);
    }

    /// <summary>
    /// <para>Table Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground" /> <c>&lt;a:tblBg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable" /> <c>&lt;a:wholeTbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal" /> <c>&lt;a:band1H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal" /> <c>&lt;a:band2H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical" /> <c>&lt;a:band1V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical" /> <c>&lt;a:band2V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn" /> <c>&lt;a:lastCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn" /> <c>&lt;a:firstCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow" /> <c>&lt;a:lastRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell" /> <c>&lt;a:seCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell" /> <c>&lt;a:swCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow" /> <c>&lt;a:firstRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell" /> <c>&lt;a:neCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell" /> <c>&lt;a:nwCell></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleEntry : TableStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class.
        /// </summary>
        public TableStyleEntry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleEntry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleEntry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleEntry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleEntry(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tblStyle");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("a:styleId"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleEntry>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground" /> <c>&lt;a:tblBg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable" /> <c>&lt;a:wholeTbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal" /> <c>&lt;a:band1H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal" /> <c>&lt;a:band2H></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical" /> <c>&lt;a:band1V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical" /> <c>&lt;a:band2V></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn" /> <c>&lt;a:lastCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn" /> <c>&lt;a:firstCol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow" /> <c>&lt;a:lastRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell" /> <c>&lt;a:seCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell" /> <c>&lt;a:swCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow" /> <c>&lt;a:firstRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell" /> <c>&lt;a:neCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell" /> <c>&lt;a:nwCell></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TableStyleType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleType class.
        /// </summary>
        protected TableStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TableStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TableStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TableStyleType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style ID</para>
        /// <para>Represents the following attribute in the schema: styleId</para>
        /// </summary>
        public StringValue? StyleId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Name</para>
        /// <para>Represents the following attribute in the schema: styleName</para>
        /// </summary>
        public StringValue? StyleName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell>();
            builder.AddElement<TableStyleType>()
                .AddAttribute("styleId", a => a.StyleId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                })
                .AddAttribute("styleName", a => a.StyleName, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <summary>
        /// <para>Table Background.</para>
        /// <para>Represents the following element tag in the schema: a:tblBg.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground? TableBackground
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Whole Table.</para>
        /// <para>Represents the following element tag in the schema: a:wholeTbl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable? WholeTable
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.WholeTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 1 Horizontal.</para>
        /// <para>Represents the following element tag in the schema: a:band1H.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal? Band1Horizontal
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Horizontal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 2 Horizontal.</para>
        /// <para>Represents the following element tag in the schema: a:band2H.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal? Band2Horizontal
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Horizontal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 1 Vertical.</para>
        /// <para>Represents the following element tag in the schema: a:band1V.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical? Band1Vertical
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band1Vertical>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Band 2 Vertical.</para>
        /// <para>Represents the following element tag in the schema: a:band2V.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical? Band2Vertical
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Band2Vertical>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Last Column.</para>
        /// <para>Represents the following element tag in the schema: a:lastCol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn? LastColumn
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastColumn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Column.</para>
        /// <para>Represents the following element tag in the schema: a:firstCol.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn? FirstColumn
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstColumn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Last Row.</para>
        /// <para>Represents the following element tag in the schema: a:lastRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow? LastRow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LastRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Southeast Cell.</para>
        /// <para>Represents the following element tag in the schema: a:seCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell? SoutheastCell
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SoutheastCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Southwest Cell.</para>
        /// <para>Represents the following element tag in the schema: a:swCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell? SouthwestCell
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SouthwestCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Row.</para>
        /// <para>Represents the following element tag in the schema: a:firstRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow? FirstRow
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FirstRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Northeast Cell.</para>
        /// <para>Represents the following element tag in the schema: a:neCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell? NortheastCell
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NortheastCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Northwest Cell.</para>
        /// <para>Represents the following element tag in the schema: a:nwCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell? NorthwestCell
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NorthwestCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Table Style ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tableStyleId.</para>
    /// </summary>
    public partial class TableStyleId : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleId class.
        /// </summary>
        public TableStyleId() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleId class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public TableStyleId(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
            builder.SetSchema("a:tableStyleId");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleId>(deep);
    }

    /// <summary>
    /// <para>Table Grid Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:gridCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class GridColumn : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GridColumn class.
        /// </summary>
        public GridColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GridColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GridColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GridColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GridColumn(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Width</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public Int64Value? Width
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:gridCol");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<GridColumn>()
                .AddAttribute("w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridColumn>(deep);
    }

    /// <summary>
    /// <para>Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyle" /> <c>&lt;a:tableStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleId" /> <c>&lt;a:tableStyleId></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>
        public TableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Right-to-Left</para>
        /// <para>Represents the following attribute in the schema: rtl</para>
        /// </summary>
        public BooleanValue? RightToLeft
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>First Row</para>
        /// <para>Represents the following attribute in the schema: firstRow</para>
        /// </summary>
        public BooleanValue? FirstRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>First Column</para>
        /// <para>Represents the following attribute in the schema: firstCol</para>
        /// </summary>
        public BooleanValue? FirstColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Row</para>
        /// <para>Represents the following attribute in the schema: lastRow</para>
        /// </summary>
        public BooleanValue? LastRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Last Column</para>
        /// <para>Represents the following attribute in the schema: lastCol</para>
        /// </summary>
        public BooleanValue? LastColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Banded Rows</para>
        /// <para>Represents the following attribute in the schema: bandRow</para>
        /// </summary>
        public BooleanValue? BandRow
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Banded Columns</para>
        /// <para>Represents the following attribute in the schema: bandCol</para>
        /// </summary>
        public BooleanValue? BandColumn
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tblPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleId>();
            builder.AddElement<TableProperties>()
                .AddAttribute("rtl", a => a.RightToLeft)
                .AddAttribute("firstRow", a => a.FirstRow)
                .AddAttribute("firstCol", a => a.FirstColumn)
                .AddAttribute("lastRow", a => a.LastRow)
                .AddAttribute("lastCol", a => a.LastColumn)
                .AddAttribute("bandRow", a => a.BandRow)
                .AddAttribute("bandCol", a => a.BandColumn);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyle), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableStyleId), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Grid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GridColumn" /> <c>&lt;a:gridCol></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableGrid : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGrid class.
        /// </summary>
        public TableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGrid(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tblGrid");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GridColumn>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GridColumn), 1, 1000)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGrid>(deep);
    }

    /// <summary>
    /// <para>Table Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCell" /> <c>&lt;a:tc></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableRow : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRow class.
        /// </summary>
        public TableRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Height</para>
        /// <para>Represents the following attribute in the schema: h</para>
        /// </summary>
        public Int64Value? Height
        {
            get => GetAttribute<Int64Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCell>();
            builder.AddElement<TableRow>()
                .AddAttribute("h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-27273042329600L), MaxInclusive = (27273042316900L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCell), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRow>(deep);
    }

    /// <summary>
    /// <para>Left Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:left.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class LeftBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorder class.
        /// </summary>
        public LeftBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LeftBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LeftBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LeftBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:left");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);
    }

    /// <summary>
    /// <para>Right Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:right.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class RightBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorder class.
        /// </summary>
        public RightBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RightBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RightBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RightBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:right");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);
    }

    /// <summary>
    /// <para>Top Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:top.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class TopBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorder class.
        /// </summary>
        public TopBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:top");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);
    }

    /// <summary>
    /// <para>Bottom Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:bottom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class BottomBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorder class.
        /// </summary>
        public BottomBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BottomBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BottomBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BottomBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:bottom");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);
    }

    /// <summary>
    /// <para>Inside Horizontal Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:insideH.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class InsideHorizontalBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class.
        /// </summary>
        public InsideHorizontalBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideHorizontalBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideHorizontalBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsideHorizontalBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:insideH");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideHorizontalBorder>(deep);
    }

    /// <summary>
    /// <para>Inside Vertical Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:insideV.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class InsideVerticalBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class.
        /// </summary>
        public InsideVerticalBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideVerticalBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsideVerticalBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsideVerticalBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:insideV");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideVerticalBorder>(deep);
    }

    /// <summary>
    /// <para>Top Left to Bottom Right Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tl2br.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class TopLeftToBottomRightBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class.
        /// </summary>
        public TopLeftToBottomRightBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopLeftToBottomRightBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopLeftToBottomRightBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tl2br");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightBorder>(deep);
    }

    /// <summary>
    /// <para>Top Right to Bottom Left Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tr2bl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class TopRightToBottomLeftBorder : ThemeableLineStyleType
    {
        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class.
        /// </summary>
        public TopRightToBottomLeftBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopRightToBottomLeftBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TopRightToBottomLeftBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TopRightToBottomLeftBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tr2bl");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopRightToBottomLeftBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the ThemeableLineStyleType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference" /> <c>&lt;a:lnRef></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ThemeableLineStyleType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class.
        /// </summary>
        protected ThemeableLineStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ThemeableLineStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ThemeableLineStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThemeableLineStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ThemeableLineStyleType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference>();
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: a:ln.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Reference.</para>
        /// <para>Represents the following element tag in the schema: a:lnRef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference? LineReference
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineReference>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Table Cell Borders.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorder" /> <c>&lt;a:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorder" /> <c>&lt;a:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorder" /> <c>&lt;a:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorder" /> <c>&lt;a:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideHorizontalBorder" /> <c>&lt;a:insideH></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideVerticalBorder" /> <c>&lt;a:insideV></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorder" /> <c>&lt;a:tl2br></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopRightToBottomLeftBorder" /> <c>&lt;a:tr2bl></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellBorders : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellBorders class.
        /// </summary>
        public TableCellBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellBorders(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tcBdr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideHorizontalBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideVerticalBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopRightToBottomLeftBorder>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideHorizontalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideVerticalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopRightToBottomLeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Left Border.</para>
        /// <para>Represents the following element tag in the schema: a:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border.</para>
        /// <para>Represents the following element tag in the schema: a:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Border.</para>
        /// <para>Represents the following element tag in the schema: a:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: a:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inside Horizontal Border.</para>
        /// <para>Represents the following element tag in the schema: a:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideHorizontalBorder? InsideHorizontalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inside Vertical Border.</para>
        /// <para>Represents the following element tag in the schema: a:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideVerticalBorder? InsideVerticalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.InsideVerticalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Left to Bottom Right Border.</para>
        /// <para>Represents the following element tag in the schema: a:tl2br.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorder? TopLeftToBottomRightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopLeftToBottomRightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Right to Bottom Left Border.</para>
        /// <para>Represents the following element tag in the schema: a:tr2bl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopRightToBottomLeftBorder? TopRightToBottomLeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TopRightToBottomLeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellBorders>(deep);
    }

    /// <summary>
    /// <para>Table Cell Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcTxStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fonts" /> <c>&lt;a:font></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference" /> <c>&lt;a:fontRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor" /> <c>&lt;a:hslClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor" /> <c>&lt;a:prstClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor" /> <c>&lt;a:schemeClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage" /> <c>&lt;a:scrgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex" /> <c>&lt;a:srgbClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor" /> <c>&lt;a:sysClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellTextStyle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class.
        /// </summary>
        public TableCellTextStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellTextStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellTextStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellTextStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellTextStyle(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Bold</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BooleanStyleValues>? Bold
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BooleanStyleValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Italic</para>
        /// <para>Represents the following attribute in the schema: i</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BooleanStyleValues>? Italic
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BooleanStyleValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tcTxStyle");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fonts>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor>();
            builder.AddElement<TableCellTextStyle>()
                .AddAttribute("b", a => a.Bold, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("i", a => a.Italic, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Fonts), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FontReference), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelPercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RgbColorModelHex), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HslColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SystemColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SchemeColor), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PresetColor), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellTextStyle>(deep);
    }

    /// <summary>
    /// <para>Table Cell Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tcStyle.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties" /> <c>&lt;a:cell3D></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties" /> <c>&lt;a:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference" /> <c>&lt;a:fillRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellBorders" /> <c>&lt;a:tcBdr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellStyle : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellStyle class.
        /// </summary>
        public TableCellStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tcStyle");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellBorders>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellBorders), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Cell3DProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Table Cell Borders.</para>
        /// <para>Represents the following element tag in the schema: a:tcBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellBorders? TableCellBorders
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellBorders>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellStyle>(deep);
    }

    /// <summary>
    /// <para>Table Background.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tblBg.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectPropertiesType" /> <c>&lt;a:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties" /> <c>&lt;a:fill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference" /> <c>&lt;a:fillRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference" /> <c>&lt;a:effectRef></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableBackground : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableBackground class.
        /// </summary>
        public TableBackground() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBackground(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBackground(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBackground class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableBackground(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tblBg");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectPropertiesType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillProperties), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.FillReference), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectPropertiesType), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectReference), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableBackground>(deep);
    }

    /// <summary>
    /// <para>Whole Table.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:wholeTbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class WholeTable : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the WholeTable class.
        /// </summary>
        public WholeTable() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WholeTable(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WholeTable(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WholeTable class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WholeTable(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:wholeTbl");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WholeTable>(deep);
    }

    /// <summary>
    /// <para>Band 1 Horizontal.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band1H.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Band1Horizontal : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class.
        /// </summary>
        public Band1Horizontal() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Horizontal(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Horizontal(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Horizontal class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band1Horizontal(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:band1H");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Horizontal>(deep);
    }

    /// <summary>
    /// <para>Band 2 Horizontal.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band2H.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Band2Horizontal : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class.
        /// </summary>
        public Band2Horizontal() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Horizontal(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Horizontal(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Horizontal class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band2Horizontal(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:band2H");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Horizontal>(deep);
    }

    /// <summary>
    /// <para>Band 1 Vertical.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band1V.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Band1Vertical : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band1Vertical class.
        /// </summary>
        public Band1Vertical() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Vertical(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band1Vertical(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band1Vertical class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band1Vertical(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:band1V");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band1Vertical>(deep);
    }

    /// <summary>
    /// <para>Band 2 Vertical.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:band2V.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Band2Vertical : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the Band2Vertical class.
        /// </summary>
        public Band2Vertical() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Vertical(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Band2Vertical(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Band2Vertical class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Band2Vertical(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:band2V");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Band2Vertical>(deep);
    }

    /// <summary>
    /// <para>Last Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lastCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class LastColumn : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LastColumn class.
        /// </summary>
        public LastColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LastColumn(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lastCol");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastColumn>(deep);
    }

    /// <summary>
    /// <para>First Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:firstCol.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class FirstColumn : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the FirstColumn class.
        /// </summary>
        public FirstColumn() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstColumn(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstColumn(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstColumn class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FirstColumn(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:firstCol");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstColumn>(deep);
    }

    /// <summary>
    /// <para>Last Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lastRow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class LastRow : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the LastRow class.
        /// </summary>
        public LastRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LastRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LastRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LastRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lastRow");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastRow>(deep);
    }

    /// <summary>
    /// <para>Southeast Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:seCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class SoutheastCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the SoutheastCell class.
        /// </summary>
        public SoutheastCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SoutheastCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SoutheastCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SoutheastCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SoutheastCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:seCell");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoutheastCell>(deep);
    }

    /// <summary>
    /// <para>Southwest Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:swCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class SouthwestCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the SouthwestCell class.
        /// </summary>
        public SouthwestCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SouthwestCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SouthwestCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SouthwestCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SouthwestCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:swCell");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SouthwestCell>(deep);
    }

    /// <summary>
    /// <para>First Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:firstRow.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class FirstRow : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the FirstRow class.
        /// </summary>
        public FirstRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FirstRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FirstRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FirstRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:firstRow");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstRow>(deep);
    }

    /// <summary>
    /// <para>Northeast Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:neCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class NortheastCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the NortheastCell class.
        /// </summary>
        public NortheastCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NortheastCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NortheastCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NortheastCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NortheastCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:neCell");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NortheastCell>(deep);
    }

    /// <summary>
    /// <para>Northwest Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nwCell.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class NorthwestCell : TablePartStyleType
    {
        /// <summary>
        /// Initializes a new instance of the NorthwestCell class.
        /// </summary>
        public NorthwestCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NorthwestCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NorthwestCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NorthwestCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NorthwestCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nwCell");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NorthwestCell>(deep);
    }

    /// <summary>
    /// <para>Defines the TablePartStyleType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle" /> <c>&lt;a:tcStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle" /> <c>&lt;a:tcTxStyle></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TablePartStyleType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class.
        /// </summary>
        protected TablePartStyleType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TablePartStyleType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TablePartStyleType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePartStyleType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TablePartStyleType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle>();
        }

        /// <summary>
        /// <para>Table Cell Text Style.</para>
        /// <para>Represents the following element tag in the schema: a:tcTxStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle? TableCellTextStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellTextStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Style.</para>
        /// <para>Represents the following element tag in the schema: a:tcStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle? TableCellStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TableCellStyle>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Text Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class.
        /// </summary>
        public ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Default Paragraph Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:defPPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class DefaultParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class.
        /// </summary>
        public DefaultParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DefaultParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:defPPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 1 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl1pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level1ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class.
        /// </summary>
        public Level1ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level1ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level1ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level1ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level1ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl1pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level1ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 2 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl2pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level2ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class.
        /// </summary>
        public Level2ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level2ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level2ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level2ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level2ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl2pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level2ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 3 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl3pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level3ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class.
        /// </summary>
        public Level3ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level3ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level3ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level3ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level3ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl3pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level3ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 4 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl4pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level4ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class.
        /// </summary>
        public Level4ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level4ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level4ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level4ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level4ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl4pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level4ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 5 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl5pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level5ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class.
        /// </summary>
        public Level5ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level5ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level5ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level5ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level5ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl5pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level5ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 6 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl6pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level6ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class.
        /// </summary>
        public Level6ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level6ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level6ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level6ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level6ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl6pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level6ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 7 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl7pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level7ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class.
        /// </summary>
        public Level7ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level7ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level7ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level7ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level7ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl7pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level7ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 8 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl8pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level8ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class.
        /// </summary>
        public Level8ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level8ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level8ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level8ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level8ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl8pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level8ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>List Level 9 Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lvl9pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level9ParagraphProperties : TextParagraphPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class.
        /// </summary>
        public Level9ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level9ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level9ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level9ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level9ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lvl9pPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level9ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TextParagraphPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor" /> <c>&lt;a:buClr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet" /> <c>&lt;a:buAutoNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet" /> <c>&lt;a:buBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText" /> <c>&lt;a:buClrTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText" /> <c>&lt;a:buSzTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage" /> <c>&lt;a:buSzPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints" /> <c>&lt;a:buSzPts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText" /> <c>&lt;a:buFontTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties" /> <c>&lt;a:defRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet" /> <c>&lt;a:buChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont" /> <c>&lt;a:buFont></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet" /> <c>&lt;a:buNone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing" /> <c>&lt;a:lnSpc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore" /> <c>&lt;a:spcBef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter" /> <c>&lt;a:spcAft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList" /> <c>&lt;a:tabLst></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextParagraphPropertiesType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class.
        /// </summary>
        protected TextParagraphPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextParagraphPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextParagraphPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextParagraphPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextParagraphPropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Left Margin</para>
        /// <para>Represents the following attribute in the schema: marL</para>
        /// </summary>
        public Int32Value? LeftMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Margin</para>
        /// <para>Represents the following attribute in the schema: marR</para>
        /// </summary>
        public Int32Value? RightMargin
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Level</para>
        /// <para>Represents the following attribute in the schema: lvl</para>
        /// </summary>
        public Int32Value? Level
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Indent</para>
        /// <para>Represents the following attribute in the schema: indent</para>
        /// </summary>
        public Int32Value? Indent
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAlignmentTypeValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextAlignmentTypeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Tab Size</para>
        /// <para>Represents the following attribute in the schema: defTabSz</para>
        /// </summary>
        public Int32Value? DefaultTabSize
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right To Left</para>
        /// <para>Represents the following attribute in the schema: rtl</para>
        /// </summary>
        public BooleanValue? RightToLeft
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>East Asian Line Break</para>
        /// <para>Represents the following attribute in the schema: eaLnBrk</para>
        /// </summary>
        public BooleanValue? EastAsianLineBreak
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Font Alignment</para>
        /// <para>Represents the following attribute in the schema: fontAlgn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextFontAlignmentValues>? FontAlignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextFontAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Latin Line Break</para>
        /// <para>Represents the following attribute in the schema: latinLnBrk</para>
        /// </summary>
        public BooleanValue? LatinLineBreak
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hanging Punctuation</para>
        /// <para>Represents the following attribute in the schema: hangingPunct</para>
        /// </summary>
        public BooleanValue? Height
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColor>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.AutoNumberedBullet>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PictureBullet>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletColorText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizeText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePercentage>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletSizePoints>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFontText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.DefaultRunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CharacterBullet>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BulletFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoBullet>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStopList>();
            builder.AddElement<TextParagraphPropertiesType>()
                .AddAttribute("marL", a => a.LeftMargin, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (51206400L) });
                })
                .AddAttribute("marR", a => a.RightMargin, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (51206400L) });
                })
                .AddAttribute("lvl", a => a.Level, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (8L) });
                })
                .AddAttribute("indent", a => a.Indent, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-51206400L), MaxInclusive = (51206400L) });
                })
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("defTabSz", a => a.DefaultTabSize)
                .AddAttribute("rtl", a => a.RightToLeft)
                .AddAttribute("eaLnBrk", a => a.EastAsianLineBreak)
                .AddAttribute("fontAlgn", a => a.FontAlignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("latinLnBrk", a => a.LatinLineBreak)
                .AddAttribute("hangingPunct", a => a.Height);
        }

        /// <summary>
        /// <para>Line Spacing.</para>
        /// <para>Represents the following element tag in the schema: a:lnSpc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing? LineSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space Before.</para>
        /// <para>Represents the following element tag in the schema: a:spcBef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore? SpaceBefore
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space After.</para>
        /// <para>Represents the following element tag in the schema: a:spcAft.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter? SpaceAfter
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpaceAfter>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>End Paragraph Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:endParaRPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft" /> <c>&lt;a:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight" /> <c>&lt;a:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick" /> <c>&lt;a:hlinkClick></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver" /> <c>&lt;a:hlinkMouseOver></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline" /> <c>&lt;a:uLn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont" /> <c>&lt;a:sym></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText" /> <c>&lt;a:uFillTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill" /> <c>&lt;a:uFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText" /> <c>&lt;a:uLnTx></c></description></item>
    /// </list>
    /// </remark>
    public partial class EndParagraphRunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class.
        /// </summary>
        public EndParagraphRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndParagraphRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndParagraphRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndParagraphRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndParagraphRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:endParaRPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndParagraphRunProperties>(deep);
    }

    /// <summary>
    /// <para>Text Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft" /> <c>&lt;a:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight" /> <c>&lt;a:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick" /> <c>&lt;a:hlinkClick></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver" /> <c>&lt;a:hlinkMouseOver></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline" /> <c>&lt;a:uLn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont" /> <c>&lt;a:sym></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText" /> <c>&lt;a:uFillTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill" /> <c>&lt;a:uFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText" /> <c>&lt;a:uLnTx></c></description></item>
    /// </list>
    /// </remark>
    public partial class RunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the RunProperties class.
        /// </summary>
        public RunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:rPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);
    }

    /// <summary>
    /// <para>Default Text Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:defRPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft" /> <c>&lt;a:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight" /> <c>&lt;a:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick" /> <c>&lt;a:hlinkClick></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver" /> <c>&lt;a:hlinkMouseOver></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline" /> <c>&lt;a:uLn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont" /> <c>&lt;a:sym></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText" /> <c>&lt;a:uFillTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill" /> <c>&lt;a:uFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText" /> <c>&lt;a:uLnTx></c></description></item>
    /// </list>
    /// </remark>
    public partial class DefaultRunProperties : TextCharacterPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class.
        /// </summary>
        public DefaultRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DefaultRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DefaultRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DefaultRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:defRPr");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultRunProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TextCharacterPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft" /> <c>&lt;a:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight" /> <c>&lt;a:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick" /> <c>&lt;a:hlinkClick></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver" /> <c>&lt;a:hlinkMouseOver></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline" /> <c>&lt;a:ln></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline" /> <c>&lt;a:uLn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont" /> <c>&lt;a:latin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont" /> <c>&lt;a:ea></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont" /> <c>&lt;a:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont" /> <c>&lt;a:sym></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText" /> <c>&lt;a:uFillTx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill" /> <c>&lt;a:uFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText" /> <c>&lt;a:uLnTx></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextCharacterPropertiesType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class.
        /// </summary>
        protected TextCharacterPropertiesType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextCharacterPropertiesType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextCharacterPropertiesType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextCharacterPropertiesType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextCharacterPropertiesType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>kumimoji</para>
        /// <para>Represents the following attribute in the schema: kumimoji</para>
        /// </summary>
        public BooleanValue? Kumimoji
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: lang</para>
        /// </summary>
        public StringValue? Language
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>altLang</para>
        /// <para>Represents the following attribute in the schema: altLang</para>
        /// </summary>
        public StringValue? AlternativeLanguage
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>sz</para>
        /// <para>Represents the following attribute in the schema: sz</para>
        /// </summary>
        public Int32Value? FontSize
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>b</para>
        /// <para>Represents the following attribute in the schema: b</para>
        /// </summary>
        public BooleanValue? Bold
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>i</para>
        /// <para>Represents the following attribute in the schema: i</para>
        /// </summary>
        public BooleanValue? Italic
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>u</para>
        /// <para>Represents the following attribute in the schema: u</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextUnderlineValues>? Underline
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextUnderlineValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>strike</para>
        /// <para>Represents the following attribute in the schema: strike</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextStrikeValues>? Strike
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextStrikeValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>kern</para>
        /// <para>Represents the following attribute in the schema: kern</para>
        /// </summary>
        public Int32Value? Kerning
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>cap</para>
        /// <para>Represents the following attribute in the schema: cap</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextCapsValues>? Capital
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextCapsValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>spc</para>
        /// <para>Represents the following attribute in the schema: spc</para>
        /// </summary>
        public Int32Value? Spacing
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>normalizeH</para>
        /// <para>Represents the following attribute in the schema: normalizeH</para>
        /// </summary>
        public BooleanValue? NormalizeHeight
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>baseline</para>
        /// <para>Represents the following attribute in the schema: baseline</para>
        /// </summary>
        public Int32Value? Baseline
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>noProof</para>
        /// <para>Represents the following attribute in the schema: noProof</para>
        /// </summary>
        public BooleanValue? NoProof
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dirty</para>
        /// <para>Represents the following attribute in the schema: dirty</para>
        /// </summary>
        public BooleanValue? Dirty
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>err</para>
        /// <para>Represents the following attribute in the schema: err</para>
        /// </summary>
        public BooleanValue? SpellingError
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>smtClean</para>
        /// <para>Represents the following attribute in the schema: smtClean</para>
        /// </summary>
        public BooleanValue? SmartTagClean
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>smtId</para>
        /// <para>Represents the following attribute in the schema: smtId</para>
        /// </summary>
        public UInt32Value? SmartTagId
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>bmk</para>
        /// <para>Represents the following attribute in the schema: bmk</para>
        /// </summary>
        public StringValue? Bookmark
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.RightToLeft>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Highlight>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnClick>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkOnMouseOver>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LatinFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EastAsianFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ComplexScriptFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SymbolFont>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFillText>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.UnderlineFollowsText>();
            builder.AddElement<TextCharacterPropertiesType>()
                .AddAttribute("kumimoji", a => a.Kumimoji)
                .AddAttribute("lang", a => a.Language)
                .AddAttribute("altLang", a => a.AlternativeLanguage)
                .AddAttribute("sz", a => a.FontSize, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (100L), MaxInclusive = (400000L) });
                })
                .AddAttribute("b", a => a.Bold)
                .AddAttribute("i", a => a.Italic)
                .AddAttribute("u", a => a.Underline, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("strike", a => a.Strike, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("kern", a => a.Kerning, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (400000L) });
                })
                .AddAttribute("cap", a => a.Capital, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("spc", a => a.Spacing, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-400000L), MaxInclusive = (400000L) });
                })
                .AddAttribute("normalizeH", a => a.NormalizeHeight)
                .AddAttribute("baseline", a => a.Baseline)
                .AddAttribute("noProof", a => a.NoProof)
                .AddAttribute("dirty", a => a.Dirty)
                .AddAttribute("err", a => a.SpellingError)
                .AddAttribute("smtClean", a => a.SmartTagClean)
                .AddAttribute("smtId", a => a.SmartTagId)
                .AddAttribute("bmk", a => a.Bookmark);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: a:ln.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Outline>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Text Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:p.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Run" /> <c>&lt;a:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndParagraphRunProperties" /> <c>&lt;a:endParaRPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Field" /> <c>&lt;a:fld></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Break" /> <c>&lt;a:br></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties" /> <c>&lt;a:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.TextMath" /> <c>&lt;a14:m></c></description></item>
    /// </list>
    /// </remark>
    public partial class Paragraph : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Paragraph class.
        /// </summary>
        public Paragraph() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Paragraph(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:p");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Run>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndParagraphRunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Field>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Break>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.TextMath>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Run), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Break), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Field), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.TextMath), 1, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EndParagraphRunProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: a:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties? ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ParagraphProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraph>(deep);
    }

    /// <summary>
    /// <para>Tab Stop.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tab.</para>
    /// </summary>
    public partial class TabStop : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStop class.
        /// </summary>
        public TabStop() : base()
        {
        }

        /// <summary>
        /// <para>Tab Position</para>
        /// <para>Represents the following attribute in the schema: pos</para>
        /// </summary>
        public Int32Value? Position
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tab Alignment</para>
        /// <para>Represents the following attribute in the schema: algn</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextTabAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextTabAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tab");
            builder.AddElement<TabStop>()
                .AddAttribute("pos", a => a.Position)
                .AddAttribute("algn", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStop>(deep);
    }

    /// <summary>
    /// <para>Spacing Percent.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcPct.</para>
    /// </summary>
    public partial class SpacingPercent : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingPercent class.
        /// </summary>
        public SpacingPercent() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spcPct");
            builder.AddElement<SpacingPercent>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (13200000L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPercent>(deep);
    }

    /// <summary>
    /// <para>Spacing Points.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcPts.</para>
    /// </summary>
    public partial class SpacingPoints : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingPoints class.
        /// </summary>
        public SpacingPoints() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spcPts");
            builder.AddElement<SpacingPoints>()
                .AddAttribute("val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (158400L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingPoints>(deep);
    }

    /// <summary>
    /// <para>Line Spacing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:lnSpc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent" /> <c>&lt;a:spcPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints" /> <c>&lt;a:spcPts></c></description></item>
    /// </list>
    /// </remark>
    public partial class LineSpacing : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the LineSpacing class.
        /// </summary>
        public LineSpacing() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineSpacing(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LineSpacing(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LineSpacing class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LineSpacing(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:lnSpc");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineSpacing>(deep);
    }

    /// <summary>
    /// <para>Space Before.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcBef.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent" /> <c>&lt;a:spcPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints" /> <c>&lt;a:spcPts></c></description></item>
    /// </list>
    /// </remark>
    public partial class SpaceBefore : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceBefore class.
        /// </summary>
        public SpaceBefore() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceBefore(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceBefore(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceBefore class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SpaceBefore(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spcBef");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceBefore>(deep);
    }

    /// <summary>
    /// <para>Space After.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:spcAft.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent" /> <c>&lt;a:spcPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints" /> <c>&lt;a:spcPts></c></description></item>
    /// </list>
    /// </remark>
    public partial class SpaceAfter : TextSpacingType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceAfter class.
        /// </summary>
        public SpaceAfter() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceAfter(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SpaceAfter(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SpaceAfter class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SpaceAfter(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:spcAft");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceAfter>(deep);
    }

    /// <summary>
    /// <para>Defines the TextSpacingType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent" /> <c>&lt;a:spcPct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints" /> <c>&lt;a:spcPts></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class TextSpacingType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextSpacingType class.
        /// </summary>
        protected TextSpacingType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextSpacingType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected TextSpacingType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextSpacingType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected TextSpacingType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints>();
        }

        /// <summary>
        /// <para>Spacing Percent.</para>
        /// <para>Represents the following element tag in the schema: a:spcPct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent? SpacingPercent
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPercent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing Points.</para>
        /// <para>Represents the following element tag in the schema: a:spcPts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints? SpacingPoints
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SpacingPoints>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Tab List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tabLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStop" /> <c>&lt;a:tab></c></description></item>
    /// </list>
    /// </remark>
    public partial class TabStopList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStopList class.
        /// </summary>
        public TabStopList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TabStopList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TabStopList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TabStopList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TabStopList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tabLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStop>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TabStop), 0, 32)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStopList>(deep);
    }

    /// <summary>
    /// <para>Defines the Text Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:t.</para>
    /// </summary>
    public partial class Text : TypedOpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Text class.
        /// </summary>
        public Text() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Text class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Text(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:t");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapePropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenEffectsProperties" /> <c>&lt;a14:hiddenEffects></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenFillProperties" /> <c>&lt;a14:hiddenFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenLineProperties" /> <c>&lt;a14:hiddenLine></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenScene3D" /> <c>&lt;a14:hiddenScene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenShape3D" /> <c>&lt;a14:hiddenSp3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ShadowObscured" /> <c>&lt;a14:shadowObscured></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapePropertiesExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class.
        /// </summary>
        public ShapePropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapePropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenEffectsProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenFillProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenLineProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenScene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenShape3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ShadowObscured>();
            builder.AddElement<ShapePropertiesExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenFillProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenLineProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenEffectsProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenScene3D), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.HiddenShape3D), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ShadowObscured), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the GvmlGroupShapeExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.IsCanvas" /> <c>&lt;a14:isCanvas></c></description></item>
    /// </list>
    /// </remark>
    public partial class GvmlGroupShapeExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class.
        /// </summary>
        public GvmlGroupShapeExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GvmlGroupShapeExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.IsCanvas>();
            builder.AddElement<GvmlGroupShapeExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.IsCanvas), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapePropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapePropertiesExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class.
        /// </summary>
        public ShapePropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapePropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapePropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapePropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapePropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Non-Visual Properties for a Group Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:nvGrpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties" /> <c>&lt;a:cNvPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeDrawingProperties" /> <c>&lt;a:cNvGrpSpPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class.
        /// </summary>
        public NonVisualGroupShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupShapeProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:nvGrpSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeDrawingProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeDrawingProperties), 1, 1)
            };
        }

        /// <summary>
        /// <para>NonVisualDrawingProperties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties? NonVisualDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Non-Visual Group Shape Drawing Properties.</para>
        /// <para>Represents the following element tag in the schema: a:cNvGrpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeDrawingProperties? NonVisualGroupShapeDrawingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeDrawingProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Visual Group Shape Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSpPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag" /> <c>&lt;a:effectDag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList" /> <c>&lt;a:effectLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill" /> <c>&lt;a:gradFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill" /> <c>&lt;a:grpFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformGroup" /> <c>&lt;a:xfrm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill" /> <c>&lt;a:noFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill" /> <c>&lt;a:pattFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType" /> <c>&lt;a:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill" /> <c>&lt;a:solidFill></c></description></item>
    /// </list>
    /// </remark>
    public partial class VisualGroupShapeProperties : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class.
        /// </summary>
        public VisualGroupShapeProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VisualGroupShapeProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VisualGroupShapeProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VisualGroupShapeProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public VisualGroupShapeProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Black and White Mode</para>
        /// <para>Represents the following attribute in the schema: bwMode</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>? BlackWhiteMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlackWhiteModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:grpSpPr");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformGroup>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill>();
            builder.AddElement<VisualGroupShapeProperties>()
                .AddAttribute("bwMode", a => a.BlackWhiteMode, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformGroup), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NoFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.SolidFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GradientFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.PatternFill), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupFill), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectList), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.EffectDag), 1, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Scene3DType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>2D Transform for Grouped Objects.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformGroup? TransformGroup
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TransformGroup>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VisualGroupShapeProperties>(deep);
    }

    /// <summary>
    /// <para>Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:sp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeProperties" /> <c>&lt;a:nvSpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape" /> <c>&lt;a:txSp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    /// </list>
    /// </remark>
    public partial class Shape : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Shape class.
        /// </summary>
        public Shape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Shape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Shape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Shape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:sp");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeProperties? NonVisualShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Shape.</para>
        /// <para>Represents the following element tag in the schema: a:txSp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape? TextShape
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle? ShapeStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shape>(deep);
    }

    /// <summary>
    /// <para>Connection Shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:cxnSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectionShapeProperties" /> <c>&lt;a:nvCxnSpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectionShape : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionShape class.
        /// </summary>
        public ConnectionShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectionShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectionShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:cxnSp");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectionShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectionShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Connection Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvCxnSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectionShapeProperties? NonVisualConnectionShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualConnectionShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Style.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle? ShapeStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectionShape>(deep);
    }

    /// <summary>
    /// <para>Picture.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:pic.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill" /> <c>&lt;a:blipFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureProperties" /> <c>&lt;a:nvPicPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties" /> <c>&lt;a:spPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle" /> <c>&lt;a:style></c></description></item>
    /// </list>
    /// </remark>
    public partial class Picture : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Picture class.
        /// </summary>
        public Picture() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Picture(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:pic");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Picture.</para>
        /// <para>Represents the following element tag in the schema: a:nvPicPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureProperties? NonVisualPictureProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPictureProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Picture Fill.</para>
        /// <para>Represents the following element tag in the schema: a:blipFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill? BlipFill
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipFill>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shape Properties.</para>
        /// <para>Represents the following element tag in the schema: a:spPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties? ShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ShapeStyle.</para>
        /// <para>Represents the following element tag in the schema: a:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle? ShapeStyle
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);
    }

    /// <summary>
    /// <para>Graphic Frame.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:graphicFrame.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic" /> <c>&lt;a:graphic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameProperties" /> <c>&lt;a:nvGraphicFramePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D" /> <c>&lt;a:xfrm></c></description></item>
    /// </list>
    /// </remark>
    public partial class GraphicFrame : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GraphicFrame class.
        /// </summary>
        public GraphicFrame() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrame(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GraphicFrame(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GraphicFrame class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GraphicFrame(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:graphicFrame");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Graphic Frame.</para>
        /// <para>Represents the following element tag in the schema: a:nvGraphicFramePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameProperties? NonVisualGraphicFrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGraphicFrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Graphic.</para>
        /// <para>Represents the following element tag in the schema: a:graphic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic? Graphic
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Transform2D.</para>
        /// <para>Represents the following element tag in the schema: a:xfrm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D? Transform2D
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Transform2D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GraphicFrame>(deep);
    }

    /// <summary>
    /// <para>Group shape.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSp.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.VisualGroupShapeProperties" /> <c>&lt;a:grpSpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShape" /> <c>&lt;a:cxnSp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrame" /> <c>&lt;a:graphicFrame></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShape" /> <c>&lt;a:grpSp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtensionList" /> <c>&lt;a:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeProperties" /> <c>&lt;a:nvGrpSpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Picture" /> <c>&lt;a:pic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape" /> <c>&lt;a:sp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape" /> <c>&lt;a:txSp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.GvmlContentPart" /> <c>&lt;a14:contentPart></c></description></item>
    /// </list>
    /// </remark>
    public partial class GroupShape : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupShape class.
        /// </summary>
        public GroupShape() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShape(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShape(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShape class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GroupShape(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:grpSp");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.VisualGroupShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrame>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeProperties>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Picture>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.GvmlContentPart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.VisualGroupShapeProperties), 1, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextShape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Shape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectionShape), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Picture), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.GvmlContentPart), 1, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GraphicFrame), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GroupShape), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Non-Visual Properties for a Group Shape.</para>
        /// <para>Represents the following element tag in the schema: a:nvGrpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeProperties? NonVisualGroupShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupShapeProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Visual Group Shape Properties.</para>
        /// <para>Represents the following element tag in the schema: a:grpSpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.VisualGroupShapeProperties? VisualGroupShapeProperties
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.VisualGroupShapeProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShape>(deep);
    }

    /// <summary>
    /// <para>Defines the GvmlGroupShapeExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class GvmlGroupShapeExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class.
        /// </summary>
        public GvmlGroupShapeExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GvmlGroupShapeExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GvmlGroupShapeExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GvmlGroupShapeExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.GvmlGroupShapeExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GvmlGroupShapeExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualGroupDrawingShapePropsExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.NonVisualGroupProperties" /> <c>&lt;a15:nonVisualGroupProps></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupDrawingShapePropsExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class.
        /// </summary>
        public NonVisualGroupDrawingShapePropsExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupDrawingShapePropsExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.NonVisualGroupProperties>();
            builder.AddElement<NonVisualGroupDrawingShapePropsExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.NonVisualGroupProperties), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeStyleSheetExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main.ThemeFamily" /> <c>&lt;thm15:themeFamily></c></description></item>
    /// </list>
    /// </remark>
    public partial class OfficeStyleSheetExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class.
        /// </summary>
        public OfficeStyleSheetExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OfficeStyleSheetExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main.ThemeFamily>();
            builder.AddElement<OfficeStyleSheetExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.ThemeML.Y2012.Main.ThemeFamily), 1, 1, version: FileFormatVersions.Office2013),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectorLockingExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic" /> <c>&lt;a:graphic></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectorLockingExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class.
        /// </summary>
        public ConnectorLockingExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectorLockingExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic>();
            builder.AddElement<ConnectorLockingExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.Graphic), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the GroupShapeLocks Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:grpSpLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class GroupShapeLocks : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class.
        /// </summary>
        public GroupShapeLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShapeLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GroupShapeLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GroupShapeLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GroupShapeLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue? NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Ungrouping</para>
        /// <para>Represents the following attribute in the schema: noUngrp</para>
        /// </summary>
        public BooleanValue? NoUngrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue? NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue? NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue? NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Moving Shape</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue? NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resizing</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue? NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:grpSpLocks");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<GroupShapeLocks>()
                .AddAttribute("noGrp", a => a.NoGrouping)
                .AddAttribute("noUngrp", a => a.NoUngrouping)
                .AddAttribute("noSelect", a => a.NoSelection)
                .AddAttribute("noRot", a => a.NoRotation)
                .AddAttribute("noChangeAspect", a => a.NoChangeAspect)
                .AddAttribute("noMove", a => a.NoMove)
                .AddAttribute("noResize", a => a.NoResize);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GroupShapeLocks>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualGroupDrawingShapePropsExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualGroupDrawingShapePropsExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class.
        /// </summary>
        public NonVisualGroupDrawingShapePropsExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualGroupDrawingShapePropsExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualGroupDrawingShapePropsExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualGroupDrawingShapePropsExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualGroupDrawingShapePropsExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectDefaults Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:objectDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeDefault" /> <c>&lt;a:spDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineDefault" /> <c>&lt;a:lnDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextDefault" /> <c>&lt;a:txDef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class ObjectDefaults : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class.
        /// </summary>
        public ObjectDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ObjectDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ObjectDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ObjectDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ObjectDefaults(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:objectDefaults");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeDefault>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineDefault>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextDefault>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>Shape Default.</para>
        /// <para>Represents the following element tag in the schema: a:spDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeDefault? ShapeDefault
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ShapeDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Default.</para>
        /// <para>Represents the following element tag in the schema: a:lnDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineDefault? LineDefault
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Default.</para>
        /// <para>Represents the following element tag in the schema: a:txDef.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextDefault? TextDefault
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.TextDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectDefaults>(deep);
    }

    /// <summary>
    /// <para>Defines the ExtraColorSchemeList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extraClrSchemeLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorScheme" /> <c>&lt;a:extraClrScheme></c></description></item>
    /// </list>
    /// </remark>
    public partial class ExtraColorSchemeList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class.
        /// </summary>
        public ExtraColorSchemeList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorSchemeList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtraColorSchemeList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtraColorSchemeList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtraColorSchemeList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extraClrSchemeLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorScheme>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtraColorScheme), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtraColorSchemeList>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomColorList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:custClrLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColor" /> <c>&lt;a:custClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomColorList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomColorList class.
        /// </summary>
        public CustomColorList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColorList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomColorList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomColorList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomColorList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:custClrLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColor>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.CustomColor), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomColorList>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeStyleSheetExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class OfficeStyleSheetExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class.
        /// </summary>
        public OfficeStyleSheetExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public OfficeStyleSheetExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the OfficeStyleSheetExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public OfficeStyleSheetExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.OfficeStyleSheetExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeStyleSheetExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnClick Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkClick.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound" /> <c>&lt;a:snd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnClick : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class.
        /// </summary>
        public HyperlinkOnClick() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnClick(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnClick(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnClick class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnClick(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hlinkClick");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@a:id")));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnClick>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnMouseOver Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkMouseOver.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound" /> <c>&lt;a:snd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnMouseOver : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class.
        /// </summary>
        public HyperlinkOnMouseOver() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnMouseOver(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnMouseOver(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnMouseOver class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnMouseOver(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hlinkMouseOver");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@a:id")));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnMouseOver>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkOnHover Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:hlinkHover.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound" /> <c>&lt;a:snd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkOnHover : HyperlinkType
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class.
        /// </summary>
        public HyperlinkOnHover() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnHover(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkOnHover(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkOnHover class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkOnHover(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:hlinkHover");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList), 0, 1)
            };
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@a:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkOnHover>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound" /> <c>&lt;a:snd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class HyperlinkType : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkType class.
        /// </summary>
        protected HyperlinkType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HyperlinkType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HyperlinkType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected HyperlinkType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>relationship identifier to find target URI</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>In case the url is invalid so we can't create a relationship, we'll save it here, r:id will point to a NULL one</para>
        /// <para>Represents the following attribute in the schema: invalidUrl</para>
        /// </summary>
        public StringValue? InvalidUrl
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Action to take, it may still need r:id to specify an action target</para>
        /// <para>Represents the following attribute in the schema: action</para>
        /// </summary>
        public StringValue? Action
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>target frame for navigating to the URI</para>
        /// <para>Represents the following attribute in the schema: tgtFrame</para>
        /// </summary>
        public StringValue? TargetFrame
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>tooltip for display</para>
        /// <para>Represents the following attribute in the schema: tooltip</para>
        /// </summary>
        public StringValue? Tooltip
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>whether to add this URI to the history when navigating to it</para>
        /// <para>Represents the following attribute in the schema: history</para>
        /// </summary>
        public BooleanValue? History
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Whether to highlight it when click on a shape</para>
        /// <para>Represents the following attribute in the schema: highlightClick</para>
        /// </summary>
        public BooleanValue? HighlightClick
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Whether to stop previous sound when click on it</para>
        /// <para>Represents the following attribute in the schema: endSnd</para>
        /// </summary>
        public BooleanValue? EndSound
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound>();
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList>();
            builder.AddElement<HyperlinkType>()
                .AddAttribute("r:id", a => a.Id)
                .AddAttribute("invalidUrl", a => a.InvalidUrl)
                .AddAttribute("action", a => a.Action)
                .AddAttribute("tgtFrame", a => a.TargetFrame)
                .AddAttribute("tooltip", a => a.Tooltip)
                .AddAttribute("history", a => a.History)
                .AddAttribute("highlightClick", a => a.HighlightClick)
                .AddAttribute("endSnd", a => a.EndSound);
        }

        /// <summary>
        /// <para>Sound to play..</para>
        /// <para>Represents the following element tag in the schema: a:snd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound? HyperlinkSound
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkSound>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Future extensions..</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList? HyperlinkExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtensionList>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the RightToLeft Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:rtl.</para>
    /// </summary>
    public partial class RightToLeft : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RightToLeft class.
        /// </summary>
        public RightToLeft() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: val</para>
        /// </summary>
        public BooleanValue? Val
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:rtl");
            builder.AddElement<RightToLeft>()
                .AddAttribute("val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightToLeft>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingPropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingPropertiesExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class.
        /// </summary>
        public NonVisualDrawingPropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingPropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualDrawingPropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the ConnectorLockingExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class ConnectorLockingExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class.
        /// </summary>
        public ConnectorLockingExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ConnectorLockingExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorLockingExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ConnectorLockingExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ConnectorLockingExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectorLockingExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the DataModelExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.RecolorImages" /> <c>&lt;dgm14:recolorImg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.DataModelExtensionBlock" /> <c>&lt;dsp:dataModelExt></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataModelExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataModelExtension class.
        /// </summary>
        public DataModelExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataModelExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataModelExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataModelExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataModelExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.RecolorImages>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.DataModelExtensionBlock>();
            builder.AddElement<DataModelExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2008.Diagram.DataModelExtensionBlock), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.RecolorImages), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataModelExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the PtExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.NonVisualDrawingProperties" /> <c>&lt;dgm14:cNvPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class PtExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PtExtension class.
        /// </summary>
        public PtExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PtExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PtExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PtExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PtExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.NonVisualDrawingProperties>();
            builder.AddElement<PtExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Diagram.NonVisualDrawingProperties), 1, 1, version: FileFormatVersions.Office2010),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PtExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor.HyperlinkColor" /> <c>&lt;ahyp:hlinkClr></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkExtension class.
        /// </summary>
        public HyperlinkExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor.HyperlinkColor>();
            builder.AddElement<HyperlinkExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2018.HyperlinkColor.HyperlinkColor), 1, 1, version: FileFormatVersions.Office2019),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkExtension>(deep);
    }

    /// <summary>
    /// <para>Future extensions..</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkExtensionList class.
        /// </summary>
        public HyperlinkExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.HyperlinkExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the LinePropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes.LineSketchStyleProperties" /> <c>&lt;ask:lineSketchStyleProps></c></description></item>
    /// </list>
    /// </remark>
    public partial class LinePropertiesExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtension class.
        /// </summary>
        public LinePropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LinePropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LinePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LinePropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes.LineSketchStyleProperties>();
            builder.AddElement<LinePropertiesExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2018.SketchyShapes.LineSketchStyleProperties), 1, 1, version: FileFormatVersions.Office2021),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinePropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>default head line end style is none.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:headEnd.</para>
    /// </summary>
    public partial class HeadEnd : LineEndPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the HeadEnd class.
        /// </summary>
        public HeadEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:headEnd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeadEnd>(deep);
    }

    /// <summary>
    /// <para>default tail line end style is none.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:tailEnd.</para>
    /// </summary>
    public partial class TailEnd : LineEndPropertiesType
    {
        /// <summary>
        /// Initializes a new instance of the TailEnd class.
        /// </summary>
        public TailEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:tailEnd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TailEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the LineEndPropertiesType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LineEndPropertiesType : TypedOpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineEndPropertiesType class.
        /// </summary>
        protected LineEndPropertiesType() : base()
        {
        }

        /// <summary>
        /// <para>Line Head/End Type</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Width of Head/End</para>
        /// <para>Represents the following attribute in the schema: w</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndWidthValues>? Width
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndWidthValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Length of Head/End</para>
        /// <para>Represents the following attribute in the schema: len</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndLengthValues>? Length
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LineEndLengthValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<LineEndPropertiesType>()
                .AddAttribute("type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                })
                .AddAttribute("len", a => a.Length, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
        }
    }

    /// <summary>
    /// <para>Future extensions..</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class LinePropertiesExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtensionList class.
        /// </summary>
        public LinePropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LinePropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LinePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinePropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LinePropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.LinePropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinePropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualDrawingPropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CompatExtension" /> <c>&lt;a14:compatExt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.BackgroundProperties" /> <c>&lt;a15:backgroundPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.CreationId" /> <c>&lt;a16:creationId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.PredecessorDrawingElementReference" /> <c>&lt;a16:predDERef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape.ClassificationOutcome" /> <c>&lt;aclsh:classification></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative.Decorative" /> <c>&lt;adec:decorative></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink.ScriptLink" /> <c>&lt;asl:scriptLink></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualDrawingPropertiesExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class.
        /// </summary>
        public NonVisualDrawingPropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualDrawingPropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualDrawingPropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualDrawingPropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CompatExtension>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.BackgroundProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.CreationId>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.PredecessorDrawingElementReference>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape.ClassificationOutcome>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative.Decorative>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink.ScriptLink>();
            builder.AddElement<NonVisualDrawingPropertiesExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CompatExtension), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.BackgroundProperties), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.CreationId), 1, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2014.Main.PredecessorDrawingElementReference), 1, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2017.Decorative.Decorative), 1, 1, version: FileFormatVersions.Office2019),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2020.ClassificationShape.ClassificationOutcome), 1, 1, version: FileFormatVersions.Office2021),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2021.ScriptLink.ScriptLink), 1, 1, version: FileFormatVersions.Microsoft365),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualDrawingPropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the PictureLocks Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:picLocks.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList" /> <c>&lt;a:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class PictureLocks : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureLocks class.
        /// </summary>
        public PictureLocks() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureLocks(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureLocks(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureLocks class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureLocks(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Disallow Shape Grouping</para>
        /// <para>Represents the following attribute in the schema: noGrp</para>
        /// </summary>
        public BooleanValue? NoGrouping
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Selection</para>
        /// <para>Represents the following attribute in the schema: noSelect</para>
        /// </summary>
        public BooleanValue? NoSelection
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Rotation</para>
        /// <para>Represents the following attribute in the schema: noRot</para>
        /// </summary>
        public BooleanValue? NoRotation
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Aspect Ratio Change</para>
        /// <para>Represents the following attribute in the schema: noChangeAspect</para>
        /// </summary>
        public BooleanValue? NoChangeAspect
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Movement</para>
        /// <para>Represents the following attribute in the schema: noMove</para>
        /// </summary>
        public BooleanValue? NoMove
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Resize</para>
        /// <para>Represents the following attribute in the schema: noResize</para>
        /// </summary>
        public BooleanValue? NoResize
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Point Editing</para>
        /// <para>Represents the following attribute in the schema: noEditPoints</para>
        /// </summary>
        public BooleanValue? NoEditPoints
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Showing Adjust Handles</para>
        /// <para>Represents the following attribute in the schema: noAdjustHandles</para>
        /// </summary>
        public BooleanValue? NoAdjustHandles
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Arrowhead Changes</para>
        /// <para>Represents the following attribute in the schema: noChangeArrowheads</para>
        /// </summary>
        public BooleanValue? NoChangeArrowheads
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Shape Type Change</para>
        /// <para>Represents the following attribute in the schema: noChangeShapeType</para>
        /// </summary>
        public BooleanValue? NoChangeShapeType
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Disallow Crop Changes</para>
        /// <para>Represents the following attribute in the schema: noCrop</para>
        /// </summary>
        public BooleanValue? NoCrop
        {
            get => GetAttribute<BooleanValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:picLocks");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            builder.AddElement<PictureLocks>()
                .AddAttribute("noGrp", a => a.NoGrouping)
                .AddAttribute("noSelect", a => a.NoSelection)
                .AddAttribute("noRot", a => a.NoRotation)
                .AddAttribute("noChangeAspect", a => a.NoChangeAspect)
                .AddAttribute("noMove", a => a.NoMove)
                .AddAttribute("noResize", a => a.NoResize)
                .AddAttribute("noEditPoints", a => a.NoEditPoints)
                .AddAttribute("noAdjustHandles", a => a.NoAdjustHandles)
                .AddAttribute("noChangeArrowheads", a => a.NoChangeArrowheads)
                .AddAttribute("noChangeShapeType", a => a.NoChangeShapeType)
                .AddAttribute("noCrop", a => a.NoCrop);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList), 0, 1)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: a:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.DrawingML.Y2006.Main.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureLocks>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualPicturePropertiesExtensionList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPicturePropertiesExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class.
        /// </summary>
        public NonVisualPicturePropertiesExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPicturePropertiesExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.NonVisualPicturePropertiesExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the NonVisualPicturePropertiesExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CameraTool" /> <c>&lt;a14:cameraTool></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.ObjectProperties" /> <c>&lt;a15:objectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.SignatureLine" /> <c>&lt;a15:signatureLine></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed.LiveFeedProperties" /> <c>&lt;alf:liveFeedProps></c></description></item>
    /// </list>
    /// </remark>
    public partial class NonVisualPicturePropertiesExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class.
        /// </summary>
        public NonVisualPicturePropertiesExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NonVisualPicturePropertiesExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NonVisualPicturePropertiesExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NonVisualPicturePropertiesExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CameraTool>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.ObjectProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.SignatureLine>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed.LiveFeedProperties>();
            builder.AddElement<NonVisualPicturePropertiesExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.CameraTool), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.SignatureLine), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2012.Main.ObjectProperties), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2021.Livefeed.LiveFeedProperties), 1, 1, version: FileFormatVersions.Microsoft365),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NonVisualPicturePropertiesExtension>(deep);
    }

    /// <summary>
    /// <para>Future extensions..</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtension" /> <c>&lt;a:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class BlipExtensionList : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class.
        /// </summary>
        public BlipExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:extLst");
            builder.AddChild<DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.DrawingML.Y2006.Main.BlipExtension), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the BlipExtension Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is a:ext.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ImageProperties" /> <c>&lt;a14:imgProps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.UseLocalDpi" /> <c>&lt;a14:useLocalDpi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main.PictureAttributionSourceURL" /> <c>&lt;a1611:picAttrSrcUrl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed.OEmbedShared" /> <c>&lt;aoe:oembedShared></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main.SVGBlip" /> <c>&lt;asvg:svgBlip></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed.OEmbed" /> <c>&lt;woe:oembed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing.WebVideoProperty" /> <c>&lt;wp15:webVideoPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class BlipExtension : TypedOpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BlipExtension class.
        /// </summary>
        public BlipExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BlipExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BlipExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BlipExtension(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>URI</para>
        /// <para>Represents the following attribute in the schema: uri</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("a:ext");
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ImageProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.UseLocalDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main.PictureAttributionSourceURL>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed.OEmbedShared>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main.SVGBlip>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed.OEmbed>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing.WebVideoProperty>();
            builder.AddElement<BlipExtension>()
                .AddAttribute("uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.ImageProperties), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2010.Main.UseLocalDpi), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2012.WordprocessingDrawing.WebVideoProperty), 1, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2016.SVG.Main.SVGBlip), 1, 1, version: FileFormatVersions.Office2019),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2016.M11.Main.PictureAttributionSourceURL), 1, 1, version: FileFormatVersions.Office2016),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Word.Y2020.OEmbed.OEmbed), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Drawing.Y2021.OEmbed.OEmbedShared), 1, 1, version: FileFormatVersions.Microsoft365),
                new AnyParticle(0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlipExtension>(deep);
    }

    /// <summary>
    /// Font Collection Index
    /// </summary>
    public enum FontCollectionIndexValues
    {
        /// <summary>
        /// Major Font.
        /// <para>When the item is serialized out as xml, its value is "major".</para>
        /// </summary>
        [EnumString("major")]
        Major,
        /// <summary>
        /// Minor Font.
        /// <para>When the item is serialized out as xml, its value is "minor".</para>
        /// </summary>
        [EnumString("minor")]
        Minor,
        /// <summary>
        /// None.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None
    }

    /// <summary>
    /// Theme Color Reference
    /// </summary>
    public enum ColorSchemeIndexValues
    {
        /// <summary>
        /// Dark 1.
        /// <para>When the item is serialized out as xml, its value is "dk1".</para>
        /// </summary>
        [EnumString("dk1")]
        Dark1,
        /// <summary>
        /// Light 1.
        /// <para>When the item is serialized out as xml, its value is "lt1".</para>
        /// </summary>
        [EnumString("lt1")]
        Light1,
        /// <summary>
        /// Dark 2.
        /// <para>When the item is serialized out as xml, its value is "dk2".</para>
        /// </summary>
        [EnumString("dk2")]
        Dark2,
        /// <summary>
        /// Light 2.
        /// <para>When the item is serialized out as xml, its value is "lt2".</para>
        /// </summary>
        [EnumString("lt2")]
        Light2,
        /// <summary>
        /// Accent 1.
        /// <para>When the item is serialized out as xml, its value is "accent1".</para>
        /// </summary>
        [EnumString("accent1")]
        Accent1,
        /// <summary>
        /// Accent 2.
        /// <para>When the item is serialized out as xml, its value is "accent2".</para>
        /// </summary>
        [EnumString("accent2")]
        Accent2,
        /// <summary>
        /// Accent 3.
        /// <para>When the item is serialized out as xml, its value is "accent3".</para>
        /// </summary>
        [EnumString("accent3")]
        Accent3,
        /// <summary>
        /// Accent 4.
        /// <para>When the item is serialized out as xml, its value is "accent4".</para>
        /// </summary>
        [EnumString("accent4")]
        Accent4,
        /// <summary>
        /// Accent 5.
        /// <para>When the item is serialized out as xml, its value is "accent5".</para>
        /// </summary>
        [EnumString("accent5")]
        Accent5,
        /// <summary>
        /// Accent 6.
        /// <para>When the item is serialized out as xml, its value is "accent6".</para>
        /// </summary>
        [EnumString("accent6")]
        Accent6,
        /// <summary>
        /// Hyperlink.
        /// <para>When the item is serialized out as xml, its value is "hlink".</para>
        /// </summary>
        [EnumString("hlink")]
        Hyperlink,
        /// <summary>
        /// Followed Hyperlink.
        /// <para>When the item is serialized out as xml, its value is "folHlink".</para>
        /// </summary>
        [EnumString("folHlink")]
        FollowedHyperlink
    }

    /// <summary>
    /// System Color Value
    /// </summary>
    public enum SystemColorValues
    {
        /// <summary>
        /// Scroll Bar System Color.
        /// <para>When the item is serialized out as xml, its value is "scrollBar".</para>
        /// </summary>
        [EnumString("scrollBar")]
        ScrollBar,
        /// <summary>
        /// Background System Color.
        /// <para>When the item is serialized out as xml, its value is "background".</para>
        /// </summary>
        [EnumString("background")]
        Background,
        /// <summary>
        /// Active Caption System Color.
        /// <para>When the item is serialized out as xml, its value is "activeCaption".</para>
        /// </summary>
        [EnumString("activeCaption")]
        ActiveCaption,
        /// <summary>
        /// Inactive Caption System Color.
        /// <para>When the item is serialized out as xml, its value is "inactiveCaption".</para>
        /// </summary>
        [EnumString("inactiveCaption")]
        InactiveCaption,
        /// <summary>
        /// Menu System Color.
        /// <para>When the item is serialized out as xml, its value is "menu".</para>
        /// </summary>
        [EnumString("menu")]
        Menu,
        /// <summary>
        /// Window System Color.
        /// <para>When the item is serialized out as xml, its value is "window".</para>
        /// </summary>
        [EnumString("window")]
        Window,
        /// <summary>
        /// Window Frame System Color.
        /// <para>When the item is serialized out as xml, its value is "windowFrame".</para>
        /// </summary>
        [EnumString("windowFrame")]
        WindowFrame,
        /// <summary>
        /// Menu Text System Color.
        /// <para>When the item is serialized out as xml, its value is "menuText".</para>
        /// </summary>
        [EnumString("menuText")]
        MenuText,
        /// <summary>
        /// Window Text System Color.
        /// <para>When the item is serialized out as xml, its value is "windowText".</para>
        /// </summary>
        [EnumString("windowText")]
        WindowText,
        /// <summary>
        /// Caption Text System Color.
        /// <para>When the item is serialized out as xml, its value is "captionText".</para>
        /// </summary>
        [EnumString("captionText")]
        CaptionText,
        /// <summary>
        /// Active Border System Color.
        /// <para>When the item is serialized out as xml, its value is "activeBorder".</para>
        /// </summary>
        [EnumString("activeBorder")]
        ActiveBorder,
        /// <summary>
        /// Inactive Border System Color.
        /// <para>When the item is serialized out as xml, its value is "inactiveBorder".</para>
        /// </summary>
        [EnumString("inactiveBorder")]
        InactiveBorder,
        /// <summary>
        /// Application Workspace System Color.
        /// <para>When the item is serialized out as xml, its value is "appWorkspace".</para>
        /// </summary>
        [EnumString("appWorkspace")]
        ApplicationWorkspace,
        /// <summary>
        /// Highlight System Color.
        /// <para>When the item is serialized out as xml, its value is "highlight".</para>
        /// </summary>
        [EnumString("highlight")]
        Highlight,
        /// <summary>
        /// Highlight Text System Color.
        /// <para>When the item is serialized out as xml, its value is "highlightText".</para>
        /// </summary>
        [EnumString("highlightText")]
        HighlightText,
        /// <summary>
        /// Button Face System Color.
        /// <para>When the item is serialized out as xml, its value is "btnFace".</para>
        /// </summary>
        [EnumString("btnFace")]
        ButtonFace,
        /// <summary>
        /// Button Shadow System Color.
        /// <para>When the item is serialized out as xml, its value is "btnShadow".</para>
        /// </summary>
        [EnumString("btnShadow")]
        ButtonShadow,
        /// <summary>
        /// Gray Text System Color.
        /// <para>When the item is serialized out as xml, its value is "grayText".</para>
        /// </summary>
        [EnumString("grayText")]
        GrayText,
        /// <summary>
        /// Button Text System Color.
        /// <para>When the item is serialized out as xml, its value is "btnText".</para>
        /// </summary>
        [EnumString("btnText")]
        ButtonText,
        /// <summary>
        /// Inactive Caption Text System Color.
        /// <para>When the item is serialized out as xml, its value is "inactiveCaptionText".</para>
        /// </summary>
        [EnumString("inactiveCaptionText")]
        InactiveCaptionText,
        /// <summary>
        /// Button Highlight System Color.
        /// <para>When the item is serialized out as xml, its value is "btnHighlight".</para>
        /// </summary>
        [EnumString("btnHighlight")]
        ButtonHighlight,
        /// <summary>
        /// 3D Dark System Color.
        /// <para>When the item is serialized out as xml, its value is "3dDkShadow".</para>
        /// </summary>
        [EnumString("3dDkShadow")]
        ThreeDDarkShadow,
        /// <summary>
        /// 3D Light System Color.
        /// <para>When the item is serialized out as xml, its value is "3dLight".</para>
        /// </summary>
        [EnumString("3dLight")]
        ThreeDLight,
        /// <summary>
        /// Info Text System Color.
        /// <para>When the item is serialized out as xml, its value is "infoText".</para>
        /// </summary>
        [EnumString("infoText")]
        InfoText,
        /// <summary>
        /// Info Back System Color.
        /// <para>When the item is serialized out as xml, its value is "infoBk".</para>
        /// </summary>
        [EnumString("infoBk")]
        InfoBack,
        /// <summary>
        /// Hot Light System Color.
        /// <para>When the item is serialized out as xml, its value is "hotLight".</para>
        /// </summary>
        [EnumString("hotLight")]
        HotLight,
        /// <summary>
        /// Gradient Active Caption System Color.
        /// <para>When the item is serialized out as xml, its value is "gradientActiveCaption".</para>
        /// </summary>
        [EnumString("gradientActiveCaption")]
        GradientActiveCaption,
        /// <summary>
        /// Gradient Inactive Caption System Color.
        /// <para>When the item is serialized out as xml, its value is "gradientInactiveCaption".</para>
        /// </summary>
        [EnumString("gradientInactiveCaption")]
        GradientInactiveCaption,
        /// <summary>
        /// Menu Highlight System Color.
        /// <para>When the item is serialized out as xml, its value is "menuHighlight".</para>
        /// </summary>
        [EnumString("menuHighlight")]
        MenuHighlight,
        /// <summary>
        /// Menu Bar System Color.
        /// <para>When the item is serialized out as xml, its value is "menuBar".</para>
        /// </summary>
        [EnumString("menuBar")]
        MenuBar
    }

    /// <summary>
    /// Scheme Color
    /// </summary>
    public enum SchemeColorValues
    {
        /// <summary>
        /// Background Color 1.
        /// <para>When the item is serialized out as xml, its value is "bg1".</para>
        /// </summary>
        [EnumString("bg1")]
        Background1,
        /// <summary>
        /// Text Color 1.
        /// <para>When the item is serialized out as xml, its value is "tx1".</para>
        /// </summary>
        [EnumString("tx1")]
        Text1,
        /// <summary>
        /// Background Color 2.
        /// <para>When the item is serialized out as xml, its value is "bg2".</para>
        /// </summary>
        [EnumString("bg2")]
        Background2,
        /// <summary>
        /// Text Color 2.
        /// <para>When the item is serialized out as xml, its value is "tx2".</para>
        /// </summary>
        [EnumString("tx2")]
        Text2,
        /// <summary>
        /// Accent Color 1.
        /// <para>When the item is serialized out as xml, its value is "accent1".</para>
        /// </summary>
        [EnumString("accent1")]
        Accent1,
        /// <summary>
        /// Accent Color 2.
        /// <para>When the item is serialized out as xml, its value is "accent2".</para>
        /// </summary>
        [EnumString("accent2")]
        Accent2,
        /// <summary>
        /// Accent Color 3.
        /// <para>When the item is serialized out as xml, its value is "accent3".</para>
        /// </summary>
        [EnumString("accent3")]
        Accent3,
        /// <summary>
        /// Accent Color 4.
        /// <para>When the item is serialized out as xml, its value is "accent4".</para>
        /// </summary>
        [EnumString("accent4")]
        Accent4,
        /// <summary>
        /// Accent Color 5.
        /// <para>When the item is serialized out as xml, its value is "accent5".</para>
        /// </summary>
        [EnumString("accent5")]
        Accent5,
        /// <summary>
        /// Accent Color 6.
        /// <para>When the item is serialized out as xml, its value is "accent6".</para>
        /// </summary>
        [EnumString("accent6")]
        Accent6,
        /// <summary>
        /// Hyperlink Color.
        /// <para>When the item is serialized out as xml, its value is "hlink".</para>
        /// </summary>
        [EnumString("hlink")]
        Hyperlink,
        /// <summary>
        /// Followed Hyperlink Color.
        /// <para>When the item is serialized out as xml, its value is "folHlink".</para>
        /// </summary>
        [EnumString("folHlink")]
        FollowedHyperlink,
        /// <summary>
        /// Style Color.
        /// <para>When the item is serialized out as xml, its value is "phClr".</para>
        /// </summary>
        [EnumString("phClr")]
        PhColor,
        /// <summary>
        /// Dark Color 1.
        /// <para>When the item is serialized out as xml, its value is "dk1".</para>
        /// </summary>
        [EnumString("dk1")]
        Dark1,
        /// <summary>
        /// Light Color 1.
        /// <para>When the item is serialized out as xml, its value is "lt1".</para>
        /// </summary>
        [EnumString("lt1")]
        Light1,
        /// <summary>
        /// Dark Color 2.
        /// <para>When the item is serialized out as xml, its value is "dk2".</para>
        /// </summary>
        [EnumString("dk2")]
        Dark2,
        /// <summary>
        /// Light Color 2.
        /// <para>When the item is serialized out as xml, its value is "lt2".</para>
        /// </summary>
        [EnumString("lt2")]
        Light2
    }

    /// <summary>
    /// Rectangle Alignments
    /// </summary>
    public enum RectangleAlignmentValues
    {
        /// <summary>
        /// Rectangle Alignment Enum ( Top Left ).
        /// <para>When the item is serialized out as xml, its value is "tl".</para>
        /// </summary>
        [EnumString("tl")]
        TopLeft,
        /// <summary>
        /// Rectangle Alignment Enum ( Top ).
        /// <para>When the item is serialized out as xml, its value is "t".</para>
        /// </summary>
        [EnumString("t")]
        Top,
        /// <summary>
        /// Rectangle Alignment Enum ( Top Right ).
        /// <para>When the item is serialized out as xml, its value is "tr".</para>
        /// </summary>
        [EnumString("tr")]
        TopRight,
        /// <summary>
        /// Rectangle Alignment Enum ( Left ).
        /// <para>When the item is serialized out as xml, its value is "l".</para>
        /// </summary>
        [EnumString("l")]
        Left,
        /// <summary>
        /// Rectangle Alignment Enum ( Center ).
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Rectangle Alignment Enum ( Right ).
        /// <para>When the item is serialized out as xml, its value is "r".</para>
        /// </summary>
        [EnumString("r")]
        Right,
        /// <summary>
        /// Rectangle Alignment Enum ( Bottom Left ).
        /// <para>When the item is serialized out as xml, its value is "bl".</para>
        /// </summary>
        [EnumString("bl")]
        BottomLeft,
        /// <summary>
        /// Rectangle Alignment Enum ( Bottom ).
        /// <para>When the item is serialized out as xml, its value is "b".</para>
        /// </summary>
        [EnumString("b")]
        Bottom,
        /// <summary>
        /// Rectangle Alignment Enum ( Bottom Right ).
        /// <para>When the item is serialized out as xml, its value is "br".</para>
        /// </summary>
        [EnumString("br")]
        BottomRight
    }

    /// <summary>
    /// Black and White Mode
    /// </summary>
    public enum BlackWhiteModeValues
    {
        /// <summary>
        /// Color.
        /// <para>When the item is serialized out as xml, its value is "clr".</para>
        /// </summary>
        [EnumString("clr")]
        Color,
        /// <summary>
        /// Automatic.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        [EnumString("auto")]
        Auto,
        /// <summary>
        /// Gray.
        /// <para>When the item is serialized out as xml, its value is "gray".</para>
        /// </summary>
        [EnumString("gray")]
        Gray,
        /// <summary>
        /// Light Gray.
        /// <para>When the item is serialized out as xml, its value is "ltGray".</para>
        /// </summary>
        [EnumString("ltGray")]
        LightGray,
        /// <summary>
        /// Inverse Gray.
        /// <para>When the item is serialized out as xml, its value is "invGray".</para>
        /// </summary>
        [EnumString("invGray")]
        InvGray,
        /// <summary>
        /// Gray and White.
        /// <para>When the item is serialized out as xml, its value is "grayWhite".</para>
        /// </summary>
        [EnumString("grayWhite")]
        GrayWhite,
        /// <summary>
        /// Black and Gray.
        /// <para>When the item is serialized out as xml, its value is "blackGray".</para>
        /// </summary>
        [EnumString("blackGray")]
        BlackGray,
        /// <summary>
        /// Black and White.
        /// <para>When the item is serialized out as xml, its value is "blackWhite".</para>
        /// </summary>
        [EnumString("blackWhite")]
        BlackWhite,
        /// <summary>
        /// Black.
        /// <para>When the item is serialized out as xml, its value is "black".</para>
        /// </summary>
        [EnumString("black")]
        Black,
        /// <summary>
        /// White.
        /// <para>When the item is serialized out as xml, its value is "white".</para>
        /// </summary>
        [EnumString("white")]
        White,
        /// <summary>
        /// Hidden.
        /// <para>When the item is serialized out as xml, its value is "hidden".</para>
        /// </summary>
        [EnumString("hidden")]
        Hidden
    }

    /// <summary>
    /// Chart Animation Build Step
    /// </summary>
    public enum ChartBuildStepValues
    {
        /// <summary>
        /// Category.
        /// <para>When the item is serialized out as xml, its value is "category".</para>
        /// </summary>
        [EnumString("category")]
        Category,
        /// <summary>
        /// Category Points.
        /// <para>When the item is serialized out as xml, its value is "ptInCategory".</para>
        /// </summary>
        [EnumString("ptInCategory")]
        CategoryPoints,
        /// <summary>
        /// Series.
        /// <para>When the item is serialized out as xml, its value is "series".</para>
        /// </summary>
        [EnumString("series")]
        Series,
        /// <summary>
        /// Series Points.
        /// <para>When the item is serialized out as xml, its value is "ptInSeries".</para>
        /// </summary>
        [EnumString("ptInSeries")]
        SeriesPoints,
        /// <summary>
        /// All Points.
        /// <para>When the item is serialized out as xml, its value is "allPts".</para>
        /// </summary>
        [EnumString("allPts")]
        AllPoints,
        /// <summary>
        /// Grid and Legend.
        /// <para>When the item is serialized out as xml, its value is "gridLegend".</para>
        /// </summary>
        [EnumString("gridLegend")]
        GridLegend
    }

    /// <summary>
    /// Diagram Animation Build Steps
    /// </summary>
    public enum DiagramBuildStepValues
    {
        /// <summary>
        /// Shape.
        /// <para>When the item is serialized out as xml, its value is "sp".</para>
        /// </summary>
        [EnumString("sp")]
        Shape,
        /// <summary>
        /// Background.
        /// <para>When the item is serialized out as xml, its value is "bg".</para>
        /// </summary>
        [EnumString("bg")]
        Background
    }

    /// <summary>
    /// Animation Build Type
    /// </summary>
    public enum AnimationBuildValues
    {
        /// <summary>
        /// Animate At Once.
        /// <para>When the item is serialized out as xml, its value is "allAtOnce".</para>
        /// </summary>
        [EnumString("allAtOnce")]
        AllAtOnce
    }

    /// <summary>
    /// Diagram only Animation Types
    /// </summary>
    public enum AnimationDiagramOnlyBuildValues
    {
        /// <summary>
        /// Elements One-by-One.
        /// <para>When the item is serialized out as xml, its value is "one".</para>
        /// </summary>
        [EnumString("one")]
        One,
        /// <summary>
        /// Level One-by-One.
        /// <para>When the item is serialized out as xml, its value is "lvlOne".</para>
        /// </summary>
        [EnumString("lvlOne")]
        LevelOne,
        /// <summary>
        /// Each Level at Once.
        /// <para>When the item is serialized out as xml, its value is "lvlAtOnce".</para>
        /// </summary>
        [EnumString("lvlAtOnce")]
        LevelAtOnce
    }

    /// <summary>
    /// Chart only Animation Types
    /// </summary>
    public enum AnimationChartOnlyBuildValues
    {
        /// <summary>
        /// Series.
        /// <para>When the item is serialized out as xml, its value is "series".</para>
        /// </summary>
        [EnumString("series")]
        Series,
        /// <summary>
        /// Category.
        /// <para>When the item is serialized out as xml, its value is "category".</para>
        /// </summary>
        [EnumString("category")]
        Category,
        /// <summary>
        /// Series Element.
        /// <para>When the item is serialized out as xml, its value is "seriesEl".</para>
        /// </summary>
        [EnumString("seriesEl")]
        SeriesElement,
        /// <summary>
        /// Category Element.
        /// <para>When the item is serialized out as xml, its value is "categoryEl".</para>
        /// </summary>
        [EnumString("categoryEl")]
        CategoryElement
    }

    /// <summary>
    /// Preset Camera Type
    /// </summary>
    public enum PresetCameraValues
    {
        /// <summary>
        /// Legacy Oblique Top Left.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueTopLeft".</para>
        /// </summary>
        [EnumString("legacyObliqueTopLeft")]
        LegacyObliqueTopLeft,
        /// <summary>
        /// Legacy Oblique Top.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueTop".</para>
        /// </summary>
        [EnumString("legacyObliqueTop")]
        LegacyObliqueTop,
        /// <summary>
        /// Legacy Oblique Top Right.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueTopRight".</para>
        /// </summary>
        [EnumString("legacyObliqueTopRight")]
        LegacyObliqueTopRight,
        /// <summary>
        /// Legacy Oblique Left.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueLeft".</para>
        /// </summary>
        [EnumString("legacyObliqueLeft")]
        LegacyObliqueLeft,
        /// <summary>
        /// Legacy Oblique Front.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueFront".</para>
        /// </summary>
        [EnumString("legacyObliqueFront")]
        LegacyObliqueFront,
        /// <summary>
        /// Legacy Oblique Right.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueRight".</para>
        /// </summary>
        [EnumString("legacyObliqueRight")]
        LegacyObliqueRight,
        /// <summary>
        /// Legacy Oblique Bottom Left.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueBottomLeft".</para>
        /// </summary>
        [EnumString("legacyObliqueBottomLeft")]
        LegacyObliqueBottomLeft,
        /// <summary>
        /// Legacy Oblique Bottom.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueBottom".</para>
        /// </summary>
        [EnumString("legacyObliqueBottom")]
        LegacyObliqueBottom,
        /// <summary>
        /// Legacy Oblique Bottom Right.
        /// <para>When the item is serialized out as xml, its value is "legacyObliqueBottomRight".</para>
        /// </summary>
        [EnumString("legacyObliqueBottomRight")]
        LegacyObliqueBottomRight,
        /// <summary>
        /// Legacy Perspective Top Left.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveTopLeft".</para>
        /// </summary>
        [EnumString("legacyPerspectiveTopLeft")]
        LegacyPerspectiveTopLeft,
        /// <summary>
        /// Legacy Perspective Top.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveTop".</para>
        /// </summary>
        [EnumString("legacyPerspectiveTop")]
        LegacyPerspectiveTop,
        /// <summary>
        /// Legacy Perspective Top Right.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveTopRight".</para>
        /// </summary>
        [EnumString("legacyPerspectiveTopRight")]
        LegacyPerspectiveTopRight,
        /// <summary>
        /// Legacy Perspective Left.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveLeft".</para>
        /// </summary>
        [EnumString("legacyPerspectiveLeft")]
        LegacyPerspectiveLeft,
        /// <summary>
        /// Legacy Perspective Front.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveFront".</para>
        /// </summary>
        [EnumString("legacyPerspectiveFront")]
        LegacyPerspectiveFront,
        /// <summary>
        /// Legacy Perspective Right.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveRight".</para>
        /// </summary>
        [EnumString("legacyPerspectiveRight")]
        LegacyPerspectiveRight,
        /// <summary>
        /// Legacy Perspective Bottom Left.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomLeft".</para>
        /// </summary>
        [EnumString("legacyPerspectiveBottomLeft")]
        LegacyPerspectiveBottomLeft,
        /// <summary>
        /// Legacy Perspective Bottom.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveBottom".</para>
        /// </summary>
        [EnumString("legacyPerspectiveBottom")]
        LegacyPerspectiveBottom,
        /// <summary>
        /// Legacy Perspective Bottom Right.
        /// <para>When the item is serialized out as xml, its value is "legacyPerspectiveBottomRight".</para>
        /// </summary>
        [EnumString("legacyPerspectiveBottomRight")]
        LegacyPerspectiveBottomRight,
        /// <summary>
        /// Orthographic Front.
        /// <para>When the item is serialized out as xml, its value is "orthographicFront".</para>
        /// </summary>
        [EnumString("orthographicFront")]
        OrthographicFront,
        /// <summary>
        /// Isometric Top Up.
        /// <para>When the item is serialized out as xml, its value is "isometricTopUp".</para>
        /// </summary>
        [EnumString("isometricTopUp")]
        IsometricTopUp,
        /// <summary>
        /// Isometric Top Down.
        /// <para>When the item is serialized out as xml, its value is "isometricTopDown".</para>
        /// </summary>
        [EnumString("isometricTopDown")]
        IsometricTopDown,
        /// <summary>
        /// Isometric Bottom Up.
        /// <para>When the item is serialized out as xml, its value is "isometricBottomUp".</para>
        /// </summary>
        [EnumString("isometricBottomUp")]
        IsometricBottomUp,
        /// <summary>
        /// Isometric Bottom Down.
        /// <para>When the item is serialized out as xml, its value is "isometricBottomDown".</para>
        /// </summary>
        [EnumString("isometricBottomDown")]
        IsometricBottomDown,
        /// <summary>
        /// Isometric Left Up.
        /// <para>When the item is serialized out as xml, its value is "isometricLeftUp".</para>
        /// </summary>
        [EnumString("isometricLeftUp")]
        IsometricLeftUp,
        /// <summary>
        /// Isometric Left Down.
        /// <para>When the item is serialized out as xml, its value is "isometricLeftDown".</para>
        /// </summary>
        [EnumString("isometricLeftDown")]
        IsometricLeftDown,
        /// <summary>
        /// Isometric Right Up.
        /// <para>When the item is serialized out as xml, its value is "isometricRightUp".</para>
        /// </summary>
        [EnumString("isometricRightUp")]
        IsometricRightUp,
        /// <summary>
        /// Isometric Right Down.
        /// <para>When the item is serialized out as xml, its value is "isometricRightDown".</para>
        /// </summary>
        [EnumString("isometricRightDown")]
        IsometricRightDown,
        /// <summary>
        /// Isometric Off Axis 1 Left.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis1Left".</para>
        /// </summary>
        [EnumString("isometricOffAxis1Left")]
        IsometricOffAxis1Left,
        /// <summary>
        /// Isometric Off Axis 1 Right.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis1Right".</para>
        /// </summary>
        [EnumString("isometricOffAxis1Right")]
        IsometricOffAxis1Right,
        /// <summary>
        /// Isometric Off Axis 1 Top.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis1Top".</para>
        /// </summary>
        [EnumString("isometricOffAxis1Top")]
        IsometricOffAxis1Top,
        /// <summary>
        /// Isometric Off Axis 2 Left.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis2Left".</para>
        /// </summary>
        [EnumString("isometricOffAxis2Left")]
        IsometricOffAxis2Left,
        /// <summary>
        /// Isometric Off Axis 2 Right.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis2Right".</para>
        /// </summary>
        [EnumString("isometricOffAxis2Right")]
        IsometricOffAxis2Right,
        /// <summary>
        /// Isometric Off Axis 2 Top.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis2Top".</para>
        /// </summary>
        [EnumString("isometricOffAxis2Top")]
        IsometricOffAxis2Top,
        /// <summary>
        /// Isometric Off Axis 3 Left.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis3Left".</para>
        /// </summary>
        [EnumString("isometricOffAxis3Left")]
        IsometricOffAxis3Left,
        /// <summary>
        /// Isometric Off Axis 3 Right.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis3Right".</para>
        /// </summary>
        [EnumString("isometricOffAxis3Right")]
        IsometricOffAxis3Right,
        /// <summary>
        /// Isometric Off Axis 3 Bottom.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis3Bottom".</para>
        /// </summary>
        [EnumString("isometricOffAxis3Bottom")]
        IsometricOffAxis3Bottom,
        /// <summary>
        /// Isometric Off Axis 4 Left.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis4Left".</para>
        /// </summary>
        [EnumString("isometricOffAxis4Left")]
        IsometricOffAxis4Left,
        /// <summary>
        /// Isometric Off Axis 4 Right.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis4Right".</para>
        /// </summary>
        [EnumString("isometricOffAxis4Right")]
        IsometricOffAxis4Right,
        /// <summary>
        /// Isometric Off Axis 4 Bottom.
        /// <para>When the item is serialized out as xml, its value is "isometricOffAxis4Bottom".</para>
        /// </summary>
        [EnumString("isometricOffAxis4Bottom")]
        IsometricOffAxis4Bottom,
        /// <summary>
        /// Oblique Top Left.
        /// <para>When the item is serialized out as xml, its value is "obliqueTopLeft".</para>
        /// </summary>
        [EnumString("obliqueTopLeft")]
        ObliqueTopLeft,
        /// <summary>
        /// Oblique Top.
        /// <para>When the item is serialized out as xml, its value is "obliqueTop".</para>
        /// </summary>
        [EnumString("obliqueTop")]
        ObliqueTop,
        /// <summary>
        /// Oblique Top Right.
        /// <para>When the item is serialized out as xml, its value is "obliqueTopRight".</para>
        /// </summary>
        [EnumString("obliqueTopRight")]
        ObliqueTopRight,
        /// <summary>
        /// Oblique Left.
        /// <para>When the item is serialized out as xml, its value is "obliqueLeft".</para>
        /// </summary>
        [EnumString("obliqueLeft")]
        ObliqueLeft,
        /// <summary>
        /// Oblique Right.
        /// <para>When the item is serialized out as xml, its value is "obliqueRight".</para>
        /// </summary>
        [EnumString("obliqueRight")]
        ObliqueRight,
        /// <summary>
        /// Oblique Bottom Left.
        /// <para>When the item is serialized out as xml, its value is "obliqueBottomLeft".</para>
        /// </summary>
        [EnumString("obliqueBottomLeft")]
        ObliqueBottomLeft,
        /// <summary>
        /// Oblique Bottom.
        /// <para>When the item is serialized out as xml, its value is "obliqueBottom".</para>
        /// </summary>
        [EnumString("obliqueBottom")]
        ObliqueBottom,
        /// <summary>
        /// Oblique Bottom Right.
        /// <para>When the item is serialized out as xml, its value is "obliqueBottomRight".</para>
        /// </summary>
        [EnumString("obliqueBottomRight")]
        ObliqueBottomRight,
        /// <summary>
        /// Perspective Front.
        /// <para>When the item is serialized out as xml, its value is "perspectiveFront".</para>
        /// </summary>
        [EnumString("perspectiveFront")]
        PerspectiveFront,
        /// <summary>
        /// Perspective Left.
        /// <para>When the item is serialized out as xml, its value is "perspectiveLeft".</para>
        /// </summary>
        [EnumString("perspectiveLeft")]
        PerspectiveLeft,
        /// <summary>
        /// Perspective Right.
        /// <para>When the item is serialized out as xml, its value is "perspectiveRight".</para>
        /// </summary>
        [EnumString("perspectiveRight")]
        PerspectiveRight,
        /// <summary>
        /// Orthographic Above.
        /// <para>When the item is serialized out as xml, its value is "perspectiveAbove".</para>
        /// </summary>
        [EnumString("perspectiveAbove")]
        PerspectiveAbove,
        /// <summary>
        /// Perspective Below.
        /// <para>When the item is serialized out as xml, its value is "perspectiveBelow".</para>
        /// </summary>
        [EnumString("perspectiveBelow")]
        PerspectiveBelow,
        /// <summary>
        /// Perspective Above Left Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveAboveLeftFacing".</para>
        /// </summary>
        [EnumString("perspectiveAboveLeftFacing")]
        PerspectiveAboveLeftFacing,
        /// <summary>
        /// Perspective Above Right Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveAboveRightFacing".</para>
        /// </summary>
        [EnumString("perspectiveAboveRightFacing")]
        PerspectiveAboveRightFacing,
        /// <summary>
        /// Perspective Contrasting Left Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveContrastingLeftFacing".</para>
        /// </summary>
        [EnumString("perspectiveContrastingLeftFacing")]
        PerspectiveContrastingLeftFacing,
        /// <summary>
        /// Perspective Contrasting Right Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveContrastingRightFacing".</para>
        /// </summary>
        [EnumString("perspectiveContrastingRightFacing")]
        PerspectiveContrastingRightFacing,
        /// <summary>
        /// Perspective Heroic Left Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveHeroicLeftFacing".</para>
        /// </summary>
        [EnumString("perspectiveHeroicLeftFacing")]
        PerspectiveHeroicLeftFacing,
        /// <summary>
        /// Perspective Heroic Right Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveHeroicRightFacing".</para>
        /// </summary>
        [EnumString("perspectiveHeroicRightFacing")]
        PerspectiveHeroicRightFacing,
        /// <summary>
        /// Perspective Heroic Extreme Left Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeLeftFacing".</para>
        /// </summary>
        [EnumString("perspectiveHeroicExtremeLeftFacing")]
        PerspectiveHeroicExtremeLeftFacing,
        /// <summary>
        /// Perspective Heroic Extreme Right Facing.
        /// <para>When the item is serialized out as xml, its value is "perspectiveHeroicExtremeRightFacing".</para>
        /// </summary>
        [EnumString("perspectiveHeroicExtremeRightFacing")]
        PerspectiveHeroicExtremeRightFacing,
        /// <summary>
        /// Perspective Relaxed.
        /// <para>When the item is serialized out as xml, its value is "perspectiveRelaxed".</para>
        /// </summary>
        [EnumString("perspectiveRelaxed")]
        PerspectiveRelaxed,
        /// <summary>
        /// Perspective Relaxed Moderately.
        /// <para>When the item is serialized out as xml, its value is "perspectiveRelaxedModerately".</para>
        /// </summary>
        [EnumString("perspectiveRelaxedModerately")]
        PerspectiveRelaxedModerately
    }

    /// <summary>
    /// Light Rig Direction
    /// </summary>
    public enum LightRigDirectionValues
    {
        /// <summary>
        /// Top Left.
        /// <para>When the item is serialized out as xml, its value is "tl".</para>
        /// </summary>
        [EnumString("tl")]
        TopLeft,
        /// <summary>
        /// Top.
        /// <para>When the item is serialized out as xml, its value is "t".</para>
        /// </summary>
        [EnumString("t")]
        Top,
        /// <summary>
        /// Top Right.
        /// <para>When the item is serialized out as xml, its value is "tr".</para>
        /// </summary>
        [EnumString("tr")]
        TopRight,
        /// <summary>
        /// Left.
        /// <para>When the item is serialized out as xml, its value is "l".</para>
        /// </summary>
        [EnumString("l")]
        Left,
        /// <summary>
        /// Right.
        /// <para>When the item is serialized out as xml, its value is "r".</para>
        /// </summary>
        [EnumString("r")]
        Right,
        /// <summary>
        /// Bottom Left.
        /// <para>When the item is serialized out as xml, its value is "bl".</para>
        /// </summary>
        [EnumString("bl")]
        BottomLeft,
        /// <summary>
        /// Bottom.
        /// <para>When the item is serialized out as xml, its value is "b".</para>
        /// </summary>
        [EnumString("b")]
        Bottom,
        /// <summary>
        /// Bottom Right.
        /// <para>When the item is serialized out as xml, its value is "br".</para>
        /// </summary>
        [EnumString("br")]
        BottomRight
    }

    /// <summary>
    /// Light Rig Type
    /// </summary>
    public enum LightRigValues
    {
        /// <summary>
        /// Legacy Flat 1.
        /// <para>When the item is serialized out as xml, its value is "legacyFlat1".</para>
        /// </summary>
        [EnumString("legacyFlat1")]
        LegacyFlat1,
        /// <summary>
        /// Legacy Flat 2.
        /// <para>When the item is serialized out as xml, its value is "legacyFlat2".</para>
        /// </summary>
        [EnumString("legacyFlat2")]
        LegacyFlat2,
        /// <summary>
        /// Legacy Flat 3.
        /// <para>When the item is serialized out as xml, its value is "legacyFlat3".</para>
        /// </summary>
        [EnumString("legacyFlat3")]
        LegacyFlat3,
        /// <summary>
        /// Legacy Flat 4.
        /// <para>When the item is serialized out as xml, its value is "legacyFlat4".</para>
        /// </summary>
        [EnumString("legacyFlat4")]
        LegacyFlat4,
        /// <summary>
        /// Legacy Normal 1.
        /// <para>When the item is serialized out as xml, its value is "legacyNormal1".</para>
        /// </summary>
        [EnumString("legacyNormal1")]
        LegacyNormal1,
        /// <summary>
        /// Legacy Normal 2.
        /// <para>When the item is serialized out as xml, its value is "legacyNormal2".</para>
        /// </summary>
        [EnumString("legacyNormal2")]
        LegacyNormal2,
        /// <summary>
        /// Legacy Normal 3.
        /// <para>When the item is serialized out as xml, its value is "legacyNormal3".</para>
        /// </summary>
        [EnumString("legacyNormal3")]
        LegacyNormal3,
        /// <summary>
        /// Legacy Normal 4.
        /// <para>When the item is serialized out as xml, its value is "legacyNormal4".</para>
        /// </summary>
        [EnumString("legacyNormal4")]
        LegacyNormal4,
        /// <summary>
        /// Legacy Harsh 1.
        /// <para>When the item is serialized out as xml, its value is "legacyHarsh1".</para>
        /// </summary>
        [EnumString("legacyHarsh1")]
        LegacyHarsh1,
        /// <summary>
        /// Legacy Harsh 2.
        /// <para>When the item is serialized out as xml, its value is "legacyHarsh2".</para>
        /// </summary>
        [EnumString("legacyHarsh2")]
        LegacyHarsh2,
        /// <summary>
        /// Legacy Harsh 3.
        /// <para>When the item is serialized out as xml, its value is "legacyHarsh3".</para>
        /// </summary>
        [EnumString("legacyHarsh3")]
        LegacyHarsh3,
        /// <summary>
        /// Legacy Harsh 4.
        /// <para>When the item is serialized out as xml, its value is "legacyHarsh4".</para>
        /// </summary>
        [EnumString("legacyHarsh4")]
        LegacyHarsh4,
        /// <summary>
        /// Three Point.
        /// <para>When the item is serialized out as xml, its value is "threePt".</para>
        /// </summary>
        [EnumString("threePt")]
        ThreePoints,
        /// <summary>
        /// Light Rig Enum ( Balanced ).
        /// <para>When the item is serialized out as xml, its value is "balanced".</para>
        /// </summary>
        [EnumString("balanced")]
        Balanced,
        /// <summary>
        /// Soft.
        /// <para>When the item is serialized out as xml, its value is "soft".</para>
        /// </summary>
        [EnumString("soft")]
        Soft,
        /// <summary>
        /// Harsh.
        /// <para>When the item is serialized out as xml, its value is "harsh".</para>
        /// </summary>
        [EnumString("harsh")]
        Harsh,
        /// <summary>
        /// Flood.
        /// <para>When the item is serialized out as xml, its value is "flood".</para>
        /// </summary>
        [EnumString("flood")]
        Flood,
        /// <summary>
        /// Contrasting.
        /// <para>When the item is serialized out as xml, its value is "contrasting".</para>
        /// </summary>
        [EnumString("contrasting")]
        Contrasting,
        /// <summary>
        /// Morning.
        /// <para>When the item is serialized out as xml, its value is "morning".</para>
        /// </summary>
        [EnumString("morning")]
        Morning,
        /// <summary>
        /// Sunrise.
        /// <para>When the item is serialized out as xml, its value is "sunrise".</para>
        /// </summary>
        [EnumString("sunrise")]
        Sunrise,
        /// <summary>
        /// Sunset.
        /// <para>When the item is serialized out as xml, its value is "sunset".</para>
        /// </summary>
        [EnumString("sunset")]
        Sunset,
        /// <summary>
        /// Chilly.
        /// <para>When the item is serialized out as xml, its value is "chilly".</para>
        /// </summary>
        [EnumString("chilly")]
        Chilly,
        /// <summary>
        /// Freezing.
        /// <para>When the item is serialized out as xml, its value is "freezing".</para>
        /// </summary>
        [EnumString("freezing")]
        Freezing,
        /// <summary>
        /// Flat.
        /// <para>When the item is serialized out as xml, its value is "flat".</para>
        /// </summary>
        [EnumString("flat")]
        Flat,
        /// <summary>
        /// Two Point.
        /// <para>When the item is serialized out as xml, its value is "twoPt".</para>
        /// </summary>
        [EnumString("twoPt")]
        TwoPoints,
        /// <summary>
        /// Glow.
        /// <para>When the item is serialized out as xml, its value is "glow".</para>
        /// </summary>
        [EnumString("glow")]
        Glow,
        /// <summary>
        /// Bright Room.
        /// <para>When the item is serialized out as xml, its value is "brightRoom".</para>
        /// </summary>
        [EnumString("brightRoom")]
        BrightRoom
    }

    /// <summary>
    /// Bevel Presets
    /// </summary>
    public enum BevelPresetValues
    {
        /// <summary>
        /// Relaxed Inset.
        /// <para>When the item is serialized out as xml, its value is "relaxedInset".</para>
        /// </summary>
        [EnumString("relaxedInset")]
        RelaxedInset,
        /// <summary>
        /// Circle.
        /// <para>When the item is serialized out as xml, its value is "circle".</para>
        /// </summary>
        [EnumString("circle")]
        Circle,
        /// <summary>
        /// Slope.
        /// <para>When the item is serialized out as xml, its value is "slope".</para>
        /// </summary>
        [EnumString("slope")]
        Slope,
        /// <summary>
        /// Cross.
        /// <para>When the item is serialized out as xml, its value is "cross".</para>
        /// </summary>
        [EnumString("cross")]
        Cross,
        /// <summary>
        /// Angle.
        /// <para>When the item is serialized out as xml, its value is "angle".</para>
        /// </summary>
        [EnumString("angle")]
        Angle,
        /// <summary>
        /// Soft Round.
        /// <para>When the item is serialized out as xml, its value is "softRound".</para>
        /// </summary>
        [EnumString("softRound")]
        SoftRound,
        /// <summary>
        /// Convex.
        /// <para>When the item is serialized out as xml, its value is "convex".</para>
        /// </summary>
        [EnumString("convex")]
        Convex,
        /// <summary>
        /// Cool Slant.
        /// <para>When the item is serialized out as xml, its value is "coolSlant".</para>
        /// </summary>
        [EnumString("coolSlant")]
        CoolSlant,
        /// <summary>
        /// Divot.
        /// <para>When the item is serialized out as xml, its value is "divot".</para>
        /// </summary>
        [EnumString("divot")]
        Divot,
        /// <summary>
        /// Riblet.
        /// <para>When the item is serialized out as xml, its value is "riblet".</para>
        /// </summary>
        [EnumString("riblet")]
        Riblet,
        /// <summary>
        /// Hard Edge.
        /// <para>When the item is serialized out as xml, its value is "hardEdge".</para>
        /// </summary>
        [EnumString("hardEdge")]
        HardEdge,
        /// <summary>
        /// Art Deco.
        /// <para>When the item is serialized out as xml, its value is "artDeco".</para>
        /// </summary>
        [EnumString("artDeco")]
        ArtDeco
    }

    /// <summary>
    /// Preset Material Type
    /// </summary>
    public enum PresetMaterialTypeValues
    {
        /// <summary>
        /// Legacy Matte.
        /// <para>When the item is serialized out as xml, its value is "legacyMatte".</para>
        /// </summary>
        [EnumString("legacyMatte")]
        LegacyMatte,
        /// <summary>
        /// Legacy Plastic.
        /// <para>When the item is serialized out as xml, its value is "legacyPlastic".</para>
        /// </summary>
        [EnumString("legacyPlastic")]
        LegacyPlastic,
        /// <summary>
        /// Legacy Metal.
        /// <para>When the item is serialized out as xml, its value is "legacyMetal".</para>
        /// </summary>
        [EnumString("legacyMetal")]
        LegacyMetal,
        /// <summary>
        /// Legacy Wireframe.
        /// <para>When the item is serialized out as xml, its value is "legacyWireframe".</para>
        /// </summary>
        [EnumString("legacyWireframe")]
        LegacyWireframe,
        /// <summary>
        /// Matte.
        /// <para>When the item is serialized out as xml, its value is "matte".</para>
        /// </summary>
        [EnumString("matte")]
        Matte,
        /// <summary>
        /// Plastic.
        /// <para>When the item is serialized out as xml, its value is "plastic".</para>
        /// </summary>
        [EnumString("plastic")]
        Plastic,
        /// <summary>
        /// Metal.
        /// <para>When the item is serialized out as xml, its value is "metal".</para>
        /// </summary>
        [EnumString("metal")]
        Metal,
        /// <summary>
        /// Warm Matte.
        /// <para>When the item is serialized out as xml, its value is "warmMatte".</para>
        /// </summary>
        [EnumString("warmMatte")]
        WarmMatte,
        /// <summary>
        /// Translucent Powder.
        /// <para>When the item is serialized out as xml, its value is "translucentPowder".</para>
        /// </summary>
        [EnumString("translucentPowder")]
        TranslucentPowder,
        /// <summary>
        /// Powder.
        /// <para>When the item is serialized out as xml, its value is "powder".</para>
        /// </summary>
        [EnumString("powder")]
        Powder,
        /// <summary>
        /// Dark Edge.
        /// <para>When the item is serialized out as xml, its value is "dkEdge".</para>
        /// </summary>
        [EnumString("dkEdge")]
        DarkEdge,
        /// <summary>
        /// Soft Edge.
        /// <para>When the item is serialized out as xml, its value is "softEdge".</para>
        /// </summary>
        [EnumString("softEdge")]
        SoftEdge,
        /// <summary>
        /// Clear.
        /// <para>When the item is serialized out as xml, its value is "clear".</para>
        /// </summary>
        [EnumString("clear")]
        Clear,
        /// <summary>
        /// Flat.
        /// <para>When the item is serialized out as xml, its value is "flat".</para>
        /// </summary>
        [EnumString("flat")]
        Flat,
        /// <summary>
        /// Soft Metal.
        /// <para>When the item is serialized out as xml, its value is "softmetal".</para>
        /// </summary>
        [EnumString("softmetal")]
        SoftMetal
    }

    /// <summary>
    /// Preset Shadow Type
    /// </summary>
    public enum PresetShadowValues
    {
        /// <summary>
        /// Top Left Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw1".</para>
        /// </summary>
        [EnumString("shdw1")]
        TopLeftDropShadow,
        /// <summary>
        /// Top Right Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw2".</para>
        /// </summary>
        [EnumString("shdw2")]
        TopRightDropShadow,
        /// <summary>
        /// Back Left Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw3".</para>
        /// </summary>
        [EnumString("shdw3")]
        BackLeftPerspectiveShadow,
        /// <summary>
        /// Back Right Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw4".</para>
        /// </summary>
        [EnumString("shdw4")]
        BackRightPerspectiveShadow,
        /// <summary>
        /// Bottom Left Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw5".</para>
        /// </summary>
        [EnumString("shdw5")]
        BottomLeftDropShadow,
        /// <summary>
        /// Bottom Right Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw6".</para>
        /// </summary>
        [EnumString("shdw6")]
        BottomRightDropShadow,
        /// <summary>
        /// Front Left Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw7".</para>
        /// </summary>
        [EnumString("shdw7")]
        FrontLeftPerspectiveShadow,
        /// <summary>
        /// Front Right Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw8".</para>
        /// </summary>
        [EnumString("shdw8")]
        FrontRightPerspectiveShadow,
        /// <summary>
        /// Top Left Small Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw9".</para>
        /// </summary>
        [EnumString("shdw9")]
        TopLeftSmallDropShadow,
        /// <summary>
        /// Top Left Large Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw10".</para>
        /// </summary>
        [EnumString("shdw10")]
        TopLeftLargeDropShadow,
        /// <summary>
        /// Back Left Long Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw11".</para>
        /// </summary>
        [EnumString("shdw11")]
        BackLeftLongPerspectiveShadow,
        /// <summary>
        /// Back Right Long Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw12".</para>
        /// </summary>
        [EnumString("shdw12")]
        BackRightLongPerspectiveShadow,
        /// <summary>
        /// Top Left Double Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw13".</para>
        /// </summary>
        [EnumString("shdw13")]
        TopLeftDoubleDropShadow,
        /// <summary>
        /// Bottom Right Small Drop Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw14".</para>
        /// </summary>
        [EnumString("shdw14")]
        BottomRightSmallDropShadow,
        /// <summary>
        /// Front Left Long Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw15".</para>
        /// </summary>
        [EnumString("shdw15")]
        FrontLeftLongPerspectiveShadow,
        /// <summary>
        /// Front Right LongPerspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw16".</para>
        /// </summary>
        [EnumString("shdw16")]
        FrontRightLongPerspectiveShadow,
        /// <summary>
        /// 3D Outer Box Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw17".</para>
        /// </summary>
        [EnumString("shdw17")]
        ThreeDimensionalOuterBoxShadow,
        /// <summary>
        /// 3D Inner Box Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw18".</para>
        /// </summary>
        [EnumString("shdw18")]
        ThreeDimensionalInnerBoxShadow,
        /// <summary>
        /// Back Center Perspective Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw19".</para>
        /// </summary>
        [EnumString("shdw19")]
        BackCenterPerspectiveShadow,
        /// <summary>
        /// Front Bottom Shadow.
        /// <para>When the item is serialized out as xml, its value is "shdw20".</para>
        /// </summary>
        [EnumString("shdw20")]
        FrontBottomShadow
    }

    /// <summary>
    /// Path Shade Type
    /// </summary>
    public enum PathShadeValues
    {
        /// <summary>
        /// Shape.
        /// <para>When the item is serialized out as xml, its value is "shape".</para>
        /// </summary>
        [EnumString("shape")]
        Shape,
        /// <summary>
        /// Circle.
        /// <para>When the item is serialized out as xml, its value is "circle".</para>
        /// </summary>
        [EnumString("circle")]
        Circle,
        /// <summary>
        /// Rectangle.
        /// <para>When the item is serialized out as xml, its value is "rect".</para>
        /// </summary>
        [EnumString("rect")]
        Rectangle
    }

    /// <summary>
    /// Tile Flip Mode
    /// </summary>
    public enum TileFlipValues
    {
        /// <summary>
        /// None.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Horizontal.
        /// <para>When the item is serialized out as xml, its value is "x".</para>
        /// </summary>
        [EnumString("x")]
        Horizontal,
        /// <summary>
        /// Vertical.
        /// <para>When the item is serialized out as xml, its value is "y".</para>
        /// </summary>
        [EnumString("y")]
        Vertical,
        /// <summary>
        /// Horizontal and Vertical.
        /// <para>When the item is serialized out as xml, its value is "xy".</para>
        /// </summary>
        [EnumString("xy")]
        HorizontalAndVertical
    }

    /// <summary>
    /// Blip Compression Type
    /// </summary>
    public enum BlipCompressionValues
    {
        /// <summary>
        /// Email Compression.
        /// <para>When the item is serialized out as xml, its value is "email".</para>
        /// </summary>
        [EnumString("email")]
        Email,
        /// <summary>
        /// Screen Viewing Compression.
        /// <para>When the item is serialized out as xml, its value is "screen".</para>
        /// </summary>
        [EnumString("screen")]
        Screen,
        /// <summary>
        /// Printing Compression.
        /// <para>When the item is serialized out as xml, its value is "print".</para>
        /// </summary>
        [EnumString("print")]
        Print,
        /// <summary>
        /// High Quality Printing Compression.
        /// <para>When the item is serialized out as xml, its value is "hqprint".</para>
        /// </summary>
        [EnumString("hqprint")]
        HighQualityPrint,
        /// <summary>
        /// No Compression.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None
    }

    /// <summary>
    /// Preset Pattern Value
    /// </summary>
    public enum PresetPatternValues
    {
        /// <summary>
        /// 5%.
        /// <para>When the item is serialized out as xml, its value is "pct5".</para>
        /// </summary>
        [EnumString("pct5")]
        Percent5,
        /// <summary>
        /// 10%.
        /// <para>When the item is serialized out as xml, its value is "pct10".</para>
        /// </summary>
        [EnumString("pct10")]
        Percent10,
        /// <summary>
        /// 20%.
        /// <para>When the item is serialized out as xml, its value is "pct20".</para>
        /// </summary>
        [EnumString("pct20")]
        Percent20,
        /// <summary>
        /// 25%.
        /// <para>When the item is serialized out as xml, its value is "pct25".</para>
        /// </summary>
        [EnumString("pct25")]
        Percent25,
        /// <summary>
        /// 30%.
        /// <para>When the item is serialized out as xml, its value is "pct30".</para>
        /// </summary>
        [EnumString("pct30")]
        Percent30,
        /// <summary>
        /// 40%.
        /// <para>When the item is serialized out as xml, its value is "pct40".</para>
        /// </summary>
        [EnumString("pct40")]
        Percent40,
        /// <summary>
        /// 50%.
        /// <para>When the item is serialized out as xml, its value is "pct50".</para>
        /// </summary>
        [EnumString("pct50")]
        Percent50,
        /// <summary>
        /// 60%.
        /// <para>When the item is serialized out as xml, its value is "pct60".</para>
        /// </summary>
        [EnumString("pct60")]
        Percent60,
        /// <summary>
        /// 70%.
        /// <para>When the item is serialized out as xml, its value is "pct70".</para>
        /// </summary>
        [EnumString("pct70")]
        Percent70,
        /// <summary>
        /// 75%.
        /// <para>When the item is serialized out as xml, its value is "pct75".</para>
        /// </summary>
        [EnumString("pct75")]
        Percent75,
        /// <summary>
        /// 80%.
        /// <para>When the item is serialized out as xml, its value is "pct80".</para>
        /// </summary>
        [EnumString("pct80")]
        Percent80,
        /// <summary>
        /// 90%.
        /// <para>When the item is serialized out as xml, its value is "pct90".</para>
        /// </summary>
        [EnumString("pct90")]
        Percent90,
        /// <summary>
        /// Horizontal.
        /// <para>When the item is serialized out as xml, its value is "horz".</para>
        /// </summary>
        [EnumString("horz")]
        Horizontal,
        /// <summary>
        /// Vertical.
        /// <para>When the item is serialized out as xml, its value is "vert".</para>
        /// </summary>
        [EnumString("vert")]
        Vertical,
        /// <summary>
        /// Light Horizontal.
        /// <para>When the item is serialized out as xml, its value is "ltHorz".</para>
        /// </summary>
        [EnumString("ltHorz")]
        LightHorizontal,
        /// <summary>
        /// Light Vertical.
        /// <para>When the item is serialized out as xml, its value is "ltVert".</para>
        /// </summary>
        [EnumString("ltVert")]
        LightVertical,
        /// <summary>
        /// Dark Horizontal.
        /// <para>When the item is serialized out as xml, its value is "dkHorz".</para>
        /// </summary>
        [EnumString("dkHorz")]
        DarkHorizontal,
        /// <summary>
        /// Dark Vertical.
        /// <para>When the item is serialized out as xml, its value is "dkVert".</para>
        /// </summary>
        [EnumString("dkVert")]
        DarkVertical,
        /// <summary>
        /// Narrow Horizontal.
        /// <para>When the item is serialized out as xml, its value is "narHorz".</para>
        /// </summary>
        [EnumString("narHorz")]
        NarrowHorizontal,
        /// <summary>
        /// Narrow Vertical.
        /// <para>When the item is serialized out as xml, its value is "narVert".</para>
        /// </summary>
        [EnumString("narVert")]
        NarrowVertical,
        /// <summary>
        /// Dashed Horizontal.
        /// <para>When the item is serialized out as xml, its value is "dashHorz".</para>
        /// </summary>
        [EnumString("dashHorz")]
        DashedHorizontal,
        /// <summary>
        /// Dashed Vertical.
        /// <para>When the item is serialized out as xml, its value is "dashVert".</para>
        /// </summary>
        [EnumString("dashVert")]
        DashedVertical,
        /// <summary>
        /// Cross.
        /// <para>When the item is serialized out as xml, its value is "cross".</para>
        /// </summary>
        [EnumString("cross")]
        Cross,
        /// <summary>
        /// Downward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "dnDiag".</para>
        /// </summary>
        [EnumString("dnDiag")]
        DownwardDiagonal,
        /// <summary>
        /// Upward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "upDiag".</para>
        /// </summary>
        [EnumString("upDiag")]
        UpwardDiagonal,
        /// <summary>
        /// Light Downward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "ltDnDiag".</para>
        /// </summary>
        [EnumString("ltDnDiag")]
        LightDownwardDiagonal,
        /// <summary>
        /// Light Upward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "ltUpDiag".</para>
        /// </summary>
        [EnumString("ltUpDiag")]
        LightUpwardDiagonal,
        /// <summary>
        /// Dark Downward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "dkDnDiag".</para>
        /// </summary>
        [EnumString("dkDnDiag")]
        DarkDownwardDiagonal,
        /// <summary>
        /// Dark Upward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "dkUpDiag".</para>
        /// </summary>
        [EnumString("dkUpDiag")]
        DarkUpwardDiagonal,
        /// <summary>
        /// Wide Downward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "wdDnDiag".</para>
        /// </summary>
        [EnumString("wdDnDiag")]
        WideDownwardDiagonal,
        /// <summary>
        /// Wide Upward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "wdUpDiag".</para>
        /// </summary>
        [EnumString("wdUpDiag")]
        WideUpwardDiagonal,
        /// <summary>
        /// Dashed Downward Diagonal.
        /// <para>When the item is serialized out as xml, its value is "dashDnDiag".</para>
        /// </summary>
        [EnumString("dashDnDiag")]
        DashedDownwardDiagonal,
        /// <summary>
        /// Dashed Upward DIagonal.
        /// <para>When the item is serialized out as xml, its value is "dashUpDiag".</para>
        /// </summary>
        [EnumString("dashUpDiag")]
        DashedUpwardDiagonal,
        /// <summary>
        /// Diagonal Cross.
        /// <para>When the item is serialized out as xml, its value is "diagCross".</para>
        /// </summary>
        [EnumString("diagCross")]
        DiagonalCross,
        /// <summary>
        /// Small Checker Board.
        /// <para>When the item is serialized out as xml, its value is "smCheck".</para>
        /// </summary>
        [EnumString("smCheck")]
        SmallCheck,
        /// <summary>
        /// Large Checker Board.
        /// <para>When the item is serialized out as xml, its value is "lgCheck".</para>
        /// </summary>
        [EnumString("lgCheck")]
        LargeCheck,
        /// <summary>
        /// Small Grid.
        /// <para>When the item is serialized out as xml, its value is "smGrid".</para>
        /// </summary>
        [EnumString("smGrid")]
        SmallGrid,
        /// <summary>
        /// Large Grid.
        /// <para>When the item is serialized out as xml, its value is "lgGrid".</para>
        /// </summary>
        [EnumString("lgGrid")]
        LargeGrid,
        /// <summary>
        /// Dotted Grid.
        /// <para>When the item is serialized out as xml, its value is "dotGrid".</para>
        /// </summary>
        [EnumString("dotGrid")]
        DotGrid,
        /// <summary>
        /// Small Confetti.
        /// <para>When the item is serialized out as xml, its value is "smConfetti".</para>
        /// </summary>
        [EnumString("smConfetti")]
        SmallConfetti,
        /// <summary>
        /// Large Confetti.
        /// <para>When the item is serialized out as xml, its value is "lgConfetti".</para>
        /// </summary>
        [EnumString("lgConfetti")]
        LargeConfetti,
        /// <summary>
        /// Horizontal Brick.
        /// <para>When the item is serialized out as xml, its value is "horzBrick".</para>
        /// </summary>
        [EnumString("horzBrick")]
        HorizontalBrick,
        /// <summary>
        /// Diagonal Brick.
        /// <para>When the item is serialized out as xml, its value is "diagBrick".</para>
        /// </summary>
        [EnumString("diagBrick")]
        DiagonalBrick,
        /// <summary>
        /// Solid Diamond.
        /// <para>When the item is serialized out as xml, its value is "solidDmnd".</para>
        /// </summary>
        [EnumString("solidDmnd")]
        SolidDiamond,
        /// <summary>
        /// Open Diamond.
        /// <para>When the item is serialized out as xml, its value is "openDmnd".</para>
        /// </summary>
        [EnumString("openDmnd")]
        OpenDiamond,
        /// <summary>
        /// Dotted Diamond.
        /// <para>When the item is serialized out as xml, its value is "dotDmnd".</para>
        /// </summary>
        [EnumString("dotDmnd")]
        DottedDiamond,
        /// <summary>
        /// Plaid.
        /// <para>When the item is serialized out as xml, its value is "plaid".</para>
        /// </summary>
        [EnumString("plaid")]
        Plaid,
        /// <summary>
        /// Sphere.
        /// <para>When the item is serialized out as xml, its value is "sphere".</para>
        /// </summary>
        [EnumString("sphere")]
        Sphere,
        /// <summary>
        /// Weave.
        /// <para>When the item is serialized out as xml, its value is "weave".</para>
        /// </summary>
        [EnumString("weave")]
        Weave,
        /// <summary>
        /// Divot.
        /// <para>When the item is serialized out as xml, its value is "divot".</para>
        /// </summary>
        [EnumString("divot")]
        Divot,
        /// <summary>
        /// Shingle.
        /// <para>When the item is serialized out as xml, its value is "shingle".</para>
        /// </summary>
        [EnumString("shingle")]
        Shingle,
        /// <summary>
        /// Wave.
        /// <para>When the item is serialized out as xml, its value is "wave".</para>
        /// </summary>
        [EnumString("wave")]
        Wave,
        /// <summary>
        /// Trellis.
        /// <para>When the item is serialized out as xml, its value is "trellis".</para>
        /// </summary>
        [EnumString("trellis")]
        Trellis,
        /// <summary>
        /// Zig Zag.
        /// <para>When the item is serialized out as xml, its value is "zigZag".</para>
        /// </summary>
        [EnumString("zigZag")]
        ZigZag
    }

    /// <summary>
    /// Blend Mode
    /// </summary>
    public enum BlendModeValues
    {
        /// <summary>
        /// Overlay.
        /// <para>When the item is serialized out as xml, its value is "over".</para>
        /// </summary>
        [EnumString("over")]
        Overlay,
        /// <summary>
        /// Multiply.
        /// <para>When the item is serialized out as xml, its value is "mult".</para>
        /// </summary>
        [EnumString("mult")]
        Multiply,
        /// <summary>
        /// Screen.
        /// <para>When the item is serialized out as xml, its value is "screen".</para>
        /// </summary>
        [EnumString("screen")]
        Screen,
        /// <summary>
        /// Darken.
        /// <para>When the item is serialized out as xml, its value is "darken".</para>
        /// </summary>
        [EnumString("darken")]
        Darken,
        /// <summary>
        /// Lighten.
        /// <para>When the item is serialized out as xml, its value is "lighten".</para>
        /// </summary>
        [EnumString("lighten")]
        Lighten
    }

    /// <summary>
    /// Effect Container Type
    /// </summary>
    public enum EffectContainerValues
    {
        /// <summary>
        /// Sibling.
        /// <para>When the item is serialized out as xml, its value is "sib".</para>
        /// </summary>
        [EnumString("sib")]
        Sibling,
        /// <summary>
        /// Tree.
        /// <para>When the item is serialized out as xml, its value is "tree".</para>
        /// </summary>
        [EnumString("tree")]
        Tree
    }

    /// <summary>
    /// Preset Shape Types
    /// </summary>
    public enum ShapeTypeValues
    {
        /// <summary>
        /// Line Shape.
        /// <para>When the item is serialized out as xml, its value is "line".</para>
        /// </summary>
        [EnumString("line")]
        Line,
        /// <summary>
        /// Line Inverse Shape.
        /// <para>When the item is serialized out as xml, its value is "lineInv".</para>
        /// </summary>
        [EnumString("lineInv")]
        LineInverse,
        /// <summary>
        /// Triangle Shape.
        /// <para>When the item is serialized out as xml, its value is "triangle".</para>
        /// </summary>
        [EnumString("triangle")]
        Triangle,
        /// <summary>
        /// Right Triangle Shape.
        /// <para>When the item is serialized out as xml, its value is "rtTriangle".</para>
        /// </summary>
        [EnumString("rtTriangle")]
        RightTriangle,
        /// <summary>
        /// Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "rect".</para>
        /// </summary>
        [EnumString("rect")]
        Rectangle,
        /// <summary>
        /// Diamond Shape.
        /// <para>When the item is serialized out as xml, its value is "diamond".</para>
        /// </summary>
        [EnumString("diamond")]
        Diamond,
        /// <summary>
        /// Parallelogram Shape.
        /// <para>When the item is serialized out as xml, its value is "parallelogram".</para>
        /// </summary>
        [EnumString("parallelogram")]
        Parallelogram,
        /// <summary>
        /// Trapezoid Shape.
        /// <para>When the item is serialized out as xml, its value is "trapezoid".</para>
        /// </summary>
        [EnumString("trapezoid")]
        Trapezoid,
        /// <summary>
        /// Non-Isosceles Trapezoid Shape.
        /// <para>When the item is serialized out as xml, its value is "nonIsoscelesTrapezoid".</para>
        /// </summary>
        [EnumString("nonIsoscelesTrapezoid")]
        NonIsoscelesTrapezoid,
        /// <summary>
        /// Pentagon Shape.
        /// <para>When the item is serialized out as xml, its value is "pentagon".</para>
        /// </summary>
        [EnumString("pentagon")]
        Pentagon,
        /// <summary>
        /// Hexagon Shape.
        /// <para>When the item is serialized out as xml, its value is "hexagon".</para>
        /// </summary>
        [EnumString("hexagon")]
        Hexagon,
        /// <summary>
        /// Heptagon Shape.
        /// <para>When the item is serialized out as xml, its value is "heptagon".</para>
        /// </summary>
        [EnumString("heptagon")]
        Heptagon,
        /// <summary>
        /// Octagon Shape.
        /// <para>When the item is serialized out as xml, its value is "octagon".</para>
        /// </summary>
        [EnumString("octagon")]
        Octagon,
        /// <summary>
        /// Decagon Shape.
        /// <para>When the item is serialized out as xml, its value is "decagon".</para>
        /// </summary>
        [EnumString("decagon")]
        Decagon,
        /// <summary>
        /// Dodecagon Shape.
        /// <para>When the item is serialized out as xml, its value is "dodecagon".</para>
        /// </summary>
        [EnumString("dodecagon")]
        Dodecagon,
        /// <summary>
        /// Four Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star4".</para>
        /// </summary>
        [EnumString("star4")]
        Star4,
        /// <summary>
        /// Five Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star5".</para>
        /// </summary>
        [EnumString("star5")]
        Star5,
        /// <summary>
        /// Six Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star6".</para>
        /// </summary>
        [EnumString("star6")]
        Star6,
        /// <summary>
        /// Seven Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star7".</para>
        /// </summary>
        [EnumString("star7")]
        Star7,
        /// <summary>
        /// Eight Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star8".</para>
        /// </summary>
        [EnumString("star8")]
        Star8,
        /// <summary>
        /// Ten Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star10".</para>
        /// </summary>
        [EnumString("star10")]
        Star10,
        /// <summary>
        /// Twelve Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star12".</para>
        /// </summary>
        [EnumString("star12")]
        Star12,
        /// <summary>
        /// Sixteen Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star16".</para>
        /// </summary>
        [EnumString("star16")]
        Star16,
        /// <summary>
        /// Twenty Four Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star24".</para>
        /// </summary>
        [EnumString("star24")]
        Star24,
        /// <summary>
        /// Thirty Two Pointed Star Shape.
        /// <para>When the item is serialized out as xml, its value is "star32".</para>
        /// </summary>
        [EnumString("star32")]
        Star32,
        /// <summary>
        /// Round Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "roundRect".</para>
        /// </summary>
        [EnumString("roundRect")]
        RoundRectangle,
        /// <summary>
        /// One Round Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "round1Rect".</para>
        /// </summary>
        [EnumString("round1Rect")]
        Round1Rectangle,
        /// <summary>
        /// Two Same-side Round Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "round2SameRect".</para>
        /// </summary>
        [EnumString("round2SameRect")]
        Round2SameRectangle,
        /// <summary>
        /// Two Diagonal Round Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "round2DiagRect".</para>
        /// </summary>
        [EnumString("round2DiagRect")]
        Round2DiagonalRectangle,
        /// <summary>
        /// One Snip One Round Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "snipRoundRect".</para>
        /// </summary>
        [EnumString("snipRoundRect")]
        SnipRoundRectangle,
        /// <summary>
        /// One Snip Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "snip1Rect".</para>
        /// </summary>
        [EnumString("snip1Rect")]
        Snip1Rectangle,
        /// <summary>
        /// Two Same-side Snip Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "snip2SameRect".</para>
        /// </summary>
        [EnumString("snip2SameRect")]
        Snip2SameRectangle,
        /// <summary>
        /// Two Diagonal Snip Corner Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "snip2DiagRect".</para>
        /// </summary>
        [EnumString("snip2DiagRect")]
        Snip2DiagonalRectangle,
        /// <summary>
        /// Plaque Shape.
        /// <para>When the item is serialized out as xml, its value is "plaque".</para>
        /// </summary>
        [EnumString("plaque")]
        Plaque,
        /// <summary>
        /// Ellipse Shape.
        /// <para>When the item is serialized out as xml, its value is "ellipse".</para>
        /// </summary>
        [EnumString("ellipse")]
        Ellipse,
        /// <summary>
        /// Teardrop Shape.
        /// <para>When the item is serialized out as xml, its value is "teardrop".</para>
        /// </summary>
        [EnumString("teardrop")]
        Teardrop,
        /// <summary>
        /// Home Plate Shape.
        /// <para>When the item is serialized out as xml, its value is "homePlate".</para>
        /// </summary>
        [EnumString("homePlate")]
        HomePlate,
        /// <summary>
        /// Chevron Shape.
        /// <para>When the item is serialized out as xml, its value is "chevron".</para>
        /// </summary>
        [EnumString("chevron")]
        Chevron,
        /// <summary>
        /// Pie Wedge Shape.
        /// <para>When the item is serialized out as xml, its value is "pieWedge".</para>
        /// </summary>
        [EnumString("pieWedge")]
        PieWedge,
        /// <summary>
        /// Pie Shape.
        /// <para>When the item is serialized out as xml, its value is "pie".</para>
        /// </summary>
        [EnumString("pie")]
        Pie,
        /// <summary>
        /// Block Arc Shape.
        /// <para>When the item is serialized out as xml, its value is "blockArc".</para>
        /// </summary>
        [EnumString("blockArc")]
        BlockArc,
        /// <summary>
        /// Donut Shape.
        /// <para>When the item is serialized out as xml, its value is "donut".</para>
        /// </summary>
        [EnumString("donut")]
        Donut,
        /// <summary>
        /// No Smoking Shape.
        /// <para>When the item is serialized out as xml, its value is "noSmoking".</para>
        /// </summary>
        [EnumString("noSmoking")]
        NoSmoking,
        /// <summary>
        /// Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "rightArrow".</para>
        /// </summary>
        [EnumString("rightArrow")]
        RightArrow,
        /// <summary>
        /// Left Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftArrow".</para>
        /// </summary>
        [EnumString("leftArrow")]
        LeftArrow,
        /// <summary>
        /// Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "upArrow".</para>
        /// </summary>
        [EnumString("upArrow")]
        UpArrow,
        /// <summary>
        /// Down Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "downArrow".</para>
        /// </summary>
        [EnumString("downArrow")]
        DownArrow,
        /// <summary>
        /// Striped Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "stripedRightArrow".</para>
        /// </summary>
        [EnumString("stripedRightArrow")]
        StripedRightArrow,
        /// <summary>
        /// Notched Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "notchedRightArrow".</para>
        /// </summary>
        [EnumString("notchedRightArrow")]
        NotchedRightArrow,
        /// <summary>
        /// Bent Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "bentUpArrow".</para>
        /// </summary>
        [EnumString("bentUpArrow")]
        BentUpArrow,
        /// <summary>
        /// Left Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftRightArrow".</para>
        /// </summary>
        [EnumString("leftRightArrow")]
        LeftRightArrow,
        /// <summary>
        /// Up Down Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "upDownArrow".</para>
        /// </summary>
        [EnumString("upDownArrow")]
        UpDownArrow,
        /// <summary>
        /// Left Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftUpArrow".</para>
        /// </summary>
        [EnumString("leftUpArrow")]
        LeftUpArrow,
        /// <summary>
        /// Left Right Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftRightUpArrow".</para>
        /// </summary>
        [EnumString("leftRightUpArrow")]
        LeftRightUpArrow,
        /// <summary>
        /// Quad-Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "quadArrow".</para>
        /// </summary>
        [EnumString("quadArrow")]
        QuadArrow,
        /// <summary>
        /// Callout Left Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftArrowCallout".</para>
        /// </summary>
        [EnumString("leftArrowCallout")]
        LeftArrowCallout,
        /// <summary>
        /// Callout Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "rightArrowCallout".</para>
        /// </summary>
        [EnumString("rightArrowCallout")]
        RightArrowCallout,
        /// <summary>
        /// Callout Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "upArrowCallout".</para>
        /// </summary>
        [EnumString("upArrowCallout")]
        UpArrowCallout,
        /// <summary>
        /// Callout Down Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "downArrowCallout".</para>
        /// </summary>
        [EnumString("downArrowCallout")]
        DownArrowCallout,
        /// <summary>
        /// Callout Left Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftRightArrowCallout".</para>
        /// </summary>
        [EnumString("leftRightArrowCallout")]
        LeftRightArrowCallout,
        /// <summary>
        /// Callout Up Down Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "upDownArrowCallout".</para>
        /// </summary>
        [EnumString("upDownArrowCallout")]
        UpDownArrowCallout,
        /// <summary>
        /// Callout Quad-Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "quadArrowCallout".</para>
        /// </summary>
        [EnumString("quadArrowCallout")]
        QuadArrowCallout,
        /// <summary>
        /// Bent Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "bentArrow".</para>
        /// </summary>
        [EnumString("bentArrow")]
        BentArrow,
        /// <summary>
        /// U-Turn Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "uturnArrow".</para>
        /// </summary>
        [EnumString("uturnArrow")]
        UTurnArrow,
        /// <summary>
        /// Circular Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "circularArrow".</para>
        /// </summary>
        [EnumString("circularArrow")]
        CircularArrow,
        /// <summary>
        /// Left Circular Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftCircularArrow".</para>
        /// </summary>
        [EnumString("leftCircularArrow")]
        LeftCircularArrow,
        /// <summary>
        /// Left Right Circular Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "leftRightCircularArrow".</para>
        /// </summary>
        [EnumString("leftRightCircularArrow")]
        LeftRightCircularArrow,
        /// <summary>
        /// Curved Right Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedRightArrow".</para>
        /// </summary>
        [EnumString("curvedRightArrow")]
        CurvedRightArrow,
        /// <summary>
        /// Curved Left Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedLeftArrow".</para>
        /// </summary>
        [EnumString("curvedLeftArrow")]
        CurvedLeftArrow,
        /// <summary>
        /// Curved Up Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedUpArrow".</para>
        /// </summary>
        [EnumString("curvedUpArrow")]
        CurvedUpArrow,
        /// <summary>
        /// Curved Down Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedDownArrow".</para>
        /// </summary>
        [EnumString("curvedDownArrow")]
        CurvedDownArrow,
        /// <summary>
        /// Swoosh Arrow Shape.
        /// <para>When the item is serialized out as xml, its value is "swooshArrow".</para>
        /// </summary>
        [EnumString("swooshArrow")]
        SwooshArrow,
        /// <summary>
        /// Cube Shape.
        /// <para>When the item is serialized out as xml, its value is "cube".</para>
        /// </summary>
        [EnumString("cube")]
        Cube,
        /// <summary>
        /// Can Shape.
        /// <para>When the item is serialized out as xml, its value is "can".</para>
        /// </summary>
        [EnumString("can")]
        Can,
        /// <summary>
        /// Lightning Bolt Shape.
        /// <para>When the item is serialized out as xml, its value is "lightningBolt".</para>
        /// </summary>
        [EnumString("lightningBolt")]
        LightningBolt,
        /// <summary>
        /// Heart Shape.
        /// <para>When the item is serialized out as xml, its value is "heart".</para>
        /// </summary>
        [EnumString("heart")]
        Heart,
        /// <summary>
        /// Sun Shape.
        /// <para>When the item is serialized out as xml, its value is "sun".</para>
        /// </summary>
        [EnumString("sun")]
        Sun,
        /// <summary>
        /// Moon Shape.
        /// <para>When the item is serialized out as xml, its value is "moon".</para>
        /// </summary>
        [EnumString("moon")]
        Moon,
        /// <summary>
        /// Smiley Face Shape.
        /// <para>When the item is serialized out as xml, its value is "smileyFace".</para>
        /// </summary>
        [EnumString("smileyFace")]
        SmileyFace,
        /// <summary>
        /// Irregular Seal 1 Shape.
        /// <para>When the item is serialized out as xml, its value is "irregularSeal1".</para>
        /// </summary>
        [EnumString("irregularSeal1")]
        IrregularSeal1,
        /// <summary>
        /// Irregular Seal 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "irregularSeal2".</para>
        /// </summary>
        [EnumString("irregularSeal2")]
        IrregularSeal2,
        /// <summary>
        /// Folded Corner Shape.
        /// <para>When the item is serialized out as xml, its value is "foldedCorner".</para>
        /// </summary>
        [EnumString("foldedCorner")]
        FoldedCorner,
        /// <summary>
        /// Bevel Shape.
        /// <para>When the item is serialized out as xml, its value is "bevel".</para>
        /// </summary>
        [EnumString("bevel")]
        Bevel,
        /// <summary>
        /// Frame Shape.
        /// <para>When the item is serialized out as xml, its value is "frame".</para>
        /// </summary>
        [EnumString("frame")]
        Frame,
        /// <summary>
        /// Half Frame Shape.
        /// <para>When the item is serialized out as xml, its value is "halfFrame".</para>
        /// </summary>
        [EnumString("halfFrame")]
        HalfFrame,
        /// <summary>
        /// Corner Shape.
        /// <para>When the item is serialized out as xml, its value is "corner".</para>
        /// </summary>
        [EnumString("corner")]
        Corner,
        /// <summary>
        /// Diagonal Stripe Shape.
        /// <para>When the item is serialized out as xml, its value is "diagStripe".</para>
        /// </summary>
        [EnumString("diagStripe")]
        DiagonalStripe,
        /// <summary>
        /// Chord Shape.
        /// <para>When the item is serialized out as xml, its value is "chord".</para>
        /// </summary>
        [EnumString("chord")]
        Chord,
        /// <summary>
        /// Curved Arc Shape.
        /// <para>When the item is serialized out as xml, its value is "arc".</para>
        /// </summary>
        [EnumString("arc")]
        Arc,
        /// <summary>
        /// Left Bracket Shape.
        /// <para>When the item is serialized out as xml, its value is "leftBracket".</para>
        /// </summary>
        [EnumString("leftBracket")]
        LeftBracket,
        /// <summary>
        /// Right Bracket Shape.
        /// <para>When the item is serialized out as xml, its value is "rightBracket".</para>
        /// </summary>
        [EnumString("rightBracket")]
        RightBracket,
        /// <summary>
        /// Left Brace Shape.
        /// <para>When the item is serialized out as xml, its value is "leftBrace".</para>
        /// </summary>
        [EnumString("leftBrace")]
        LeftBrace,
        /// <summary>
        /// Right Brace Shape.
        /// <para>When the item is serialized out as xml, its value is "rightBrace".</para>
        /// </summary>
        [EnumString("rightBrace")]
        RightBrace,
        /// <summary>
        /// Bracket Pair Shape.
        /// <para>When the item is serialized out as xml, its value is "bracketPair".</para>
        /// </summary>
        [EnumString("bracketPair")]
        BracketPair,
        /// <summary>
        /// Brace Pair Shape.
        /// <para>When the item is serialized out as xml, its value is "bracePair".</para>
        /// </summary>
        [EnumString("bracePair")]
        BracePair,
        /// <summary>
        /// Straight Connector 1 Shape.
        /// <para>When the item is serialized out as xml, its value is "straightConnector1".</para>
        /// </summary>
        [EnumString("straightConnector1")]
        StraightConnector1,
        /// <summary>
        /// Bent Connector 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "bentConnector2".</para>
        /// </summary>
        [EnumString("bentConnector2")]
        BentConnector2,
        /// <summary>
        /// Bent Connector 3 Shape.
        /// <para>When the item is serialized out as xml, its value is "bentConnector3".</para>
        /// </summary>
        [EnumString("bentConnector3")]
        BentConnector3,
        /// <summary>
        /// Bent Connector 4 Shape.
        /// <para>When the item is serialized out as xml, its value is "bentConnector4".</para>
        /// </summary>
        [EnumString("bentConnector4")]
        BentConnector4,
        /// <summary>
        /// Bent Connector 5 Shape.
        /// <para>When the item is serialized out as xml, its value is "bentConnector5".</para>
        /// </summary>
        [EnumString("bentConnector5")]
        BentConnector5,
        /// <summary>
        /// Curved Connector 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedConnector2".</para>
        /// </summary>
        [EnumString("curvedConnector2")]
        CurvedConnector2,
        /// <summary>
        /// Curved Connector 3 Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedConnector3".</para>
        /// </summary>
        [EnumString("curvedConnector3")]
        CurvedConnector3,
        /// <summary>
        /// Curved Connector 4 Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedConnector4".</para>
        /// </summary>
        [EnumString("curvedConnector4")]
        CurvedConnector4,
        /// <summary>
        /// Curved Connector 5 Shape.
        /// <para>When the item is serialized out as xml, its value is "curvedConnector5".</para>
        /// </summary>
        [EnumString("curvedConnector5")]
        CurvedConnector5,
        /// <summary>
        /// Callout 1 Shape.
        /// <para>When the item is serialized out as xml, its value is "callout1".</para>
        /// </summary>
        [EnumString("callout1")]
        Callout1,
        /// <summary>
        /// Callout 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "callout2".</para>
        /// </summary>
        [EnumString("callout2")]
        Callout2,
        /// <summary>
        /// Callout 3 Shape.
        /// <para>When the item is serialized out as xml, its value is "callout3".</para>
        /// </summary>
        [EnumString("callout3")]
        Callout3,
        /// <summary>
        /// Callout 1 Shape.
        /// <para>When the item is serialized out as xml, its value is "accentCallout1".</para>
        /// </summary>
        [EnumString("accentCallout1")]
        AccentCallout1,
        /// <summary>
        /// Callout 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "accentCallout2".</para>
        /// </summary>
        [EnumString("accentCallout2")]
        AccentCallout2,
        /// <summary>
        /// Callout 3 Shape.
        /// <para>When the item is serialized out as xml, its value is "accentCallout3".</para>
        /// </summary>
        [EnumString("accentCallout3")]
        AccentCallout3,
        /// <summary>
        /// Callout 1 with Border Shape.
        /// <para>When the item is serialized out as xml, its value is "borderCallout1".</para>
        /// </summary>
        [EnumString("borderCallout1")]
        BorderCallout1,
        /// <summary>
        /// Callout 2 with Border Shape.
        /// <para>When the item is serialized out as xml, its value is "borderCallout2".</para>
        /// </summary>
        [EnumString("borderCallout2")]
        BorderCallout2,
        /// <summary>
        /// Callout 3 with Border Shape.
        /// <para>When the item is serialized out as xml, its value is "borderCallout3".</para>
        /// </summary>
        [EnumString("borderCallout3")]
        BorderCallout3,
        /// <summary>
        /// Callout 1 with Border and Accent Shape.
        /// <para>When the item is serialized out as xml, its value is "accentBorderCallout1".</para>
        /// </summary>
        [EnumString("accentBorderCallout1")]
        AccentBorderCallout1,
        /// <summary>
        /// Callout 2 with Border and Accent Shape.
        /// <para>When the item is serialized out as xml, its value is "accentBorderCallout2".</para>
        /// </summary>
        [EnumString("accentBorderCallout2")]
        AccentBorderCallout2,
        /// <summary>
        /// Callout 3 with Border and Accent Shape.
        /// <para>When the item is serialized out as xml, its value is "accentBorderCallout3".</para>
        /// </summary>
        [EnumString("accentBorderCallout3")]
        AccentBorderCallout3,
        /// <summary>
        /// Callout Wedge Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "wedgeRectCallout".</para>
        /// </summary>
        [EnumString("wedgeRectCallout")]
        WedgeRectangleCallout,
        /// <summary>
        /// Callout Wedge Round Rectangle Shape.
        /// <para>When the item is serialized out as xml, its value is "wedgeRoundRectCallout".</para>
        /// </summary>
        [EnumString("wedgeRoundRectCallout")]
        WedgeRoundRectangleCallout,
        /// <summary>
        /// Callout Wedge Ellipse Shape.
        /// <para>When the item is serialized out as xml, its value is "wedgeEllipseCallout".</para>
        /// </summary>
        [EnumString("wedgeEllipseCallout")]
        WedgeEllipseCallout,
        /// <summary>
        /// Callout Cloud Shape.
        /// <para>When the item is serialized out as xml, its value is "cloudCallout".</para>
        /// </summary>
        [EnumString("cloudCallout")]
        CloudCallout,
        /// <summary>
        /// Cloud Shape.
        /// <para>When the item is serialized out as xml, its value is "cloud".</para>
        /// </summary>
        [EnumString("cloud")]
        Cloud,
        /// <summary>
        /// Ribbon Shape.
        /// <para>When the item is serialized out as xml, its value is "ribbon".</para>
        /// </summary>
        [EnumString("ribbon")]
        Ribbon,
        /// <summary>
        /// Ribbon 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "ribbon2".</para>
        /// </summary>
        [EnumString("ribbon2")]
        Ribbon2,
        /// <summary>
        /// Ellipse Ribbon Shape.
        /// <para>When the item is serialized out as xml, its value is "ellipseRibbon".</para>
        /// </summary>
        [EnumString("ellipseRibbon")]
        EllipseRibbon,
        /// <summary>
        /// Ellipse Ribbon 2 Shape.
        /// <para>When the item is serialized out as xml, its value is "ellipseRibbon2".</para>
        /// </summary>
        [EnumString("ellipseRibbon2")]
        EllipseRibbon2,
        /// <summary>
        /// Left Right Ribbon Shape.
        /// <para>When the item is serialized out as xml, its value is "leftRightRibbon".</para>
        /// </summary>
        [EnumString("leftRightRibbon")]
        LeftRightRibbon,
        /// <summary>
        /// Vertical Scroll Shape.
        /// <para>When the item is serialized out as xml, its value is "verticalScroll".</para>
        /// </summary>
        [EnumString("verticalScroll")]
        VerticalScroll,
        /// <summary>
        /// Horizontal Scroll Shape.
        /// <para>When the item is serialized out as xml, its value is "horizontalScroll".</para>
        /// </summary>
        [EnumString("horizontalScroll")]
        HorizontalScroll,
        /// <summary>
        /// Wave Shape.
        /// <para>When the item is serialized out as xml, its value is "wave".</para>
        /// </summary>
        [EnumString("wave")]
        Wave,
        /// <summary>
        /// Double Wave Shape.
        /// <para>When the item is serialized out as xml, its value is "doubleWave".</para>
        /// </summary>
        [EnumString("doubleWave")]
        DoubleWave,
        /// <summary>
        /// Plus Shape.
        /// <para>When the item is serialized out as xml, its value is "plus".</para>
        /// </summary>
        [EnumString("plus")]
        Plus,
        /// <summary>
        /// Process Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartProcess".</para>
        /// </summary>
        [EnumString("flowChartProcess")]
        FlowChartProcess,
        /// <summary>
        /// Decision Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartDecision".</para>
        /// </summary>
        [EnumString("flowChartDecision")]
        FlowChartDecision,
        /// <summary>
        /// Input Output Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartInputOutput".</para>
        /// </summary>
        [EnumString("flowChartInputOutput")]
        FlowChartInputOutput,
        /// <summary>
        /// Predefined Process Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartPredefinedProcess".</para>
        /// </summary>
        [EnumString("flowChartPredefinedProcess")]
        FlowChartPredefinedProcess,
        /// <summary>
        /// Internal Storage Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartInternalStorage".</para>
        /// </summary>
        [EnumString("flowChartInternalStorage")]
        FlowChartInternalStorage,
        /// <summary>
        /// Document Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartDocument".</para>
        /// </summary>
        [EnumString("flowChartDocument")]
        FlowChartDocument,
        /// <summary>
        /// Multi-Document Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartMultidocument".</para>
        /// </summary>
        [EnumString("flowChartMultidocument")]
        FlowChartMultidocument,
        /// <summary>
        /// Terminator Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartTerminator".</para>
        /// </summary>
        [EnumString("flowChartTerminator")]
        FlowChartTerminator,
        /// <summary>
        /// Preparation Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartPreparation".</para>
        /// </summary>
        [EnumString("flowChartPreparation")]
        FlowChartPreparation,
        /// <summary>
        /// Manual Input Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartManualInput".</para>
        /// </summary>
        [EnumString("flowChartManualInput")]
        FlowChartManualInput,
        /// <summary>
        /// Manual Operation Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartManualOperation".</para>
        /// </summary>
        [EnumString("flowChartManualOperation")]
        FlowChartManualOperation,
        /// <summary>
        /// Connector Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartConnector".</para>
        /// </summary>
        [EnumString("flowChartConnector")]
        FlowChartConnector,
        /// <summary>
        /// Punched Card Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartPunchedCard".</para>
        /// </summary>
        [EnumString("flowChartPunchedCard")]
        FlowChartPunchedCard,
        /// <summary>
        /// Punched Tape Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartPunchedTape".</para>
        /// </summary>
        [EnumString("flowChartPunchedTape")]
        FlowChartPunchedTape,
        /// <summary>
        /// Summing Junction Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartSummingJunction".</para>
        /// </summary>
        [EnumString("flowChartSummingJunction")]
        FlowChartSummingJunction,
        /// <summary>
        /// Or Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartOr".</para>
        /// </summary>
        [EnumString("flowChartOr")]
        FlowChartOr,
        /// <summary>
        /// Collate Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartCollate".</para>
        /// </summary>
        [EnumString("flowChartCollate")]
        FlowChartCollate,
        /// <summary>
        /// Sort Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartSort".</para>
        /// </summary>
        [EnumString("flowChartSort")]
        FlowChartSort,
        /// <summary>
        /// Extract Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartExtract".</para>
        /// </summary>
        [EnumString("flowChartExtract")]
        FlowChartExtract,
        /// <summary>
        /// Merge Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartMerge".</para>
        /// </summary>
        [EnumString("flowChartMerge")]
        FlowChartMerge,
        /// <summary>
        /// Offline Storage Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartOfflineStorage".</para>
        /// </summary>
        [EnumString("flowChartOfflineStorage")]
        FlowChartOfflineStorage,
        /// <summary>
        /// Online Storage Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartOnlineStorage".</para>
        /// </summary>
        [EnumString("flowChartOnlineStorage")]
        FlowChartOnlineStorage,
        /// <summary>
        /// Magnetic Tape Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartMagneticTape".</para>
        /// </summary>
        [EnumString("flowChartMagneticTape")]
        FlowChartMagneticTape,
        /// <summary>
        /// Magnetic Disk Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartMagneticDisk".</para>
        /// </summary>
        [EnumString("flowChartMagneticDisk")]
        FlowChartMagneticDisk,
        /// <summary>
        /// Magnetic Drum Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartMagneticDrum".</para>
        /// </summary>
        [EnumString("flowChartMagneticDrum")]
        FlowChartMagneticDrum,
        /// <summary>
        /// Display Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartDisplay".</para>
        /// </summary>
        [EnumString("flowChartDisplay")]
        FlowChartDisplay,
        /// <summary>
        /// Delay Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartDelay".</para>
        /// </summary>
        [EnumString("flowChartDelay")]
        FlowChartDelay,
        /// <summary>
        /// Alternate Process Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartAlternateProcess".</para>
        /// </summary>
        [EnumString("flowChartAlternateProcess")]
        FlowChartAlternateProcess,
        /// <summary>
        /// Off-Page Connector Flow Shape.
        /// <para>When the item is serialized out as xml, its value is "flowChartOffpageConnector".</para>
        /// </summary>
        [EnumString("flowChartOffpageConnector")]
        FlowChartOffpageConnector,
        /// <summary>
        /// Blank Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonBlank".</para>
        /// </summary>
        [EnumString("actionButtonBlank")]
        ActionButtonBlank,
        /// <summary>
        /// Home Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonHome".</para>
        /// </summary>
        [EnumString("actionButtonHome")]
        ActionButtonHome,
        /// <summary>
        /// Help Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonHelp".</para>
        /// </summary>
        [EnumString("actionButtonHelp")]
        ActionButtonHelp,
        /// <summary>
        /// Information Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonInformation".</para>
        /// </summary>
        [EnumString("actionButtonInformation")]
        ActionButtonInformation,
        /// <summary>
        /// Forward or Next Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonForwardNext".</para>
        /// </summary>
        [EnumString("actionButtonForwardNext")]
        ActionButtonForwardNext,
        /// <summary>
        /// Back or Previous Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonBackPrevious".</para>
        /// </summary>
        [EnumString("actionButtonBackPrevious")]
        ActionButtonBackPrevious,
        /// <summary>
        /// End Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonEnd".</para>
        /// </summary>
        [EnumString("actionButtonEnd")]
        ActionButtonEnd,
        /// <summary>
        /// Beginning Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonBeginning".</para>
        /// </summary>
        [EnumString("actionButtonBeginning")]
        ActionButtonBeginning,
        /// <summary>
        /// Return Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonReturn".</para>
        /// </summary>
        [EnumString("actionButtonReturn")]
        ActionButtonReturn,
        /// <summary>
        /// Document Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonDocument".</para>
        /// </summary>
        [EnumString("actionButtonDocument")]
        ActionButtonDocument,
        /// <summary>
        /// Sound Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonSound".</para>
        /// </summary>
        [EnumString("actionButtonSound")]
        ActionButtonSound,
        /// <summary>
        /// Movie Button Shape.
        /// <para>When the item is serialized out as xml, its value is "actionButtonMovie".</para>
        /// </summary>
        [EnumString("actionButtonMovie")]
        ActionButtonMovie,
        /// <summary>
        /// Gear 6 Shape.
        /// <para>When the item is serialized out as xml, its value is "gear6".</para>
        /// </summary>
        [EnumString("gear6")]
        Gear6,
        /// <summary>
        /// Gear 9 Shape.
        /// <para>When the item is serialized out as xml, its value is "gear9".</para>
        /// </summary>
        [EnumString("gear9")]
        Gear9,
        /// <summary>
        /// Funnel Shape.
        /// <para>When the item is serialized out as xml, its value is "funnel".</para>
        /// </summary>
        [EnumString("funnel")]
        Funnel,
        /// <summary>
        /// Plus Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathPlus".</para>
        /// </summary>
        [EnumString("mathPlus")]
        MathPlus,
        /// <summary>
        /// Minus Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathMinus".</para>
        /// </summary>
        [EnumString("mathMinus")]
        MathMinus,
        /// <summary>
        /// Multiply Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathMultiply".</para>
        /// </summary>
        [EnumString("mathMultiply")]
        MathMultiply,
        /// <summary>
        /// Divide Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathDivide".</para>
        /// </summary>
        [EnumString("mathDivide")]
        MathDivide,
        /// <summary>
        /// Equal Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathEqual".</para>
        /// </summary>
        [EnumString("mathEqual")]
        MathEqual,
        /// <summary>
        /// Not Equal Math Shape.
        /// <para>When the item is serialized out as xml, its value is "mathNotEqual".</para>
        /// </summary>
        [EnumString("mathNotEqual")]
        MathNotEqual,
        /// <summary>
        /// Corner Tabs Shape.
        /// <para>When the item is serialized out as xml, its value is "cornerTabs".</para>
        /// </summary>
        [EnumString("cornerTabs")]
        CornerTabs,
        /// <summary>
        /// Square Tabs Shape.
        /// <para>When the item is serialized out as xml, its value is "squareTabs".</para>
        /// </summary>
        [EnumString("squareTabs")]
        SquareTabs,
        /// <summary>
        /// Plaque Tabs Shape.
        /// <para>When the item is serialized out as xml, its value is "plaqueTabs".</para>
        /// </summary>
        [EnumString("plaqueTabs")]
        PlaqueTabs,
        /// <summary>
        /// Chart X Shape.
        /// <para>When the item is serialized out as xml, its value is "chartX".</para>
        /// </summary>
        [EnumString("chartX")]
        ChartX,
        /// <summary>
        /// Chart Star Shape.
        /// <para>When the item is serialized out as xml, its value is "chartStar".</para>
        /// </summary>
        [EnumString("chartStar")]
        ChartStar,
        /// <summary>
        /// Chart Plus Shape.
        /// <para>When the item is serialized out as xml, its value is "chartPlus".</para>
        /// </summary>
        [EnumString("chartPlus")]
        ChartPlus
    }

    /// <summary>
    /// Preset Text Shape Types
    /// </summary>
    public enum TextShapeValues
    {
        /// <summary>
        /// No Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textNoShape".</para>
        /// </summary>
        [EnumString("textNoShape")]
        TextNoShape,
        /// <summary>
        /// Plain Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textPlain".</para>
        /// </summary>
        [EnumString("textPlain")]
        TextPlain,
        /// <summary>
        /// Stop Sign Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textStop".</para>
        /// </summary>
        [EnumString("textStop")]
        TextStop,
        /// <summary>
        /// Triangle Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textTriangle".</para>
        /// </summary>
        [EnumString("textTriangle")]
        TextTriangle,
        /// <summary>
        /// Inverted Triangle Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textTriangleInverted".</para>
        /// </summary>
        [EnumString("textTriangleInverted")]
        TextTriangleInverted,
        /// <summary>
        /// Chevron Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textChevron".</para>
        /// </summary>
        [EnumString("textChevron")]
        TextChevron,
        /// <summary>
        /// Inverted Chevron Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textChevronInverted".</para>
        /// </summary>
        [EnumString("textChevronInverted")]
        TextChevronInverted,
        /// <summary>
        /// Inside Ring Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textRingInside".</para>
        /// </summary>
        [EnumString("textRingInside")]
        TextRingInside,
        /// <summary>
        /// Outside Ring Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textRingOutside".</para>
        /// </summary>
        [EnumString("textRingOutside")]
        TextRingOutside,
        /// <summary>
        /// Upward Arch Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textArchUp".</para>
        /// </summary>
        [EnumString("textArchUp")]
        TextArchUp,
        /// <summary>
        /// Downward Arch Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textArchDown".</para>
        /// </summary>
        [EnumString("textArchDown")]
        TextArchDown,
        /// <summary>
        /// Circle Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCircle".</para>
        /// </summary>
        [EnumString("textCircle")]
        TextCircle,
        /// <summary>
        /// Button Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textButton".</para>
        /// </summary>
        [EnumString("textButton")]
        TextButton,
        /// <summary>
        /// Upward Pour Arch Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textArchUpPour".</para>
        /// </summary>
        [EnumString("textArchUpPour")]
        TextArchUpPour,
        /// <summary>
        /// Downward Pour Arch Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textArchDownPour".</para>
        /// </summary>
        [EnumString("textArchDownPour")]
        TextArchDownPour,
        /// <summary>
        /// Circle Pour Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCirclePour".</para>
        /// </summary>
        [EnumString("textCirclePour")]
        TextCirclePour,
        /// <summary>
        /// Button Pour Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textButtonPour".</para>
        /// </summary>
        [EnumString("textButtonPour")]
        TextButtonPour,
        /// <summary>
        /// Upward Curve Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCurveUp".</para>
        /// </summary>
        [EnumString("textCurveUp")]
        TextCurveUp,
        /// <summary>
        /// Downward Curve Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCurveDown".</para>
        /// </summary>
        [EnumString("textCurveDown")]
        TextCurveDown,
        /// <summary>
        /// Upward Can Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCanUp".</para>
        /// </summary>
        [EnumString("textCanUp")]
        TextCanUp,
        /// <summary>
        /// Downward Can Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCanDown".</para>
        /// </summary>
        [EnumString("textCanDown")]
        TextCanDown,
        /// <summary>
        /// Wave 1 Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textWave1".</para>
        /// </summary>
        [EnumString("textWave1")]
        TextWave1,
        /// <summary>
        /// Wave 2 Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textWave2".</para>
        /// </summary>
        [EnumString("textWave2")]
        TextWave2,
        /// <summary>
        /// Double Wave 1 Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDoubleWave1".</para>
        /// </summary>
        [EnumString("textDoubleWave1")]
        TextDoubleWave1,
        /// <summary>
        /// Wave 4 Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textWave4".</para>
        /// </summary>
        [EnumString("textWave4")]
        TextWave4,
        /// <summary>
        /// Inflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textInflate".</para>
        /// </summary>
        [EnumString("textInflate")]
        TextInflate,
        /// <summary>
        /// Deflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDeflate".</para>
        /// </summary>
        [EnumString("textDeflate")]
        TextDeflate,
        /// <summary>
        /// Bottom Inflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textInflateBottom".</para>
        /// </summary>
        [EnumString("textInflateBottom")]
        TextInflateBottom,
        /// <summary>
        /// Bottom Deflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDeflateBottom".</para>
        /// </summary>
        [EnumString("textDeflateBottom")]
        TextDeflateBottom,
        /// <summary>
        /// Top Inflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textInflateTop".</para>
        /// </summary>
        [EnumString("textInflateTop")]
        TextInflateTop,
        /// <summary>
        /// Top Deflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDeflateTop".</para>
        /// </summary>
        [EnumString("textDeflateTop")]
        TextDeflateTop,
        /// <summary>
        /// Deflate-Inflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDeflateInflate".</para>
        /// </summary>
        [EnumString("textDeflateInflate")]
        TextDeflateInflate,
        /// <summary>
        /// Deflate-Inflate-Deflate Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textDeflateInflateDeflate".</para>
        /// </summary>
        [EnumString("textDeflateInflateDeflate")]
        TextDeflateInflateDeflate,
        /// <summary>
        /// Right Fade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textFadeRight".</para>
        /// </summary>
        [EnumString("textFadeRight")]
        TextFadeRight,
        /// <summary>
        /// Left Fade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textFadeLeft".</para>
        /// </summary>
        [EnumString("textFadeLeft")]
        TextFadeLeft,
        /// <summary>
        /// Upward Fade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textFadeUp".</para>
        /// </summary>
        [EnumString("textFadeUp")]
        TextFadeUp,
        /// <summary>
        /// Downward Fade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textFadeDown".</para>
        /// </summary>
        [EnumString("textFadeDown")]
        TextFadeDown,
        /// <summary>
        /// Upward Slant Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textSlantUp".</para>
        /// </summary>
        [EnumString("textSlantUp")]
        TextSlantUp,
        /// <summary>
        /// Downward Slant Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textSlantDown".</para>
        /// </summary>
        [EnumString("textSlantDown")]
        TextSlantDown,
        /// <summary>
        /// Upward Cascade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCascadeUp".</para>
        /// </summary>
        [EnumString("textCascadeUp")]
        TextCascadeUp,
        /// <summary>
        /// Downward Cascade Text Shape.
        /// <para>When the item is serialized out as xml, its value is "textCascadeDown".</para>
        /// </summary>
        [EnumString("textCascadeDown")]
        TextCascadeDown
    }

    /// <summary>
    /// Path Fill Mode
    /// </summary>
    public enum PathFillModeValues
    {
        /// <summary>
        /// No Path Fill.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Normal Path Fill.
        /// <para>When the item is serialized out as xml, its value is "norm".</para>
        /// </summary>
        [EnumString("norm")]
        Norm,
        /// <summary>
        /// Lighten Path Fill.
        /// <para>When the item is serialized out as xml, its value is "lighten".</para>
        /// </summary>
        [EnumString("lighten")]
        Lighten,
        /// <summary>
        /// Lighten Path Fill Less.
        /// <para>When the item is serialized out as xml, its value is "lightenLess".</para>
        /// </summary>
        [EnumString("lightenLess")]
        LightenLess,
        /// <summary>
        /// Darken Path Fill.
        /// <para>When the item is serialized out as xml, its value is "darken".</para>
        /// </summary>
        [EnumString("darken")]
        Darken,
        /// <summary>
        /// Darken Path Fill Less.
        /// <para>When the item is serialized out as xml, its value is "darkenLess".</para>
        /// </summary>
        [EnumString("darkenLess")]
        DarkenLess
    }

    /// <summary>
    /// Line End Type
    /// </summary>
    public enum LineEndValues
    {
        /// <summary>
        /// None.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Triangle Arrow Head.
        /// <para>When the item is serialized out as xml, its value is "triangle".</para>
        /// </summary>
        [EnumString("triangle")]
        Triangle,
        /// <summary>
        /// Stealth Arrow.
        /// <para>When the item is serialized out as xml, its value is "stealth".</para>
        /// </summary>
        [EnumString("stealth")]
        Stealth,
        /// <summary>
        /// Diamond.
        /// <para>When the item is serialized out as xml, its value is "diamond".</para>
        /// </summary>
        [EnumString("diamond")]
        Diamond,
        /// <summary>
        /// Oval.
        /// <para>When the item is serialized out as xml, its value is "oval".</para>
        /// </summary>
        [EnumString("oval")]
        Oval,
        /// <summary>
        /// Arrow Head.
        /// <para>When the item is serialized out as xml, its value is "arrow".</para>
        /// </summary>
        [EnumString("arrow")]
        Arrow
    }

    /// <summary>
    /// Line End Width
    /// </summary>
    public enum LineEndWidthValues
    {
        /// <summary>
        /// Small.
        /// <para>When the item is serialized out as xml, its value is "sm".</para>
        /// </summary>
        [EnumString("sm")]
        Small,
        /// <summary>
        /// Medium.
        /// <para>When the item is serialized out as xml, its value is "med".</para>
        /// </summary>
        [EnumString("med")]
        Medium,
        /// <summary>
        /// Large.
        /// <para>When the item is serialized out as xml, its value is "lg".</para>
        /// </summary>
        [EnumString("lg")]
        Large
    }

    /// <summary>
    /// Line End Length
    /// </summary>
    public enum LineEndLengthValues
    {
        /// <summary>
        /// Small.
        /// <para>When the item is serialized out as xml, its value is "sm".</para>
        /// </summary>
        [EnumString("sm")]
        Small,
        /// <summary>
        /// Medium.
        /// <para>When the item is serialized out as xml, its value is "med".</para>
        /// </summary>
        [EnumString("med")]
        Medium,
        /// <summary>
        /// Large.
        /// <para>When the item is serialized out as xml, its value is "lg".</para>
        /// </summary>
        [EnumString("lg")]
        Large
    }

    /// <summary>
    /// Preset Line Dash Value
    /// </summary>
    public enum PresetLineDashValues
    {
        /// <summary>
        /// Solid.
        /// <para>When the item is serialized out as xml, its value is "solid".</para>
        /// </summary>
        [EnumString("solid")]
        Solid,
        /// <summary>
        /// Dot.
        /// <para>When the item is serialized out as xml, its value is "dot".</para>
        /// </summary>
        [EnumString("dot")]
        Dot,
        /// <summary>
        /// Dash.
        /// <para>When the item is serialized out as xml, its value is "dash".</para>
        /// </summary>
        [EnumString("dash")]
        Dash,
        /// <summary>
        /// Large Dash.
        /// <para>When the item is serialized out as xml, its value is "lgDash".</para>
        /// </summary>
        [EnumString("lgDash")]
        LargeDash,
        /// <summary>
        /// Dash Dot.
        /// <para>When the item is serialized out as xml, its value is "dashDot".</para>
        /// </summary>
        [EnumString("dashDot")]
        DashDot,
        /// <summary>
        /// Large Dash Dot.
        /// <para>When the item is serialized out as xml, its value is "lgDashDot".</para>
        /// </summary>
        [EnumString("lgDashDot")]
        LargeDashDot,
        /// <summary>
        /// Large Dash Dot Dot.
        /// <para>When the item is serialized out as xml, its value is "lgDashDotDot".</para>
        /// </summary>
        [EnumString("lgDashDotDot")]
        LargeDashDotDot,
        /// <summary>
        /// System Dash.
        /// <para>When the item is serialized out as xml, its value is "sysDash".</para>
        /// </summary>
        [EnumString("sysDash")]
        SystemDash,
        /// <summary>
        /// System Dot.
        /// <para>When the item is serialized out as xml, its value is "sysDot".</para>
        /// </summary>
        [EnumString("sysDot")]
        SystemDot,
        /// <summary>
        /// System Dash Dot.
        /// <para>When the item is serialized out as xml, its value is "sysDashDot".</para>
        /// </summary>
        [EnumString("sysDashDot")]
        SystemDashDot,
        /// <summary>
        /// System Dash Dot Dot.
        /// <para>When the item is serialized out as xml, its value is "sysDashDotDot".</para>
        /// </summary>
        [EnumString("sysDashDotDot")]
        SystemDashDotDot
    }

    /// <summary>
    /// End Line Cap
    /// </summary>
    public enum LineCapValues
    {
        /// <summary>
        /// Round Line Cap.
        /// <para>When the item is serialized out as xml, its value is "rnd".</para>
        /// </summary>
        [EnumString("rnd")]
        Round,
        /// <summary>
        /// Square Line Cap.
        /// <para>When the item is serialized out as xml, its value is "sq".</para>
        /// </summary>
        [EnumString("sq")]
        Square,
        /// <summary>
        /// Flat Line Cap.
        /// <para>When the item is serialized out as xml, its value is "flat".</para>
        /// </summary>
        [EnumString("flat")]
        Flat
    }

    /// <summary>
    /// Alignment Type
    /// </summary>
    public enum PenAlignmentValues
    {
        /// <summary>
        /// Center Alignment.
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Inset Alignment.
        /// <para>When the item is serialized out as xml, its value is "in".</para>
        /// </summary>
        [EnumString("in")]
        Insert
    }

    /// <summary>
    /// Compound Line Type
    /// </summary>
    public enum CompoundLineValues
    {
        /// <summary>
        /// Single Line.
        /// <para>When the item is serialized out as xml, its value is "sng".</para>
        /// </summary>
        [EnumString("sng")]
        Single,
        /// <summary>
        /// Double Lines.
        /// <para>When the item is serialized out as xml, its value is "dbl".</para>
        /// </summary>
        [EnumString("dbl")]
        Double,
        /// <summary>
        /// Thick Thin Double Lines.
        /// <para>When the item is serialized out as xml, its value is "thickThin".</para>
        /// </summary>
        [EnumString("thickThin")]
        ThickThin,
        /// <summary>
        /// Thin Thick Double Lines.
        /// <para>When the item is serialized out as xml, its value is "thinThick".</para>
        /// </summary>
        [EnumString("thinThick")]
        ThinThick,
        /// <summary>
        /// Thin Thick Thin Triple Lines.
        /// <para>When the item is serialized out as xml, its value is "tri".</para>
        /// </summary>
        [EnumString("tri")]
        Triple
    }

    /// <summary>
    /// On/Off Style Type
    /// </summary>
    public enum BooleanStyleValues
    {
        /// <summary>
        /// On.
        /// <para>When the item is serialized out as xml, its value is "on".</para>
        /// </summary>
        [EnumString("on")]
        On,
        /// <summary>
        /// Off.
        /// <para>When the item is serialized out as xml, its value is "off".</para>
        /// </summary>
        [EnumString("off")]
        Off,
        /// <summary>
        /// Default.
        /// <para>When the item is serialized out as xml, its value is "def".</para>
        /// </summary>
        [EnumString("def")]
        Default
    }

    /// <summary>
    /// Text Vertical Overflow
    /// </summary>
    public enum TextVerticalOverflowValues
    {
        /// <summary>
        /// Text Overflow Enum ( Overflow ).
        /// <para>When the item is serialized out as xml, its value is "overflow".</para>
        /// </summary>
        [EnumString("overflow")]
        Overflow,
        /// <summary>
        /// Text Overflow Enum ( Ellipsis ).
        /// <para>When the item is serialized out as xml, its value is "ellipsis".</para>
        /// </summary>
        [EnumString("ellipsis")]
        Ellipsis,
        /// <summary>
        /// Text Overflow Enum ( Clip ).
        /// <para>When the item is serialized out as xml, its value is "clip".</para>
        /// </summary>
        [EnumString("clip")]
        Clip
    }

    /// <summary>
    /// Text Horizontal Overflow Types
    /// </summary>
    public enum TextHorizontalOverflowValues
    {
        /// <summary>
        /// Text Horizontal Overflow Enum ( Overflow ).
        /// <para>When the item is serialized out as xml, its value is "overflow".</para>
        /// </summary>
        [EnumString("overflow")]
        Overflow,
        /// <summary>
        /// Text Horizontal Overflow Enum ( Clip ).
        /// <para>When the item is serialized out as xml, its value is "clip".</para>
        /// </summary>
        [EnumString("clip")]
        Clip
    }

    /// <summary>
    /// Vertical Text Types
    /// </summary>
    public enum TextVerticalValues
    {
        /// <summary>
        /// Vertical Text Type Enum ( Horizontal ).
        /// <para>When the item is serialized out as xml, its value is "horz".</para>
        /// </summary>
        [EnumString("horz")]
        Horizontal,
        /// <summary>
        /// Vertical Text Type Enum ( Vertical ).
        /// <para>When the item is serialized out as xml, its value is "vert".</para>
        /// </summary>
        [EnumString("vert")]
        Vertical,
        /// <summary>
        /// Vertical Text Type Enum ( Vertical 270 ).
        /// <para>When the item is serialized out as xml, its value is "vert270".</para>
        /// </summary>
        [EnumString("vert270")]
        Vertical270,
        /// <summary>
        /// Vertical Text Type Enum ( WordArt Vertical ).
        /// <para>When the item is serialized out as xml, its value is "wordArtVert".</para>
        /// </summary>
        [EnumString("wordArtVert")]
        WordArtVertical,
        /// <summary>
        /// Vertical Text Type Enum ( East Asian Vertical ).
        /// <para>When the item is serialized out as xml, its value is "eaVert".</para>
        /// </summary>
        [EnumString("eaVert")]
        EastAsianVetical,
        /// <summary>
        /// Vertical Text Type Enum ( Mongolian Vertical ).
        /// <para>When the item is serialized out as xml, its value is "mongolianVert".</para>
        /// </summary>
        [EnumString("mongolianVert")]
        MongolianVertical,
        /// <summary>
        /// Vertical WordArt Right to Left.
        /// <para>When the item is serialized out as xml, its value is "wordArtVertRtl".</para>
        /// </summary>
        [EnumString("wordArtVertRtl")]
        WordArtLeftToRight
    }

    /// <summary>
    /// Text Wrapping Types
    /// </summary>
    public enum TextWrappingValues
    {
        /// <summary>
        /// Text Wrapping Type Enum ( None ).
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Text Wrapping Type Enum ( Square ).
        /// <para>When the item is serialized out as xml, its value is "square".</para>
        /// </summary>
        [EnumString("square")]
        Square
    }

    /// <summary>
    /// Text Anchoring Types
    /// </summary>
    public enum TextAnchoringTypeValues
    {
        /// <summary>
        /// Text Anchoring Type Enum ( Top ).
        /// <para>When the item is serialized out as xml, its value is "t".</para>
        /// </summary>
        [EnumString("t")]
        Top,
        /// <summary>
        /// Text Anchor Enum ( Center ).
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Text Anchor Enum ( Bottom ).
        /// <para>When the item is serialized out as xml, its value is "b".</para>
        /// </summary>
        [EnumString("b")]
        Bottom
    }

    /// <summary>
    /// Text Auto-number Schemes
    /// </summary>
    public enum TextAutoNumberSchemeValues
    {
        /// <summary>
        /// Autonumber Enum ( alphaLcParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "alphaLcParenBoth".</para>
        /// </summary>
        [EnumString("alphaLcParenBoth")]
        AlphaLowerCharacterParenBoth,
        /// <summary>
        /// Autonumbering Enum ( alphaUcParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "alphaUcParenBoth".</para>
        /// </summary>
        [EnumString("alphaUcParenBoth")]
        AlphaUpperCharacterParenBoth,
        /// <summary>
        /// Autonumbering Enum ( alphaLcParenR ).
        /// <para>When the item is serialized out as xml, its value is "alphaLcParenR".</para>
        /// </summary>
        [EnumString("alphaLcParenR")]
        AlphaLowerCharacterParenR,
        /// <summary>
        /// Autonumbering Enum ( alphaUcParenR ).
        /// <para>When the item is serialized out as xml, its value is "alphaUcParenR".</para>
        /// </summary>
        [EnumString("alphaUcParenR")]
        AlphaUpperCharacterParenR,
        /// <summary>
        /// Autonumbering Enum ( alphaLcPeriod ).
        /// <para>When the item is serialized out as xml, its value is "alphaLcPeriod".</para>
        /// </summary>
        [EnumString("alphaLcPeriod")]
        AlphaLowerCharacterPeriod,
        /// <summary>
        /// Autonumbering Enum ( alphaUcPeriod ).
        /// <para>When the item is serialized out as xml, its value is "alphaUcPeriod".</para>
        /// </summary>
        [EnumString("alphaUcPeriod")]
        AlphaUpperCharacterPeriod,
        /// <summary>
        /// Autonumbering Enum ( arabicParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "arabicParenBoth".</para>
        /// </summary>
        [EnumString("arabicParenBoth")]
        ArabicParenBoth,
        /// <summary>
        /// Autonumbering Enum ( arabicParenR ).
        /// <para>When the item is serialized out as xml, its value is "arabicParenR".</para>
        /// </summary>
        [EnumString("arabicParenR")]
        ArabicParenR,
        /// <summary>
        /// Autonumbering Enum ( arabicPeriod ).
        /// <para>When the item is serialized out as xml, its value is "arabicPeriod".</para>
        /// </summary>
        [EnumString("arabicPeriod")]
        ArabicPeriod,
        /// <summary>
        /// Autonumbering Enum ( arabicPlain ).
        /// <para>When the item is serialized out as xml, its value is "arabicPlain".</para>
        /// </summary>
        [EnumString("arabicPlain")]
        ArabicPlain,
        /// <summary>
        /// Autonumbering Enum ( romanLcParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "romanLcParenBoth".</para>
        /// </summary>
        [EnumString("romanLcParenBoth")]
        RomanLowerCharacterParenBoth,
        /// <summary>
        /// Autonumbering Enum ( romanUcParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "romanUcParenBoth".</para>
        /// </summary>
        [EnumString("romanUcParenBoth")]
        RomanUpperCharacterParenBoth,
        /// <summary>
        /// Autonumbering Enum ( romanLcParenR ).
        /// <para>When the item is serialized out as xml, its value is "romanLcParenR".</para>
        /// </summary>
        [EnumString("romanLcParenR")]
        RomanLowerCharacterParenR,
        /// <summary>
        /// Autonumbering Enum ( romanUcParenR ).
        /// <para>When the item is serialized out as xml, its value is "romanUcParenR".</para>
        /// </summary>
        [EnumString("romanUcParenR")]
        RomanUpperCharacterParenR,
        /// <summary>
        /// Autonumbering Enum ( romanLcPeriod ).
        /// <para>When the item is serialized out as xml, its value is "romanLcPeriod".</para>
        /// </summary>
        [EnumString("romanLcPeriod")]
        RomanLowerCharacterPeriod,
        /// <summary>
        /// Autonumbering Enum ( romanUcPeriod ).
        /// <para>When the item is serialized out as xml, its value is "romanUcPeriod".</para>
        /// </summary>
        [EnumString("romanUcPeriod")]
        RomanUpperCharacterPeriod,
        /// <summary>
        /// Autonumbering Enum ( circleNumDbPlain ).
        /// <para>When the item is serialized out as xml, its value is "circleNumDbPlain".</para>
        /// </summary>
        [EnumString("circleNumDbPlain")]
        CircleNumberDoubleBytePlain,
        /// <summary>
        /// Autonumbering Enum ( circleNumWdBlackPlain ).
        /// <para>When the item is serialized out as xml, its value is "circleNumWdBlackPlain".</para>
        /// </summary>
        [EnumString("circleNumWdBlackPlain")]
        CircleNumberWingdingsBlackPlain,
        /// <summary>
        /// Autonumbering Enum ( circleNumWdWhitePlain ).
        /// <para>When the item is serialized out as xml, its value is "circleNumWdWhitePlain".</para>
        /// </summary>
        [EnumString("circleNumWdWhitePlain")]
        CircleNumberWingdingsWhitePlain,
        /// <summary>
        /// Autonumbering Enum ( arabicDbPeriod ).
        /// <para>When the item is serialized out as xml, its value is "arabicDbPeriod".</para>
        /// </summary>
        [EnumString("arabicDbPeriod")]
        ArabicDoubleBytePeriod,
        /// <summary>
        /// Autonumbering Enum ( arabicDbPlain ).
        /// <para>When the item is serialized out as xml, its value is "arabicDbPlain".</para>
        /// </summary>
        [EnumString("arabicDbPlain")]
        ArabicDoubleBytePlain,
        /// <summary>
        /// Autonumbering Enum ( ea1ChsPeriod ).
        /// <para>When the item is serialized out as xml, its value is "ea1ChsPeriod".</para>
        /// </summary>
        [EnumString("ea1ChsPeriod")]
        EastAsianSimplifiedChinesePeriod,
        /// <summary>
        /// Autonumbering Enum ( ea1ChsPlain ).
        /// <para>When the item is serialized out as xml, its value is "ea1ChsPlain".</para>
        /// </summary>
        [EnumString("ea1ChsPlain")]
        EastAsianSimplifiedChinesePlain,
        /// <summary>
        /// Autonumbering Enum ( ea1ChtPeriod ).
        /// <para>When the item is serialized out as xml, its value is "ea1ChtPeriod".</para>
        /// </summary>
        [EnumString("ea1ChtPeriod")]
        EastAsianTraditionalChinesePeriod,
        /// <summary>
        /// Autonumbering Enum ( ea1ChtPlain ).
        /// <para>When the item is serialized out as xml, its value is "ea1ChtPlain".</para>
        /// </summary>
        [EnumString("ea1ChtPlain")]
        EastAsianTraditionalChinesePlain,
        /// <summary>
        /// Autonumbering Enum ( ea1JpnChsDbPeriod ).
        /// <para>When the item is serialized out as xml, its value is "ea1JpnChsDbPeriod".</para>
        /// </summary>
        [EnumString("ea1JpnChsDbPeriod")]
        EastAsianJapaneseDoubleBytePeriod,
        /// <summary>
        /// Autonumbering Enum ( ea1JpnKorPlain ).
        /// <para>When the item is serialized out as xml, its value is "ea1JpnKorPlain".</para>
        /// </summary>
        [EnumString("ea1JpnKorPlain")]
        EastAsianJapaneseKoreanPlain,
        /// <summary>
        /// Autonumbering Enum ( ea1JpnKorPeriod ).
        /// <para>When the item is serialized out as xml, its value is "ea1JpnKorPeriod".</para>
        /// </summary>
        [EnumString("ea1JpnKorPeriod")]
        EastAsianJapaneseKoreanPeriod,
        /// <summary>
        /// Autonumbering Enum ( arabic1Minus ).
        /// <para>When the item is serialized out as xml, its value is "arabic1Minus".</para>
        /// </summary>
        [EnumString("arabic1Minus")]
        Arabic1Minus,
        /// <summary>
        /// Autonumbering Enum ( arabic2Minus ).
        /// <para>When the item is serialized out as xml, its value is "arabic2Minus".</para>
        /// </summary>
        [EnumString("arabic2Minus")]
        Arabic2Minus,
        /// <summary>
        /// Autonumbering Enum ( hebrew2Minus ).
        /// <para>When the item is serialized out as xml, its value is "hebrew2Minus".</para>
        /// </summary>
        [EnumString("hebrew2Minus")]
        Hebrew2Minus,
        /// <summary>
        /// Autonumbering Enum ( thaiAlphaPeriod ).
        /// <para>When the item is serialized out as xml, its value is "thaiAlphaPeriod".</para>
        /// </summary>
        [EnumString("thaiAlphaPeriod")]
        ThaiAlphaPeriod,
        /// <summary>
        /// Autonumbering Enum ( thaiAlphaParenR ).
        /// <para>When the item is serialized out as xml, its value is "thaiAlphaParenR".</para>
        /// </summary>
        [EnumString("thaiAlphaParenR")]
        ThaiAlphaParenthesisRight,
        /// <summary>
        /// Autonumbering Enum ( thaiAlphaParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "thaiAlphaParenBoth".</para>
        /// </summary>
        [EnumString("thaiAlphaParenBoth")]
        ThaiAlphaParenthesisBoth,
        /// <summary>
        /// Autonumbering Enum ( thaiNumPeriod ).
        /// <para>When the item is serialized out as xml, its value is "thaiNumPeriod".</para>
        /// </summary>
        [EnumString("thaiNumPeriod")]
        ThaiNumberPeriod,
        /// <summary>
        /// Autonumbering Enum ( thaiNumParenR ).
        /// <para>When the item is serialized out as xml, its value is "thaiNumParenR".</para>
        /// </summary>
        [EnumString("thaiNumParenR")]
        ThaiNumberParenthesisRight,
        /// <summary>
        /// Autonumbering Enum ( thaiNumParenBoth ).
        /// <para>When the item is serialized out as xml, its value is "thaiNumParenBoth".</para>
        /// </summary>
        [EnumString("thaiNumParenBoth")]
        ThaiNumberParenthesisBoth,
        /// <summary>
        /// Autonumbering Enum ( hindiAlphaPeriod ).
        /// <para>When the item is serialized out as xml, its value is "hindiAlphaPeriod".</para>
        /// </summary>
        [EnumString("hindiAlphaPeriod")]
        HindiAlphaPeriod,
        /// <summary>
        /// Autonumbering Enum ( hindiNumPeriod ).
        /// <para>When the item is serialized out as xml, its value is "hindiNumPeriod".</para>
        /// </summary>
        [EnumString("hindiNumPeriod")]
        HindiNumPeriod,
        /// <summary>
        /// Autonumbering Enum ( hindiNumParenR ).
        /// <para>When the item is serialized out as xml, its value is "hindiNumParenR".</para>
        /// </summary>
        [EnumString("hindiNumParenR")]
        HindiNumberParenthesisRight,
        /// <summary>
        /// Autonumbering Enum ( hindiAlpha1Period ).
        /// <para>When the item is serialized out as xml, its value is "hindiAlpha1Period".</para>
        /// </summary>
        [EnumString("hindiAlpha1Period")]
        HindiAlpha1Period
    }

    /// <summary>
    /// Text Underline Types
    /// </summary>
    public enum TextUnderlineValues
    {
        /// <summary>
        /// Text Underline Enum ( None ).
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Text Underline Enum ( Words ).
        /// <para>When the item is serialized out as xml, its value is "words".</para>
        /// </summary>
        [EnumString("words")]
        Words,
        /// <summary>
        /// Text Underline Enum ( Single ).
        /// <para>When the item is serialized out as xml, its value is "sng".</para>
        /// </summary>
        [EnumString("sng")]
        Single,
        /// <summary>
        /// Text Underline Enum ( Double ).
        /// <para>When the item is serialized out as xml, its value is "dbl".</para>
        /// </summary>
        [EnumString("dbl")]
        Double,
        /// <summary>
        /// Text Underline Enum ( Heavy ).
        /// <para>When the item is serialized out as xml, its value is "heavy".</para>
        /// </summary>
        [EnumString("heavy")]
        Heavy,
        /// <summary>
        /// Text Underline Enum ( Dotted ).
        /// <para>When the item is serialized out as xml, its value is "dotted".</para>
        /// </summary>
        [EnumString("dotted")]
        Dotted,
        /// <summary>
        /// Text Underline Enum ( Heavy Dotted  ).
        /// <para>When the item is serialized out as xml, its value is "dottedHeavy".</para>
        /// </summary>
        [EnumString("dottedHeavy")]
        HeavyDotted,
        /// <summary>
        /// Text Underline Enum ( Dashed ).
        /// <para>When the item is serialized out as xml, its value is "dash".</para>
        /// </summary>
        [EnumString("dash")]
        Dash,
        /// <summary>
        /// Text Underline Enum ( Heavy Dashed ).
        /// <para>When the item is serialized out as xml, its value is "dashHeavy".</para>
        /// </summary>
        [EnumString("dashHeavy")]
        DashHeavy,
        /// <summary>
        /// Text Underline Enum ( Long Dashed ).
        /// <para>When the item is serialized out as xml, its value is "dashLong".</para>
        /// </summary>
        [EnumString("dashLong")]
        DashLong,
        /// <summary>
        /// Text Underline Enum ( Heavy Long Dashed ).
        /// <para>When the item is serialized out as xml, its value is "dashLongHeavy".</para>
        /// </summary>
        [EnumString("dashLongHeavy")]
        DashLongHeavy,
        /// <summary>
        /// Text Underline Enum ( Dot Dash ).
        /// <para>When the item is serialized out as xml, its value is "dotDash".</para>
        /// </summary>
        [EnumString("dotDash")]
        DotDash,
        /// <summary>
        /// Text Underline Enum ( Heavy Dot Dash ).
        /// <para>When the item is serialized out as xml, its value is "dotDashHeavy".</para>
        /// </summary>
        [EnumString("dotDashHeavy")]
        DotDashHeavy,
        /// <summary>
        /// Text Underline Enum ( Dot Dot Dash ).
        /// <para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        /// </summary>
        [EnumString("dotDotDash")]
        DotDotDash,
        /// <summary>
        /// Text Underline Enum ( Heavy Dot Dot Dash ).
        /// <para>When the item is serialized out as xml, its value is "dotDotDashHeavy".</para>
        /// </summary>
        [EnumString("dotDotDashHeavy")]
        DotDotDashHeavy,
        /// <summary>
        /// Text Underline Enum ( Wavy ).
        /// <para>When the item is serialized out as xml, its value is "wavy".</para>
        /// </summary>
        [EnumString("wavy")]
        Wavy,
        /// <summary>
        /// Text Underline Enum ( Heavy Wavy ).
        /// <para>When the item is serialized out as xml, its value is "wavyHeavy".</para>
        /// </summary>
        [EnumString("wavyHeavy")]
        WavyHeavy,
        /// <summary>
        /// Text Underline Enum ( Double Wavy ).
        /// <para>When the item is serialized out as xml, its value is "wavyDbl".</para>
        /// </summary>
        [EnumString("wavyDbl")]
        WavyDouble
    }

    /// <summary>
    /// Text Strike Type
    /// </summary>
    public enum TextStrikeValues
    {
        /// <summary>
        /// Text Strike Enum ( No Strike ).
        /// <para>When the item is serialized out as xml, its value is "noStrike".</para>
        /// </summary>
        [EnumString("noStrike")]
        NoStrike,
        /// <summary>
        /// Text Strike Enum ( Single Strike ).
        /// <para>When the item is serialized out as xml, its value is "sngStrike".</para>
        /// </summary>
        [EnumString("sngStrike")]
        SingleStrike,
        /// <summary>
        /// Text Strike Enum ( Double Strike ).
        /// <para>When the item is serialized out as xml, its value is "dblStrike".</para>
        /// </summary>
        [EnumString("dblStrike")]
        DoubleStrike
    }

    /// <summary>
    /// Text Cap Types
    /// </summary>
    public enum TextCapsValues
    {
        /// <summary>
        /// Text Caps Enum ( None ).
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        [EnumString("none")]
        None,
        /// <summary>
        /// Text Caps Enum ( Small ).
        /// <para>When the item is serialized out as xml, its value is "small".</para>
        /// </summary>
        [EnumString("small")]
        Small,
        /// <summary>
        /// Text Caps Enum ( All ).
        /// <para>When the item is serialized out as xml, its value is "all".</para>
        /// </summary>
        [EnumString("all")]
        All
    }

    /// <summary>
    /// Text Tab Alignment Types
    /// </summary>
    public enum TextTabAlignmentValues
    {
        /// <summary>
        /// Text Tab Alignment Enum ( Left).
        /// <para>When the item is serialized out as xml, its value is "l".</para>
        /// </summary>
        [EnumString("l")]
        Left,
        /// <summary>
        /// Text Tab Alignment Enum ( Center ).
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Text Tab Alignment Enum ( Right ).
        /// <para>When the item is serialized out as xml, its value is "r".</para>
        /// </summary>
        [EnumString("r")]
        Right,
        /// <summary>
        /// Text Tab Alignment Enum ( Decimal ).
        /// <para>When the item is serialized out as xml, its value is "dec".</para>
        /// </summary>
        [EnumString("dec")]
        Decimal
    }

    /// <summary>
    /// Text Alignment Types
    /// </summary>
    public enum TextAlignmentTypeValues
    {
        /// <summary>
        /// Text Alignment Enum ( Left ).
        /// <para>When the item is serialized out as xml, its value is "l".</para>
        /// </summary>
        [EnumString("l")]
        Left,
        /// <summary>
        /// Text Alignment Enum ( Center ).
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Text Alignment Enum ( Right ).
        /// <para>When the item is serialized out as xml, its value is "r".</para>
        /// </summary>
        [EnumString("r")]
        Right,
        /// <summary>
        /// Text Alignment Enum ( Justified ).
        /// <para>When the item is serialized out as xml, its value is "just".</para>
        /// </summary>
        [EnumString("just")]
        Justified,
        /// <summary>
        /// Text Alignment Enum ( Justified Low ).
        /// <para>When the item is serialized out as xml, its value is "justLow".</para>
        /// </summary>
        [EnumString("justLow")]
        JustifiedLow,
        /// <summary>
        /// Text Alignment Enum ( Distributed ).
        /// <para>When the item is serialized out as xml, its value is "dist".</para>
        /// </summary>
        [EnumString("dist")]
        Distributed,
        /// <summary>
        /// Text Alignment Enum ( Thai Distributed ).
        /// <para>When the item is serialized out as xml, its value is "thaiDist".</para>
        /// </summary>
        [EnumString("thaiDist")]
        ThaiDistributed
    }

    /// <summary>
    /// Font Alignment Types
    /// </summary>
    public enum TextFontAlignmentValues
    {
        /// <summary>
        /// Font Alignment Enum ( Automatic ).
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        [EnumString("auto")]
        Automatic,
        /// <summary>
        /// Font Alignment Enum ( Top ).
        /// <para>When the item is serialized out as xml, its value is "t".</para>
        /// </summary>
        [EnumString("t")]
        Top,
        /// <summary>
        /// Font Alignment Enum ( Center ).
        /// <para>When the item is serialized out as xml, its value is "ctr".</para>
        /// </summary>
        [EnumString("ctr")]
        Center,
        /// <summary>
        /// Font Alignment Enum ( Baseline ).
        /// <para>When the item is serialized out as xml, its value is "base".</para>
        /// </summary>
        [EnumString("base")]
        Baseline,
        /// <summary>
        /// Font Alignment Enum ( Bottom ).
        /// <para>When the item is serialized out as xml, its value is "b".</para>
        /// </summary>
        [EnumString("b")]
        Bottom
    }

    /// <summary>
    /// Preset Color Value
    /// </summary>
    public enum PresetColorValues
    {
        /// <summary>
        /// Alice Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "aliceBlue".</para>
        /// </summary>
        [EnumString("aliceBlue")]
        AliceBlue,
        /// <summary>
        /// Antique White Preset Color.
        /// <para>When the item is serialized out as xml, its value is "antiqueWhite".</para>
        /// </summary>
        [EnumString("antiqueWhite")]
        AntiqueWhite,
        /// <summary>
        /// Aqua Preset Color.
        /// <para>When the item is serialized out as xml, its value is "aqua".</para>
        /// </summary>
        [EnumString("aqua")]
        Aqua,
        /// <summary>
        /// Aquamarine Preset Color.
        /// <para>When the item is serialized out as xml, its value is "aquamarine".</para>
        /// </summary>
        [EnumString("aquamarine")]
        Aquamarine,
        /// <summary>
        /// Azure Preset Color.
        /// <para>When the item is serialized out as xml, its value is "azure".</para>
        /// </summary>
        [EnumString("azure")]
        Azure,
        /// <summary>
        /// Beige Preset Color.
        /// <para>When the item is serialized out as xml, its value is "beige".</para>
        /// </summary>
        [EnumString("beige")]
        Beige,
        /// <summary>
        /// Bisque Preset Color.
        /// <para>When the item is serialized out as xml, its value is "bisque".</para>
        /// </summary>
        [EnumString("bisque")]
        Bisque,
        /// <summary>
        /// Black Preset Color.
        /// <para>When the item is serialized out as xml, its value is "black".</para>
        /// </summary>
        [EnumString("black")]
        Black,
        /// <summary>
        /// Blanched Almond Preset Color.
        /// <para>When the item is serialized out as xml, its value is "blanchedAlmond".</para>
        /// </summary>
        [EnumString("blanchedAlmond")]
        BlanchedAlmond,
        /// <summary>
        /// Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "blue".</para>
        /// </summary>
        [EnumString("blue")]
        Blue,
        /// <summary>
        /// Blue Violet Preset Color.
        /// <para>When the item is serialized out as xml, its value is "blueViolet".</para>
        /// </summary>
        [EnumString("blueViolet")]
        BlueViolet,
        /// <summary>
        /// Brown Preset Color.
        /// <para>When the item is serialized out as xml, its value is "brown".</para>
        /// </summary>
        [EnumString("brown")]
        Brown,
        /// <summary>
        /// Burly Wood Preset Color.
        /// <para>When the item is serialized out as xml, its value is "burlyWood".</para>
        /// </summary>
        [EnumString("burlyWood")]
        BurlyWood,
        /// <summary>
        /// Cadet Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "cadetBlue".</para>
        /// </summary>
        [EnumString("cadetBlue")]
        CadetBlue,
        /// <summary>
        /// Chartreuse Preset Color.
        /// <para>When the item is serialized out as xml, its value is "chartreuse".</para>
        /// </summary>
        [EnumString("chartreuse")]
        Chartreuse,
        /// <summary>
        /// Chocolate Preset Color.
        /// <para>When the item is serialized out as xml, its value is "chocolate".</para>
        /// </summary>
        [EnumString("chocolate")]
        Chocolate,
        /// <summary>
        /// Coral Preset Color.
        /// <para>When the item is serialized out as xml, its value is "coral".</para>
        /// </summary>
        [EnumString("coral")]
        Coral,
        /// <summary>
        /// Cornflower Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "cornflowerBlue".</para>
        /// </summary>
        [EnumString("cornflowerBlue")]
        CornflowerBlue,
        /// <summary>
        /// Cornsilk Preset Color.
        /// <para>When the item is serialized out as xml, its value is "cornsilk".</para>
        /// </summary>
        [EnumString("cornsilk")]
        Cornsilk,
        /// <summary>
        /// Crimson Preset Color.
        /// <para>When the item is serialized out as xml, its value is "crimson".</para>
        /// </summary>
        [EnumString("crimson")]
        Crimson,
        /// <summary>
        /// Cyan Preset Color.
        /// <para>When the item is serialized out as xml, its value is "cyan".</para>
        /// </summary>
        [EnumString("cyan")]
        Cyan,
        /// <summary>
        /// Dark Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkBlue".</para>
        /// </summary>
        [EnumString("dkBlue")]
        DarkBlue,
        /// <summary>
        /// Dark Cyan Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkCyan".</para>
        /// </summary>
        [EnumString("dkCyan")]
        DarkCyan,
        /// <summary>
        /// Dark Goldenrod Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkGoldenrod".</para>
        /// </summary>
        [EnumString("dkGoldenrod")]
        DarkGoldenrod,
        /// <summary>
        /// Dark Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkGray".</para>
        /// </summary>
        [EnumString("dkGray")]
        DarkGray,
        /// <summary>
        /// Dark Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkGreen".</para>
        /// </summary>
        [EnumString("dkGreen")]
        DarkGreen,
        /// <summary>
        /// Dark Khaki Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkKhaki".</para>
        /// </summary>
        [EnumString("dkKhaki")]
        DarkKhaki,
        /// <summary>
        /// Dark Magenta Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkMagenta".</para>
        /// </summary>
        [EnumString("dkMagenta")]
        DarkMagenta,
        /// <summary>
        /// Dark Olive Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkOliveGreen".</para>
        /// </summary>
        [EnumString("dkOliveGreen")]
        DarkOliveGreen,
        /// <summary>
        /// Dark Orange Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkOrange".</para>
        /// </summary>
        [EnumString("dkOrange")]
        DarkOrange,
        /// <summary>
        /// Dark Orchid Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkOrchid".</para>
        /// </summary>
        [EnumString("dkOrchid")]
        DarkOrchid,
        /// <summary>
        /// Dark Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkRed".</para>
        /// </summary>
        [EnumString("dkRed")]
        DarkRed,
        /// <summary>
        /// Dark Salmon Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkSalmon".</para>
        /// </summary>
        [EnumString("dkSalmon")]
        DarkSalmon,
        /// <summary>
        /// Dark Sea Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkSeaGreen".</para>
        /// </summary>
        [EnumString("dkSeaGreen")]
        DarkSeaGreen,
        /// <summary>
        /// Dark Slate Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkSlateBlue".</para>
        /// </summary>
        [EnumString("dkSlateBlue")]
        DarkSlateBlue,
        /// <summary>
        /// Dark Slate Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkSlateGray".</para>
        /// </summary>
        [EnumString("dkSlateGray")]
        DarkSlateGray,
        /// <summary>
        /// Dark Turquoise Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkTurquoise".</para>
        /// </summary>
        [EnumString("dkTurquoise")]
        DarkTurquoise,
        /// <summary>
        /// Dark Violet Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dkViolet".</para>
        /// </summary>
        [EnumString("dkViolet")]
        DarkViolet,
        /// <summary>
        /// Deep Pink Preset Color.
        /// <para>When the item is serialized out as xml, its value is "deepPink".</para>
        /// </summary>
        [EnumString("deepPink")]
        DeepPink,
        /// <summary>
        /// Deep Sky Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "deepSkyBlue".</para>
        /// </summary>
        [EnumString("deepSkyBlue")]
        DeepSkyBlue,
        /// <summary>
        /// Dim Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dimGray".</para>
        /// </summary>
        [EnumString("dimGray")]
        DimGray,
        /// <summary>
        /// Dodger Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "dodgerBlue".</para>
        /// </summary>
        [EnumString("dodgerBlue")]
        DodgerBlue,
        /// <summary>
        /// Firebrick Preset Color.
        /// <para>When the item is serialized out as xml, its value is "firebrick".</para>
        /// </summary>
        [EnumString("firebrick")]
        Firebrick,
        /// <summary>
        /// Floral White Preset Color.
        /// <para>When the item is serialized out as xml, its value is "floralWhite".</para>
        /// </summary>
        [EnumString("floralWhite")]
        FloralWhite,
        /// <summary>
        /// Forest Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "forestGreen".</para>
        /// </summary>
        [EnumString("forestGreen")]
        ForestGreen,
        /// <summary>
        /// Fuchsia Preset Color.
        /// <para>When the item is serialized out as xml, its value is "fuchsia".</para>
        /// </summary>
        [EnumString("fuchsia")]
        Fuchsia,
        /// <summary>
        /// Gainsboro Preset Color.
        /// <para>When the item is serialized out as xml, its value is "gainsboro".</para>
        /// </summary>
        [EnumString("gainsboro")]
        Gainsboro,
        /// <summary>
        /// Ghost White Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ghostWhite".</para>
        /// </summary>
        [EnumString("ghostWhite")]
        GhostWhite,
        /// <summary>
        /// Gold Preset Color.
        /// <para>When the item is serialized out as xml, its value is "gold".</para>
        /// </summary>
        [EnumString("gold")]
        Gold,
        /// <summary>
        /// Goldenrod Preset Color.
        /// <para>When the item is serialized out as xml, its value is "goldenrod".</para>
        /// </summary>
        [EnumString("goldenrod")]
        Goldenrod,
        /// <summary>
        /// Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "gray".</para>
        /// </summary>
        [EnumString("gray")]
        Gray,
        /// <summary>
        /// Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "green".</para>
        /// </summary>
        [EnumString("green")]
        Green,
        /// <summary>
        /// Green Yellow Preset Color.
        /// <para>When the item is serialized out as xml, its value is "greenYellow".</para>
        /// </summary>
        [EnumString("greenYellow")]
        GreenYellow,
        /// <summary>
        /// Honeydew Preset Color.
        /// <para>When the item is serialized out as xml, its value is "honeydew".</para>
        /// </summary>
        [EnumString("honeydew")]
        Honeydew,
        /// <summary>
        /// Hot Pink Preset Color.
        /// <para>When the item is serialized out as xml, its value is "hotPink".</para>
        /// </summary>
        [EnumString("hotPink")]
        HotPink,
        /// <summary>
        /// Indian Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "indianRed".</para>
        /// </summary>
        [EnumString("indianRed")]
        IndianRed,
        /// <summary>
        /// Indigo Preset Color.
        /// <para>When the item is serialized out as xml, its value is "indigo".</para>
        /// </summary>
        [EnumString("indigo")]
        Indigo,
        /// <summary>
        /// Ivory Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ivory".</para>
        /// </summary>
        [EnumString("ivory")]
        Ivory,
        /// <summary>
        /// Khaki Preset Color.
        /// <para>When the item is serialized out as xml, its value is "khaki".</para>
        /// </summary>
        [EnumString("khaki")]
        Khaki,
        /// <summary>
        /// Lavender Preset Color.
        /// <para>When the item is serialized out as xml, its value is "lavender".</para>
        /// </summary>
        [EnumString("lavender")]
        Lavender,
        /// <summary>
        /// Lavender Blush Preset Color.
        /// <para>When the item is serialized out as xml, its value is "lavenderBlush".</para>
        /// </summary>
        [EnumString("lavenderBlush")]
        LavenderBlush,
        /// <summary>
        /// Lawn Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "lawnGreen".</para>
        /// </summary>
        [EnumString("lawnGreen")]
        LawnGreen,
        /// <summary>
        /// Lemon Chiffon Preset Color.
        /// <para>When the item is serialized out as xml, its value is "lemonChiffon".</para>
        /// </summary>
        [EnumString("lemonChiffon")]
        LemonChiffon,
        /// <summary>
        /// Light Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltBlue".</para>
        /// </summary>
        [EnumString("ltBlue")]
        LightBlue,
        /// <summary>
        /// Light Coral Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltCoral".</para>
        /// </summary>
        [EnumString("ltCoral")]
        LightCoral,
        /// <summary>
        /// Light Cyan Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltCyan".</para>
        /// </summary>
        [EnumString("ltCyan")]
        LightCyan,
        /// <summary>
        /// Light Goldenrod Yellow Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltGoldenrodYellow".</para>
        /// </summary>
        [EnumString("ltGoldenrodYellow")]
        LightGoldenrodYellow,
        /// <summary>
        /// Light Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltGray".</para>
        /// </summary>
        [EnumString("ltGray")]
        LightGray,
        /// <summary>
        /// Light Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltGreen".</para>
        /// </summary>
        [EnumString("ltGreen")]
        LightGreen,
        /// <summary>
        /// Light Pink Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltPink".</para>
        /// </summary>
        [EnumString("ltPink")]
        LightPink,
        /// <summary>
        /// Light Salmon Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltSalmon".</para>
        /// </summary>
        [EnumString("ltSalmon")]
        LightSalmon,
        /// <summary>
        /// Light Sea Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltSeaGreen".</para>
        /// </summary>
        [EnumString("ltSeaGreen")]
        LightSeaGreen,
        /// <summary>
        /// Light Sky Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltSkyBlue".</para>
        /// </summary>
        [EnumString("ltSkyBlue")]
        LightSkyBlue,
        /// <summary>
        /// Light Slate Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltSlateGray".</para>
        /// </summary>
        [EnumString("ltSlateGray")]
        LightSlateGray,
        /// <summary>
        /// Light Steel Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltSteelBlue".</para>
        /// </summary>
        [EnumString("ltSteelBlue")]
        LightSteelBlue,
        /// <summary>
        /// Light Yellow Preset Color.
        /// <para>When the item is serialized out as xml, its value is "ltYellow".</para>
        /// </summary>
        [EnumString("ltYellow")]
        LightYellow,
        /// <summary>
        /// Lime Preset Color.
        /// <para>When the item is serialized out as xml, its value is "lime".</para>
        /// </summary>
        [EnumString("lime")]
        Lime,
        /// <summary>
        /// Lime Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "limeGreen".</para>
        /// </summary>
        [EnumString("limeGreen")]
        LimeGreen,
        /// <summary>
        /// Linen Preset Color.
        /// <para>When the item is serialized out as xml, its value is "linen".</para>
        /// </summary>
        [EnumString("linen")]
        Linen,
        /// <summary>
        /// Magenta Preset Color.
        /// <para>When the item is serialized out as xml, its value is "magenta".</para>
        /// </summary>
        [EnumString("magenta")]
        Magenta,
        /// <summary>
        /// Maroon Preset Color.
        /// <para>When the item is serialized out as xml, its value is "maroon".</para>
        /// </summary>
        [EnumString("maroon")]
        Maroon,
        /// <summary>
        /// Medium Aquamarine Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medAquamarine".</para>
        /// </summary>
        [EnumString("medAquamarine")]
        MedAquamarine,
        /// <summary>
        /// Medium Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medBlue".</para>
        /// </summary>
        [EnumString("medBlue")]
        MediumBlue,
        /// <summary>
        /// Medium Orchid Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medOrchid".</para>
        /// </summary>
        [EnumString("medOrchid")]
        MediumOrchid,
        /// <summary>
        /// Medium Purple Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medPurple".</para>
        /// </summary>
        [EnumString("medPurple")]
        MediumPurple,
        /// <summary>
        /// Medium Sea Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medSeaGreen".</para>
        /// </summary>
        [EnumString("medSeaGreen")]
        MediumSeaGreen,
        /// <summary>
        /// Medium Slate Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medSlateBlue".</para>
        /// </summary>
        [EnumString("medSlateBlue")]
        MediumSlateBlue,
        /// <summary>
        /// Medium Spring Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medSpringGreen".</para>
        /// </summary>
        [EnumString("medSpringGreen")]
        MediumSpringGreen,
        /// <summary>
        /// Medium Turquoise Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medTurquoise".</para>
        /// </summary>
        [EnumString("medTurquoise")]
        MediumTurquoise,
        /// <summary>
        /// Medium Violet Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "medVioletRed".</para>
        /// </summary>
        [EnumString("medVioletRed")]
        MediumVioletRed,
        /// <summary>
        /// Midnight Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "midnightBlue".</para>
        /// </summary>
        [EnumString("midnightBlue")]
        MidnightBlue,
        /// <summary>
        /// Mint Cream Preset Color.
        /// <para>When the item is serialized out as xml, its value is "mintCream".</para>
        /// </summary>
        [EnumString("mintCream")]
        MintCream,
        /// <summary>
        /// Misty Rose Preset Color.
        /// <para>When the item is serialized out as xml, its value is "mistyRose".</para>
        /// </summary>
        [EnumString("mistyRose")]
        MistyRose,
        /// <summary>
        /// Moccasin Preset Color.
        /// <para>When the item is serialized out as xml, its value is "moccasin".</para>
        /// </summary>
        [EnumString("moccasin")]
        Moccasin,
        /// <summary>
        /// Navajo White Preset Color.
        /// <para>When the item is serialized out as xml, its value is "navajoWhite".</para>
        /// </summary>
        [EnumString("navajoWhite")]
        NavajoWhite,
        /// <summary>
        /// Navy Preset Color.
        /// <para>When the item is serialized out as xml, its value is "navy".</para>
        /// </summary>
        [EnumString("navy")]
        Navy,
        /// <summary>
        /// Old Lace Preset Color.
        /// <para>When the item is serialized out as xml, its value is "oldLace".</para>
        /// </summary>
        [EnumString("oldLace")]
        OldLace,
        /// <summary>
        /// Olive Preset Color.
        /// <para>When the item is serialized out as xml, its value is "olive".</para>
        /// </summary>
        [EnumString("olive")]
        Olive,
        /// <summary>
        /// Olive Drab Preset Color.
        /// <para>When the item is serialized out as xml, its value is "oliveDrab".</para>
        /// </summary>
        [EnumString("oliveDrab")]
        OliveDrab,
        /// <summary>
        /// Orange Preset Color.
        /// <para>When the item is serialized out as xml, its value is "orange".</para>
        /// </summary>
        [EnumString("orange")]
        Orange,
        /// <summary>
        /// Orange Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "orangeRed".</para>
        /// </summary>
        [EnumString("orangeRed")]
        OrangeRed,
        /// <summary>
        /// Orchid Preset Color.
        /// <para>When the item is serialized out as xml, its value is "orchid".</para>
        /// </summary>
        [EnumString("orchid")]
        Orchid,
        /// <summary>
        /// Pale Goldenrod Preset Color.
        /// <para>When the item is serialized out as xml, its value is "paleGoldenrod".</para>
        /// </summary>
        [EnumString("paleGoldenrod")]
        PaleGoldenrod,
        /// <summary>
        /// Pale Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "paleGreen".</para>
        /// </summary>
        [EnumString("paleGreen")]
        PaleGreen,
        /// <summary>
        /// Pale Turquoise Preset Color.
        /// <para>When the item is serialized out as xml, its value is "paleTurquoise".</para>
        /// </summary>
        [EnumString("paleTurquoise")]
        PaleTurquoise,
        /// <summary>
        /// Pale Violet Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "paleVioletRed".</para>
        /// </summary>
        [EnumString("paleVioletRed")]
        PaleVioletRed,
        /// <summary>
        /// Papaya Whip Preset Color.
        /// <para>When the item is serialized out as xml, its value is "papayaWhip".</para>
        /// </summary>
        [EnumString("papayaWhip")]
        PapayaWhip,
        /// <summary>
        /// Peach Puff Preset Color.
        /// <para>When the item is serialized out as xml, its value is "peachPuff".</para>
        /// </summary>
        [EnumString("peachPuff")]
        PeachPuff,
        /// <summary>
        /// Peru Preset Color.
        /// <para>When the item is serialized out as xml, its value is "peru".</para>
        /// </summary>
        [EnumString("peru")]
        Peru,
        /// <summary>
        /// Pink Preset Color.
        /// <para>When the item is serialized out as xml, its value is "pink".</para>
        /// </summary>
        [EnumString("pink")]
        Pink,
        /// <summary>
        /// Plum Preset Color.
        /// <para>When the item is serialized out as xml, its value is "plum".</para>
        /// </summary>
        [EnumString("plum")]
        Plum,
        /// <summary>
        /// Powder Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "powderBlue".</para>
        /// </summary>
        [EnumString("powderBlue")]
        PowderBlue,
        /// <summary>
        /// Purple Preset Color.
        /// <para>When the item is serialized out as xml, its value is "purple".</para>
        /// </summary>
        [EnumString("purple")]
        Purple,
        /// <summary>
        /// Red Preset Color.
        /// <para>When the item is serialized out as xml, its value is "red".</para>
        /// </summary>
        [EnumString("red")]
        Red,
        /// <summary>
        /// Rosy Brown Preset Color.
        /// <para>When the item is serialized out as xml, its value is "rosyBrown".</para>
        /// </summary>
        [EnumString("rosyBrown")]
        RosyBrown,
        /// <summary>
        /// Royal Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "royalBlue".</para>
        /// </summary>
        [EnumString("royalBlue")]
        RoyalBlue,
        /// <summary>
        /// Saddle Brown Preset Color.
        /// <para>When the item is serialized out as xml, its value is "saddleBrown".</para>
        /// </summary>
        [EnumString("saddleBrown")]
        SaddleBrown,
        /// <summary>
        /// Salmon Preset Color.
        /// <para>When the item is serialized out as xml, its value is "salmon".</para>
        /// </summary>
        [EnumString("salmon")]
        Salmon,
        /// <summary>
        /// Sandy Brown Preset Color.
        /// <para>When the item is serialized out as xml, its value is "sandyBrown".</para>
        /// </summary>
        [EnumString("sandyBrown")]
        SandyBrown,
        /// <summary>
        /// Sea Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "seaGreen".</para>
        /// </summary>
        [EnumString("seaGreen")]
        SeaGreen,
        /// <summary>
        /// Sea Shell Preset Color.
        /// <para>When the item is serialized out as xml, its value is "seaShell".</para>
        /// </summary>
        [EnumString("seaShell")]
        SeaShell,
        /// <summary>
        /// Sienna Preset Color.
        /// <para>When the item is serialized out as xml, its value is "sienna".</para>
        /// </summary>
        [EnumString("sienna")]
        Sienna,
        /// <summary>
        /// Silver Preset Color.
        /// <para>When the item is serialized out as xml, its value is "silver".</para>
        /// </summary>
        [EnumString("silver")]
        Silver,
        /// <summary>
        /// Sky Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "skyBlue".</para>
        /// </summary>
        [EnumString("skyBlue")]
        SkyBlue,
        /// <summary>
        /// Slate Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "slateBlue".</para>
        /// </summary>
        [EnumString("slateBlue")]
        SlateBlue,
        /// <summary>
        /// Slate Gray Preset Color.
        /// <para>When the item is serialized out as xml, its value is "slateGray".</para>
        /// </summary>
        [EnumString("slateGray")]
        SlateGray,
        /// <summary>
        /// Snow Preset Color.
        /// <para>When the item is serialized out as xml, its value is "snow".</para>
        /// </summary>
        [EnumString("snow")]
        Snow,
        /// <summary>
        /// Spring Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "springGreen".</para>
        /// </summary>
        [EnumString("springGreen")]
        SpringGreen,
        /// <summary>
        /// Steel Blue Preset Color.
        /// <para>When the item is serialized out as xml, its value is "steelBlue".</para>
        /// </summary>
        [EnumString("steelBlue")]
        SteelBlue,
        /// <summary>
        /// Tan Preset Color.
        /// <para>When the item is serialized out as xml, its value is "tan".</para>
        /// </summary>
        [EnumString("tan")]
        Tan,
        /// <summary>
        /// Teal Preset Color.
        /// <para>When the item is serialized out as xml, its value is "teal".</para>
        /// </summary>
        [EnumString("teal")]
        Teal,
        /// <summary>
        /// Thistle Preset Color.
        /// <para>When the item is serialized out as xml, its value is "thistle".</para>
        /// </summary>
        [EnumString("thistle")]
        Thistle,
        /// <summary>
        /// Tomato Preset Color.
        /// <para>When the item is serialized out as xml, its value is "tomato".</para>
        /// </summary>
        [EnumString("tomato")]
        Tomato,
        /// <summary>
        /// Turquoise Preset Color.
        /// <para>When the item is serialized out as xml, its value is "turquoise".</para>
        /// </summary>
        [EnumString("turquoise")]
        Turquoise,
        /// <summary>
        /// Violet Preset Color.
        /// <para>When the item is serialized out as xml, its value is "violet".</para>
        /// </summary>
        [EnumString("violet")]
        Violet,
        /// <summary>
        /// Wheat Preset Color.
        /// <para>When the item is serialized out as xml, its value is "wheat".</para>
        /// </summary>
        [EnumString("wheat")]
        Wheat,
        /// <summary>
        /// White Preset Color.
        /// <para>When the item is serialized out as xml, its value is "white".</para>
        /// </summary>
        [EnumString("white")]
        White,
        /// <summary>
        /// White Smoke Preset Color.
        /// <para>When the item is serialized out as xml, its value is "whiteSmoke".</para>
        /// </summary>
        [EnumString("whiteSmoke")]
        WhiteSmoke,
        /// <summary>
        /// Yellow Preset Color.
        /// <para>When the item is serialized out as xml, its value is "yellow".</para>
        /// </summary>
        [EnumString("yellow")]
        Yellow,
        /// <summary>
        /// Yellow Green Preset Color.
        /// <para>When the item is serialized out as xml, its value is "yellowGreen".</para>
        /// </summary>
        [EnumString("yellowGreen")]
        YellowGreen,
        /// <summary>
        /// darkBlue.
        /// <para>When the item is serialized out as xml, its value is "darkBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkBlue2010,
        /// <summary>
        /// darkCyan.
        /// <para>When the item is serialized out as xml, its value is "darkCyan".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkCyan")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkCyan2010,
        /// <summary>
        /// darkGoldenrod.
        /// <para>When the item is serialized out as xml, its value is "darkGoldenrod".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkGoldenrod")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkGoldenrod2010,
        /// <summary>
        /// darkGray.
        /// <para>When the item is serialized out as xml, its value is "darkGray".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkGray")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkGray2010,
        /// <summary>
        /// darkGrey.
        /// <para>When the item is serialized out as xml, its value is "darkGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkGrey2010,
        /// <summary>
        /// darkGreen.
        /// <para>When the item is serialized out as xml, its value is "darkGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkGreen2010,
        /// <summary>
        /// darkKhaki.
        /// <para>When the item is serialized out as xml, its value is "darkKhaki".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkKhaki")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkKhaki2010,
        /// <summary>
        /// darkMagenta.
        /// <para>When the item is serialized out as xml, its value is "darkMagenta".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkMagenta")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkMagenta2010,
        /// <summary>
        /// darkOliveGreen.
        /// <para>When the item is serialized out as xml, its value is "darkOliveGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkOliveGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkOliveGreen2010,
        /// <summary>
        /// darkOrange.
        /// <para>When the item is serialized out as xml, its value is "darkOrange".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkOrange")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkOrange2010,
        /// <summary>
        /// darkOrchid.
        /// <para>When the item is serialized out as xml, its value is "darkOrchid".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkOrchid")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkOrchid2010,
        /// <summary>
        /// darkRed.
        /// <para>When the item is serialized out as xml, its value is "darkRed".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkRed")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkRed2010,
        /// <summary>
        /// darkSalmon.
        /// <para>When the item is serialized out as xml, its value is "darkSalmon".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkSalmon")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSalmon2010,
        /// <summary>
        /// darkSeaGreen.
        /// <para>When the item is serialized out as xml, its value is "darkSeaGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSeaGreen2010,
        /// <summary>
        /// darkSlateBlue.
        /// <para>When the item is serialized out as xml, its value is "darkSlateBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkSlateBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSlateBlue2010,
        /// <summary>
        /// darkSlateGray.
        /// <para>When the item is serialized out as xml, its value is "darkSlateGray".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkSlateGray")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSlateGray2010,
        /// <summary>
        /// darkSlateGrey.
        /// <para>When the item is serialized out as xml, its value is "darkSlateGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSlateGrey2010,
        /// <summary>
        /// darkTurquoise.
        /// <para>When the item is serialized out as xml, its value is "darkTurquoise".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkTurquoise")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkTurquoise2010,
        /// <summary>
        /// darkViolet.
        /// <para>When the item is serialized out as xml, its value is "darkViolet".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("darkViolet")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkViolet2010,
        /// <summary>
        /// lightBlue.
        /// <para>When the item is serialized out as xml, its value is "lightBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightBlue2010,
        /// <summary>
        /// lightCoral.
        /// <para>When the item is serialized out as xml, its value is "lightCoral".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightCoral")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightCoral2010,
        /// <summary>
        /// lightCyan.
        /// <para>When the item is serialized out as xml, its value is "lightCyan".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightCyan")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightCyan2010,
        /// <summary>
        /// lightGoldenrodYellow.
        /// <para>When the item is serialized out as xml, its value is "lightGoldenrodYellow".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightGoldenrodYellow")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightGoldenrodYellow2010,
        /// <summary>
        /// lightGray.
        /// <para>When the item is serialized out as xml, its value is "lightGray".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightGray")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightGray2010,
        /// <summary>
        /// lightGrey.
        /// <para>When the item is serialized out as xml, its value is "lightGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightGrey2010,
        /// <summary>
        /// lightGreen.
        /// <para>When the item is serialized out as xml, its value is "lightGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightGreen2010,
        /// <summary>
        /// lightPink.
        /// <para>When the item is serialized out as xml, its value is "lightPink".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightPink")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightPink2010,
        /// <summary>
        /// lightSalmon.
        /// <para>When the item is serialized out as xml, its value is "lightSalmon".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSalmon")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSalmon2010,
        /// <summary>
        /// lightSeaGreen.
        /// <para>When the item is serialized out as xml, its value is "lightSeaGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSeaGreen2010,
        /// <summary>
        /// lightSkyBlue.
        /// <para>When the item is serialized out as xml, its value is "lightSkyBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSkyBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSkyBlue2010,
        /// <summary>
        /// lightSlateGray.
        /// <para>When the item is serialized out as xml, its value is "lightSlateGray".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSlateGray")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSlateGray2010,
        /// <summary>
        /// lightSlateGrey.
        /// <para>When the item is serialized out as xml, its value is "lightSlateGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSlateGrey2010,
        /// <summary>
        /// lightSteelBlue.
        /// <para>When the item is serialized out as xml, its value is "lightSteelBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightSteelBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSteelBlue2010,
        /// <summary>
        /// lightYellow.
        /// <para>When the item is serialized out as xml, its value is "lightYellow".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("lightYellow")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightYellow2010,
        /// <summary>
        /// mediumAquamarine.
        /// <para>When the item is serialized out as xml, its value is "mediumAquamarine".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumAquamarine")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumAquamarine2010,
        /// <summary>
        /// mediumBlue.
        /// <para>When the item is serialized out as xml, its value is "mediumBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumBlue2010,
        /// <summary>
        /// mediumOrchid.
        /// <para>When the item is serialized out as xml, its value is "mediumOrchid".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumOrchid")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumOrchid2010,
        /// <summary>
        /// mediumPurple.
        /// <para>When the item is serialized out as xml, its value is "mediumPurple".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumPurple")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumPurple2010,
        /// <summary>
        /// mediumSeaGreen.
        /// <para>When the item is serialized out as xml, its value is "mediumSeaGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumSeaGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumSeaGreen2010,
        /// <summary>
        /// mediumSlateBlue.
        /// <para>When the item is serialized out as xml, its value is "mediumSlateBlue".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumSlateBlue")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumSlateBlue2010,
        /// <summary>
        /// mediumSpringGreen.
        /// <para>When the item is serialized out as xml, its value is "mediumSpringGreen".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumSpringGreen")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumSpringGreen2010,
        /// <summary>
        /// mediumTurquoise.
        /// <para>When the item is serialized out as xml, its value is "mediumTurquoise".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumTurquoise")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumTurquoise2010,
        /// <summary>
        /// mediumVioletRed.
        /// <para>When the item is serialized out as xml, its value is "mediumVioletRed".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("mediumVioletRed")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        MediumVioletRed2010,
        /// <summary>
        /// dkGrey.
        /// <para>When the item is serialized out as xml, its value is "dkGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("dkGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkGrey,
        /// <summary>
        /// dimGrey.
        /// <para>When the item is serialized out as xml, its value is "dimGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("dimGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DimGrey,
        /// <summary>
        /// dkSlateGrey.
        /// <para>When the item is serialized out as xml, its value is "dkSlateGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("dkSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        DarkSlateGrey,
        /// <summary>
        /// grey.
        /// <para>When the item is serialized out as xml, its value is "grey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("grey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        Grey,
        /// <summary>
        /// ltGrey.
        /// <para>When the item is serialized out as xml, its value is "ltGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("ltGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightGrey,
        /// <summary>
        /// ltSlateGrey.
        /// <para>When the item is serialized out as xml, its value is "ltSlateGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("ltSlateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        LightSlateGrey,
        /// <summary>
        /// slateGrey.
        /// <para>When the item is serialized out as xml, its value is "slateGrey".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        [EnumString("slateGrey")]
        [OfficeAvailability(FileFormatVersions.Office2007)]
        SlateGrey
    }
}
// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag
{
    /// <summary>
    /// <para>Defines the FeaturePropertyBags Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:FeaturePropertyBags.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList" /> <c>&lt;xfpb:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagExtensions" /> <c>&lt;xfpb:bagExt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.FeaturePropertyBag" /> <c>&lt;xfpb:bag></c></description></item>
    /// </list>
    /// </remark>
    public partial class FeaturePropertyBags : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBags class.
        /// </summary>
        public FeaturePropertyBags() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBags class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FeaturePropertyBags(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBags class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FeaturePropertyBags(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBags class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FeaturePropertyBags(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>count, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: count</para>
        /// </summary>
        public UInt32Value? Count
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:FeaturePropertyBags");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagExtensions>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.FeaturePropertyBag>();
            builder.AddElement<FeaturePropertyBags>()
                .AddAttribute("count", a => a.Count);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagExtensions), 0, 0, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.FeaturePropertyBag), 0, 0, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList), 0, 1, version: FileFormatVersions.Microsoft365)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FeaturePropertyBags>(deep);
    }

    /// <summary>
    /// <para>Defines the XfComplement Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:xfComplement.</para>
    /// </summary>
    public partial class XfComplement : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the XfComplement class.
        /// </summary>
        public XfComplement() : base()
        {
        }

        /// <summary>
        /// <para>i, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: i</para>
        /// </summary>
        public UInt32Value? I
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:xfComplement");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<XfComplement>()
                .AddAttribute("i", a => a.I, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<XfComplement>(deep);
    }

    /// <summary>
    /// <para>Defines the BagExtensions Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:bagExt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList" /> <c>&lt;xfpb:extLst></c></description></item>
    /// </list>
    /// </remark>
    public partial class BagExtensions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BagExtensions class.
        /// </summary>
        public BagExtensions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BagExtensions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BagExtensions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BagExtensions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BagExtensions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BagExtensions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BagExtensions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:bagExt");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList), 0, 1, version: FileFormatVersions.Microsoft365)
            };
        }

        /// <summary>
        /// <para>ExtensionList.</para>
        /// <para>Represents the following element tag in the schema: xfpb:extLst.</para>
        /// </summary>
        /// <remark>
        /// xmlns:xfpb = http://schemas.microsoft.com/office/spreadsheetml/2022/featurepropertybag
        /// </remark>
        public DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList? ExtensionList
        {
            get => GetElement<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ExtensionList>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BagExtensions>(deep);
    }

    /// <summary>
    /// <para>Defines the FeaturePropertyBag Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:bag.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ArrayFeatureProperty" /> <c>&lt;xfpb:a></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagFeatureProperty" /> <c>&lt;xfpb:bagId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BoolFeatureProperty" /> <c>&lt;xfpb:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.DecimalFeatureProperty" /> <c>&lt;xfpb:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.IntFeatureProperty" /> <c>&lt;xfpb:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelFeatureProperty" /> <c>&lt;xfpb:rel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.StringFeatureProperty" /> <c>&lt;xfpb:s></c></description></item>
    /// </list>
    /// </remark>
    public partial class FeaturePropertyBag : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBag class.
        /// </summary>
        public FeaturePropertyBag() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FeaturePropertyBag(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBag class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FeaturePropertyBag(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FeaturePropertyBag class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FeaturePropertyBag(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>type, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: type</para>
        /// </summary>
        public StringValue? Type
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>extRef, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: extRef</para>
        /// </summary>
        public StringValue? ExtRef
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>bagExtId, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: bagExtId</para>
        /// </summary>
        public UInt32Value? BagExtId
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>att, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: att</para>
        /// </summary>
        public StringValue? Att
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:bag");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ArrayFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BoolFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.DecimalFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.IntFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelFeatureProperty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.StringFeatureProperty>();
            builder.AddElement<FeaturePropertyBag>()
                .AddAttribute("type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("extRef", a => a.ExtRef)
                .AddAttribute("bagExtId", a => a.BagExtId)
                .AddAttribute("att", a => a.Att);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.ArrayFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BagFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.IntFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.StringFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.BoolFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.DecimalFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelFeatureProperty), 1, 1, version: FileFormatVersions.Microsoft365)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FeaturePropertyBag>(deep);
    }

    /// <summary>
    /// <para>Defines the ExtensionList Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:extLst.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.Extension" /> <c>&lt;x:ext></c></description></item>
    /// </list>
    /// </remark>
    public partial class ExtensionList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionList class.
        /// </summary>
        public ExtensionList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ExtensionList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ExtensionList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ExtensionList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:extLst");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Spreadsheet.Extension>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Spreadsheet.Extension), 0, 0)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExtensionList>(deep);
    }

    /// <summary>
    /// <para>Defines the ArrayFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:a.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdboolean" /> <c>&lt;xfpb:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsddouble" /> <c>&lt;xfpb:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdinteger" /> <c>&lt;xfpb:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.SXsdstring" /> <c>&lt;xfpb:s></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelXsdstring" /> <c>&lt;xfpb:rel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.XsdunsignedInt" /> <c>&lt;xfpb:bagId></c></description></item>
    /// </list>
    /// </remark>
    public partial class ArrayFeatureProperty : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ArrayFeatureProperty class.
        /// </summary>
        public ArrayFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ArrayFeatureProperty class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ArrayFeatureProperty(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ArrayFeatureProperty class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ArrayFeatureProperty(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ArrayFeatureProperty class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ArrayFeatureProperty(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Name of the key for the key value pair., this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:a");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdboolean>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsddouble>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdinteger>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.SXsdstring>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelXsdstring>();
            builder.AddChild<DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.XsdunsignedInt>();
            builder.AddElement<ArrayFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.XsdunsignedInt), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdinteger), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.SXsdstring), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsdboolean), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.Xsddouble), 1, 1, version: FileFormatVersions.Microsoft365),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.Y2022.FeaturePropertyBag.RelXsdstring), 1, 1, version: FileFormatVersions.Microsoft365)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ArrayFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the BagFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:bagId.</para>
    /// </summary>
    public partial class BagFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the BagFeatureProperty class.
        /// </summary>
        public BagFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BagFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BagFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new UInt32Value { InnerText = text };
        }

        /// <summary>
        /// <para>k, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:bagId");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<BagFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BagFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the IntFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:i.</para>
    /// </summary>
    public partial class IntFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the IntFeatureProperty class.
        /// </summary>
        public IntFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the IntFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public IntFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        /// <summary>
        /// <para>k, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:i");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<IntFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<IntFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the StringFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:s.</para>
    /// </summary>
    public partial class StringFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the StringFeatureProperty class.
        /// </summary>
        public StringFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StringFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public StringFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <summary>
        /// <para>k, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:s");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<StringFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StringFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the BoolFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:b.</para>
    /// </summary>
    public partial class BoolFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the BoolFeatureProperty class.
        /// </summary>
        public BoolFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BoolFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BoolFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        /// <summary>
        /// <para>k, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:b");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<BoolFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BoolFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the DecimalFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:d.</para>
    /// </summary>
    public partial class DecimalFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the DecimalFeatureProperty class.
        /// </summary>
        public DecimalFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DecimalFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DecimalFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new DoubleValue { InnerText = text };
        }

        /// <summary>
        /// <para>k, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:d");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<DecimalFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DecimalFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the RelFeatureProperty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:rel.</para>
    /// </summary>
    public partial class RelFeatureProperty : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the RelFeatureProperty class.
        /// </summary>
        public RelFeatureProperty() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RelFeatureProperty class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public RelFeatureProperty(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <summary>
        /// <para>Name of the key for the key value pair., this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: k</para>
        /// </summary>
        public StringValue? K
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:rel");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<RelFeatureProperty>()
                .AddAttribute("k", a => a.K, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelFeatureProperty>(deep);
    }

    /// <summary>
    /// <para>Defines the XsdunsignedInt Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:bagId.</para>
    /// </summary>
    public partial class XsdunsignedInt : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the XsdunsignedInt class.
        /// </summary>
        public XsdunsignedInt() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the XsdunsignedInt class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public XsdunsignedInt(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new UInt32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<UInt32Value>(NumberValidator.Instance);
            builder.SetSchema("xfpb:bagId");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<XsdunsignedInt>(deep);
    }

    /// <summary>
    /// <para>Defines the Xsdinteger Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:i.</para>
    /// </summary>
    public partial class Xsdinteger : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Xsdinteger class.
        /// </summary>
        public Xsdinteger() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Xsdinteger class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Xsdinteger(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new IntegerValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<IntegerValue>(NumberValidator.Instance);
            builder.SetSchema("xfpb:i");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Xsdinteger>(deep);
    }

    /// <summary>
    /// <para>Defines the SXsdstring Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:s.</para>
    /// </summary>
    public partial class SXsdstring : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the SXsdstring class.
        /// </summary>
        public SXsdstring() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SXsdstring class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public SXsdstring(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:s");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SXsdstring>(deep);
    }

    /// <summary>
    /// <para>Defines the RelXsdstring Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:rel.</para>
    /// </summary>
    public partial class RelXsdstring : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the RelXsdstring class.
        /// </summary>
        public RelXsdstring() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RelXsdstring class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public RelXsdstring(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xfpb:rel");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelXsdstring>(deep);
    }

    /// <summary>
    /// <para>Defines the Xsdboolean Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:b.</para>
    /// </summary>
    public partial class Xsdboolean : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Xsdboolean class.
        /// </summary>
        public Xsdboolean() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Xsdboolean class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Xsdboolean(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<BooleanValue>(NumberValidator.Instance);
            builder.SetSchema("xfpb:b");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Xsdboolean>(deep);
    }

    /// <summary>
    /// <para>Defines the Xsddouble Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xfpb:d.</para>
    /// </summary>
    public partial class Xsddouble : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the Xsddouble class.
        /// </summary>
        public Xsddouble() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Xsddouble class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Xsddouble(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new DoubleValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<DoubleValue>(NumberValidator.Instance);
            builder.SetSchema("xfpb:d");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Xsddouble>(deep);
    }
}
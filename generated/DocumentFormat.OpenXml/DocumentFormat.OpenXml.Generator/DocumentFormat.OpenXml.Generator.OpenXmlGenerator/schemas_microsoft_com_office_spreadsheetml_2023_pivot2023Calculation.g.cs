// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.SpreadSheetML.Y2023.Pivot2023Calculation
{
    /// <summary>
    /// <para>Defines the AggregationInfo Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xlpcalc:aggregationInfo.</para>
    /// </summary>
    public partial class AggregationInfo : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AggregationInfo class.
        /// </summary>
        public AggregationInfo() : base()
        {
        }

        /// <summary>
        /// <para>aggregationType, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: aggregationType</para>
        /// </summary>
        public EnumValue<DocumentFormat.OpenXml.Office.SpreadSheetML.Y2023.Pivot2023Calculation.AggregationType>? AggregationType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Office.SpreadSheetML.Y2023.Pivot2023Calculation.AggregationType>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>sourceField, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: sourceField</para>
        /// </summary>
        public UInt32Value? SourceField
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xlpcalc:aggregationInfo");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<AggregationInfo>()
                .AddAttribute("aggregationType", a => a.AggregationType, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("sourceField", a => a.SourceField, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AggregationInfo>(deep);
    }

    /// <summary>
    /// <para>Defines the FeatureSupport Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xlpcalc:featureSupportInfo.</para>
    /// </summary>
    public partial class FeatureSupport : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FeatureSupport class.
        /// </summary>
        public FeatureSupport() : base()
        {
        }

        /// <summary>
        /// <para>featureName, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: featureName</para>
        /// </summary>
        public StringValue? FeatureName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xlpcalc:featureSupportInfo");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<FeatureSupport>()
                .AddAttribute("featureName", a => a.FeatureName, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FeatureSupport>(deep);
    }

    /// <summary>
    /// Defines the AggregationType enumeration.
    /// </summary>
    public readonly record struct AggregationType : IEnumValue, IEnumValueFactory<AggregationType>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new AggregationType enum instance
        /// </summary>
        public AggregationType(string value) => _value = value;
        AggregationType IEnumValueFactory<AggregationType>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "distinctCount" => true,
            "median" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "distinctCount";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Microsoft365;
        /// <summary>
        /// distinctCount.
        /// <para>When the item is serialized out as xml, its value is "distinctCount".</para>
        /// </summary>
        public static AggregationType DistinctCount => new("distinctCount");
        /// <summary>
        /// median.
        /// <para>When the item is serialized out as xml, its value is "median".</para>
        /// </summary>
        public static AggregationType Median => new("median");
    
    }
}
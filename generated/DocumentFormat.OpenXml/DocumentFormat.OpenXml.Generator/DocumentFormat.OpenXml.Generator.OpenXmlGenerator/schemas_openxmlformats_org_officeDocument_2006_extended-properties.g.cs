// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.VariantTypes;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.ExtendedProperties
{
    /// <summary>
    /// <para>Application Specific File Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Properties.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature" /> <c>&lt;ap:DigSig></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts" /> <c>&lt;ap:TitlesOfParts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs" /> <c>&lt;ap:HeadingPairs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList" /> <c>&lt;ap:HLinks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop" /> <c>&lt;ap:ScaleCrop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate" /> <c>&lt;ap:LinksUpToDate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.SharedDocument" /> <c>&lt;ap:SharedDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged" /> <c>&lt;ap:HyperlinksChanged></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Pages" /> <c>&lt;ap:Pages></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Words" /> <c>&lt;ap:Words></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Characters" /> <c>&lt;ap:Characters></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Lines" /> <c>&lt;ap:Lines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Paragraphs" /> <c>&lt;ap:Paragraphs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Slides" /> <c>&lt;ap:Slides></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Notes" /> <c>&lt;ap:Notes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.TotalTime" /> <c>&lt;ap:TotalTime></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides" /> <c>&lt;ap:HiddenSlides></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips" /> <c>&lt;ap:MMClips></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces" /> <c>&lt;ap:CharactersWithSpaces></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity" /> <c>&lt;ap:DocSecurity></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Template" /> <c>&lt;ap:Template></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Manager" /> <c>&lt;ap:Manager></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Company" /> <c>&lt;ap:Company></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat" /> <c>&lt;ap:PresentationFormat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase" /> <c>&lt;ap:HyperlinkBase></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.Application" /> <c>&lt;ap:Application></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion" /> <c>&lt;ap:AppVersion></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Properties : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Properties");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_Properties");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Properties class.
        /// </summary>
        public Properties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Properties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Properties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Properties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Properties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.SharedDocument.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.SharedDocument());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Pages.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Pages());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Words.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Words());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Characters.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Characters());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Lines.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Lines());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Paragraphs.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Paragraphs());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Slides.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Slides());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Notes.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Notes());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.TotalTime.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.TotalTime());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Template.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Template());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Manager.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Manager());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Company.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Company());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.Application.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.Application());
            builder.AddChild(DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion.ElementType, static () => new DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion());
            builder.Particle = new CompositeParticle.Builder(ParticleType.All, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Template.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Manager.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Company.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Pages.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Words.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Characters.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Lines.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Paragraphs.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Slides.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Notes.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.TotalTime.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.SharedDocument.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.Application.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity.ElementType, 0, 1)
            };
        }

        /// <summary>
        /// <para>Name of Document Template.</para>
        /// <para>Represents the following element tag in the schema: ap:Template.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Template? Template
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Template.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Template;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Template.ElementType);
        }

        /// <summary>
        /// <para>Name of Manager.</para>
        /// <para>Represents the following element tag in the schema: ap:Manager.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Manager? Manager
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Manager.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Manager;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Manager.ElementType);
        }

        /// <summary>
        /// <para>Name of Company.</para>
        /// <para>Represents the following element tag in the schema: ap:Company.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Company? Company
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Company.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Company;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Company.ElementType);
        }

        /// <summary>
        /// <para>Total Number of Pages.</para>
        /// <para>Represents the following element tag in the schema: ap:Pages.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Pages? Pages
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Pages.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Pages;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Pages.ElementType);
        }

        /// <summary>
        /// <para>Word Count.</para>
        /// <para>Represents the following element tag in the schema: ap:Words.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Words? Words
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Words.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Words;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Words.ElementType);
        }

        /// <summary>
        /// <para>Total Number of Characters.</para>
        /// <para>Represents the following element tag in the schema: ap:Characters.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Characters? Characters
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Characters.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Characters;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Characters.ElementType);
        }

        /// <summary>
        /// <para>Intended Format of Presentation.</para>
        /// <para>Represents the following element tag in the schema: ap:PresentationFormat.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat? PresentationFormat
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.PresentationFormat.ElementType);
        }

        /// <summary>
        /// <para>Number of Lines.</para>
        /// <para>Represents the following element tag in the schema: ap:Lines.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Lines? Lines
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Lines.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Lines;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Lines.ElementType);
        }

        /// <summary>
        /// <para>Total Number of Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: ap:Paragraphs.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Paragraphs? Paragraphs
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Paragraphs.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Paragraphs;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Paragraphs.ElementType);
        }

        /// <summary>
        /// <para>Slides Metadata Element.</para>
        /// <para>Represents the following element tag in the schema: ap:Slides.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Slides? Slides
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Slides.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Slides;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Slides.ElementType);
        }

        /// <summary>
        /// <para>Number of Slides Containing Notes.</para>
        /// <para>Represents the following element tag in the schema: ap:Notes.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Notes? Notes
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Notes.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Notes;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Notes.ElementType);
        }

        /// <summary>
        /// <para>Total Edit Time Metadata Element.</para>
        /// <para>Represents the following element tag in the schema: ap:TotalTime.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.TotalTime? TotalTime
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.TotalTime.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.TotalTime;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.TotalTime.ElementType);
        }

        /// <summary>
        /// <para>Number of Hidden Slides.</para>
        /// <para>Represents the following element tag in the schema: ap:HiddenSlides.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides? HiddenSlides
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.HiddenSlides.ElementType);
        }

        /// <summary>
        /// <para>Total Number of Multimedia Clips.</para>
        /// <para>Represents the following element tag in the schema: ap:MMClips.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips? MultimediaClips
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.MultimediaClips.ElementType);
        }

        /// <summary>
        /// <para>Thumbnail Display Mode.</para>
        /// <para>Represents the following element tag in the schema: ap:ScaleCrop.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop? ScaleCrop
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.ScaleCrop.ElementType);
        }

        /// <summary>
        /// <para>Heading Pairs.</para>
        /// <para>Represents the following element tag in the schema: ap:HeadingPairs.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs? HeadingPairs
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.HeadingPairs.ElementType);
        }

        /// <summary>
        /// <para>Part Titles.</para>
        /// <para>Represents the following element tag in the schema: ap:TitlesOfParts.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts? TitlesOfParts
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.TitlesOfParts.ElementType);
        }

        /// <summary>
        /// <para>Links Up-to-Date.</para>
        /// <para>Represents the following element tag in the schema: ap:LinksUpToDate.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate? LinksUpToDate
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.LinksUpToDate.ElementType);
        }

        /// <summary>
        /// <para>Number of Characters (With Spaces).</para>
        /// <para>Represents the following element tag in the schema: ap:CharactersWithSpaces.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces? CharactersWithSpaces
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.CharactersWithSpaces.ElementType);
        }

        /// <summary>
        /// <para>Shared Document.</para>
        /// <para>Represents the following element tag in the schema: ap:SharedDoc.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.SharedDocument? SharedDocument
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.SharedDocument.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.SharedDocument;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.SharedDocument.ElementType);
        }

        /// <summary>
        /// <para>Relative Hyperlink Base.</para>
        /// <para>Represents the following element tag in the schema: ap:HyperlinkBase.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase? HyperlinkBase
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.HyperlinkBase.ElementType);
        }

        /// <summary>
        /// <para>Hyperlink List.</para>
        /// <para>Represents the following element tag in the schema: ap:HLinks.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList? HyperlinkList
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.HyperlinkList.ElementType);
        }

        /// <summary>
        /// <para>Hyperlinks Changed.</para>
        /// <para>Represents the following element tag in the schema: ap:HyperlinksChanged.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged? HyperlinksChanged
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.HyperlinksChanged.ElementType);
        }

        /// <summary>
        /// <para>Digital Signature.</para>
        /// <para>Represents the following element tag in the schema: ap:DigSig.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature? DigitalSignature
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.DigitalSignature.ElementType);
        }

        /// <summary>
        /// <para>Application Name.</para>
        /// <para>Represents the following element tag in the schema: ap:Application.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.Application? Application
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.Application.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.Application;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.Application.ElementType);
        }

        /// <summary>
        /// <para>Application Version.</para>
        /// <para>Represents the following element tag in the schema: ap:AppVersion.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion? ApplicationVersion
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.ApplicationVersion.ElementType);
        }

        /// <summary>
        /// <para>Document Security.</para>
        /// <para>Represents the following element tag in the schema: ap:DocSecurity.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:ap = http://schemas.openxmlformats.org/officeDocument/2006/extended-properties
        /// </remarks>
        public DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity? DocumentSecurity
        {
            get => GetElement(DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity.ElementType) as DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity;
            set => SetElement(value, DocumentFormat.OpenXml.ExtendedProperties.DocumentSecurity.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Properties>(deep);

        internal Properties(ExtendedFilePropertiesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the ExtendedFilePropertiesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(ExtendedFilePropertiesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the ExtendedFilePropertiesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(ExtendedFilePropertiesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the ExtendedFilePropertiesPart associated with this element.
        /// </summary>
        public ExtendedFilePropertiesPart? ExtendedFilePropertiesPart
        {
            get => OpenXmlPart as ExtendedFilePropertiesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Name of Document Template.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Template.</para>
    /// </summary>
    public partial class Template : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Template");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Template class.
        /// </summary>
        public Template() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Template class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Template(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Template>(deep);
    }

    /// <summary>
    /// <para>Name of Manager.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Manager.</para>
    /// </summary>
    public partial class Manager : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Manager");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Manager class.
        /// </summary>
        public Manager() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Manager class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Manager(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Manager>(deep);
    }

    /// <summary>
    /// <para>Name of Company.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Company.</para>
    /// </summary>
    public partial class Company : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Company");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Company class.
        /// </summary>
        public Company() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Company class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Company(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Company>(deep);
    }

    /// <summary>
    /// <para>Intended Format of Presentation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:PresentationFormat.</para>
    /// </summary>
    public partial class PresentationFormat : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "PresentationFormat");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the PresentationFormat class.
        /// </summary>
        public PresentationFormat() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PresentationFormat class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PresentationFormat(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PresentationFormat>(deep);
    }

    /// <summary>
    /// <para>Relative Hyperlink Base.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:HyperlinkBase.</para>
    /// </summary>
    public partial class HyperlinkBase : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "HyperlinkBase");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the HyperlinkBase class.
        /// </summary>
        public HyperlinkBase() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkBase class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public HyperlinkBase(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkBase>(deep);
    }

    /// <summary>
    /// <para>Application Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Application.</para>
    /// </summary>
    public partial class Application : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Application");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Application class.
        /// </summary>
        public Application() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Application class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Application(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Application>(deep);
    }

    /// <summary>
    /// <para>Application Version.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:AppVersion.</para>
    /// </summary>
    public partial class ApplicationVersion : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "AppVersion");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ApplicationVersion class.
        /// </summary>
        public ApplicationVersion() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationVersion class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ApplicationVersion(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ApplicationVersion>(deep);
    }

    /// <summary>
    /// <para>Total Number of Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Pages.</para>
    /// </summary>
    public partial class Pages : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Pages");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Pages class.
        /// </summary>
        public Pages() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Pages class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Pages(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pages>(deep);
    }

    /// <summary>
    /// <para>Word Count.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Words.</para>
    /// </summary>
    public partial class Words : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Words");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Words class.
        /// </summary>
        public Words() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Words class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Words(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Words>(deep);
    }

    /// <summary>
    /// <para>Total Number of Characters.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Characters.</para>
    /// </summary>
    public partial class Characters : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Characters");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Characters class.
        /// </summary>
        public Characters() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Characters class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Characters(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Characters>(deep);
    }

    /// <summary>
    /// <para>Number of Lines.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Lines.</para>
    /// </summary>
    public partial class Lines : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Lines");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Lines class.
        /// </summary>
        public Lines() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Lines class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Lines(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Lines>(deep);
    }

    /// <summary>
    /// <para>Total Number of Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Paragraphs.</para>
    /// </summary>
    public partial class Paragraphs : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Paragraphs");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Paragraphs class.
        /// </summary>
        public Paragraphs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraphs class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Paragraphs(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraphs>(deep);
    }

    /// <summary>
    /// <para>Slides Metadata Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Slides.</para>
    /// </summary>
    public partial class Slides : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Slides");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Slides class.
        /// </summary>
        public Slides() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Slides class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Slides(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Slides>(deep);
    }

    /// <summary>
    /// <para>Number of Slides Containing Notes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:Notes.</para>
    /// </summary>
    public partial class Notes : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "Notes");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Notes class.
        /// </summary>
        public Notes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Notes class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Notes(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Notes>(deep);
    }

    /// <summary>
    /// <para>Total Edit Time Metadata Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:TotalTime.</para>
    /// </summary>
    public partial class TotalTime : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "TotalTime");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the TotalTime class.
        /// </summary>
        public TotalTime() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TotalTime class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public TotalTime(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TotalTime>(deep);
    }

    /// <summary>
    /// <para>Number of Hidden Slides.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:HiddenSlides.</para>
    /// </summary>
    public partial class HiddenSlides : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "HiddenSlides");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the HiddenSlides class.
        /// </summary>
        public HiddenSlides() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HiddenSlides class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public HiddenSlides(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HiddenSlides>(deep);
    }

    /// <summary>
    /// <para>Total Number of Multimedia Clips.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:MMClips.</para>
    /// </summary>
    public partial class MultimediaClips : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "MMClips");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MultimediaClips class.
        /// </summary>
        public MultimediaClips() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MultimediaClips class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public MultimediaClips(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MultimediaClips>(deep);
    }

    /// <summary>
    /// <para>Number of Characters (With Spaces).</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:CharactersWithSpaces.</para>
    /// </summary>
    public partial class CharactersWithSpaces : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CharactersWithSpaces");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the CharactersWithSpaces class.
        /// </summary>
        public CharactersWithSpaces() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CharactersWithSpaces class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public CharactersWithSpaces(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharactersWithSpaces>(deep);
    }

    /// <summary>
    /// <para>Document Security.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:DocSecurity.</para>
    /// </summary>
    public partial class DocumentSecurity : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "DocSecurity");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "int");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the DocumentSecurity class.
        /// </summary>
        public DocumentSecurity() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentSecurity class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DocumentSecurity(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Int32Value { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<Int32Value>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentSecurity>(deep);
    }

    /// <summary>
    /// <para>Thumbnail Display Mode.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:ScaleCrop.</para>
    /// </summary>
    public partial class ScaleCrop : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "ScaleCrop");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "boolean");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ScaleCrop class.
        /// </summary>
        public ScaleCrop() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ScaleCrop class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ScaleCrop(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<BooleanValue>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScaleCrop>(deep);
    }

    /// <summary>
    /// <para>Links Up-to-Date.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:LinksUpToDate.</para>
    /// </summary>
    public partial class LinksUpToDate : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "LinksUpToDate");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "boolean");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the LinksUpToDate class.
        /// </summary>
        public LinksUpToDate() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LinksUpToDate class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public LinksUpToDate(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<BooleanValue>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinksUpToDate>(deep);
    }

    /// <summary>
    /// <para>Shared Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:SharedDoc.</para>
    /// </summary>
    public partial class SharedDocument : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "SharedDoc");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "boolean");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the SharedDocument class.
        /// </summary>
        public SharedDocument() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SharedDocument class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public SharedDocument(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<BooleanValue>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SharedDocument>(deep);
    }

    /// <summary>
    /// <para>Hyperlinks Changed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:HyperlinksChanged.</para>
    /// </summary>
    public partial class HyperlinksChanged : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "HyperlinksChanged");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "boolean");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the HyperlinksChanged class.
        /// </summary>
        public HyperlinksChanged() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinksChanged class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public HyperlinksChanged(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new BooleanValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<BooleanValue>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinksChanged>(deep);
    }

    /// <summary>
    /// <para>Heading Pairs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:HeadingPairs.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.VariantTypes.VTVector" /> <c>&lt;vt:vector></c></description></item>
    /// </list>
    /// </remarks>
    public partial class HeadingPairs : VectorVariantType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "HeadingPairs");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_VectorVariant");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the HeadingPairs class.
        /// </summary>
        public HeadingPairs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeadingPairs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeadingPairs(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeadingPairs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeadingPairs(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeadingPairs class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HeadingPairs(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeadingPairs>(deep);
    }

    /// <summary>
    /// <para>Hyperlink List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:HLinks.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.VariantTypes.VTVector" /> <c>&lt;vt:vector></c></description></item>
    /// </list>
    /// </remarks>
    public partial class HyperlinkList : VectorVariantType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "HLinks");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_VectorVariant");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the HyperlinkList class.
        /// </summary>
        public HyperlinkList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkList>(deep);
    }

    /// <summary>
    /// <para>Defines the VectorVariantType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.VariantTypes.VTVector" /> <c>&lt;vt:vector></c></description></item>
    /// </list>
    /// </remarks>
    public abstract partial class VectorVariantType : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_VectorVariant");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the VectorVariantType class.
        /// </summary>
        protected VectorVariantType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VectorVariantType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected VectorVariantType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VectorVariantType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected VectorVariantType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VectorVariantType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected VectorVariantType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType, static () => new DocumentFormat.OpenXml.VariantTypes.VTVector());
        }

        /// <summary>
        /// <para>Vector.</para>
        /// <para>Represents the following element tag in the schema: vt:vector.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remarks>
        public DocumentFormat.OpenXml.VariantTypes.VTVector? VTVector
        {
            get => GetElement(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType) as DocumentFormat.OpenXml.VariantTypes.VTVector;
            set => SetElement(value, DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType);
        }
    }

    /// <summary>
    /// <para>Part Titles.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:TitlesOfParts.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.VariantTypes.VTVector" /> <c>&lt;vt:vector></c></description></item>
    /// </list>
    /// </remarks>
    public partial class TitlesOfParts : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "TitlesOfParts");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_VectorLpstr");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the TitlesOfParts class.
        /// </summary>
        public TitlesOfParts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TitlesOfParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TitlesOfParts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TitlesOfParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TitlesOfParts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TitlesOfParts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TitlesOfParts(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType, static () => new DocumentFormat.OpenXml.VariantTypes.VTVector());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType, 1, 1)
            };
        }

        /// <summary>
        /// <para>Vector.</para>
        /// <para>Represents the following element tag in the schema: vt:vector.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remarks>
        public DocumentFormat.OpenXml.VariantTypes.VTVector? VTVector
        {
            get => GetElement(DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType) as DocumentFormat.OpenXml.VariantTypes.VTVector;
            set => SetElement(value, DocumentFormat.OpenXml.VariantTypes.VTVector.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TitlesOfParts>(deep);
    }

    /// <summary>
    /// <para>Digital Signature.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is ap:DigSig.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.VariantTypes.VTBlob" /> <c>&lt;vt:blob></c></description></item>
    /// </list>
    /// </remarks>
    public partial class DigitalSignature : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "DigSig");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", "CT_DigSigBlob");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the DigitalSignature class.
        /// </summary>
        public DigitalSignature() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DigitalSignature class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DigitalSignature(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DigitalSignature class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DigitalSignature(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DigitalSignature class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DigitalSignature(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.VariantTypes.VTBlob.ElementType, static () => new DocumentFormat.OpenXml.VariantTypes.VTBlob());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.VariantTypes.VTBlob.ElementType, 1, 1)
            };
        }

        /// <summary>
        /// <para>Binary Blob.</para>
        /// <para>Represents the following element tag in the schema: vt:blob.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:vt = http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes
        /// </remarks>
        public DocumentFormat.OpenXml.VariantTypes.VTBlob? VTBlob
        {
            get => GetElement(DocumentFormat.OpenXml.VariantTypes.VTBlob.ElementType) as DocumentFormat.OpenXml.VariantTypes.VTBlob;
            set => SetElement(value, DocumentFormat.OpenXml.VariantTypes.VTBlob.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DigitalSignature>(deep);
    }
}
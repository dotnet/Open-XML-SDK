// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Presentation;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main
{
    /// <summary>
    /// <para>Defines the PlaceholderTypeExtension Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is p232:phTypeExt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.PlaceholderTypeACB" /> <c>&lt;p232:type></c></description></item>
    /// </list>
    /// </remark>
    public partial class PlaceholderTypeExtension : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeExtension class.
        /// </summary>
        public PlaceholderTypeExtension() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PlaceholderTypeExtension(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeExtension class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PlaceholderTypeExtension(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeExtension class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PlaceholderTypeExtension(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("p232:phTypeExt");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.PlaceholderTypeACB>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.PlaceholderTypeACB), 1, 1, version: FileFormatVersions.Microsoft365)
            };
        }

        /// <summary>
        /// <para>PlaceholderTypeACB.</para>
        /// <para>Represents the following element tag in the schema: p232:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:p232 = http://schemas.microsoft.com/office/powerpoint/2023/02/main
        /// </remark>
        public DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.PlaceholderTypeACB? PlaceholderTypeACB
        {
            get => GetElement<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.PlaceholderTypeACB>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PlaceholderTypeExtension>(deep);
    }

    /// <summary>
    /// <para>Defines the CameoEmpty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is p232:cameo.</para>
    /// </summary>
    public partial class CameoEmpty : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the CameoEmpty class.
        /// </summary>
        public CameoEmpty() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("p232:cameo");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CameoEmpty>(deep);
    }

    /// <summary>
    /// <para>Defines the UnknownEmpty Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is p232:unknown.</para>
    /// </summary>
    public partial class UnknownEmpty : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the UnknownEmpty class.
        /// </summary>
        public UnknownEmpty() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("p232:unknown");
            builder.Availability = FileFormatVersions.Microsoft365;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnknownEmpty>(deep);
    }

    /// <summary>
    /// <para>Defines the EmptyType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmptyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmptyType class.
        /// </summary>
        protected EmptyType() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
        }
    }

    /// <summary>
    /// <para>Defines the PlaceholderTypeACB Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is p232:type.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.CameoEmpty" /> <c>&lt;p232:cameo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.UnknownEmpty" /> <c>&lt;p232:unknown></c></description></item>
    /// </list>
    /// </remark>
    public partial class PlaceholderTypeACB : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeACB class.
        /// </summary>
        public PlaceholderTypeACB() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeACB class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PlaceholderTypeACB(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeACB class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PlaceholderTypeACB(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PlaceholderTypeACB class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PlaceholderTypeACB(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("p232:type");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.CameoEmpty>();
            builder.AddChild<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.UnknownEmpty>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.CameoEmpty), 1, 1, version: FileFormatVersions.Microsoft365),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.UnknownEmpty), 1, 1, version: FileFormatVersions.Microsoft365)
                }
            };
        }

        /// <summary>
        /// <para>CameoEmpty.</para>
        /// <para>Represents the following element tag in the schema: p232:cameo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:p232 = http://schemas.microsoft.com/office/powerpoint/2023/02/main
        /// </remark>
        public DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.CameoEmpty? CameoEmpty
        {
            get => GetElement<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.CameoEmpty>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>UnknownEmpty.</para>
        /// <para>Represents the following element tag in the schema: p232:unknown.</para>
        /// </summary>
        /// <remark>
        /// xmlns:p232 = http://schemas.microsoft.com/office/powerpoint/2023/02/main
        /// </remark>
        public DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.UnknownEmpty? UnknownEmpty
        {
            get => GetElement<DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main.UnknownEmpty>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PlaceholderTypeACB>(deep);
    }
}